
web_server_central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009098  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  080091d8  080091d8  000191d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e0  080096e0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080096e0  080096e0  000196e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096e8  080096e8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e8  080096e8  000196e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096ec  080096ec  000196ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080096f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001e0  080098d0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080098d0  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f199  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d5  00000000  00000000  0002f3a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00031d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00032d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ede  00000000  00000000  00033b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001318b  00000000  00000000  0004ca46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095578  00000000  00000000  0005fbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000549c  00000000  00000000  000f519c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	080091c0 	.word	0x080091c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	080091c0 	.word	0x080091c0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b976 	b.w	8000e5c <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	460d      	mov	r5, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14d      	bne.n	8000c34 <__udivmoddi4+0xac>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4694      	mov	ip, r2
 8000b9c:	d968      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	b152      	cbz	r2, 8000bba <__udivmoddi4+0x32>
 8000ba4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba8:	f1c2 0120 	rsb	r1, r2, #32
 8000bac:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb4:	ea41 0803 	orr.w	r8, r1, r3
 8000bb8:	4094      	lsls	r4, r2
 8000bba:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000bbe:	fbb8 f7f1 	udiv	r7, r8, r1
 8000bc2:	fa1f fe8c 	uxth.w	lr, ip
 8000bc6:	fb01 8817 	mls	r8, r1, r7, r8
 8000bca:	fb07 f00e 	mul.w	r0, r7, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd4:	4298      	cmp	r0, r3
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x66>
 8000bd8:	eb1c 0303 	adds.w	r3, ip, r3
 8000bdc:	f107 35ff 	add.w	r5, r7, #4294967295
 8000be0:	f080 811e 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 811b 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000bea:	3f02      	subs	r7, #2
 8000bec:	4463      	add	r3, ip
 8000bee:	1a1b      	subs	r3, r3, r0
 8000bf0:	fbb3 f0f1 	udiv	r0, r3, r1
 8000bf4:	fb01 3310 	mls	r3, r1, r0, r3
 8000bf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bfc:	b2a4      	uxth	r4, r4
 8000bfe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8109 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f240 8106 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c26:	b11e      	cbz	r6, 8000c30 <__udivmoddi4+0xa8>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	40d4      	lsrs	r4, r2
 8000c2c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	428b      	cmp	r3, r1
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c38:	2e00      	cmp	r6, #0
 8000c3a:	f000 80ee 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e9c6 0500 	strd	r0, r5, [r6]
 8000c44:	4608      	mov	r0, r1
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	42ab      	cmp	r3, r5
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80fc 	bhi.w	8000e54 <__udivmoddi4+0x2cc>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb65 0303 	sbc.w	r3, r5, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4698      	mov	r8, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d0e2      	beq.n	8000c30 <__udivmoddi4+0xa8>
 8000c6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6e:	e7df      	b.n	8000c30 <__udivmoddi4+0xa8>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8091 	bne.w	8000da0 <__udivmoddi4+0x218>
 8000c7e:	eba1 000c 	sub.w	r0, r1, ip
 8000c82:	2101      	movs	r1, #1
 8000c84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c88:	fa1f fe8c 	uxth.w	lr, ip
 8000c8c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c90:	fb07 0013 	mls	r0, r7, r3, r0
 8000c94:	0c25      	lsrs	r5, r4, #16
 8000c96:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	42a8      	cmp	r0, r5
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0505 	adds.w	r5, ip, r5
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	42a8      	cmp	r0, r5
 8000cae:	f200 80ce 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a2d      	subs	r5, r5, r0
 8000cb6:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cba:	fb07 5510 	mls	r5, r7, r0, r5
 8000cbe:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80b6 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cdc:	4628      	mov	r0, r5
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79e      	b.n	8000c26 <__udivmoddi4+0x9e>
 8000ce8:	f1c1 0720 	rsb	r7, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fbba f8f9 	udiv	r8, sl, r9
 8000d02:	fa20 f307 	lsr.w	r3, r0, r7
 8000d06:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d0a:	408d      	lsls	r5, r1
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	431d      	orrs	r5, r3
 8000d12:	fa00 f301 	lsl.w	r3, r0, r1
 8000d16:	fb08 f00e 	mul.w	r0, r8, lr
 8000d1a:	0c2c      	lsrs	r4, r5, #16
 8000d1c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d20:	42a0      	cmp	r0, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	42a0      	cmp	r0, r4
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4464      	add	r4, ip
 8000d40:	1a24      	subs	r4, r4, r0
 8000d42:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d46:	fb09 4410 	mls	r4, r9, r0, r4
 8000d4a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	45a6      	cmp	lr, r4
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4464      	add	r4, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9502 	umull	r9, r5, r0, r2
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	42ac      	cmp	r4, r5
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46ae      	mov	lr, r5
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d069      	beq.n	8000e58 <__udivmoddi4+0x2d0>
 8000d84:	ebb3 0208 	subs.w	r2, r3, r8
 8000d88:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8c:	fa22 f301 	lsr.w	r3, r2, r1
 8000d90:	fa04 f707 	lsl.w	r7, r4, r7
 8000d94:	431f      	orrs	r7, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e747      	b.n	8000c30 <__udivmoddi4+0xa8>
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	f1c2 0120 	rsb	r1, r2, #32
 8000da8:	fa25 f301 	lsr.w	r3, r5, r1
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa20 f101 	lsr.w	r1, r0, r1
 8000db4:	4095      	lsls	r5, r2
 8000db6:	430d      	orrs	r5, r1
 8000db8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dbc:	fb07 3311 	mls	r3, r7, r1, r3
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	0c28      	lsrs	r0, r5, #16
 8000dc6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dca:	fb01 f30e 	mul.w	r3, r1, lr
 8000dce:	4283      	cmp	r3, r0
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0000 	adds.w	r0, ip, r0
 8000dda:	f101 38ff 	add.w	r8, r1, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	4283      	cmp	r3, r0
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3902      	subs	r1, #2
 8000de6:	4460      	add	r0, ip
 8000de8:	1ac0      	subs	r0, r0, r3
 8000dea:	fbb0 f3f7 	udiv	r3, r0, r7
 8000dee:	fb07 0013 	mls	r0, r7, r3, r0
 8000df2:	b2ad      	uxth	r5, r5
 8000df4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000df8:	fb03 f00e 	mul.w	r0, r3, lr
 8000dfc:	42a8      	cmp	r0, r5
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0505 	adds.w	r5, ip, r5
 8000e04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	42a8      	cmp	r0, r5
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4465      	add	r5, ip
 8000e12:	1a28      	subs	r0, r5, r0
 8000e14:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e707      	b.n	8000c30 <__udivmoddi4+0xa8>
 8000e20:	462f      	mov	r7, r5
 8000e22:	e6e4      	b.n	8000bee <__udivmoddi4+0x66>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f9      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4643      	mov	r3, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4641      	mov	r1, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	e747      	b.n	8000cde <__udivmoddi4+0x156>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4465      	add	r5, ip
 8000e52:	e72f      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e706      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e6e9      	b.n	8000c30 <__udivmoddi4+0xa8>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <DHT22_Init>:

#include "DHT22.h"


void DHT22_Init (struct DHT22 *sensor_DHT22, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	80fb      	strh	r3, [r7, #6]
	 sensor_DHT22->GPIOx = GPIOx;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	601a      	str	r2, [r3, #0]
	 sensor_DHT22->GPIO_Pin = GPIO_Pin;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	88fa      	ldrh	r2, [r7, #6]
 8000e78:	809a      	strh	r2, [r3, #4]
	 sensor_DHT22->temperature = 0.;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
	 sensor_DHT22->humidity = 0.;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <DHT22_Set_Output>:

void DHT22_Set_Output(struct DHT22 *sensor_DHT22)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = sensor_DHT22->GPIO_Pin;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	889b      	ldrh	r3, [r3, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(sensor_DHT22->GPIOx, &GPIO_InitStruct);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f107 020c 	add.w	r2, r7, #12
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fe45 	bl	8002b58 <HAL_GPIO_Init>

}
 8000ece:	bf00      	nop
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <DHT22_Set_Input>:

void DHT22_Set_Input (struct DHT22 *sensor_DHT22)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b088      	sub	sp, #32
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = sensor_DHT22->GPIO_Pin;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	889b      	ldrh	r3, [r3, #4]
 8000ef2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(sensor_DHT22->GPIOx, &GPIO_InitStruct);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f107 020c 	add.w	r2, r7, #12
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fe26 	bl	8002b58 <HAL_GPIO_Init>
}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <DHT22_Start>:

/*Set pinmode to output and send > 1ms low signal,  20-40 us high signal and set input*/
uint8_t DHT22_Start (struct DHT22 *sensor_DHT22)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	DHT22_Set_Output(sensor_DHT22);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ffb9 	bl	8000e94 <DHT22_Set_Output>
	HAL_Delay(10);
 8000f22:	200a      	movs	r0, #10
 8000f24:	f001 fab8 	bl	8002498 <HAL_Delay>
    HAL_GPIO_WritePin (sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin, GPIO_PIN_RESET);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	889b      	ldrh	r3, [r3, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	4619      	mov	r1, r3
 8000f34:	f001 ffb7 	bl	8002ea6 <HAL_GPIO_WritePin>
	delay_us(1200);
 8000f38:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000f3c:	f001 f902 	bl	8002144 <delay_us>
	HAL_GPIO_WritePin (sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin, GPIO_PIN_SET);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	889b      	ldrh	r3, [r3, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f001 ffab 	bl	8002ea6 <HAL_GPIO_WritePin>
	delay_us(30);
 8000f50:	201e      	movs	r0, #30
 8000f52:	f001 f8f7 	bl	8002144 <delay_us>
	DHT22_Set_Input(sensor_DHT22);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffbd 	bl	8000ed6 <DHT22_Set_Input>

	return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <DHT22_Check_Response>:

/*Wait sensor response, 80 us low signal and 80 us high signal*/
uint8_t DHT22_Check_Response (struct DHT22 *sensor_DHT22)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
	uint8_t wd_timer = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
	while(!(HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 85))
 8000f72:	e005      	b.n	8000f80 <DHT22_Check_Response+0x1a>
	{
		delay_us(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f001 f8e5 	bl	8002144 <delay_us>
		wd_timer++;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
	while(!(HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 85))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	889b      	ldrh	r3, [r3, #4]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	f001 ff74 	bl	8002e78 <HAL_GPIO_ReadPin>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <DHT22_Check_Response+0x36>
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	2b54      	cmp	r3, #84	; 0x54
 8000f9a:	d9eb      	bls.n	8000f74 <DHT22_Check_Response+0xe>
	}

	if(wd_timer == 85)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b55      	cmp	r3, #85	; 0x55
 8000fa0:	d101      	bne.n	8000fa6 <DHT22_Check_Response+0x40>
	{
		return 1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e01c      	b.n	8000fe0 <DHT22_Check_Response+0x7a>
	}
	else
	{

		wd_timer = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
		while((HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 85))
 8000faa:	e005      	b.n	8000fb8 <DHT22_Check_Response+0x52>
		{
			delay_us(1);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f001 f8c9 	bl	8002144 <delay_us>
			wd_timer++;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
		while((HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 85))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	889b      	ldrh	r3, [r3, #4]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	f001 ff58 	bl	8002e78 <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <DHT22_Check_Response+0x6e>
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	2b54      	cmp	r3, #84	; 0x54
 8000fd2:	d9eb      	bls.n	8000fac <DHT22_Check_Response+0x46>
		}

		if(wd_timer == 85)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b55      	cmp	r3, #85	; 0x55
 8000fd8:	d101      	bne.n	8000fde <DHT22_Check_Response+0x78>
		{
			return 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <DHT22_Check_Response+0x7a>
		}
		else
		{
			return 0;
 8000fde:	2300      	movs	r3, #0
		}
	}

}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <DHT22_Read_raw>:

uint8_t DHT22_Read_raw (struct DHT22 *sensor_DHT22, uint8_t * data)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
	uint8_t wd_timer = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]

	for (i=0;i<8;i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e05f      	b.n	80010c0 <DHT22_Read_raw+0xd8>
	{
		wd_timer = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	73bb      	strb	r3, [r7, #14]

		//Start bit of 50us
		while(!(HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 50))
 8001004:	e005      	b.n	8001012 <DHT22_Read_raw+0x2a>
		{
			delay_us(1);
 8001006:	2001      	movs	r0, #1
 8001008:	f001 f89c 	bl	8002144 <delay_us>
			wd_timer++;
 800100c:	7bbb      	ldrb	r3, [r7, #14]
 800100e:	3301      	adds	r3, #1
 8001010:	73bb      	strb	r3, [r7, #14]
		while(!(HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 50))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	889b      	ldrh	r3, [r3, #4]
 800101a:	4619      	mov	r1, r3
 800101c:	4610      	mov	r0, r2
 800101e:	f001 ff2b 	bl	8002e78 <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <DHT22_Read_raw+0x46>
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	2b31      	cmp	r3, #49	; 0x31
 800102c:	d9eb      	bls.n	8001006 <DHT22_Read_raw+0x1e>
		}

		wd_timer = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	73bb      	strb	r3, [r7, #14]

		while((HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 90))
 8001032:	e005      	b.n	8001040 <DHT22_Read_raw+0x58>
		{
			wd_timer += 10;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	330a      	adds	r3, #10
 8001038:	73bb      	strb	r3, [r7, #14]
			delay_us(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f001 f882 	bl	8002144 <delay_us>
		while((HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 90))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	889b      	ldrh	r3, [r3, #4]
 8001048:	4619      	mov	r1, r3
 800104a:	4610      	mov	r0, r2
 800104c:	f001 ff14 	bl	8002e78 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <DHT22_Read_raw+0x74>
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	2b59      	cmp	r3, #89	; 0x59
 800105a:	d9eb      	bls.n	8001034 <DHT22_Read_raw+0x4c>
		}


		if((wd_timer >= 20)&&(wd_timer <= 30 ))
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	2b13      	cmp	r3, #19
 8001060:	d913      	bls.n	800108a <DHT22_Read_raw+0xa2>
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	2b1e      	cmp	r3, #30
 8001066:	d810      	bhi.n	800108a <DHT22_Read_raw+0xa2>
		{
			*data &= ~1<<(7-i);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b25a      	sxtb	r2, r3
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f1c3 0307 	rsb	r3, r3, #7
 8001074:	f06f 0101 	mvn.w	r1, #1
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	b25b      	sxtb	r3, r3
 800107e:	4013      	ands	r3, r2
 8001080:	b25b      	sxtb	r3, r3
 8001082:	b2da      	uxtb	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e017      	b.n	80010ba <DHT22_Read_raw+0xd2>
		}
		else if((wd_timer >= 60)&&(wd_timer <= 80 ))
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	2b3b      	cmp	r3, #59	; 0x3b
 800108e:	d912      	bls.n	80010b6 <DHT22_Read_raw+0xce>
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	2b50      	cmp	r3, #80	; 0x50
 8001094:	d80f      	bhi.n	80010b6 <DHT22_Read_raw+0xce>
		{
			*data |= 1<<(7-i);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b25a      	sxtb	r2, r3
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2101      	movs	r1, #1
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	e001      	b.n	80010ba <DHT22_Read_raw+0xd2>
		}
		else
		{
			return 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e006      	b.n	80010c8 <DHT22_Read_raw+0xe0>
	for (i=0;i<8;i++)
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	3301      	adds	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	d99c      	bls.n	8001000 <DHT22_Read_raw+0x18>
		}
	}

	return 0;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <DHT22_Read_Temp_Hum>:

uint8_t DHT22_Read_Temp_Hum (struct DHT22 *sensor_DHT22)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	uint8_t Rh_byte1 = 0, Rh_byte2 = 0, Temp_byte1 = 0, Temp_byte2 = 0 , SUM = 0, SUM_temp = 0, read_error = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	747b      	strb	r3, [r7, #17]
 80010dc:	2300      	movs	r3, #0
 80010de:	743b      	strb	r3, [r7, #16]
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	2300      	movs	r3, #0
 80010e6:	73bb      	strb	r3, [r7, #14]
 80010e8:	2300      	movs	r3, #0
 80010ea:	737b      	strb	r3, [r7, #13]
 80010ec:	2300      	movs	r3, #0
 80010ee:	75fb      	strb	r3, [r7, #23]
 80010f0:	2300      	movs	r3, #0
 80010f2:	75bb      	strb	r3, [r7, #22]
	uint16_t RH = 0, TEMP = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	82bb      	strh	r3, [r7, #20]
 80010f8:	2300      	movs	r3, #0
 80010fa:	827b      	strh	r3, [r7, #18]


	  read_error += DHT22_Read_raw(sensor_DHT22, &Rh_byte1);
 80010fc:	f107 0311 	add.w	r3, r7, #17
 8001100:	4619      	mov	r1, r3
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff70 	bl	8000fe8 <DHT22_Read_raw>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	7dbb      	ldrb	r3, [r7, #22]
 800110e:	4413      	add	r3, r2
 8001110:	75bb      	strb	r3, [r7, #22]
	  read_error += DHT22_Read_raw(sensor_DHT22, &Rh_byte2);
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4619      	mov	r1, r3
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff65 	bl	8000fe8 <DHT22_Read_raw>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	7dbb      	ldrb	r3, [r7, #22]
 8001124:	4413      	add	r3, r2
 8001126:	75bb      	strb	r3, [r7, #22]
	  read_error += DHT22_Read_raw(sensor_DHT22, &Temp_byte1);
 8001128:	f107 030f 	add.w	r3, r7, #15
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff5a 	bl	8000fe8 <DHT22_Read_raw>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	7dbb      	ldrb	r3, [r7, #22]
 800113a:	4413      	add	r3, r2
 800113c:	75bb      	strb	r3, [r7, #22]
	  read_error += DHT22_Read_raw(sensor_DHT22, &Temp_byte2);
 800113e:	f107 030e 	add.w	r3, r7, #14
 8001142:	4619      	mov	r1, r3
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff4f 	bl	8000fe8 <DHT22_Read_raw>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	7dbb      	ldrb	r3, [r7, #22]
 8001150:	4413      	add	r3, r2
 8001152:	75bb      	strb	r3, [r7, #22]
	  read_error += DHT22_Read_raw(sensor_DHT22, &SUM);
 8001154:	f107 030d 	add.w	r3, r7, #13
 8001158:	4619      	mov	r1, r3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff44 	bl	8000fe8 <DHT22_Read_raw>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	7dbb      	ldrb	r3, [r7, #22]
 8001166:	4413      	add	r3, r2
 8001168:	75bb      	strb	r3, [r7, #22]

	  if(read_error == 0)
 800116a:	7dbb      	ldrb	r3, [r7, #22]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d145      	bne.n	80011fc <DHT22_Read_Temp_Hum+0x12c>
	  {
		  SUM_temp = Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2 ;
 8001170:	7c7a      	ldrb	r2, [r7, #17]
 8001172:	7c3b      	ldrb	r3, [r7, #16]
 8001174:	4413      	add	r3, r2
 8001176:	b2da      	uxtb	r2, r3
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	4413      	add	r3, r2
 800117c:	b2da      	uxtb	r2, r3
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	4413      	add	r3, r2
 8001182:	75fb      	strb	r3, [r7, #23]

		  if(SUM == SUM_temp)
 8001184:	7b7b      	ldrb	r3, [r7, #13]
 8001186:	7dfa      	ldrb	r2, [r7, #23]
 8001188:	429a      	cmp	r2, r3
 800118a:	d135      	bne.n	80011f8 <DHT22_Read_Temp_Hum+0x128>
		  {

			  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b21a      	sxth	r2, r3
 8001192:	7bbb      	ldrb	r3, [r7, #14]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21b      	sxth	r3, r3
 800119a:	827b      	strh	r3, [r7, #18]
			  RH = ((Rh_byte1<<8)|Rh_byte2);
 800119c:	7c7b      	ldrb	r3, [r7, #17]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7c3b      	ldrb	r3, [r7, #16]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	82bb      	strh	r3, [r7, #20]

			  sensor_DHT22->temperature = (float) (TEMP/10.0);
 80011ac:	8a7b      	ldrh	r3, [r7, #18]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f940 	bl	8000434 <__aeabi_i2d>
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <DHT22_Read_Temp_Hum+0x138>)
 80011ba:	f7ff facf 	bl	800075c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fc77 	bl	8000ab8 <__aeabi_d2f>
 80011ca:	4602      	mov	r2, r0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	609a      	str	r2, [r3, #8]
			  sensor_DHT22->humidity = (float) (RH/10.0);
 80011d0:	8abb      	ldrh	r3, [r7, #20]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f92e 	bl	8000434 <__aeabi_i2d>
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <DHT22_Read_Temp_Hum+0x138>)
 80011de:	f7ff fabd 	bl	800075c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fc65 	bl	8000ab8 <__aeabi_d2f>
 80011ee:	4602      	mov	r2, r0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	60da      	str	r2, [r3, #12]
			  return 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e002      	b.n	80011fe <DHT22_Read_Temp_Hum+0x12e>
		  }
		  else
		  {
			  return 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <DHT22_Read_Temp_Hum+0x12e>
		  }
	  }
	  else
	  {
		  return 1;
 80011fc:	2301      	movs	r3, #1
	  }
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40240000 	.word	0x40240000

0800120c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_DMA_Init+0x38>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <MX_DMA_Init+0x38>)
 8001218:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_DMA_Init+0x38>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2034      	movs	r0, #52	; 0x34
 8001230:	f001 fa2b 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001234:	2034      	movs	r0, #52	; 0x34
 8001236:	f001 fa44 	bl	80026c2 <HAL_NVIC_EnableIRQ>

}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <MX_GPIO_Init+0xcc>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a2c      	ldr	r2, [pc, #176]	; (8001314 <MX_GPIO_Init+0xcc>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <MX_GPIO_Init+0xcc>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	4b27      	ldr	r3, [pc, #156]	; (8001314 <MX_GPIO_Init+0xcc>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	4a26      	ldr	r2, [pc, #152]	; (8001314 <MX_GPIO_Init+0xcc>)
 800127c:	f043 0320 	orr.w	r3, r3, #32
 8001280:	61d3      	str	r3, [r2, #28]
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <MX_GPIO_Init+0xcc>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <MX_GPIO_Init+0xcc>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a20      	ldr	r2, [pc, #128]	; (8001314 <MX_GPIO_Init+0xcc>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <MX_GPIO_Init+0xcc>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_GPIO_Init+0xcc>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <MX_GPIO_Init+0xcc>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_GPIO_Init+0xcc>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2102      	movs	r1, #2
 80012c2:	4815      	ldr	r0, [pc, #84]	; (8001318 <MX_GPIO_Init+0xd0>)
 80012c4:	f001 fdef 	bl	8002ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2120      	movs	r1, #32
 80012cc:	4812      	ldr	r0, [pc, #72]	; (8001318 <MX_GPIO_Init+0xd0>)
 80012ce:	f001 fdea 	bl	8002ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_GPIO_Init+0xd4>)
 80012ea:	f001 fc35 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 80012ee:	2322      	movs	r3, #34	; 0x22
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_GPIO_Init+0xd0>)
 8001306:	f001 fc27 	bl	8002b58 <HAL_GPIO_Init>

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020800 	.word	0x40020800

08001320 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_I2C1_Init+0x50>)
 8001326:	4a13      	ldr	r2, [pc, #76]	; (8001374 <MX_I2C1_Init+0x54>)
 8001328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_I2C1_Init+0x50>)
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <MX_I2C1_Init+0x58>)
 800132e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_I2C1_Init+0x50>)
 800133e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001342:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <MX_I2C1_Init+0x50>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_I2C1_Init+0x50>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <MX_I2C1_Init+0x50>)
 800135e:	f001 fdbb 	bl	8002ed8 <HAL_I2C_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001368:	f000 fd4c 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200001fc 	.word	0x200001fc
 8001374:	40005400 	.word	0x40005400
 8001378:	000186a0 	.word	0x000186a0

0800137c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <HAL_I2C_MspInit+0x7c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d128      	bne.n	80013f0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_I2C_MspInit+0x80>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a16      	ldr	r2, [pc, #88]	; (80013fc <HAL_I2C_MspInit+0x80>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_I2C_MspInit+0x80>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013bc:	2312      	movs	r3, #18
 80013be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013c8:	2304      	movs	r3, #4
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	480b      	ldr	r0, [pc, #44]	; (8001400 <HAL_I2C_MspInit+0x84>)
 80013d4:	f001 fbc0 	bl	8002b58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_I2C_MspInit+0x80>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_I2C_MspInit+0x80>)
 80013de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e2:	6253      	str	r3, [r2, #36]	; 0x24
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_I2C_MspInit+0x80>)
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40005400 	.word	0x40005400
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020400 	.word	0x40020400

08001404 <set_dma_irq>:
static uint8_t RX_DMA_irq	= 0;

/*uart section*/
/*acc section*/
void set_dma_irq(uint8_t value)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800140e:	f3ef 8310 	mrs	r3, PRIMASK
 8001412:	60bb      	str	r3, [r7, #8]
  return(result);
 8001414:	68bb      	ldr	r3, [r7, #8]
    uint32_t prim;
    prim = __get_PRIMASK();
 8001416:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop

    __disable_irq();

	RX_DMA_irq	= value;
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <set_dma_irq+0x34>)
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	7013      	strb	r3, [r2, #0]

    if (!prim) {
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <set_dma_irq+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
 8001428:	b662      	cpsie	i
}
 800142a:	bf00      	nop
          __enable_irq();
    }
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000250 	.word	0x20000250

0800143c <get_dma_irq>:

uint8_t get_dma_irq()
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001446:	f3ef 8310 	mrs	r3, PRIMASK
 800144a:	607b      	str	r3, [r7, #4]
  return(result);
 800144c:	687b      	ldr	r3, [r7, #4]
    uint32_t prim;

    prim = __get_PRIMASK();
 800144e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	bf00      	nop
    __disable_irq();

	ret	= RX_DMA_irq;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <get_dma_irq+0x34>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	73fb      	strb	r3, [r7, #15]


    if (!prim) {
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <get_dma_irq+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
 8001460:	b662      	cpsie	i
}
 8001462:	bf00      	nop
          __enable_irq();
    }

	return ret;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	20000250 	.word	0x20000250

08001474 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af02      	add	r7, sp, #8
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	617b      	str	r3, [r7, #20]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	f043 030c 	orr.w	r3, r3, #12
 800148a:	b2da      	uxtb	r2, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	743b      	strb	r3, [r7, #16]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	f043 0320 	orr.w	r3, r3, #32
 800149c:	b2db      	uxtb	r3, r3
 800149e:	747b      	strb	r3, [r7, #17]

	//HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
	//char newline[2] = "\r\n";
	//HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);

	/*HAL_StatusTypeDef status = */HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80014a0:	2364      	movs	r3, #100	; 0x64
 80014a2:	2205      	movs	r2, #5
 80014a4:	217c      	movs	r1, #124	; 0x7c
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f001 ff58 	bl	800335c <HAL_I2C_IsDeviceReady>
	//HAL_UART_Transmit(&huart2,&status,1,10);
	HAL_Delay(50);
 80014ac:	2032      	movs	r0, #50	; 0x32
 80014ae:	f000 fff3 	bl	8002498 <HAL_Delay>

	/*HAL_StatusTypeDef status2 = */HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80014b2:	f107 0210 	add.w	r2, r7, #16
 80014b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2302      	movs	r3, #2
 80014be:	217c      	movs	r1, #124	; 0x7c
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f001 fe4d 	bl	8003160 <HAL_I2C_Master_Transmit>
	//HAL_UART_Transmit(&huart2,&status2,1,10);
	HAL_Delay(50);
 80014c6:	2032      	movs	r0, #50	; 0x32
 80014c8:	f000 ffe6 	bl	8002498 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80014cc:	f107 0210 	add.w	r2, r7, #16
 80014d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2302      	movs	r3, #2
 80014d8:	217c      	movs	r1, #124	; 0x7c
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f001 fe40 	bl	8003160 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80014e0:	2005      	movs	r0, #5
 80014e2:	f000 ffd9 	bl	8002498 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80014e6:	f107 0210 	add.w	r2, r7, #16
 80014ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2302      	movs	r3, #2
 80014f2:	217c      	movs	r1, #124	; 0x7c
 80014f4:	6978      	ldr	r0, [r7, #20]
 80014f6:	f001 fe33 	bl	8003160 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2204      	movs	r2, #4
 80014fe:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	b2db      	uxtb	r3, r3
 800150a:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800150c:	f107 0210 	add.w	r2, r7, #16
 8001510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2302      	movs	r3, #2
 8001518:	217c      	movs	r1, #124	; 0x7c
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f001 fe20 	bl	8003160 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001520:	2301      	movs	r3, #1
 8001522:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001524:	f107 0210 	add.w	r2, r7, #16
 8001528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2302      	movs	r3, #2
 8001530:	217c      	movs	r1, #124	; 0x7c
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f001 fe14 	bl	8003160 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001538:	2002      	movs	r0, #2
 800153a:	f000 ffad 	bl	8002498 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2202      	movs	r2, #2
 8001542:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	789b      	ldrb	r3, [r3, #2]
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	b2db      	uxtb	r3, r3
 800154e:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001550:	f107 0210 	add.w	r2, r7, #16
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2302      	movs	r3, #2
 800155c:	217c      	movs	r1, #124	; 0x7c
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f001 fdfe 	bl	8003160 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8001564:	2300      	movs	r3, #0
 8001566:	733b      	strb	r3, [r7, #12]
		data_backlight[1] = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800156c:	f107 020c 	add.w	r2, r7, #12
 8001570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2302      	movs	r3, #2
 8001578:	21c4      	movs	r1, #196	; 0xc4
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f001 fdf0 	bl	8003160 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8001580:	2308      	movs	r3, #8
 8001582:	733b      	strb	r3, [r7, #12]
		data_backlight[1] = 0xFF;
 8001584:	23ff      	movs	r3, #255	; 0xff
 8001586:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001588:	f107 020c 	add.w	r2, r7, #12
 800158c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2302      	movs	r3, #2
 8001594:	21c4      	movs	r1, #196	; 0xc4
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f001 fde2 	bl	8003160 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 800159c:	2301      	movs	r3, #1
 800159e:	733b      	strb	r3, [r7, #12]
		data_backlight[1] = 0x20;
 80015a0:	2320      	movs	r3, #32
 80015a2:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80015a4:	f107 020c 	add.w	r2, r7, #12
 80015a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2302      	movs	r3, #2
 80015b0:	21c4      	movs	r1, #196	; 0xc4
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f001 fdd4 	bl	8003160 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80015b8:	2304      	movs	r3, #4
 80015ba:	723b      	strb	r3, [r7, #8]
		data_rgb[1] = 255;
 80015bc:	23ff      	movs	r3, #255	; 0xff
 80015be:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80015c0:	f107 0208 	add.w	r2, r7, #8
 80015c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2302      	movs	r3, #2
 80015cc:	21c4      	movs	r1, #196	; 0xc4
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f001 fdc6 	bl	8003160 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 80015d4:	2303      	movs	r3, #3
 80015d6:	723b      	strb	r3, [r7, #8]
		data_rgb[1] = 255;
 80015d8:	23ff      	movs	r3, #255	; 0xff
 80015da:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80015dc:	f107 0208 	add.w	r2, r7, #8
 80015e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2302      	movs	r3, #2
 80015e8:	21c4      	movs	r1, #196	; 0xc4
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f001 fdb8 	bl	8003160 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 80015f0:	2302      	movs	r3, #2
 80015f2:	723b      	strb	r3, [r7, #8]
		data_rgb[1] = 255;
 80015f4:	23ff      	movs	r3, #255	; 0xff
 80015f6:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80015f8:	f107 0208 	add.w	r2, r7, #8
 80015fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2302      	movs	r3, #2
 8001604:	21c4      	movs	r1, #196	; 0xc4
 8001606:	6978      	ldr	r0, [r7, #20]
 8001608:	f001 fdaa 	bl	8003160 <HAL_I2C_Master_Transmit>


}
 800160c:	bf00      	nop
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	4808      	ldr	r0, [pc, #32]	; (8001640 <clearlcd+0x2c>)
 800161e:	f000 f83c 	bl	800169a <lcd_position>
	lcd_print(&hi2c1,"                ");
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <clearlcd+0x30>)
 8001624:	4806      	ldr	r0, [pc, #24]	; (8001640 <clearlcd+0x2c>)
 8001626:	f000 f80f 	bl	8001648 <lcd_print>
	lcd_position(&hi2c1,0,1);
 800162a:	2201      	movs	r2, #1
 800162c:	2100      	movs	r1, #0
 800162e:	4804      	ldr	r0, [pc, #16]	; (8001640 <clearlcd+0x2c>)
 8001630:	f000 f833 	bl	800169a <lcd_position>
	lcd_print(&hi2c1,"                ");
 8001634:	4903      	ldr	r1, [pc, #12]	; (8001644 <clearlcd+0x30>)
 8001636:	4802      	ldr	r0, [pc, #8]	; (8001640 <clearlcd+0x2c>)
 8001638:	f000 f806 	bl	8001648 <lcd_print>
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200001fc 	.word	0x200001fc
 8001644:	080091d8 	.word	0x080091d8

08001648 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af02      	add	r7, sp, #8
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	733b      	strb	r3, [r7, #12]
    int i=0;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800165e:	e011      	b.n	8001684 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800166a:	f107 020c 	add.w	r2, r7, #12
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2302      	movs	r3, #2
 8001676:	217c      	movs	r1, #124	; 0x7c
 8001678:	6938      	ldr	r0, [r7, #16]
 800167a:	f001 fd71 	bl	8003160 <HAL_I2C_Master_Transmit>
            i++;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	4413      	add	r3, r2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1e7      	bne.n	8001660 <lcd_print+0x18>
   }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af02      	add	r7, sp, #8
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70fb      	strb	r3, [r7, #3]
 80016a6:	4613      	mov	r3, r2
 80016a8:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80016ae:	78bb      	ldrb	r3, [r7, #2]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d104      	bne.n	80016be <lcd_position+0x24>
    {
        col = col | 0x80;
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016ba:	70fb      	strb	r3, [r7, #3]
 80016bc:	e003      	b.n	80016c6 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80016c4:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80016ce:	f107 0208 	add.w	r2, r7, #8
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2302      	movs	r3, #2
 80016da:	217c      	movs	r1, #124	; 0x7c
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f001 fd3f 	bl	8003160 <HAL_I2C_Master_Transmit>
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016ec:	b5b0      	push	{r4, r5, r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	set_dma_irq(1);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff fe85 	bl	8001404 <set_dma_irq>
	memcpy(temp_string,DMA_buff,sizeof(DMA_buff));
 80016fa:	4a0c      	ldr	r2, [pc, #48]	; (800172c <HAL_UART_RxCpltCallback+0x40>)
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_UART_RxCpltCallback+0x44>)
 80016fe:	4614      	mov	r4, r2
 8001700:	461d      	mov	r5, r3
 8001702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001706:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800170a:	c403      	stmia	r4!, {r0, r1}
 800170c:	7022      	strb	r2, [r4, #0]
	memset(DMA_buff,0,sizeof(DMA_buff));
 800170e:	2219      	movs	r2, #25
 8001710:	2100      	movs	r1, #0
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <HAL_UART_RxCpltCallback+0x44>)
 8001714:	f004 f962 	bl	80059dc <memset>
    HAL_UART_Receive_DMA(&huart4, DMA_buff, DMA_SIZE);
 8001718:	2219      	movs	r2, #25
 800171a:	4905      	ldr	r1, [pc, #20]	; (8001730 <HAL_UART_RxCpltCallback+0x44>)
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <HAL_UART_RxCpltCallback+0x48>)
 800171e:	f003 fb7c 	bl	8004e1a <HAL_UART_Receive_DMA>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bdb0      	pop	{r4, r5, r7, pc}
 800172a:	bf00      	nop
 800172c:	2000027c 	.word	0x2000027c
 8001730:	20000298 	.word	0x20000298
 8001734:	200002f8 	.word	0x200002f8

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b0e0      	sub	sp, #384	; 0x180
 800173c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  char *strToken					= NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

  struct Time_str date;

  uint8_t data_extract_temp[100] 	= "";
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800174a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800174e:	2260      	movs	r2, #96	; 0x60
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f004 f942 	bl	80059dc <memset>
  uint8_t send_buffer[100] 			= "";
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800175e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001762:	2260      	movs	r2, #96	; 0x60
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f004 f938 	bl	80059dc <memset>
  uint8_t extract_data 				= 0;
 800176c:	2300      	movs	r3, #0
 800176e:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
  uint8_t check_sscanf 				= 0;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
  uint8_t device_updt 				= 0;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  uint8_t to_update 				= 0;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
  uint8_t temp[128] 				= "";
 8001784:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001788:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	3304      	adds	r3, #4
 8001792:	227c      	movs	r2, #124	; 0x7c
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f004 f920 	bl	80059dc <memset>
  uint8_t get_try 					= 0;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
  uint8_t time_ok 					= 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
  uint8_t data_ok 					= 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
  uint8_t lenght 					= 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b4:	f000 fe01 	bl	80023ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b8:	f000 fad6 	bl	8001d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017bc:	f7ff fd44 	bl	8001248 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017c0:	f7ff fdae 	bl	8001320 <MX_I2C1_Init>
  MX_TIM2_Init();
 80017c4:	f000 fc56 	bl	8002074 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80017c8:	f000 fcfe 	bl	80021c8 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80017cc:	f7ff fd1e 	bl	800120c <MX_DMA_Init>
  MX_UART4_Init();
 80017d0:	f000 fcd0 	bl	8002174 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /*Timer init*/
  HAL_TIM_Base_Start(&htim2);
 80017d4:	48b2      	ldr	r0, [pc, #712]	; (8001aa0 <main+0x368>)
 80017d6:	f002 ff2d 	bl	8004634 <HAL_TIM_Base_Start>

  /*DHT22 init*/
  DHT22_Init(&DHT22_1, DHT22_PORT, DHT22_PIN);
 80017da:	2202      	movs	r2, #2
 80017dc:	49b1      	ldr	r1, [pc, #708]	; (8001aa4 <main+0x36c>)
 80017de:	48b2      	ldr	r0, [pc, #712]	; (8001aa8 <main+0x370>)
 80017e0:	f7ff fb3e 	bl	8000e60 <DHT22_Init>

  /*Activate DMA on UART4*/

  HAL_UART_Receive_DMA(&huart4, DMA_buff, DMA_SIZE);
 80017e4:	2219      	movs	r2, #25
 80017e6:	49b1      	ldr	r1, [pc, #708]	; (8001aac <main+0x374>)
 80017e8:	48b1      	ldr	r0, [pc, #708]	; (8001ab0 <main+0x378>)
 80017ea:	f003 fb16 	bl	8004e1a <HAL_UART_Receive_DMA>

  /*First sequence of LCD*/
  lcd_init(&hi2c1, &rgbData);
 80017ee:	49b1      	ldr	r1, [pc, #708]	; (8001ab4 <main+0x37c>)
 80017f0:	48b1      	ldr	r0, [pc, #708]	; (8001ab8 <main+0x380>)
 80017f2:	f7ff fe3f 	bl	8001474 <lcd_init>
  HAL_Delay(100);
 80017f6:	2064      	movs	r0, #100	; 0x64
 80017f8:	f000 fe4e 	bl	8002498 <HAL_Delay>
  clearlcd();
 80017fc:	f7ff ff0a 	bl	8001614 <clearlcd>
  HAL_Delay(100);
 8001800:	2064      	movs	r0, #100	; 0x64
 8001802:	f000 fe49 	bl	8002498 <HAL_Delay>
  lcd_position(&hi2c1,0,0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	48ab      	ldr	r0, [pc, #684]	; (8001ab8 <main+0x380>)
 800180c:	f7ff ff45 	bl	800169a <lcd_position>
  HAL_Delay(10);
 8001810:	200a      	movs	r0, #10
 8001812:	f000 fe41 	bl	8002498 <HAL_Delay>
  lcd_print(&hi2c1,"Starting...");
 8001816:	49a9      	ldr	r1, [pc, #676]	; (8001abc <main+0x384>)
 8001818:	48a7      	ldr	r0, [pc, #668]	; (8001ab8 <main+0x380>)
 800181a:	f7ff ff15 	bl	8001648 <lcd_print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (fsm_state)
 800181e:	4ba8      	ldr	r3, [pc, #672]	; (8001ac0 <main+0x388>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b06      	cmp	r3, #6
 8001824:	f200 8281 	bhi.w	8001d2a <main+0x5f2>
 8001828:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <main+0xf8>)
 800182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182e:	bf00      	nop
 8001830:	0800184d 	.word	0x0800184d
 8001834:	08001999 	.word	0x08001999
 8001838:	08001879 	.word	0x08001879
 800183c:	08001add 	.word	0x08001add
 8001840:	08001bfb 	.word	0x08001bfb
 8001844:	08001d2b 	.word	0x08001d2b
 8001848:	08001d0f 	.word	0x08001d0f
	  	  	  /************************************/
	          /*				IDLE			  */
	          /************************************/
	          case ST_IDLE:

				 memset(USART1_BUFFER, 0, sizeof(USART1_BUFFER));
 800184c:	2214      	movs	r2, #20
 800184e:	2100      	movs	r1, #0
 8001850:	489c      	ldr	r0, [pc, #624]	; (8001ac4 <main+0x38c>)
 8001852:	f004 f8c3 	bl	80059dc <memset>
				 memset(send_buffer,0, sizeof(send_buffer));
 8001856:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800185a:	2264      	movs	r2, #100	; 0x64
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f004 f8bc 	bl	80059dc <memset>
  				 memset(temp,0,sizeof(temp));
 8001864:	463b      	mov	r3, r7
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f004 f8b6 	bl	80059dc <memset>

			     //fsm_state = ST_CHECK_DMA;
			     fsm_state = ST_CHECK_DMA;
 8001870:	4b93      	ldr	r3, [pc, #588]	; (8001ac0 <main+0x388>)
 8001872:	2202      	movs	r2, #2
 8001874:	701a      	strb	r2, [r3, #0]
	        	 break;
 8001876:	e25b      	b.n	8001d30 <main+0x5f8>
			 /***********************************/
			 /*				SEND DATA			*/
			 /***********************************/
			 case ST_CHECK_DMA:

				 if(get_dma_irq() == 1)
 8001878:	f7ff fde0 	bl	800143c <get_dma_irq>
 800187c:	4603      	mov	r3, r0
 800187e:	2b01      	cmp	r3, #1
 8001880:	f040 8082 	bne.w	8001988 <main+0x250>
				 {
					    set_dma_irq(0);
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff fdbd 	bl	8001404 <set_dma_irq>

						strToken = strtok((char*) temp_string,"$");
 800188a:	498f      	ldr	r1, [pc, #572]	; (8001ac8 <main+0x390>)
 800188c:	488f      	ldr	r0, [pc, #572]	; (8001acc <main+0x394>)
 800188e:	f004 fdab 	bl	80063e8 <strtok>
 8001892:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c

						while (( strToken != NULL) && (extract_data<DMA_MAX_DATA))
 8001896:	e06b      	b.n	8001970 <main+0x238>
						{

							lenght = strlen(strToken);
 8001898:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 800189c:	f7fe fc70 	bl	8000180 <strlen>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167

							if (lenght > DATA_SIZE)
 80018a6:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80018aa:	2b18      	cmp	r3, #24
 80018ac:	d902      	bls.n	80018b4 <main+0x17c>
							{
								lenght = DATA_SIZE;
 80018ae:	2318      	movs	r3, #24
 80018b0:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
							}
							if (lenght == DATA_SIZE)
 80018b4:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80018b8:	2b18      	cmp	r3, #24
 80018ba:	d14e      	bne.n	800195a <main+0x222>
							{
								check_sscanf = sscanf(strToken, "&i=%*d&u=%c=%*s",&device_updt);
 80018bc:	f107 0383 	add.w	r3, r7, #131	; 0x83
 80018c0:	461a      	mov	r2, r3
 80018c2:	4983      	ldr	r1, [pc, #524]	; (8001ad0 <main+0x398>)
 80018c4:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 80018c8:	f004 fd10 	bl	80062ec <siscanf>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
								if(check_sscanf == 1)
 80018d2:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d106      	bne.n	80018e8 <main+0x1b0>
								{
									if(device_updt == 1)
 80018da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d102      	bne.n	80018e8 <main+0x1b0>
									{
										to_update = 1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
									}
								}
								memset(data_extract_temp,0,sizeof(data_extract_temp));
 80018e8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018ec:	2264      	movs	r2, #100	; 0x64
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f004 f873 	bl	80059dc <memset>
								strcat((char *)data_extract_temp,"$");
 80018f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fc40 	bl	8000180 <strlen>
 8001900:	4603      	mov	r3, r0
 8001902:	461a      	mov	r2, r3
 8001904:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001908:	4413      	add	r3, r2
 800190a:	496f      	ldr	r1, [pc, #444]	; (8001ac8 <main+0x390>)
 800190c:	461a      	mov	r2, r3
 800190e:	460b      	mov	r3, r1
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	8013      	strh	r3, [r2, #0]

					        	memset(temp,0, sizeof(temp));
 8001914:	463b      	mov	r3, r7
 8001916:	2280      	movs	r2, #128	; 0x80
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f004 f85e 	bl	80059dc <memset>
					        	memcpy(temp,strToken,lenght-2);
 8001920:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001924:	3b02      	subs	r3, #2
 8001926:	461a      	mov	r2, r3
 8001928:	463b      	mov	r3, r7
 800192a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800192e:	4618      	mov	r0, r3
 8001930:	f004 f846 	bl	80059c0 <memcpy>
					        	/*temp[DATA_SIZE-1] = 0;
					        	temp[DATA_SIZE-2] = 0;*/
								strcat((char *)data_extract_temp,(char *)temp);
 8001934:	463a      	mov	r2, r7
 8001936:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f004 fd44 	bl	80063ca <strcat>

								strToken = strtok( NULL, "$" );
 8001942:	4961      	ldr	r1, [pc, #388]	; (8001ac8 <main+0x390>)
 8001944:	2000      	movs	r0, #0
 8001946:	f004 fd4f 	bl	80063e8 <strtok>
 800194a:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
								extract_data++;
 800194e:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 8001952:	3301      	adds	r3, #1
 8001954:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
 8001958:	e00a      	b.n	8001970 <main+0x238>
							}
							else
							{
								strToken = strtok( NULL, "$" );
 800195a:	495b      	ldr	r1, [pc, #364]	; (8001ac8 <main+0x390>)
 800195c:	2000      	movs	r0, #0
 800195e:	f004 fd43 	bl	80063e8 <strtok>
 8001962:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
								extract_data++;
 8001966:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 800196a:	3301      	adds	r3, #1
 800196c:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
						while (( strToken != NULL) && (extract_data<DMA_MAX_DATA))
 8001970:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <main+0x248>
 8001978:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 800197c:	2b00      	cmp	r3, #0
 800197e:	d08b      	beq.n	8001898 <main+0x160>
							}
						}


			    	  fsm_state = ST_GET_DATA;
 8001980:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <main+0x388>)
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
			          break;
 8001986:	e1d3      	b.n	8001d30 <main+0x5f8>
				 }
				 else
				 {
					 HAL_Delay(1000);
 8001988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800198c:	f000 fd84 	bl	8002498 <HAL_Delay>
			    	 fsm_state = ST_CHECK_DMA;
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <main+0x388>)
 8001992:	2202      	movs	r2, #2
 8001994:	701a      	strb	r2, [r3, #0]
			         break;
 8001996:	e1cb      	b.n	8001d30 <main+0x5f8>
		          /***********************************/
			      /*				GET_DATA			*/
			      /***********************************/
			       case ST_GET_DATA:

		   			  get_try = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
		   			  data_ok = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168

			    	   while((get_try < 3 ) && (data_ok == 0))
 80019a4:	e06f      	b.n	8001a86 <main+0x34e>
			    	   {

				    	   if(DHT22_Start(&DHT22_1) == 0)
 80019a6:	4840      	ldr	r0, [pc, #256]	; (8001aa8 <main+0x370>)
 80019a8:	f7ff fab4 	bl	8000f14 <DHT22_Start>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d160      	bne.n	8001a74 <main+0x33c>
				    	   	  {
				    	   		  if( DHT22_Check_Response(&DHT22_1)== 0)
 80019b2:	483d      	ldr	r0, [pc, #244]	; (8001aa8 <main+0x370>)
 80019b4:	f7ff fad7 	bl	8000f66 <DHT22_Check_Response>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d150      	bne.n	8001a60 <main+0x328>
				    	   		  {
				    	   			  if(DHT22_Read_Temp_Hum(&DHT22_1) == 0)
 80019be:	483a      	ldr	r0, [pc, #232]	; (8001aa8 <main+0x370>)
 80019c0:	f7ff fb86 	bl	80010d0 <DHT22_Read_Temp_Hum>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d140      	bne.n	8001a4c <main+0x314>
				    	   			  {
				    	   				  clearlcd();
 80019ca:	f7ff fe23 	bl	8001614 <clearlcd>

				    	   				  lcd_position(&hi2c1,0,0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	4839      	ldr	r0, [pc, #228]	; (8001ab8 <main+0x380>)
 80019d4:	f7ff fe61 	bl	800169a <lcd_position>

				    	   				  memset(temp,0,sizeof(temp));
 80019d8:	463b      	mov	r3, r7
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fffc 	bl	80059dc <memset>
				    	   				  sprintf((char*)temp,"Hum: %.2f %c ",DHT22_1.humidity, 0x25);
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <main+0x370>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fd35 	bl	8000458 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4638      	mov	r0, r7
 80019f4:	2125      	movs	r1, #37	; 0x25
 80019f6:	9100      	str	r1, [sp, #0]
 80019f8:	4936      	ldr	r1, [pc, #216]	; (8001ad4 <main+0x39c>)
 80019fa:	f004 fc57 	bl	80062ac <siprintf>
				    	   				  lcd_print(&hi2c1,(char*)temp);
 80019fe:	463b      	mov	r3, r7
 8001a00:	4619      	mov	r1, r3
 8001a02:	482d      	ldr	r0, [pc, #180]	; (8001ab8 <main+0x380>)
 8001a04:	f7ff fe20 	bl	8001648 <lcd_print>

				    	   				  lcd_position(&hi2c1,0,1);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	482a      	ldr	r0, [pc, #168]	; (8001ab8 <main+0x380>)
 8001a0e:	f7ff fe44 	bl	800169a <lcd_position>

				    	   				  memset(temp,0,sizeof(temp));
 8001a12:	463b      	mov	r3, r7
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 ffdf 	bl	80059dc <memset>
				    	   				  sprintf((char*)temp,"Temp: %.2fC  ",DHT22_1.temperature);
 8001a1e:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <main+0x370>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd18 	bl	8000458 <__aeabi_f2d>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4638      	mov	r0, r7
 8001a2e:	492a      	ldr	r1, [pc, #168]	; (8001ad8 <main+0x3a0>)
 8001a30:	f004 fc3c 	bl	80062ac <siprintf>
				    	   				  lcd_print(&hi2c1,(char*)temp);
 8001a34:	463b      	mov	r3, r7
 8001a36:	4619      	mov	r1, r3
 8001a38:	481f      	ldr	r0, [pc, #124]	; (8001ab8 <main+0x380>)
 8001a3a:	f7ff fe05 	bl	8001648 <lcd_print>

				    	   				  get_try = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
				    	   				  data_ok = 1;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
 8001a4a:	e01c      	b.n	8001a86 <main+0x34e>
				    	   			  }
				    	   			  else
				    	   			  {
						    	   		HAL_Delay(1000);
 8001a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a50:	f000 fd22 	bl	8002498 <HAL_Delay>
				    	   				get_try++;
 8001a54:	f897 316a 	ldrb.w	r3, [r7, #362]	; 0x16a
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
 8001a5e:	e012      	b.n	8001a86 <main+0x34e>
				    	   			  }

				    	   		  }
				    	   		  else
				    	   		  {
					    	   		    HAL_Delay(1000);
 8001a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a64:	f000 fd18 	bl	8002498 <HAL_Delay>
				    	   				get_try++;
 8001a68:	f897 316a 	ldrb.w	r3, [r7, #362]	; 0x16a
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
 8001a72:	e008      	b.n	8001a86 <main+0x34e>
				    	   		  }

				    	   	  }
				    	   	  else
				    	   	  {
				    	   		    HAL_Delay(1000);
 8001a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a78:	f000 fd0e 	bl	8002498 <HAL_Delay>
			    	   				get_try++;
 8001a7c:	f897 316a 	ldrb.w	r3, [r7, #362]	; 0x16a
 8001a80:	3301      	adds	r3, #1
 8001a82:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
			    	   while((get_try < 3 ) && (data_ok == 0))
 8001a86:	f897 316a 	ldrb.w	r3, [r7, #362]	; 0x16a
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d803      	bhi.n	8001a96 <main+0x35e>
 8001a8e:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d087      	beq.n	80019a6 <main+0x26e>
				    	   	  }
			    	   }

				      fsm_state = ST_SEND_DATA;
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <main+0x388>)
 8001a98:	2203      	movs	r2, #3
 8001a9a:	701a      	strb	r2, [r3, #0]
			          break;
 8001a9c:	e148      	b.n	8001d30 <main+0x5f8>
 8001a9e:	bf00      	nop
 8001aa0:	200002b8 	.word	0x200002b8
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	20000258 	.word	0x20000258
 8001aac:	20000298 	.word	0x20000298
 8001ab0:	200002f8 	.word	0x200002f8
 8001ab4:	20000254 	.word	0x20000254
 8001ab8:	200001fc 	.word	0x200001fc
 8001abc:	080091ec 	.word	0x080091ec
 8001ac0:	200002b1 	.word	0x200002b1
 8001ac4:	20000268 	.word	0x20000268
 8001ac8:	080091f8 	.word	0x080091f8
 8001acc:	2000027c 	.word	0x2000027c
 8001ad0:	080091fc 	.word	0x080091fc
 8001ad4:	0800920c 	.word	0x0800920c
 8001ad8:	0800921c 	.word	0x0800921c
			 /***********************************/
			 /*				SEND DATA			*/
			 /***********************************/
			 case ST_SEND_DATA:

	        	 strcat((char *)send_buffer,"$");
 8001adc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fb4d 	bl	8000180 <strlen>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001aee:	4413      	add	r3, r2
 8001af0:	4990      	ldr	r1, [pc, #576]	; (8001d34 <main+0x5fc>)
 8001af2:	461a      	mov	r2, r3
 8001af4:	460b      	mov	r3, r1
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	8013      	strh	r3, [r2, #0]

	        	 memset(temp,0, sizeof(temp));
 8001afa:	463b      	mov	r3, r7
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 ff6b 	bl	80059dc <memset>
	        	 sprintf((char *)temp,"&i=%s", device_ID);
 8001b06:	463b      	mov	r3, r7
 8001b08:	4a8b      	ldr	r2, [pc, #556]	; (8001d38 <main+0x600>)
 8001b0a:	498c      	ldr	r1, [pc, #560]	; (8001d3c <main+0x604>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f004 fbcd 	bl	80062ac <siprintf>
	        	 strcat((char *)send_buffer,(char *)temp);
 8001b12:	463a      	mov	r2, r7
 8001b14:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fc55 	bl	80063ca <strcat>

	        	// memset(temp,0, sizeof(temp));
	        	 //sprintf((char *)temp,"&i=%s", device_ID);
	        	// strcat((char *)send_buffer,(char *)"&u=1");

	        	 memset(temp,0, sizeof(temp));
 8001b20:	463b      	mov	r3, r7
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 ff58 	bl	80059dc <memset>
	        	 sprintf((char *)temp,"&t=%.2f", DHT22_1.temperature);
 8001b2c:	4b84      	ldr	r3, [pc, #528]	; (8001d40 <main+0x608>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fc91 	bl	8000458 <__aeabi_f2d>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4638      	mov	r0, r7
 8001b3c:	4981      	ldr	r1, [pc, #516]	; (8001d44 <main+0x60c>)
 8001b3e:	f004 fbb5 	bl	80062ac <siprintf>
	        	 strcat((char *)send_buffer,(char *)temp);
 8001b42:	463a      	mov	r2, r7
 8001b44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f004 fc3d 	bl	80063ca <strcat>

	        	 memset(temp,0, sizeof(temp));
 8001b50:	463b      	mov	r3, r7
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 ff40 	bl	80059dc <memset>
	        	 sprintf((char *)temp,"&h=%.2f", DHT22_1.humidity);
 8001b5c:	4b78      	ldr	r3, [pc, #480]	; (8001d40 <main+0x608>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fc79 	bl	8000458 <__aeabi_f2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4638      	mov	r0, r7
 8001b6c:	4976      	ldr	r1, [pc, #472]	; (8001d48 <main+0x610>)
 8001b6e:	f004 fb9d 	bl	80062ac <siprintf>
	        	 strcat((char *)send_buffer,(char *)temp);
 8001b72:	463a      	mov	r2, r7
 8001b74:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 fc25 	bl	80063ca <strcat>

	        	 strcat((char *)send_buffer,(char *)temp_string);
 8001b80:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b84:	4971      	ldr	r1, [pc, #452]	; (8001d4c <main+0x614>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 fc1f 	bl	80063ca <strcat>

	        	 strcat((char *)send_buffer,"\r\n");
 8001b8c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe faf5 	bl	8000180 <strlen>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a6b      	ldr	r2, [pc, #428]	; (8001d50 <main+0x618>)
 8001ba2:	8811      	ldrh	r1, [r2, #0]
 8001ba4:	7892      	ldrb	r2, [r2, #2]
 8001ba6:	8019      	strh	r1, [r3, #0]
 8001ba8:	709a      	strb	r2, [r3, #2]


				 memset(USART1_BUFFER, 0, sizeof(USART1_BUFFER));
 8001baa:	2214      	movs	r2, #20
 8001bac:	2100      	movs	r1, #0
 8001bae:	4869      	ldr	r0, [pc, #420]	; (8001d54 <main+0x61c>)
 8001bb0:	f003 ff14 	bl	80059dc <memset>
				 HAL_UART_Transmit(&huart1,(uint8_t*)send_buffer, strlen((char *)send_buffer), 200);
 8001bb4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fae1 	bl	8000180 <strlen>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001bc6:	23c8      	movs	r3, #200	; 0xc8
 8001bc8:	4863      	ldr	r0, [pc, #396]	; (8001d58 <main+0x620>)
 8001bca:	f002 fff2 	bl	8004bb2 <HAL_UART_Transmit>
				 to_update = 1;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
				 if(to_update == 1)
 8001bd4:	f897 3165 	ldrb.w	r3, [r7, #357]	; 0x165
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10a      	bne.n	8001bf2 <main+0x4ba>
				 {
					 HAL_UART_Receive(&huart1,(uint8_t*)USART1_BUFFER, USART1_BUFFER_SIZE - 1, 4000);
 8001bdc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001be0:	2213      	movs	r2, #19
 8001be2:	495c      	ldr	r1, [pc, #368]	; (8001d54 <main+0x61c>)
 8001be4:	485c      	ldr	r0, [pc, #368]	; (8001d58 <main+0x620>)
 8001be6:	f003 f876 	bl	8004cd6 <HAL_UART_Receive>

			    	 fsm_state = ST_CHECK_RESP;
 8001bea:	4b5c      	ldr	r3, [pc, #368]	; (8001d5c <main+0x624>)
 8001bec:	2204      	movs	r2, #4
 8001bee:	701a      	strb	r2, [r3, #0]
			         break;
 8001bf0:	e09e      	b.n	8001d30 <main+0x5f8>
				 }
				 else
				 {
			    	 fsm_state = ST_IDLE;
 8001bf2:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <main+0x624>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
			         break;
 8001bf8:	e09a      	b.n	8001d30 <main+0x5f8>
			 /***********************************/
			 /*				CHECK RESP			*/
			 /***********************************/
			 case ST_CHECK_RESP:

				  check_sscanf = sscanf((char*)USART1_BUFFER, "%d/%d/%d-%d:%d:%d",&date.day, &date.month,&date.year,&date.hour,&date.minute,&date.second);
 8001bfa:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001bfe:	1d19      	adds	r1, r3, #4
 8001c00:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8001c04:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001c08:	3314      	adds	r3, #20
 8001c0a:	9303      	str	r3, [sp, #12]
 8001c0c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001c10:	3310      	adds	r3, #16
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001c18:	330c      	adds	r3, #12
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001c20:	3308      	adds	r3, #8
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	460b      	mov	r3, r1
 8001c26:	494e      	ldr	r1, [pc, #312]	; (8001d60 <main+0x628>)
 8001c28:	484a      	ldr	r0, [pc, #296]	; (8001d54 <main+0x61c>)
 8001c2a:	f004 fb5f 	bl	80062ec <siscanf>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
				  time_ok = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169

				  if(check_sscanf == 6)
 8001c3a:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d12f      	bne.n	8001ca2 <main+0x56a>
				  {

					  if(date.year >= DEFAULT_YEAR)
 8001c42:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c46:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c4a:	db2a      	blt.n	8001ca2 <main+0x56a>
					  {
						  if((date.month > 0) && (date.month <= 12))
 8001c4c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	dd26      	ble.n	8001ca2 <main+0x56a>
 8001c54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c58:	2b0c      	cmp	r3, #12
 8001c5a:	dc22      	bgt.n	8001ca2 <main+0x56a>
						  {
							  if((date.day > 0) && (date.day <= 31))
 8001c5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	dd1e      	ble.n	8001ca2 <main+0x56a>
 8001c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c68:	2b1f      	cmp	r3, #31
 8001c6a:	dc1a      	bgt.n	8001ca2 <main+0x56a>
							  {
								  if((date.hour >= 0) && (date.hour < 24))
 8001c6c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	db16      	blt.n	8001ca2 <main+0x56a>
 8001c74:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c78:	2b17      	cmp	r3, #23
 8001c7a:	dc12      	bgt.n	8001ca2 <main+0x56a>
								  {
									  if((date.minute >= 0) && (date.minute < 60))
 8001c7c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0e      	blt.n	8001ca2 <main+0x56a>
 8001c84:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c88:	2b3b      	cmp	r3, #59	; 0x3b
 8001c8a:	dc0a      	bgt.n	8001ca2 <main+0x56a>
									  {
										  if((date.second >= 0) && (date.second < 60))
 8001c8c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	db06      	blt.n	8001ca2 <main+0x56a>
 8001c94:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c98:	2b3b      	cmp	r3, #59	; 0x3b
 8001c9a:	dc02      	bgt.n	8001ca2 <main+0x56a>
										  {
											  time_ok = 1;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
							  }
						  }
					  }
				  }

				  if(time_ok == 0)
 8001ca2:	f897 3169 	ldrb.w	r3, [r7, #361]	; 0x169
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d12d      	bne.n	8001d06 <main+0x5ce>
				  {
					  memset(USART1_BUFFER, 0, sizeof(USART1_BUFFER));
 8001caa:	2214      	movs	r2, #20
 8001cac:	2100      	movs	r1, #0
 8001cae:	4829      	ldr	r0, [pc, #164]	; (8001d54 <main+0x61c>)
 8001cb0:	f003 fe94 	bl	80059dc <memset>

					  date.year = DEFAULT_YEAR;
 8001cb4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cb8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
					  date.month = DEFAULT_MONTH;
 8001cbc:	2306      	movs	r3, #6
 8001cbe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
					  date.day = DEFAULT_DAY;
 8001cc2:	2313      	movs	r3, #19
 8001cc4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
					  date.hour = DEFAULT_HOUR;
 8001cc8:	2315      	movs	r3, #21
 8001cca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
					  date.minute = DEFAULT_MINUTE;
 8001cce:	2311      	movs	r3, #17
 8001cd0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
					  date.second = DEFAULT_SECOND;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

					  sprintf((char*)USART1_BUFFER,"%d/%d/%d-%d:%d:%d", date.day, date.month, date.year, date.hour, date.minute, date.second);
 8001cda:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8001cde:	f8d7 5150 	ldr.w	r5, [r7, #336]	; 0x150
 8001ce2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ce6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001cea:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8001cee:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 8001cf2:	9003      	str	r0, [sp, #12]
 8001cf4:	9102      	str	r1, [sp, #8]
 8001cf6:	9201      	str	r2, [sp, #4]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	462b      	mov	r3, r5
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	4918      	ldr	r1, [pc, #96]	; (8001d60 <main+0x628>)
 8001d00:	4814      	ldr	r0, [pc, #80]	; (8001d54 <main+0x61c>)
 8001d02:	f004 fad3 	bl	80062ac <siprintf>
				  }

		    	  fsm_state = ST_UPDATE;
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <main+0x624>)
 8001d08:	2206      	movs	r2, #6
 8001d0a:	701a      	strb	r2, [r3, #0]
		          break;
 8001d0c:	e010      	b.n	8001d30 <main+0x5f8>
			 /*				UPDATE				*/
			 /***********************************/
			 case ST_UPDATE:


				 HAL_UART_Transmit(&huart4,(uint8_t*)USART1_BUFFER, strlen((char *)USART1_BUFFER), 100);
 8001d0e:	4811      	ldr	r0, [pc, #68]	; (8001d54 <main+0x61c>)
 8001d10:	f7fe fa36 	bl	8000180 <strlen>
 8001d14:	4603      	mov	r3, r0
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	2364      	movs	r3, #100	; 0x64
 8001d1a:	490e      	ldr	r1, [pc, #56]	; (8001d54 <main+0x61c>)
 8001d1c:	4811      	ldr	r0, [pc, #68]	; (8001d64 <main+0x62c>)
 8001d1e:	f002 ff48 	bl	8004bb2 <HAL_UART_Transmit>

				 fsm_state = ST_IDLE;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <main+0x624>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
				 break;
 8001d28:	e002      	b.n	8001d30 <main+0x5f8>
			 /***********************************/
			 /*				default       		*/
			 /***********************************/
			 default:

				  Error_Handler();
 8001d2a:	f000 f86b 	bl	8001e04 <Error_Handler>
		          break;
 8001d2e:	bf00      	nop
	  switch (fsm_state)
 8001d30:	e575      	b.n	800181e <main+0xe6>
 8001d32:	bf00      	nop
 8001d34:	080091f8 	.word	0x080091f8
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	0800922c 	.word	0x0800922c
 8001d40:	20000258 	.word	0x20000258
 8001d44:	08009234 	.word	0x08009234
 8001d48:	0800923c 	.word	0x0800923c
 8001d4c:	2000027c 	.word	0x2000027c
 8001d50:	08009244 	.word	0x08009244
 8001d54:	20000268 	.word	0x20000268
 8001d58:	2000033c 	.word	0x2000033c
 8001d5c:	200002b1 	.word	0x200002b1
 8001d60:	08009248 	.word	0x08009248
 8001d64:	200002f8 	.word	0x200002f8

08001d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b092      	sub	sp, #72	; 0x48
 8001d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	2234      	movs	r2, #52	; 0x34
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fe30 	bl	80059dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <SystemClock_Config+0x98>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001d92:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <SystemClock_Config+0x98>)
 8001d94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d98:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da2:	2310      	movs	r3, #16
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da6:	2302      	movs	r3, #2
 8001da8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001daa:	2300      	movs	r3, #0
 8001dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001dae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001db2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001db4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001db8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 fe02 	bl	80039c8 <HAL_RCC_OscConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001dca:	f000 f81b 	bl	8001e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dce:	230f      	movs	r3, #15
 8001dd0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001de2:	463b      	mov	r3, r7
 8001de4:	2101      	movs	r1, #1
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 f91e 	bl	8004028 <HAL_RCC_ClockConfig>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001df2:	f000 f807 	bl	8001e04 <Error_Handler>
  }
}
 8001df6:	bf00      	nop
 8001df8:	3748      	adds	r7, #72	; 0x48
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40007000 	.word	0x40007000

08001e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e08:	b672      	cpsid	i
}
 8001e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <Error_Handler+0x8>
	...

08001e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e20:	6253      	str	r3, [r2, #36]	; 0x24
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6213      	str	r3, [r2, #32]
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6253      	str	r3, [r2, #36]	; 0x24
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e5e:	2007      	movs	r0, #7
 8001e60:	f000 fc08 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800

08001e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <NMI_Handler+0x4>

08001e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <HardFault_Handler+0x4>

08001e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <MemManage_Handler+0x4>

08001e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e86:	e7fe      	b.n	8001e86 <BusFault_Handler+0x4>

08001e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <UsageFault_Handler+0x4>

08001e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb6:	f000 fad3 	bl	8002460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <UART4_IRQHandler+0x10>)
 8001ec6:	f002 ffd9 	bl	8004e7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200002f8 	.word	0x200002f8

08001ed4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <DMA2_Channel3_IRQHandler+0x10>)
 8001eda:	f000 fd5f 	bl	800299c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000380 	.word	0x20000380

08001ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
	return 1;
 8001eec:	2301      	movs	r3, #1
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <_kill>:

int _kill(int pid, int sig)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f00:	f003 fd34 	bl	800596c <__errno>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2216      	movs	r2, #22
 8001f08:	601a      	str	r2, [r3, #0]
	return -1;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_exit>:

void _exit (int status)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffe7 	bl	8001ef6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f28:	e7fe      	b.n	8001f28 <_exit+0x12>

08001f2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e00a      	b.n	8001f52 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f3c:	f3af 8000 	nop.w
 8001f40:	4601      	mov	r1, r0
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	60ba      	str	r2, [r7, #8]
 8001f48:	b2ca      	uxtb	r2, r1
 8001f4a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	dbf0      	blt.n	8001f3c <_read+0x12>
	}

return len;
 8001f5a:	687b      	ldr	r3, [r7, #4]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e009      	b.n	8001f8a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	60ba      	str	r2, [r7, #8]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	dbf1      	blt.n	8001f76 <_write+0x12>
	}
	return len;
 8001f92:	687b      	ldr	r3, [r7, #4]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_close>:

int _close(int file)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	return -1;
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <_isatty>:

int _isatty(int file)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
	return 0;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <_sbrk+0x5c>)
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <_sbrk+0x60>)
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <_sbrk+0x64>)
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <_sbrk+0x68>)
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d207      	bcs.n	800203c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800202c:	f003 fc9e 	bl	800596c <__errno>
 8002030:	4603      	mov	r3, r0
 8002032:	220c      	movs	r2, #12
 8002034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e009      	b.n	8002050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <_sbrk+0x64>)
 800204c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20014000 	.word	0x20014000
 800205c:	00000400 	.word	0x00000400
 8002060:	200002b4 	.word	0x200002b4
 8002064:	200003d8 	.word	0x200003d8

08002068 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002088:	463b      	mov	r3, r7
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_TIM2_Init+0x94>)
 8002092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002096:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_TIM2_Init+0x94>)
 800209a:	221f      	movs	r2, #31
 800209c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_TIM2_Init+0x94>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_TIM2_Init+0x94>)
 80020a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_TIM2_Init+0x94>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <MX_TIM2_Init+0x94>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020b8:	4813      	ldr	r0, [pc, #76]	; (8002108 <MX_TIM2_Init+0x94>)
 80020ba:	f002 fa7b 	bl	80045b4 <HAL_TIM_Base_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020c4:	f7ff fe9e 	bl	8001e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ce:	f107 0308 	add.w	r3, r7, #8
 80020d2:	4619      	mov	r1, r3
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <MX_TIM2_Init+0x94>)
 80020d6:	f002 faf7 	bl	80046c8 <HAL_TIM_ConfigClockSource>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020e0:	f7ff fe90 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e4:	2300      	movs	r3, #0
 80020e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ec:	463b      	mov	r3, r7
 80020ee:	4619      	mov	r1, r3
 80020f0:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_TIM2_Init+0x94>)
 80020f2:	f002 fcb3 	bl	8004a5c <HAL_TIMEx_MasterConfigSynchronization>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020fc:	f7ff fe82 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	200002b8 	.word	0x200002b8

0800210c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211c:	d10b      	bne.n	8002136 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_TIM_Base_MspInit+0x34>)
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	4a07      	ldr	r2, [pc, #28]	; (8002140 <HAL_TIM_Base_MspInit+0x34>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6253      	str	r3, [r2, #36]	; 0x24
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_TIM_Base_MspInit+0x34>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40023800 	.word	0x40023800

08002144 <delay_us>:
  }
}

/* USER CODE BEGIN 1 */
void delay_us(uint16_t us)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <delay_us+0x2c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us); // wait for the counter to reach the us input in the parameter
 8002156:	bf00      	nop
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <delay_us+0x2c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	429a      	cmp	r2, r3
 8002162:	d3f9      	bcc.n	8002158 <delay_us+0x14>
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	200002b8 	.word	0x200002b8

08002174 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_UART4_Init+0x4c>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <MX_UART4_Init+0x50>)
 800217c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <MX_UART4_Init+0x4c>)
 8002180:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002184:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_UART4_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_UART4_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <MX_UART4_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_UART4_Init+0x4c>)
 800219a:	220c      	movs	r2, #12
 800219c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <MX_UART4_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_UART4_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_UART4_Init+0x4c>)
 80021ac:	f002 fcb4 	bl	8004b18 <HAL_UART_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80021b6:	f7ff fe25 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200002f8 	.word	0x200002f8
 80021c4:	40004c00 	.word	0x40004c00

080021c8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <MX_USART1_UART_Init+0x50>)
 80021d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 8002200:	f002 fc8a 	bl	8004b18 <HAL_UART_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800220a:	f7ff fdfb 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2000033c 	.word	0x2000033c
 8002218:	40013800 	.word	0x40013800

0800221c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08c      	sub	sp, #48	; 0x30
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 031c 	add.w	r3, r7, #28
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a46      	ldr	r2, [pc, #280]	; (8002354 <HAL_UART_MspInit+0x138>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d157      	bne.n	80022ee <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800223e:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_UART_MspInit+0x13c>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	4a45      	ldr	r2, [pc, #276]	; (8002358 <HAL_UART_MspInit+0x13c>)
 8002244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002248:	6253      	str	r3, [r2, #36]	; 0x24
 800224a:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_UART_MspInit+0x13c>)
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002256:	4b40      	ldr	r3, [pc, #256]	; (8002358 <HAL_UART_MspInit+0x13c>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4a3f      	ldr	r2, [pc, #252]	; (8002358 <HAL_UART_MspInit+0x13c>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	61d3      	str	r3, [r2, #28]
 8002262:	4b3d      	ldr	r3, [pc, #244]	; (8002358 <HAL_UART_MspInit+0x13c>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800226e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002278:	2301      	movs	r3, #1
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002280:	2308      	movs	r3, #8
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4619      	mov	r1, r3
 800228a:	4834      	ldr	r0, [pc, #208]	; (800235c <HAL_UART_MspInit+0x140>)
 800228c:	f000 fc64 	bl	8002b58 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8002290:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002292:	4a34      	ldr	r2, [pc, #208]	; (8002364 <HAL_UART_MspInit+0x148>)
 8002294:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002296:	4b32      	ldr	r3, [pc, #200]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002298:	2200      	movs	r2, #0
 800229a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800229c:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_UART_MspInit+0x144>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022a2:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_UART_MspInit+0x144>)
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_UART_MspInit+0x144>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ae:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_UART_MspInit+0x144>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_UART_MspInit+0x144>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_UART_MspInit+0x144>)
 80022bc:	2200      	movs	r2, #0
 80022be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80022c0:	4827      	ldr	r0, [pc, #156]	; (8002360 <HAL_UART_MspInit+0x144>)
 80022c2:	f000 fa19 	bl	80026f8 <HAL_DMA_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80022cc:	f7ff fd9a 	bl	8001e04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a23      	ldr	r2, [pc, #140]	; (8002360 <HAL_UART_MspInit+0x144>)
 80022d4:	639a      	str	r2, [r3, #56]	; 0x38
 80022d6:	4a22      	ldr	r2, [pc, #136]	; (8002360 <HAL_UART_MspInit+0x144>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	2030      	movs	r0, #48	; 0x30
 80022e2:	f000 f9d2 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80022e6:	2030      	movs	r0, #48	; 0x30
 80022e8:	f000 f9eb 	bl	80026c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022ec:	e02d      	b.n	800234a <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <HAL_UART_MspInit+0x14c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d128      	bne.n	800234a <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_UART_MspInit+0x13c>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4a16      	ldr	r2, [pc, #88]	; (8002358 <HAL_UART_MspInit+0x13c>)
 80022fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002302:	6213      	str	r3, [r2, #32]
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_UART_MspInit+0x13c>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_UART_MspInit+0x13c>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	4a10      	ldr	r2, [pc, #64]	; (8002358 <HAL_UART_MspInit+0x13c>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	61d3      	str	r3, [r2, #28]
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_UART_MspInit+0x13c>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002328:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002336:	2303      	movs	r3, #3
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800233a:	2307      	movs	r3, #7
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	4619      	mov	r1, r3
 8002344:	4809      	ldr	r0, [pc, #36]	; (800236c <HAL_UART_MspInit+0x150>)
 8002346:	f000 fc07 	bl	8002b58 <HAL_GPIO_Init>
}
 800234a:	bf00      	nop
 800234c:	3730      	adds	r7, #48	; 0x30
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40004c00 	.word	0x40004c00
 8002358:	40023800 	.word	0x40023800
 800235c:	40020800 	.word	0x40020800
 8002360:	20000380 	.word	0x20000380
 8002364:	40026430 	.word	0x40026430
 8002368:	40013800 	.word	0x40013800
 800236c:	40020000 	.word	0x40020000

08002370 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002370:	480c      	ldr	r0, [pc, #48]	; (80023a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002372:	490d      	ldr	r1, [pc, #52]	; (80023a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002378:	e002      	b.n	8002380 <LoopCopyDataInit>

0800237a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800237c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237e:	3304      	adds	r3, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002384:	d3f9      	bcc.n	800237a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002388:	4c0a      	ldr	r4, [pc, #40]	; (80023b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800238c:	e001      	b.n	8002392 <LoopFillZerobss>

0800238e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002390:	3204      	adds	r2, #4

08002392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002394:	d3fb      	bcc.n	800238e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002396:	f7ff fe67 	bl	8002068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800239a:	f003 faed 	bl	8005978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800239e:	f7ff f9cb 	bl	8001738 <main>
  bx lr
 80023a2:	4770      	bx	lr
  ldr r0, =_sdata
 80023a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80023ac:	080096f0 	.word	0x080096f0
  ldr r2, =_sbss
 80023b0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80023b4:	200003d8 	.word	0x200003d8

080023b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC1_IRQHandler>

080023ba <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c4:	2003      	movs	r0, #3
 80023c6:	f000 f955 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ca:	2000      	movs	r0, #0
 80023cc:	f000 f80e 	bl	80023ec <HAL_InitTick>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	71fb      	strb	r3, [r7, #7]
 80023da:	e001      	b.n	80023e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023dc:	f7ff fd18 	bl	8001e10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023e0:	79fb      	ldrb	r3, [r7, #7]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_InitTick+0x68>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d022      	beq.n	8002446 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002400:	4b15      	ldr	r3, [pc, #84]	; (8002458 <HAL_InitTick+0x6c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_InitTick+0x68>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800240c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f962 	bl	80026de <HAL_SYSTICK_Config>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10f      	bne.n	8002440 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	d809      	bhi.n	800243a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002426:	2200      	movs	r2, #0
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	f04f 30ff 	mov.w	r0, #4294967295
 800242e:	f000 f92c 	bl	800268a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <HAL_InitTick+0x70>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e007      	b.n	800244a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	e004      	b.n	800244a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	e001      	b.n	800244a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	2000000c 	.word	0x2000000c
 8002458:	20000004 	.word	0x20000004
 800245c:	20000008 	.word	0x20000008

08002460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_IncTick+0x1c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_IncTick+0x20>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4413      	add	r3, r2
 800246e:	4a03      	ldr	r2, [pc, #12]	; (800247c <HAL_IncTick+0x1c>)
 8002470:	6013      	str	r3, [r2, #0]
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	200003c4 	.word	0x200003c4
 8002480:	2000000c 	.word	0x2000000c

08002484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return uwTick;
 8002488:	4b02      	ldr	r3, [pc, #8]	; (8002494 <HAL_GetTick+0x10>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	200003c4 	.word	0x200003c4

08002498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff fff0 	bl	8002484 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d004      	beq.n	80024bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_Delay+0x40>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024bc:	bf00      	nop
 80024be:	f7ff ffe1 	bl	8002484 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d8f7      	bhi.n	80024be <HAL_Delay+0x26>
  {
  }
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	2000000c 	.word	0x2000000c

080024dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250e:	4a04      	ldr	r2, [pc, #16]	; (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	60d3      	str	r3, [r2, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <__NVIC_GetPriorityGrouping+0x18>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	f003 0307 	and.w	r3, r3, #7
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	2b00      	cmp	r3, #0
 8002550:	db0b      	blt.n	800256a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	4906      	ldr	r1, [pc, #24]	; (8002574 <__NVIC_EnableIRQ+0x34>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2001      	movs	r0, #1
 8002562:	fa00 f202 	lsl.w	r2, r0, r2
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100

08002578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	; (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	4313      	orrs	r3, r2
         );
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002640:	d301      	bcc.n	8002646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002642:	2301      	movs	r3, #1
 8002644:	e00f      	b.n	8002666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <SysTick_Config+0x40>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264e:	210f      	movs	r1, #15
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f7ff ff90 	bl	8002578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <SysTick_Config+0x40>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SysTick_Config+0x40>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff2d 	bl	80024dc <__NVIC_SetPriorityGrouping>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800269c:	f7ff ff42 	bl	8002524 <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ff90 	bl	80025cc <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff5f 	bl	8002578 <__NVIC_SetPriority>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff35 	bl	8002540 <__NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffa2 	bl	8002630 <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e059      	b.n	80027be <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_DMA_Init+0xd0>)
 8002712:	429a      	cmp	r2, r3
 8002714:	d80f      	bhi.n	8002736 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_DMA_Init+0xd4>)
 800271e:	4413      	add	r3, r2
 8002720:	4a2b      	ldr	r2, [pc, #172]	; (80027d0 <HAL_DMA_Init+0xd8>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	009a      	lsls	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a28      	ldr	r2, [pc, #160]	; (80027d4 <HAL_DMA_Init+0xdc>)
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
 8002734:	e00e      	b.n	8002754 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <HAL_DMA_Init+0xe0>)
 800273e:	4413      	add	r3, r2
 8002740:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <HAL_DMA_Init+0xd8>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	009a      	lsls	r2, r3, #2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a22      	ldr	r2, [pc, #136]	; (80027dc <HAL_DMA_Init+0xe4>)
 8002752:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	40026407 	.word	0x40026407
 80027cc:	bffd9ff8 	.word	0xbffd9ff8
 80027d0:	cccccccd 	.word	0xcccccccd
 80027d4:	40026000 	.word	0x40026000
 80027d8:	bffd9bf8 	.word	0xbffd9bf8
 80027dc:	40026400 	.word	0x40026400

080027e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_DMA_Start_IT+0x20>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e04b      	b.n	8002898 <HAL_DMA_Start_IT+0xb8>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d13a      	bne.n	800288a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f95e 	bl	8002afa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 020e 	orr.w	r2, r2, #14
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e00f      	b.n	8002878 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0204 	bic.w	r2, r2, #4
 8002866:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 020a 	orr.w	r2, r2, #10
 8002876:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e005      	b.n	8002896 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002892:	2302      	movs	r3, #2
 8002894:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002896:	7dfb      	ldrb	r3, [r7, #23]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d008      	beq.n	80028ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2204      	movs	r2, #4
 80028bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e022      	b.n	8002910 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 020e 	bic.w	r2, r2, #14
 80028d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0201 	bic.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 021c 	and.w	r2, r3, #28
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d005      	beq.n	800293e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2204      	movs	r2, #4
 8002936:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	e029      	b.n	8002992 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 020e 	bic.w	r2, r2, #14
 800294c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0201 	bic.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f003 021c 	and.w	r2, r3, #28
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	2101      	movs	r1, #1
 800296c:	fa01 f202 	lsl.w	r2, r1, r2
 8002970:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
    }
  }
  return status;
 8002992:	7bfb      	ldrb	r3, [r7, #15]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f003 031c 	and.w	r3, r3, #28
 80029bc:	2204      	movs	r2, #4
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d026      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x7a>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d021      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0204 	bic.w	r2, r2, #4
 80029ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f003 021c 	and.w	r2, r3, #28
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	2104      	movs	r1, #4
 80029fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002a02:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d071      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a14:	e06c      	b.n	8002af0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f003 031c 	and.w	r3, r3, #28
 8002a1e:	2202      	movs	r2, #2
 8002a20:	409a      	lsls	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d02e      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xec>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d029      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10b      	bne.n	8002a5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 020a 	bic.w	r2, r2, #10
 8002a50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 021c 	and.w	r2, r3, #28
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	2102      	movs	r1, #2
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d038      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a86:	e033      	b.n	8002af0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f003 031c 	and.w	r3, r3, #28
 8002a90:	2208      	movs	r2, #8
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d02a      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x156>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d025      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 020e 	bic.w	r2, r2, #14
 8002ab4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 021c 	and.w	r2, r3, #28
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d004      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
}
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f003 021c 	and.w	r2, r3, #28
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	2101      	movs	r1, #1
 8002b16:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d108      	bne.n	8002b3e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b3c:	e007      	b.n	8002b4e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	60da      	str	r2, [r3, #12]
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b6e:	e160      	b.n	8002e32 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8152 	beq.w	8002e2c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d005      	beq.n	8002ba0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d130      	bne.n	8002c02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f003 0201 	and.w	r2, r3, #1
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d017      	beq.n	8002c3e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d123      	bne.n	8002c92 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	08da      	lsrs	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3208      	adds	r2, #8
 8002c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	08da      	lsrs	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3208      	adds	r2, #8
 8002c8c:	6939      	ldr	r1, [r7, #16]
 8002c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0203 	and.w	r2, r3, #3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80ac 	beq.w	8002e2c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd4:	4b5e      	ldr	r3, [pc, #376]	; (8002e50 <HAL_GPIO_Init+0x2f8>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a5d      	ldr	r2, [pc, #372]	; (8002e50 <HAL_GPIO_Init+0x2f8>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6213      	str	r3, [r2, #32]
 8002ce0:	4b5b      	ldr	r3, [pc, #364]	; (8002e50 <HAL_GPIO_Init+0x2f8>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cec:	4a59      	ldr	r2, [pc, #356]	; (8002e54 <HAL_GPIO_Init+0x2fc>)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	220f      	movs	r2, #15
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a51      	ldr	r2, [pc, #324]	; (8002e58 <HAL_GPIO_Init+0x300>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d025      	beq.n	8002d64 <HAL_GPIO_Init+0x20c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a50      	ldr	r2, [pc, #320]	; (8002e5c <HAL_GPIO_Init+0x304>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d01f      	beq.n	8002d60 <HAL_GPIO_Init+0x208>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a4f      	ldr	r2, [pc, #316]	; (8002e60 <HAL_GPIO_Init+0x308>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d019      	beq.n	8002d5c <HAL_GPIO_Init+0x204>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a4e      	ldr	r2, [pc, #312]	; (8002e64 <HAL_GPIO_Init+0x30c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_GPIO_Init+0x200>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a4d      	ldr	r2, [pc, #308]	; (8002e68 <HAL_GPIO_Init+0x310>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00d      	beq.n	8002d54 <HAL_GPIO_Init+0x1fc>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a4c      	ldr	r2, [pc, #304]	; (8002e6c <HAL_GPIO_Init+0x314>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <HAL_GPIO_Init+0x1f8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <HAL_GPIO_Init+0x318>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d101      	bne.n	8002d4c <HAL_GPIO_Init+0x1f4>
 8002d48:	2306      	movs	r3, #6
 8002d4a:	e00c      	b.n	8002d66 <HAL_GPIO_Init+0x20e>
 8002d4c:	2307      	movs	r3, #7
 8002d4e:	e00a      	b.n	8002d66 <HAL_GPIO_Init+0x20e>
 8002d50:	2305      	movs	r3, #5
 8002d52:	e008      	b.n	8002d66 <HAL_GPIO_Init+0x20e>
 8002d54:	2304      	movs	r3, #4
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x20e>
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e004      	b.n	8002d66 <HAL_GPIO_Init+0x20e>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e002      	b.n	8002d66 <HAL_GPIO_Init+0x20e>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_GPIO_Init+0x20e>
 8002d64:	2300      	movs	r3, #0
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	f002 0203 	and.w	r2, r2, #3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4093      	lsls	r3, r2
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d76:	4937      	ldr	r1, [pc, #220]	; (8002e54 <HAL_GPIO_Init+0x2fc>)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_GPIO_Init+0x31c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002da8:	4a32      	ldr	r2, [pc, #200]	; (8002e74 <HAL_GPIO_Init+0x31c>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dae:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <HAL_GPIO_Init+0x31c>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dd2:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <HAL_GPIO_Init+0x31c>)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dd8:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <HAL_GPIO_Init+0x31c>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_GPIO_Init+0x31c>)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e02:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <HAL_GPIO_Init+0x31c>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e26:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <HAL_GPIO_Init+0x31c>)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f47f ae97 	bne.w	8002b70 <HAL_GPIO_Init+0x18>
  }
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	40020400 	.word	0x40020400
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40021400 	.word	0x40021400
 8002e70:	40021800 	.word	0x40021800
 8002e74:	40010400 	.word	0x40010400

08002e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
 8002e94:	e001      	b.n	8002e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	807b      	strh	r3, [r7, #2]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eb6:	787b      	ldrb	r3, [r7, #1]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ebc:	887a      	ldrh	r2, [r7, #2]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002ec2:	e003      	b.n	8002ecc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	041a      	lsls	r2, r3, #16
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e12b      	b.n	8003142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe fa3c 	bl	800137c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f001 fab2 	bl	80044a4 <HAL_RCC_GetPCLK1Freq>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4a81      	ldr	r2, [pc, #516]	; (800314c <HAL_I2C_Init+0x274>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d807      	bhi.n	8002f5c <HAL_I2C_Init+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a80      	ldr	r2, [pc, #512]	; (8003150 <HAL_I2C_Init+0x278>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e006      	b.n	8002f6a <HAL_I2C_Init+0x92>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a7d      	ldr	r2, [pc, #500]	; (8003154 <HAL_I2C_Init+0x27c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	bf94      	ite	ls
 8002f64:	2301      	movls	r3, #1
 8002f66:	2300      	movhi	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0e7      	b.n	8003142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a78      	ldr	r2, [pc, #480]	; (8003158 <HAL_I2C_Init+0x280>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9b      	lsrs	r3, r3, #18
 8002f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a6a      	ldr	r2, [pc, #424]	; (800314c <HAL_I2C_Init+0x274>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d802      	bhi.n	8002fac <HAL_I2C_Init+0xd4>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	e009      	b.n	8002fc0 <HAL_I2C_Init+0xe8>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	4a69      	ldr	r2, [pc, #420]	; (800315c <HAL_I2C_Init+0x284>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	495c      	ldr	r1, [pc, #368]	; (800314c <HAL_I2C_Init+0x274>)
 8002fdc:	428b      	cmp	r3, r1
 8002fde:	d819      	bhi.n	8003014 <HAL_I2C_Init+0x13c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1e59      	subs	r1, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fee:	1c59      	adds	r1, r3, #1
 8002ff0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_I2C_Init+0x138>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1e59      	subs	r1, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fbb1 f3f3 	udiv	r3, r1, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300e:	e051      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003010:	2304      	movs	r3, #4
 8003012:	e04f      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <HAL_I2C_Init+0x168>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e58      	subs	r0, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	440b      	add	r3, r1
 800302a:	fbb0 f3f3 	udiv	r3, r0, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e012      	b.n	8003066 <HAL_I2C_Init+0x18e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	0099      	lsls	r1, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Init+0x196>
 800306a:	2301      	movs	r3, #1
 800306c:	e022      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10e      	bne.n	8003094 <HAL_I2C_Init+0x1bc>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1e58      	subs	r0, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	440b      	add	r3, r1
 8003084:	fbb0 f3f3 	udiv	r3, r0, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003092:	e00f      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e58      	subs	r0, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	0099      	lsls	r1, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	6809      	ldr	r1, [r1, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6911      	ldr	r1, [r2, #16]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68d2      	ldr	r2, [r2, #12]
 80030ee:	4311      	orrs	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	000186a0 	.word	0x000186a0
 8003150:	001e847f 	.word	0x001e847f
 8003154:	003d08ff 	.word	0x003d08ff
 8003158:	431bde83 	.word	0x431bde83
 800315c:	10624dd3 	.word	0x10624dd3

08003160 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	461a      	mov	r2, r3
 800316c:	460b      	mov	r3, r1
 800316e:	817b      	strh	r3, [r7, #10]
 8003170:	4613      	mov	r3, r2
 8003172:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff f986 	bl	8002484 <HAL_GetTick>
 8003178:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b20      	cmp	r3, #32
 8003184:	f040 80e0 	bne.w	8003348 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2319      	movs	r3, #25
 800318e:	2201      	movs	r2, #1
 8003190:	4970      	ldr	r1, [pc, #448]	; (8003354 <HAL_I2C_Master_Transmit+0x1f4>)
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fa92 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800319e:	2302      	movs	r3, #2
 80031a0:	e0d3      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_I2C_Master_Transmit+0x50>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e0cc      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d007      	beq.n	80031d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2221      	movs	r2, #33	; 0x21
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2210      	movs	r2, #16
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	893a      	ldrh	r2, [r7, #8]
 8003206:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a50      	ldr	r2, [pc, #320]	; (8003358 <HAL_I2C_Master_Transmit+0x1f8>)
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003218:	8979      	ldrh	r1, [r7, #10]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	6a3a      	ldr	r2, [r7, #32]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f9ca 	bl	80035b8 <I2C_MasterRequestWrite>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e08d      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003244:	e066      	b.n	8003314 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	6a39      	ldr	r1, [r7, #32]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fb0c 	bl	8003868 <I2C_WaitOnTXEFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00d      	beq.n	8003272 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2b04      	cmp	r3, #4
 800325c:	d107      	bne.n	800326e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e06b      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d11b      	bne.n	80032e8 <HAL_I2C_Master_Transmit+0x188>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d017      	beq.n	80032e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	6a39      	ldr	r1, [r7, #32]
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fafc 	bl	80038ea <I2C_WaitOnBTFFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00d      	beq.n	8003314 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d107      	bne.n	8003310 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e01a      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d194      	bne.n	8003246 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	00100002 	.word	0x00100002
 8003358:	ffff0000 	.word	0xffff0000

0800335c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	460b      	mov	r3, r1
 800336a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800336c:	f7ff f88a 	bl	8002484 <HAL_GetTick>
 8003370:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003372:	2301      	movs	r3, #1
 8003374:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b20      	cmp	r3, #32
 8003380:	f040 8111 	bne.w	80035a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2319      	movs	r3, #25
 800338a:	2201      	movs	r2, #1
 800338c:	4988      	ldr	r1, [pc, #544]	; (80035b0 <HAL_I2C_IsDeviceReady+0x254>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f994 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
 800339c:	e104      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_I2C_IsDeviceReady+0x50>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e0fd      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d007      	beq.n	80033d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2224      	movs	r2, #36	; 0x24
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4a70      	ldr	r2, [pc, #448]	; (80035b4 <HAL_I2C_IsDeviceReady+0x258>)
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003404:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2200      	movs	r2, #0
 800340e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f952 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342c:	d103      	bne.n	8003436 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0b6      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003448:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800344a:	f7ff f81b 	bl	8002484 <HAL_GetTick>
 800344e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b02      	cmp	r3, #2
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003474:	bf0c      	ite	eq
 8003476:	2301      	moveq	r3, #1
 8003478:	2300      	movne	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800347e:	e025      	b.n	80034cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003480:	f7ff f800 	bl	8002484 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d302      	bcc.n	8003496 <HAL_I2C_IsDeviceReady+0x13a>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	22a0      	movs	r2, #160	; 0xa0
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2ba0      	cmp	r3, #160	; 0xa0
 80034d6:	d005      	beq.n	80034e4 <HAL_I2C_IsDeviceReady+0x188>
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <HAL_I2C_IsDeviceReady+0x188>
 80034de:	7dbb      	ldrb	r3, [r7, #22]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0cd      	beq.n	8003480 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d129      	bne.n	800354e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003508:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2319      	movs	r3, #25
 8003526:	2201      	movs	r2, #1
 8003528:	4921      	ldr	r1, [pc, #132]	; (80035b0 <HAL_I2C_IsDeviceReady+0x254>)
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f8c6 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e036      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e02c      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003566:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2319      	movs	r3, #25
 800356e:	2201      	movs	r2, #1
 8003570:	490f      	ldr	r1, [pc, #60]	; (80035b0 <HAL_I2C_IsDeviceReady+0x254>)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f8a2 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e012      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	3301      	adds	r3, #1
 8003586:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	429a      	cmp	r2, r3
 800358e:	f4ff af32 	bcc.w	80033f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	00100002 	.word	0x00100002
 80035b4:	ffff0000 	.word	0xffff0000

080035b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	460b      	mov	r3, r1
 80035c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d006      	beq.n	80035e2 <I2C_MasterRequestWrite+0x2a>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d003      	beq.n	80035e2 <I2C_MasterRequestWrite+0x2a>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035e0:	d108      	bne.n	80035f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	e00b      	b.n	800360c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	2b12      	cmp	r3, #18
 80035fa:	d107      	bne.n	800360c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800360a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f84f 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003632:	d103      	bne.n	800363c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800363a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e035      	b.n	80036ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003648:	d108      	bne.n	800365c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800364a:	897b      	ldrh	r3, [r7, #10]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003658:	611a      	str	r2, [r3, #16]
 800365a:	e01b      	b.n	8003694 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800365c:	897b      	ldrh	r3, [r7, #10]
 800365e:	11db      	asrs	r3, r3, #7
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f003 0306 	and.w	r3, r3, #6
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f063 030f 	orn	r3, r3, #15
 800366c:	b2da      	uxtb	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	490e      	ldr	r1, [pc, #56]	; (80036b4 <I2C_MasterRequestWrite+0xfc>)
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f875 	bl	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e010      	b.n	80036ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4907      	ldr	r1, [pc, #28]	; (80036b8 <I2C_MasterRequestWrite+0x100>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f865 	bl	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	00010008 	.word	0x00010008
 80036b8:	00010002 	.word	0x00010002

080036bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036cc:	e025      	b.n	800371a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d021      	beq.n	800371a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fe fed5 	bl	8002484 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d116      	bne.n	800371a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f043 0220 	orr.w	r2, r3, #32
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e023      	b.n	8003762 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10d      	bne.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	bf0c      	ite	eq
 8003736:	2301      	moveq	r3, #1
 8003738:	2300      	movne	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	e00c      	b.n	800375a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	43da      	mvns	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d0b6      	beq.n	80036ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003778:	e051      	b.n	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003788:	d123      	bne.n	80037d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003798:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0204 	orr.w	r2, r3, #4
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e046      	b.n	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d021      	beq.n	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037da:	f7fe fe53 	bl	8002484 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d302      	bcc.n	80037f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d116      	bne.n	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e020      	b.n	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d10c      	bne.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	43da      	mvns	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4013      	ands	r3, r2
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf14      	ite	ne
 800383a:	2301      	movne	r3, #1
 800383c:	2300      	moveq	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	e00b      	b.n	800385a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	43da      	mvns	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d18d      	bne.n	800377a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003874:	e02d      	b.n	80038d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f878 	bl	800396c <I2C_IsAcknowledgeFailed>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e02d      	b.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d021      	beq.n	80038d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388e:	f7fe fdf9 	bl	8002484 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d116      	bne.n	80038d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0220 	orr.w	r2, r3, #32
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e007      	b.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038dc:	2b80      	cmp	r3, #128	; 0x80
 80038de:	d1ca      	bne.n	8003876 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038f6:	e02d      	b.n	8003954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f837 	bl	800396c <I2C_IsAcknowledgeFailed>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e02d      	b.n	8003964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390e:	d021      	beq.n	8003954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003910:	f7fe fdb8 	bl	8002484 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	429a      	cmp	r2, r3
 800391e:	d302      	bcc.n	8003926 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d116      	bne.n	8003954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f043 0220 	orr.w	r2, r3, #32
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e007      	b.n	8003964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d1ca      	bne.n	80038f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003982:	d11b      	bne.n	80039bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800398c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e31d      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039da:	4b94      	ldr	r3, [pc, #592]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039e4:	4b91      	ldr	r3, [pc, #580]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ec:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d07b      	beq.n	8003af2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d006      	beq.n	8003a0e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d10f      	bne.n	8003a26 <HAL_RCC_OscConfig+0x5e>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d10b      	bne.n	8003a26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0e:	4b87      	ldr	r3, [pc, #540]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d06a      	beq.n	8003af0 <HAL_RCC_OscConfig+0x128>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d166      	bne.n	8003af0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e2f7      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d106      	bne.n	8003a3c <HAL_RCC_OscConfig+0x74>
 8003a2e:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a7e      	ldr	r2, [pc, #504]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e02d      	b.n	8003a98 <HAL_RCC_OscConfig+0xd0>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCC_OscConfig+0x96>
 8003a44:	4b79      	ldr	r3, [pc, #484]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a78      	ldr	r2, [pc, #480]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b76      	ldr	r3, [pc, #472]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a75      	ldr	r2, [pc, #468]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	e01c      	b.n	8003a98 <HAL_RCC_OscConfig+0xd0>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0xb8>
 8003a66:	4b71      	ldr	r3, [pc, #452]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a70      	ldr	r2, [pc, #448]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b6e      	ldr	r3, [pc, #440]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a6d      	ldr	r2, [pc, #436]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCC_OscConfig+0xd0>
 8003a80:	4b6a      	ldr	r3, [pc, #424]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a69      	ldr	r2, [pc, #420]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4b67      	ldr	r3, [pc, #412]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a66      	ldr	r2, [pc, #408]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d013      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fcf0 	bl	8002484 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7fe fcec 	bl	8002484 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	; 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e2ad      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aba:	4b5c      	ldr	r3, [pc, #368]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0xe0>
 8003ac6:	e014      	b.n	8003af2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fe fcdc 	bl	8002484 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fe fcd8 	bl	8002484 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e299      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ae2:	4b52      	ldr	r3, [pc, #328]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x108>
 8003aee:	e000      	b.n	8003af2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d05a      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d119      	bne.n	8003b3e <HAL_RCC_OscConfig+0x176>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d116      	bne.n	8003b3e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b10:	4b46      	ldr	r3, [pc, #280]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_OscConfig+0x160>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e276      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b28:	4b40      	ldr	r3, [pc, #256]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	493d      	ldr	r1, [pc, #244]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3c:	e03a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d020      	beq.n	8003b88 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b46:	4b3a      	ldr	r3, [pc, #232]	; (8003c30 <HAL_RCC_OscConfig+0x268>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fc9a 	bl	8002484 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b54:	f7fe fc96 	bl	8002484 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e257      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b66:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b72:	4b2e      	ldr	r3, [pc, #184]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	492a      	ldr	r1, [pc, #168]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]
 8003b86:	e015      	b.n	8003bb4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b88:	4b29      	ldr	r3, [pc, #164]	; (8003c30 <HAL_RCC_OscConfig+0x268>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7fe fc79 	bl	8002484 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b96:	f7fe fc75 	bl	8002484 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e236      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ba8:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f0      	bne.n	8003b96 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80b8 	beq.w	8003d32 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d170      	bne.n	8003caa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bc8:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_OscConfig+0x218>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e21a      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d921      	bls.n	8003c34 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fc7d 	bl	80044f4 <RCC_SetFlashLatencyFromMSIRange>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e208      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4906      	ldr	r1, [pc, #24]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	061b      	lsls	r3, r3, #24
 8003c24:	4901      	ldr	r1, [pc, #4]	; (8003c2c <HAL_RCC_OscConfig+0x264>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
 8003c2a:	e020      	b.n	8003c6e <HAL_RCC_OscConfig+0x2a6>
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c34:	4b99      	ldr	r3, [pc, #612]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4996      	ldr	r1, [pc, #600]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c46:	4b95      	ldr	r3, [pc, #596]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	061b      	lsls	r3, r3, #24
 8003c54:	4991      	ldr	r1, [pc, #580]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fc48 	bl	80044f4 <RCC_SetFlashLatencyFromMSIRange>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e1d3      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	0b5b      	lsrs	r3, r3, #13
 8003c74:	3301      	adds	r3, #1
 8003c76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c7e:	4a87      	ldr	r2, [pc, #540]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003c80:	6892      	ldr	r2, [r2, #8]
 8003c82:	0912      	lsrs	r2, r2, #4
 8003c84:	f002 020f 	and.w	r2, r2, #15
 8003c88:	4985      	ldr	r1, [pc, #532]	; (8003ea0 <HAL_RCC_OscConfig+0x4d8>)
 8003c8a:	5c8a      	ldrb	r2, [r1, r2]
 8003c8c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c8e:	4a85      	ldr	r2, [pc, #532]	; (8003ea4 <HAL_RCC_OscConfig+0x4dc>)
 8003c90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c92:	4b85      	ldr	r3, [pc, #532]	; (8003ea8 <HAL_RCC_OscConfig+0x4e0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fba8 	bl	80023ec <HAL_InitTick>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d045      	beq.n	8003d32 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	e1b5      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d029      	beq.n	8003d06 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cb2:	4b7e      	ldr	r3, [pc, #504]	; (8003eac <HAL_RCC_OscConfig+0x4e4>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fe fbe4 	bl	8002484 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cc0:	f7fe fbe0 	bl	8002484 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e1a1      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cd2:	4b72      	ldr	r3, [pc, #456]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cde:	4b6f      	ldr	r3, [pc, #444]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	496c      	ldr	r1, [pc, #432]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf0:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	061b      	lsls	r3, r3, #24
 8003cfe:	4967      	ldr	r1, [pc, #412]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
 8003d04:	e015      	b.n	8003d32 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d06:	4b69      	ldr	r3, [pc, #420]	; (8003eac <HAL_RCC_OscConfig+0x4e4>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fbba 	bl	8002484 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d14:	f7fe fbb6 	bl	8002484 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e177      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d26:	4b5d      	ldr	r3, [pc, #372]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d030      	beq.n	8003da0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d46:	4b5a      	ldr	r3, [pc, #360]	; (8003eb0 <HAL_RCC_OscConfig+0x4e8>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4c:	f7fe fb9a 	bl	8002484 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d54:	f7fe fb96 	bl	8002484 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e157      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d66:	4b4d      	ldr	r3, [pc, #308]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x38c>
 8003d72:	e015      	b.n	8003da0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d74:	4b4e      	ldr	r3, [pc, #312]	; (8003eb0 <HAL_RCC_OscConfig+0x4e8>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe fb83 	bl	8002484 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d82:	f7fe fb7f 	bl	8002484 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e140      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d94:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f0      	bne.n	8003d82 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80b5 	beq.w	8003f18 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dae:	2300      	movs	r3, #0
 8003db0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db2:	4b3a      	ldr	r3, [pc, #232]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	4a36      	ldr	r2, [pc, #216]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	6253      	str	r3, [r2, #36]	; 0x24
 8003dca:	4b34      	ldr	r3, [pc, #208]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dda:	4b36      	ldr	r3, [pc, #216]	; (8003eb4 <HAL_RCC_OscConfig+0x4ec>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d118      	bne.n	8003e18 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de6:	4b33      	ldr	r3, [pc, #204]	; (8003eb4 <HAL_RCC_OscConfig+0x4ec>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a32      	ldr	r2, [pc, #200]	; (8003eb4 <HAL_RCC_OscConfig+0x4ec>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df2:	f7fe fb47 	bl	8002484 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7fe fb43 	bl	8002484 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b64      	cmp	r3, #100	; 0x64
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e104      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0c:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <HAL_RCC_OscConfig+0x4ec>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCC_OscConfig+0x466>
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e24:	4a1d      	ldr	r2, [pc, #116]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2a:	6353      	str	r3, [r2, #52]	; 0x34
 8003e2c:	e02d      	b.n	8003e8a <HAL_RCC_OscConfig+0x4c2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x488>
 8003e36:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e40:	6353      	str	r3, [r2, #52]	; 0x34
 8003e42:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e46:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e4c:	6353      	str	r3, [r2, #52]	; 0x34
 8003e4e:	e01c      	b.n	8003e8a <HAL_RCC_OscConfig+0x4c2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d10c      	bne.n	8003e72 <HAL_RCC_OscConfig+0x4aa>
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5c:	4a0f      	ldr	r2, [pc, #60]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e62:	6353      	str	r3, [r2, #52]	; 0x34
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	4a0c      	ldr	r2, [pc, #48]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6e:	6353      	str	r3, [r2, #52]	; 0x34
 8003e70:	e00b      	b.n	8003e8a <HAL_RCC_OscConfig+0x4c2>
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	4a09      	ldr	r2, [pc, #36]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e7c:	6353      	str	r3, [r2, #52]	; 0x34
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e82:	4a06      	ldr	r2, [pc, #24]	; (8003e9c <HAL_RCC_OscConfig+0x4d4>)
 8003e84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e88:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d024      	beq.n	8003edc <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e92:	f7fe faf7 	bl	8002484 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e98:	e019      	b.n	8003ece <HAL_RCC_OscConfig+0x506>
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	08009274 	.word	0x08009274
 8003ea4:	20000004 	.word	0x20000004
 8003ea8:	20000008 	.word	0x20000008
 8003eac:	42470020 	.word	0x42470020
 8003eb0:	42470680 	.word	0x42470680
 8003eb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb8:	f7fe fae4 	bl	8002484 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e0a3      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ece:	4b54      	ldr	r3, [pc, #336]	; (8004020 <HAL_RCC_OscConfig+0x658>)
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0ee      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x4f0>
 8003eda:	e014      	b.n	8003f06 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003edc:	f7fe fad2 	bl	8002484 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fe face 	bl	8002484 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e08d      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003efa:	4b49      	ldr	r3, [pc, #292]	; (8004020 <HAL_RCC_OscConfig+0x658>)
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ee      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0c:	4b44      	ldr	r3, [pc, #272]	; (8004020 <HAL_RCC_OscConfig+0x658>)
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	4a43      	ldr	r2, [pc, #268]	; (8004020 <HAL_RCC_OscConfig+0x658>)
 8003f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d079      	beq.n	8004014 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b0c      	cmp	r3, #12
 8003f24:	d056      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d13b      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b3d      	ldr	r3, [pc, #244]	; (8004024 <HAL_RCC_OscConfig+0x65c>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fe faa6 	bl	8002484 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fe faa2 	bl	8002484 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e063      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f4e:	4b34      	ldr	r3, [pc, #208]	; (8004020 <HAL_RCC_OscConfig+0x658>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f5a:	4b31      	ldr	r3, [pc, #196]	; (8004020 <HAL_RCC_OscConfig+0x658>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	4319      	orrs	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	430b      	orrs	r3, r1
 8003f72:	492b      	ldr	r1, [pc, #172]	; (8004020 <HAL_RCC_OscConfig+0x658>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f78:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <HAL_RCC_OscConfig+0x65c>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7e:	f7fe fa81 	bl	8002484 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f86:	f7fe fa7d 	bl	8002484 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e03e      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f98:	4b21      	ldr	r3, [pc, #132]	; (8004020 <HAL_RCC_OscConfig+0x658>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x5be>
 8003fa4:	e036      	b.n	8004014 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa6:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <HAL_RCC_OscConfig+0x65c>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fe fa6a 	bl	8002484 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fe fa66 	bl	8002484 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e027      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fc6:	4b16      	ldr	r3, [pc, #88]	; (8004020 <HAL_RCC_OscConfig+0x658>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5ec>
 8003fd2:	e01f      	b.n	8004014 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e01a      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <HAL_RCC_OscConfig+0x658>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d10d      	bne.n	8004010 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d106      	bne.n	8004010 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800
 8004024:	42470060 	.word	0x42470060

08004028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e11a      	b.n	8004272 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	4b8f      	ldr	r3, [pc, #572]	; (800427c <HAL_RCC_ClockConfig+0x254>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d919      	bls.n	800407e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d105      	bne.n	800405c <HAL_RCC_ClockConfig+0x34>
 8004050:	4b8a      	ldr	r3, [pc, #552]	; (800427c <HAL_RCC_ClockConfig+0x254>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a89      	ldr	r2, [pc, #548]	; (800427c <HAL_RCC_ClockConfig+0x254>)
 8004056:	f043 0304 	orr.w	r3, r3, #4
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	4b87      	ldr	r3, [pc, #540]	; (800427c <HAL_RCC_ClockConfig+0x254>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f023 0201 	bic.w	r2, r3, #1
 8004064:	4985      	ldr	r1, [pc, #532]	; (800427c <HAL_RCC_ClockConfig+0x254>)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	4313      	orrs	r3, r2
 800406a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406c:	4b83      	ldr	r3, [pc, #524]	; (800427c <HAL_RCC_ClockConfig+0x254>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d001      	beq.n	800407e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0f9      	b.n	8004272 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408a:	4b7d      	ldr	r3, [pc, #500]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	497a      	ldr	r1, [pc, #488]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 8004098:	4313      	orrs	r3, r2
 800409a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 808e 	beq.w	80041c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040b2:	4b73      	ldr	r3, [pc, #460]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d121      	bne.n	8004102 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0d7      	b.n	8004272 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040ca:	4b6d      	ldr	r3, [pc, #436]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d115      	bne.n	8004102 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e0cb      	b.n	8004272 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040e2:	4b67      	ldr	r3, [pc, #412]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0bf      	b.n	8004272 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040f2:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0b7      	b.n	8004272 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004102:	4b5f      	ldr	r3, [pc, #380]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f023 0203 	bic.w	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	495c      	ldr	r1, [pc, #368]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 8004110:	4313      	orrs	r3, r2
 8004112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004114:	f7fe f9b6 	bl	8002484 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d112      	bne.n	8004148 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fe f9ae 	bl	8002484 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e09b      	b.n	8004272 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800413a:	4b51      	ldr	r3, [pc, #324]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	2b08      	cmp	r3, #8
 8004144:	d1ee      	bne.n	8004124 <HAL_RCC_ClockConfig+0xfc>
 8004146:	e03e      	b.n	80041c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d112      	bne.n	8004176 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004150:	e00a      	b.n	8004168 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004152:	f7fe f997 	bl	8002484 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004160:	4293      	cmp	r3, r2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e084      	b.n	8004272 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004168:	4b45      	ldr	r3, [pc, #276]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b0c      	cmp	r3, #12
 8004172:	d1ee      	bne.n	8004152 <HAL_RCC_ClockConfig+0x12a>
 8004174:	e027      	b.n	80041c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d11d      	bne.n	80041ba <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004180:	f7fe f980 	bl	8002484 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e06d      	b.n	8004272 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004196:	4b3a      	ldr	r3, [pc, #232]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d1ee      	bne.n	8004180 <HAL_RCC_ClockConfig+0x158>
 80041a2:	e010      	b.n	80041c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7fe f96e 	bl	8002484 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e05b      	b.n	8004272 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80041ba:	4b31      	ldr	r3, [pc, #196]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1ee      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041c6:	4b2d      	ldr	r3, [pc, #180]	; (800427c <HAL_RCC_ClockConfig+0x254>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d219      	bcs.n	8004208 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x1be>
 80041da:	4b28      	ldr	r3, [pc, #160]	; (800427c <HAL_RCC_ClockConfig+0x254>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a27      	ldr	r2, [pc, #156]	; (800427c <HAL_RCC_ClockConfig+0x254>)
 80041e0:	f043 0304 	orr.w	r3, r3, #4
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_RCC_ClockConfig+0x254>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 0201 	bic.w	r2, r3, #1
 80041ee:	4923      	ldr	r1, [pc, #140]	; (800427c <HAL_RCC_ClockConfig+0x254>)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b21      	ldr	r3, [pc, #132]	; (800427c <HAL_RCC_ClockConfig+0x254>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e034      	b.n	8004272 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4917      	ldr	r1, [pc, #92]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004232:	4b13      	ldr	r3, [pc, #76]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	490f      	ldr	r1, [pc, #60]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004246:	f000 f823 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800424a:	4602      	mov	r2, r0
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <HAL_RCC_ClockConfig+0x258>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	490b      	ldr	r1, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 8004260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <HAL_RCC_ClockConfig+0x264>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe f8c0 	bl	80023ec <HAL_InitTick>
 800426c:	4603      	mov	r3, r0
 800426e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004270:	7afb      	ldrb	r3, [r7, #11]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40023c00 	.word	0x40023c00
 8004280:	40023800 	.word	0x40023800
 8004284:	08009274 	.word	0x08009274
 8004288:	20000004 	.word	0x20000004
 800428c:	20000008 	.word	0x20000008

08004290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004294:	b092      	sub	sp, #72	; 0x48
 8004296:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004298:	4b79      	ldr	r3, [pc, #484]	; (8004480 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800429e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b0c      	cmp	r3, #12
 80042a6:	d00d      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x34>
 80042a8:	2b0c      	cmp	r3, #12
 80042aa:	f200 80d5 	bhi.w	8004458 <HAL_RCC_GetSysClockFreq+0x1c8>
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d002      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x28>
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d003      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x2e>
 80042b6:	e0cf      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b72      	ldr	r3, [pc, #456]	; (8004484 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80042ba:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80042bc:	e0da      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042be:	4b72      	ldr	r3, [pc, #456]	; (8004488 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80042c0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80042c2:	e0d7      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80042c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c6:	0c9b      	lsrs	r3, r3, #18
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	4b6f      	ldr	r3, [pc, #444]	; (800448c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80042ce:	5c9b      	ldrb	r3, [r3, r2]
 80042d0:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80042d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d4:	0d9b      	lsrs	r3, r3, #22
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	3301      	adds	r3, #1
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042de:	4b68      	ldr	r3, [pc, #416]	; (8004480 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d05d      	beq.n	80043a6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	2200      	movs	r2, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	4611      	mov	r1, r2
 80042f2:	4604      	mov	r4, r0
 80042f4:	460d      	mov	r5, r1
 80042f6:	4622      	mov	r2, r4
 80042f8:	462b      	mov	r3, r5
 80042fa:	f04f 0000 	mov.w	r0, #0
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	0159      	lsls	r1, r3, #5
 8004304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004308:	0150      	lsls	r0, r2, #5
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4621      	mov	r1, r4
 8004310:	1a51      	subs	r1, r2, r1
 8004312:	6139      	str	r1, [r7, #16]
 8004314:	4629      	mov	r1, r5
 8004316:	eb63 0301 	sbc.w	r3, r3, r1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004328:	4659      	mov	r1, fp
 800432a:	018b      	lsls	r3, r1, #6
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004332:	4651      	mov	r1, sl
 8004334:	018a      	lsls	r2, r1, #6
 8004336:	46d4      	mov	ip, sl
 8004338:	ebb2 080c 	subs.w	r8, r2, ip
 800433c:	4659      	mov	r1, fp
 800433e:	eb63 0901 	sbc.w	r9, r3, r1
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800434e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004356:	4690      	mov	r8, r2
 8004358:	4699      	mov	r9, r3
 800435a:	4623      	mov	r3, r4
 800435c:	eb18 0303 	adds.w	r3, r8, r3
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	462b      	mov	r3, r5
 8004364:	eb49 0303 	adc.w	r3, r9, r3
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004376:	4629      	mov	r1, r5
 8004378:	024b      	lsls	r3, r1, #9
 800437a:	4620      	mov	r0, r4
 800437c:	4629      	mov	r1, r5
 800437e:	4604      	mov	r4, r0
 8004380:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004384:	4601      	mov	r1, r0
 8004386:	024a      	lsls	r2, r1, #9
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438e:	2200      	movs	r2, #0
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
 8004392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004398:	f7fc fbde 	bl	8000b58 <__aeabi_uldivmod>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4613      	mov	r3, r2
 80043a2:	647b      	str	r3, [r7, #68]	; 0x44
 80043a4:	e055      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	2200      	movs	r2, #0
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	627a      	str	r2, [r7, #36]	; 0x24
 80043ae:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043b2:	4642      	mov	r2, r8
 80043b4:	464b      	mov	r3, r9
 80043b6:	f04f 0000 	mov.w	r0, #0
 80043ba:	f04f 0100 	mov.w	r1, #0
 80043be:	0159      	lsls	r1, r3, #5
 80043c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c4:	0150      	lsls	r0, r2, #5
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	46c4      	mov	ip, r8
 80043cc:	ebb2 0a0c 	subs.w	sl, r2, ip
 80043d0:	4640      	mov	r0, r8
 80043d2:	4649      	mov	r1, r9
 80043d4:	468c      	mov	ip, r1
 80043d6:	eb63 0b0c 	sbc.w	fp, r3, ip
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043e6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043ea:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043ee:	ebb2 040a 	subs.w	r4, r2, sl
 80043f2:	eb63 050b 	sbc.w	r5, r3, fp
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	00eb      	lsls	r3, r5, #3
 8004400:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004404:	00e2      	lsls	r2, r4, #3
 8004406:	4614      	mov	r4, r2
 8004408:	461d      	mov	r5, r3
 800440a:	4603      	mov	r3, r0
 800440c:	18e3      	adds	r3, r4, r3
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	460b      	mov	r3, r1
 8004412:	eb45 0303 	adc.w	r3, r5, r3
 8004416:	607b      	str	r3, [r7, #4]
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004424:	4629      	mov	r1, r5
 8004426:	028b      	lsls	r3, r1, #10
 8004428:	4620      	mov	r0, r4
 800442a:	4629      	mov	r1, r5
 800442c:	4604      	mov	r4, r0
 800442e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004432:	4601      	mov	r1, r0
 8004434:	028a      	lsls	r2, r1, #10
 8004436:	4610      	mov	r0, r2
 8004438:	4619      	mov	r1, r3
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	2200      	movs	r2, #0
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	61fa      	str	r2, [r7, #28]
 8004442:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004446:	f7fc fb87 	bl	8000b58 <__aeabi_uldivmod>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4613      	mov	r3, r2
 8004450:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004454:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004456:	e00d      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	0b5b      	lsrs	r3, r3, #13
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	3301      	adds	r3, #1
 8004468:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004472:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004476:	4618      	mov	r0, r3
 8004478:	3748      	adds	r7, #72	; 0x48
 800447a:	46bd      	mov	sp, r7
 800447c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	00f42400 	.word	0x00f42400
 8004488:	007a1200 	.word	0x007a1200
 800448c:	08009268 	.word	0x08009268

08004490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004494:	4b02      	ldr	r3, [pc, #8]	; (80044a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr
 80044a0:	20000004 	.word	0x20000004

080044a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044a8:	f7ff fff2 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	4903      	ldr	r1, [pc, #12]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40023800 	.word	0x40023800
 80044c8:	08009284 	.word	0x08009284

080044cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044d0:	f7ff ffde 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	0adb      	lsrs	r3, r3, #11
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	4903      	ldr	r1, [pc, #12]	; (80044f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e2:	5ccb      	ldrb	r3, [r1, r3]
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40023800 	.word	0x40023800
 80044f0:	08009284 	.word	0x08009284

080044f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004500:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d12c      	bne.n	8004566 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800450c:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e016      	b.n	8004552 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004524:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800452a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452e:	6253      	str	r3, [r2, #36]	; 0x24
 8004530:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800453c:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004544:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004546:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800454c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004550:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004558:	d105      	bne.n	8004566 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004560:	d101      	bne.n	8004566 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004562:	2301      	movs	r3, #1
 8004564:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800456c:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a0f      	ldr	r2, [pc, #60]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f023 0201 	bic.w	r2, r3, #1
 8004580:	490b      	ldr	r1, [pc, #44]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004588:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	429a      	cmp	r2, r3
 8004594:	d001      	beq.n	800459a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40007000 	.word	0x40007000
 80045b0:	40023c00 	.word	0x40023c00

080045b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e031      	b.n	800462a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fd fd96 	bl	800210c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f000 f92c 	bl	8004850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	d001      	beq.n	800464c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e032      	b.n	80046b2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465c:	d00e      	beq.n	800467c <HAL_TIM_Base_Start+0x48>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a16      	ldr	r2, [pc, #88]	; (80046bc <HAL_TIM_Base_Start+0x88>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d009      	beq.n	800467c <HAL_TIM_Base_Start+0x48>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a14      	ldr	r2, [pc, #80]	; (80046c0 <HAL_TIM_Base_Start+0x8c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <HAL_TIM_Base_Start+0x48>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <HAL_TIM_Base_Start+0x90>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d111      	bne.n	80046a0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b06      	cmp	r3, #6
 800468c:	d010      	beq.n	80046b0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0201 	orr.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469e:	e007      	b.n	80046b0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40010800 	.word	0x40010800

080046c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_TIM_ConfigClockSource+0x18>
 80046dc:	2302      	movs	r3, #2
 80046de:	e0b3      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x180>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004706:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004718:	d03e      	beq.n	8004798 <HAL_TIM_ConfigClockSource+0xd0>
 800471a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471e:	f200 8087 	bhi.w	8004830 <HAL_TIM_ConfigClockSource+0x168>
 8004722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004726:	f000 8085 	beq.w	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 800472a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472e:	d87f      	bhi.n	8004830 <HAL_TIM_ConfigClockSource+0x168>
 8004730:	2b70      	cmp	r3, #112	; 0x70
 8004732:	d01a      	beq.n	800476a <HAL_TIM_ConfigClockSource+0xa2>
 8004734:	2b70      	cmp	r3, #112	; 0x70
 8004736:	d87b      	bhi.n	8004830 <HAL_TIM_ConfigClockSource+0x168>
 8004738:	2b60      	cmp	r3, #96	; 0x60
 800473a:	d050      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x116>
 800473c:	2b60      	cmp	r3, #96	; 0x60
 800473e:	d877      	bhi.n	8004830 <HAL_TIM_ConfigClockSource+0x168>
 8004740:	2b50      	cmp	r3, #80	; 0x50
 8004742:	d03c      	beq.n	80047be <HAL_TIM_ConfigClockSource+0xf6>
 8004744:	2b50      	cmp	r3, #80	; 0x50
 8004746:	d873      	bhi.n	8004830 <HAL_TIM_ConfigClockSource+0x168>
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	d058      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x136>
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d86f      	bhi.n	8004830 <HAL_TIM_ConfigClockSource+0x168>
 8004750:	2b30      	cmp	r3, #48	; 0x30
 8004752:	d064      	beq.n	800481e <HAL_TIM_ConfigClockSource+0x156>
 8004754:	2b30      	cmp	r3, #48	; 0x30
 8004756:	d86b      	bhi.n	8004830 <HAL_TIM_ConfigClockSource+0x168>
 8004758:	2b20      	cmp	r3, #32
 800475a:	d060      	beq.n	800481e <HAL_TIM_ConfigClockSource+0x156>
 800475c:	2b20      	cmp	r3, #32
 800475e:	d867      	bhi.n	8004830 <HAL_TIM_ConfigClockSource+0x168>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d05c      	beq.n	800481e <HAL_TIM_ConfigClockSource+0x156>
 8004764:	2b10      	cmp	r3, #16
 8004766:	d05a      	beq.n	800481e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004768:	e062      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6899      	ldr	r1, [r3, #8]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f000 f950 	bl	8004a1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800478c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	609a      	str	r2, [r3, #8]
      break;
 8004796:	e04e      	b.n	8004836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	6899      	ldr	r1, [r3, #8]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f000 f939 	bl	8004a1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ba:	609a      	str	r2, [r3, #8]
      break;
 80047bc:	e03b      	b.n	8004836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6859      	ldr	r1, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f000 f8b0 	bl	8004930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2150      	movs	r1, #80	; 0x50
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f907 	bl	80049ea <TIM_ITRx_SetConfig>
      break;
 80047dc:	e02b      	b.n	8004836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 f8ce 	bl	800498c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2160      	movs	r1, #96	; 0x60
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f8f7 	bl	80049ea <TIM_ITRx_SetConfig>
      break;
 80047fc:	e01b      	b.n	8004836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6859      	ldr	r1, [r3, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	461a      	mov	r2, r3
 800480c:	f000 f890 	bl	8004930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2140      	movs	r1, #64	; 0x40
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f8e7 	bl	80049ea <TIM_ITRx_SetConfig>
      break;
 800481c:	e00b      	b.n	8004836 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4619      	mov	r1, r3
 8004828:	4610      	mov	r0, r2
 800482a:	f000 f8de 	bl	80049ea <TIM_ITRx_SetConfig>
        break;
 800482e:	e002      	b.n	8004836 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004834:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004866:	d00f      	beq.n	8004888 <TIM_Base_SetConfig+0x38>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a2b      	ldr	r2, [pc, #172]	; (8004918 <TIM_Base_SetConfig+0xc8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00b      	beq.n	8004888 <TIM_Base_SetConfig+0x38>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a2a      	ldr	r2, [pc, #168]	; (800491c <TIM_Base_SetConfig+0xcc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d007      	beq.n	8004888 <TIM_Base_SetConfig+0x38>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a29      	ldr	r2, [pc, #164]	; (8004920 <TIM_Base_SetConfig+0xd0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <TIM_Base_SetConfig+0x38>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a28      	ldr	r2, [pc, #160]	; (8004924 <TIM_Base_SetConfig+0xd4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d108      	bne.n	800489a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a0:	d017      	beq.n	80048d2 <TIM_Base_SetConfig+0x82>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <TIM_Base_SetConfig+0xc8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d013      	beq.n	80048d2 <TIM_Base_SetConfig+0x82>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a1b      	ldr	r2, [pc, #108]	; (800491c <TIM_Base_SetConfig+0xcc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00f      	beq.n	80048d2 <TIM_Base_SetConfig+0x82>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a1a      	ldr	r2, [pc, #104]	; (8004920 <TIM_Base_SetConfig+0xd0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00b      	beq.n	80048d2 <TIM_Base_SetConfig+0x82>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a19      	ldr	r2, [pc, #100]	; (8004924 <TIM_Base_SetConfig+0xd4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d007      	beq.n	80048d2 <TIM_Base_SetConfig+0x82>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a18      	ldr	r2, [pc, #96]	; (8004928 <TIM_Base_SetConfig+0xd8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d003      	beq.n	80048d2 <TIM_Base_SetConfig+0x82>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a17      	ldr	r2, [pc, #92]	; (800492c <TIM_Base_SetConfig+0xdc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d108      	bne.n	80048e4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	615a      	str	r2, [r3, #20]
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40010800 	.word	0x40010800
 8004928:	40010c00 	.word	0x40010c00
 800492c:	40011000 	.word	0x40011000

08004930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800495a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f023 030a 	bic.w	r3, r3, #10
 800496c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	f023 0210 	bic.w	r2, r3, #16
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	031b      	lsls	r3, r3, #12
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	621a      	str	r2, [r3, #32]
}
 80049e0:	bf00      	nop
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr

080049ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b085      	sub	sp, #20
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f043 0307 	orr.w	r3, r3, #7
 8004a0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	609a      	str	r2, [r3, #8]
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr

08004a1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b087      	sub	sp, #28
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	021a      	lsls	r2, r3, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	431a      	orrs	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	609a      	str	r2, [r3, #8]
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e046      	b.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab6:	d00e      	beq.n	8004ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d009      	beq.n	8004ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a12      	ldr	r2, [pc, #72]	; (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d10c      	bne.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800
 8004b14:	40010800 	.word	0x40010800

08004b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e03f      	b.n	8004baa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fd fb6c 	bl	800221c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	; 0x24
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fe21 	bl	80057a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b08a      	sub	sp, #40	; 0x28
 8004bb6:	af02      	add	r7, sp, #8
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d17c      	bne.n	8004ccc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_UART_Transmit+0x2c>
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e075      	b.n	8004cce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_UART_Transmit+0x3e>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e06e      	b.n	8004cce <HAL_UART_Transmit+0x11c>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2221      	movs	r2, #33	; 0x21
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c06:	f7fd fc3d 	bl	8002484 <HAL_GetTick>
 8004c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	88fa      	ldrh	r2, [r7, #6]
 8004c10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	88fa      	ldrh	r2, [r7, #6]
 8004c16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c20:	d108      	bne.n	8004c34 <HAL_UART_Transmit+0x82>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d104      	bne.n	8004c34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	e003      	b.n	8004c3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c44:	e02a      	b.n	8004c9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2180      	movs	r1, #128	; 0x80
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fb93 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e036      	b.n	8004cce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10b      	bne.n	8004c7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	3302      	adds	r3, #2
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	e007      	b.n	8004c8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	781a      	ldrb	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1cf      	bne.n	8004c46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2200      	movs	r2, #0
 8004cae:	2140      	movs	r1, #64	; 0x40
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 fb63 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e006      	b.n	8004cce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e000      	b.n	8004cce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ccc:	2302      	movs	r3, #2
  }
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b08a      	sub	sp, #40	; 0x28
 8004cda:	af02      	add	r7, sp, #8
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	f040 808c 	bne.w	8004e10 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_UART_Receive+0x2e>
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e084      	b.n	8004e12 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_UART_Receive+0x40>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e07d      	b.n	8004e12 <HAL_UART_Receive+0x13c>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2222      	movs	r2, #34	; 0x22
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d32:	f7fd fba7 	bl	8002484 <HAL_GetTick>
 8004d36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	88fa      	ldrh	r2, [r7, #6]
 8004d3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	88fa      	ldrh	r2, [r7, #6]
 8004d42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4c:	d108      	bne.n	8004d60 <HAL_UART_Receive+0x8a>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d104      	bne.n	8004d60 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	e003      	b.n	8004d68 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d70:	e043      	b.n	8004dfa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2120      	movs	r1, #32
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fafd 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e042      	b.n	8004e12 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10c      	bne.n	8004dac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	3302      	adds	r3, #2
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e01f      	b.n	8004dec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db4:	d007      	beq.n	8004dc6 <HAL_UART_Receive+0xf0>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <HAL_UART_Receive+0xfe>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e008      	b.n	8004de6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	3301      	adds	r3, #1
 8004dea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1b6      	bne.n	8004d72 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e000      	b.n	8004e12 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004e10:	2302      	movs	r3, #2
  }
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3720      	adds	r7, #32
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	4613      	mov	r3, r2
 8004e26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d11d      	bne.n	8004e70 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_UART_Receive_DMA+0x26>
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e016      	b.n	8004e72 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Receive_DMA+0x38>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e00f      	b.n	8004e72 <HAL_UART_Receive_DMA+0x58>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	461a      	mov	r2, r3
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fad2 	bl	8005410 <UART_Start_Receive_DMA>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	e000      	b.n	8004e72 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e70:	2302      	movs	r3, #2
  }
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	; 0x28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10d      	bne.n	8004ece <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_UART_IRQHandler+0x52>
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fbc2 	bl	8005650 <UART_Receive_IT>
      return;
 8004ecc:	e17b      	b.n	80051c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 80b1 	beq.w	8005038 <HAL_UART_IRQHandler+0x1bc>
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d105      	bne.n	8004eec <HAL_UART_IRQHandler+0x70>
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 80a6 	beq.w	8005038 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_UART_IRQHandler+0x90>
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	f043 0201 	orr.w	r2, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_UART_IRQHandler+0xb0>
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	f043 0202 	orr.w	r2, r3, #2
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_UART_IRQHandler+0xd0>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	f043 0204 	orr.w	r2, r3, #4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00f      	beq.n	8004f76 <HAL_UART_IRQHandler+0xfa>
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <HAL_UART_IRQHandler+0xee>
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f043 0208 	orr.w	r2, r3, #8
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 811e 	beq.w	80051bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <HAL_UART_IRQHandler+0x11e>
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fb5b 	bl	8005650 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2301      	moveq	r3, #1
 8004faa:	2300      	movne	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x146>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d031      	beq.n	8005026 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fa9d 	bl	8005502 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	d123      	bne.n	800501e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d013      	beq.n	8005016 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	4a76      	ldr	r2, [pc, #472]	; (80051cc <HAL_UART_IRQHandler+0x350>)
 8004ff4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fd fc8d 	bl	800291a <HAL_DMA_Abort_IT>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d016      	beq.n	8005034 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005010:	4610      	mov	r0, r2
 8005012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005014:	e00e      	b.n	8005034 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8ec 	bl	80051f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501c:	e00a      	b.n	8005034 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f8e8 	bl	80051f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	e006      	b.n	8005034 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f8e4 	bl	80051f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005032:	e0c3      	b.n	80051bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005034:	bf00      	nop
    return;
 8005036:	e0c1      	b.n	80051bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	2b01      	cmp	r3, #1
 800503e:	f040 80a1 	bne.w	8005184 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 809b 	beq.w	8005184 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8095 	beq.w	8005184 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d14e      	bne.n	800511c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005088:	8a3b      	ldrh	r3, [r7, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 8098 	beq.w	80051c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005094:	8a3a      	ldrh	r2, [r7, #16]
 8005096:	429a      	cmp	r2, r3
 8005098:	f080 8092 	bcs.w	80051c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8a3a      	ldrh	r2, [r7, #16]
 80050a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d02b      	beq.n	8005104 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0210 	bic.w	r2, r2, #16
 80050f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fd fbce 	bl	80028a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800510c:	b29b      	uxth	r3, r3
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	b29b      	uxth	r3, r3
 8005112:	4619      	mov	r1, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f876 	bl	8005206 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800511a:	e051      	b.n	80051c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005124:	b29b      	uxth	r3, r3
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d047      	beq.n	80051c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005134:	8a7b      	ldrh	r3, [r7, #18]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d044      	beq.n	80051c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005148:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695a      	ldr	r2, [r3, #20]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0210 	bic.w	r2, r2, #16
 8005176:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005178:	8a7b      	ldrh	r3, [r7, #18]
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f842 	bl	8005206 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005182:	e01f      	b.n	80051c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <HAL_UART_IRQHandler+0x324>
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f9f2 	bl	8005582 <UART_Transmit_IT>
    return;
 800519e:	e012      	b.n	80051c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00d      	beq.n	80051c6 <HAL_UART_IRQHandler+0x34a>
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fa33 	bl	8005620 <UART_EndTransmit_IT>
    return;
 80051ba:	e004      	b.n	80051c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80051bc:	bf00      	nop
 80051be:	e002      	b.n	80051c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80051c0:	bf00      	nop
 80051c2:	e000      	b.n	80051c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80051c4:	bf00      	nop
  }
}
 80051c6:	3728      	adds	r7, #40	; 0x28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	0800555b 	.word	0x0800555b

080051d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr

080051e2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr

080051f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr

08005206 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d12a      	bne.n	800528e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800524c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695a      	ldr	r2, [r3, #20]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695a      	ldr	r2, [r3, #20]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	2b01      	cmp	r3, #1
 800527c:	d107      	bne.n	800528e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0210 	bic.w	r2, r2, #16
 800528c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	2b01      	cmp	r3, #1
 8005294:	d106      	bne.n	80052a4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800529a:	4619      	mov	r1, r3
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff ffb2 	bl	8005206 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052a2:	e002      	b.n	80052aa <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7fc fa21 	bl	80016ec <HAL_UART_RxCpltCallback>
}
 80052aa:	bf00      	nop
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d108      	bne.n	80052da <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052cc:	085b      	lsrs	r3, r3, #1
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	4619      	mov	r1, r3
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff ff97 	bl	8005206 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052d8:	e002      	b.n	80052e0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f7ff ff81 	bl	80051e2 <HAL_UART_RxHalfCpltCallback>
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005304:	2b80      	cmp	r3, #128	; 0x80
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b21      	cmp	r3, #33	; 0x21
 800531a:	d108      	bne.n	800532e <UART_DMAError+0x46>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2200      	movs	r2, #0
 8005326:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005328:	68b8      	ldr	r0, [r7, #8]
 800532a:	f000 f8d5 	bl	80054d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	bf0c      	ite	eq
 800533c:	2301      	moveq	r3, #1
 800533e:	2300      	movne	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b22      	cmp	r3, #34	; 0x22
 800534e:	d108      	bne.n	8005362 <UART_DMAError+0x7a>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2200      	movs	r2, #0
 800535a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800535c:	68b8      	ldr	r0, [r7, #8]
 800535e:	f000 f8d0 	bl	8005502 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f043 0210 	orr.w	r2, r3, #16
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800536e:	68b8      	ldr	r0, [r7, #8]
 8005370:	f7ff ff40 	bl	80051f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538c:	e02c      	b.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d028      	beq.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <UART_WaitOnFlagUntilTimeout+0x30>
 800539c:	f7fd f872 	bl	8002484 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d21d      	bcs.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695a      	ldr	r2, [r3, #20]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e00f      	b.n	8005408 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	429a      	cmp	r2, r3
 8005404:	d0c3      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	88fa      	ldrh	r2, [r7, #6]
 8005428:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2222      	movs	r2, #34	; 0x22
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	4a23      	ldr	r2, [pc, #140]	; (80054cc <UART_Start_Receive_DMA+0xbc>)
 800543e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <UART_Start_Receive_DMA+0xc0>)
 8005446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	4a21      	ldr	r2, [pc, #132]	; (80054d4 <UART_Start_Receive_DMA+0xc4>)
 800544e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	2200      	movs	r2, #0
 8005456:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005458:	f107 0308 	add.w	r3, r7, #8
 800545c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	f7fd f9b6 	bl	80027e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005474:	2300      	movs	r3, #0
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695a      	ldr	r2, [r3, #20]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	0800521d 	.word	0x0800521d
 80054d0:	080052b3 	.word	0x080052b3
 80054d4:	080052e9 	.word	0x080052e9

080054d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80054ee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr

08005502 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005518:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695a      	ldr	r2, [r3, #20]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0201 	bic.w	r2, r2, #1
 8005528:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	2b01      	cmp	r3, #1
 8005530:	d107      	bne.n	8005542 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0210 	bic.w	r2, r2, #16
 8005540:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7ff fe3d 	bl	80051f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800557a:	bf00      	nop
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b21      	cmp	r3, #33	; 0x21
 8005594:	d13e      	bne.n	8005614 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	d114      	bne.n	80055ca <UART_Transmit_IT+0x48>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d110      	bne.n	80055ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	1c9a      	adds	r2, r3, #2
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	621a      	str	r2, [r3, #32]
 80055c8:	e008      	b.n	80055dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	1c59      	adds	r1, r3, #1
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6211      	str	r1, [r2, #32]
 80055d4:	781a      	ldrb	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	4619      	mov	r1, r3
 80055ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10f      	bne.n	8005610 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800560e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e000      	b.n	8005616 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005614:	2302      	movs	r3, #2
  }
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr

08005620 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005636:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff fdc5 	bl	80051d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b22      	cmp	r3, #34	; 0x22
 8005662:	f040 8099 	bne.w	8005798 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566e:	d117      	bne.n	80056a0 <UART_Receive_IT+0x50>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d113      	bne.n	80056a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568e:	b29a      	uxth	r2, r3
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	1c9a      	adds	r2, r3, #2
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	629a      	str	r2, [r3, #40]	; 0x28
 800569e:	e026      	b.n	80056ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b2:	d007      	beq.n	80056c4 <UART_Receive_IT+0x74>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <UART_Receive_IT+0x82>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d106      	bne.n	80056d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	e008      	b.n	80056e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4619      	mov	r1, r3
 80056fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d148      	bne.n	8005794 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0220 	bic.w	r2, r2, #32
 8005710:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005720:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695a      	ldr	r2, [r3, #20]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0201 	bic.w	r2, r2, #1
 8005730:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	2b01      	cmp	r3, #1
 8005740:	d123      	bne.n	800578a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0210 	bic.w	r2, r2, #16
 8005756:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b10      	cmp	r3, #16
 8005764:	d10a      	bne.n	800577c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005780:	4619      	mov	r1, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff fd3f 	bl	8005206 <HAL_UARTEx_RxEventCallback>
 8005788:	e002      	b.n	8005790 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fb ffae 	bl	80016ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	e002      	b.n	800579a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	e000      	b.n	800579a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005798:	2302      	movs	r3, #2
  }
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80057e4:	f023 030c 	bic.w	r3, r3, #12
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	430b      	orrs	r3, r1
 80057f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a55      	ldr	r2, [pc, #340]	; (8005964 <UART_SetConfig+0x1c0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d103      	bne.n	800581a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005812:	f7fe fe5b 	bl	80044cc <HAL_RCC_GetPCLK2Freq>
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	e002      	b.n	8005820 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800581a:	f7fe fe43 	bl	80044a4 <HAL_RCC_GetPCLK1Freq>
 800581e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005828:	d14c      	bne.n	80058c4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	009a      	lsls	r2, r3, #2
 8005834:	441a      	add	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005840:	4a49      	ldr	r2, [pc, #292]	; (8005968 <UART_SetConfig+0x1c4>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	0119      	lsls	r1, r3, #4
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009a      	lsls	r2, r3, #2
 8005854:	441a      	add	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005860:	4b41      	ldr	r3, [pc, #260]	; (8005968 <UART_SetConfig+0x1c4>)
 8005862:	fba3 0302 	umull	r0, r3, r3, r2
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	2064      	movs	r0, #100	; 0x64
 800586a:	fb00 f303 	mul.w	r3, r0, r3
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	3332      	adds	r3, #50	; 0x32
 8005874:	4a3c      	ldr	r2, [pc, #240]	; (8005968 <UART_SetConfig+0x1c4>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005882:	4419      	add	r1, r3
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	009a      	lsls	r2, r3, #2
 800588e:	441a      	add	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	fbb2 f2f3 	udiv	r2, r2, r3
 800589a:	4b33      	ldr	r3, [pc, #204]	; (8005968 <UART_SetConfig+0x1c4>)
 800589c:	fba3 0302 	umull	r0, r3, r3, r2
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	2064      	movs	r0, #100	; 0x64
 80058a4:	fb00 f303 	mul.w	r3, r0, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	3332      	adds	r3, #50	; 0x32
 80058ae:	4a2e      	ldr	r2, [pc, #184]	; (8005968 <UART_SetConfig+0x1c4>)
 80058b0:	fba2 2303 	umull	r2, r3, r2, r3
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	f003 0207 	and.w	r2, r3, #7
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	440a      	add	r2, r1
 80058c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058c2:	e04a      	b.n	800595a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	009a      	lsls	r2, r3, #2
 80058ce:	441a      	add	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	4a23      	ldr	r2, [pc, #140]	; (8005968 <UART_SetConfig+0x1c4>)
 80058dc:	fba2 2303 	umull	r2, r3, r2, r3
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	0119      	lsls	r1, r3, #4
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009a      	lsls	r2, r3, #2
 80058ee:	441a      	add	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80058fa:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <UART_SetConfig+0x1c4>)
 80058fc:	fba3 0302 	umull	r0, r3, r3, r2
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	2064      	movs	r0, #100	; 0x64
 8005904:	fb00 f303 	mul.w	r3, r0, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	3332      	adds	r3, #50	; 0x32
 800590e:	4a16      	ldr	r2, [pc, #88]	; (8005968 <UART_SetConfig+0x1c4>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800591a:	4419      	add	r1, r3
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009a      	lsls	r2, r3, #2
 8005926:	441a      	add	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005932:	4b0d      	ldr	r3, [pc, #52]	; (8005968 <UART_SetConfig+0x1c4>)
 8005934:	fba3 0302 	umull	r0, r3, r3, r2
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	2064      	movs	r0, #100	; 0x64
 800593c:	fb00 f303 	mul.w	r3, r0, r3
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	3332      	adds	r3, #50	; 0x32
 8005946:	4a08      	ldr	r2, [pc, #32]	; (8005968 <UART_SetConfig+0x1c4>)
 8005948:	fba2 2303 	umull	r2, r3, r2, r3
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	440a      	add	r2, r1
 8005958:	609a      	str	r2, [r3, #8]
}
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40013800 	.word	0x40013800
 8005968:	51eb851f 	.word	0x51eb851f

0800596c <__errno>:
 800596c:	4b01      	ldr	r3, [pc, #4]	; (8005974 <__errno+0x8>)
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000010 	.word	0x20000010

08005978 <__libc_init_array>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	2600      	movs	r6, #0
 800597c:	4d0c      	ldr	r5, [pc, #48]	; (80059b0 <__libc_init_array+0x38>)
 800597e:	4c0d      	ldr	r4, [pc, #52]	; (80059b4 <__libc_init_array+0x3c>)
 8005980:	1b64      	subs	r4, r4, r5
 8005982:	10a4      	asrs	r4, r4, #2
 8005984:	42a6      	cmp	r6, r4
 8005986:	d109      	bne.n	800599c <__libc_init_array+0x24>
 8005988:	f003 fc1a 	bl	80091c0 <_init>
 800598c:	2600      	movs	r6, #0
 800598e:	4d0a      	ldr	r5, [pc, #40]	; (80059b8 <__libc_init_array+0x40>)
 8005990:	4c0a      	ldr	r4, [pc, #40]	; (80059bc <__libc_init_array+0x44>)
 8005992:	1b64      	subs	r4, r4, r5
 8005994:	10a4      	asrs	r4, r4, #2
 8005996:	42a6      	cmp	r6, r4
 8005998:	d105      	bne.n	80059a6 <__libc_init_array+0x2e>
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a0:	4798      	blx	r3
 80059a2:	3601      	adds	r6, #1
 80059a4:	e7ee      	b.n	8005984 <__libc_init_array+0xc>
 80059a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059aa:	4798      	blx	r3
 80059ac:	3601      	adds	r6, #1
 80059ae:	e7f2      	b.n	8005996 <__libc_init_array+0x1e>
 80059b0:	080096e8 	.word	0x080096e8
 80059b4:	080096e8 	.word	0x080096e8
 80059b8:	080096e8 	.word	0x080096e8
 80059bc:	080096ec 	.word	0x080096ec

080059c0 <memcpy>:
 80059c0:	440a      	add	r2, r1
 80059c2:	4291      	cmp	r1, r2
 80059c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059c8:	d100      	bne.n	80059cc <memcpy+0xc>
 80059ca:	4770      	bx	lr
 80059cc:	b510      	push	{r4, lr}
 80059ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059d2:	4291      	cmp	r1, r2
 80059d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059d8:	d1f9      	bne.n	80059ce <memcpy+0xe>
 80059da:	bd10      	pop	{r4, pc}

080059dc <memset>:
 80059dc:	4603      	mov	r3, r0
 80059de:	4402      	add	r2, r0
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d100      	bne.n	80059e6 <memset+0xa>
 80059e4:	4770      	bx	lr
 80059e6:	f803 1b01 	strb.w	r1, [r3], #1
 80059ea:	e7f9      	b.n	80059e0 <memset+0x4>

080059ec <__cvt>:
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f2:	461f      	mov	r7, r3
 80059f4:	bfbb      	ittet	lt
 80059f6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80059fa:	461f      	movlt	r7, r3
 80059fc:	2300      	movge	r3, #0
 80059fe:	232d      	movlt	r3, #45	; 0x2d
 8005a00:	b088      	sub	sp, #32
 8005a02:	4614      	mov	r4, r2
 8005a04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005a08:	7013      	strb	r3, [r2, #0]
 8005a0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005a10:	f023 0820 	bic.w	r8, r3, #32
 8005a14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a18:	d005      	beq.n	8005a26 <__cvt+0x3a>
 8005a1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a1e:	d100      	bne.n	8005a22 <__cvt+0x36>
 8005a20:	3501      	adds	r5, #1
 8005a22:	2302      	movs	r3, #2
 8005a24:	e000      	b.n	8005a28 <__cvt+0x3c>
 8005a26:	2303      	movs	r3, #3
 8005a28:	aa07      	add	r2, sp, #28
 8005a2a:	9204      	str	r2, [sp, #16]
 8005a2c:	aa06      	add	r2, sp, #24
 8005a2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005a32:	e9cd 3500 	strd	r3, r5, [sp]
 8005a36:	4622      	mov	r2, r4
 8005a38:	463b      	mov	r3, r7
 8005a3a:	f000 fdfd 	bl	8006638 <_dtoa_r>
 8005a3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a42:	4606      	mov	r6, r0
 8005a44:	d102      	bne.n	8005a4c <__cvt+0x60>
 8005a46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a48:	07db      	lsls	r3, r3, #31
 8005a4a:	d522      	bpl.n	8005a92 <__cvt+0xa6>
 8005a4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a50:	eb06 0905 	add.w	r9, r6, r5
 8005a54:	d110      	bne.n	8005a78 <__cvt+0x8c>
 8005a56:	7833      	ldrb	r3, [r6, #0]
 8005a58:	2b30      	cmp	r3, #48	; 0x30
 8005a5a:	d10a      	bne.n	8005a72 <__cvt+0x86>
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2300      	movs	r3, #0
 8005a60:	4620      	mov	r0, r4
 8005a62:	4639      	mov	r1, r7
 8005a64:	f7fa ffb8 	bl	80009d8 <__aeabi_dcmpeq>
 8005a68:	b918      	cbnz	r0, 8005a72 <__cvt+0x86>
 8005a6a:	f1c5 0501 	rsb	r5, r5, #1
 8005a6e:	f8ca 5000 	str.w	r5, [sl]
 8005a72:	f8da 3000 	ldr.w	r3, [sl]
 8005a76:	4499      	add	r9, r3
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	4639      	mov	r1, r7
 8005a80:	f7fa ffaa 	bl	80009d8 <__aeabi_dcmpeq>
 8005a84:	b108      	cbz	r0, 8005a8a <__cvt+0x9e>
 8005a86:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a8a:	2230      	movs	r2, #48	; 0x30
 8005a8c:	9b07      	ldr	r3, [sp, #28]
 8005a8e:	454b      	cmp	r3, r9
 8005a90:	d307      	bcc.n	8005aa2 <__cvt+0xb6>
 8005a92:	4630      	mov	r0, r6
 8005a94:	9b07      	ldr	r3, [sp, #28]
 8005a96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005a98:	1b9b      	subs	r3, r3, r6
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	b008      	add	sp, #32
 8005a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa2:	1c59      	adds	r1, r3, #1
 8005aa4:	9107      	str	r1, [sp, #28]
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	e7f0      	b.n	8005a8c <__cvt+0xa0>

08005aaa <__exponent>:
 8005aaa:	4603      	mov	r3, r0
 8005aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	f803 2b02 	strb.w	r2, [r3], #2
 8005ab4:	bfb6      	itet	lt
 8005ab6:	222d      	movlt	r2, #45	; 0x2d
 8005ab8:	222b      	movge	r2, #43	; 0x2b
 8005aba:	4249      	neglt	r1, r1
 8005abc:	2909      	cmp	r1, #9
 8005abe:	7042      	strb	r2, [r0, #1]
 8005ac0:	dd2b      	ble.n	8005b1a <__exponent+0x70>
 8005ac2:	f10d 0407 	add.w	r4, sp, #7
 8005ac6:	46a4      	mov	ip, r4
 8005ac8:	270a      	movs	r7, #10
 8005aca:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ace:	460a      	mov	r2, r1
 8005ad0:	46a6      	mov	lr, r4
 8005ad2:	fb07 1516 	mls	r5, r7, r6, r1
 8005ad6:	2a63      	cmp	r2, #99	; 0x63
 8005ad8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005adc:	4631      	mov	r1, r6
 8005ade:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ae2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ae6:	dcf0      	bgt.n	8005aca <__exponent+0x20>
 8005ae8:	3130      	adds	r1, #48	; 0x30
 8005aea:	f1ae 0502 	sub.w	r5, lr, #2
 8005aee:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005af2:	4629      	mov	r1, r5
 8005af4:	1c44      	adds	r4, r0, #1
 8005af6:	4561      	cmp	r1, ip
 8005af8:	d30a      	bcc.n	8005b10 <__exponent+0x66>
 8005afa:	f10d 0209 	add.w	r2, sp, #9
 8005afe:	eba2 020e 	sub.w	r2, r2, lr
 8005b02:	4565      	cmp	r5, ip
 8005b04:	bf88      	it	hi
 8005b06:	2200      	movhi	r2, #0
 8005b08:	4413      	add	r3, r2
 8005b0a:	1a18      	subs	r0, r3, r0
 8005b0c:	b003      	add	sp, #12
 8005b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b14:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b18:	e7ed      	b.n	8005af6 <__exponent+0x4c>
 8005b1a:	2330      	movs	r3, #48	; 0x30
 8005b1c:	3130      	adds	r1, #48	; 0x30
 8005b1e:	7083      	strb	r3, [r0, #2]
 8005b20:	70c1      	strb	r1, [r0, #3]
 8005b22:	1d03      	adds	r3, r0, #4
 8005b24:	e7f1      	b.n	8005b0a <__exponent+0x60>
	...

08005b28 <_printf_float>:
 8005b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	b091      	sub	sp, #68	; 0x44
 8005b2e:	460c      	mov	r4, r1
 8005b30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005b34:	4616      	mov	r6, r2
 8005b36:	461f      	mov	r7, r3
 8005b38:	4605      	mov	r5, r0
 8005b3a:	f001 fb7d 	bl	8007238 <_localeconv_r>
 8005b3e:	6803      	ldr	r3, [r0, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	9309      	str	r3, [sp, #36]	; 0x24
 8005b44:	f7fa fb1c 	bl	8000180 <strlen>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	930e      	str	r3, [sp, #56]	; 0x38
 8005b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b50:	900a      	str	r0, [sp, #40]	; 0x28
 8005b52:	3307      	adds	r3, #7
 8005b54:	f023 0307 	bic.w	r3, r3, #7
 8005b58:	f103 0208 	add.w	r2, r3, #8
 8005b5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005b60:	f8d4 b000 	ldr.w	fp, [r4]
 8005b64:	f8c8 2000 	str.w	r2, [r8]
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b70:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005b74:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005b78:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7e:	4640      	mov	r0, r8
 8005b80:	4b9c      	ldr	r3, [pc, #624]	; (8005df4 <_printf_float+0x2cc>)
 8005b82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b84:	f7fa ff5a 	bl	8000a3c <__aeabi_dcmpun>
 8005b88:	bb70      	cbnz	r0, 8005be8 <_printf_float+0xc0>
 8005b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8e:	4640      	mov	r0, r8
 8005b90:	4b98      	ldr	r3, [pc, #608]	; (8005df4 <_printf_float+0x2cc>)
 8005b92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b94:	f7fa ff34 	bl	8000a00 <__aeabi_dcmple>
 8005b98:	bb30      	cbnz	r0, 8005be8 <_printf_float+0xc0>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	4651      	mov	r1, sl
 8005ba2:	f7fa ff23 	bl	80009ec <__aeabi_dcmplt>
 8005ba6:	b110      	cbz	r0, 8005bae <_printf_float+0x86>
 8005ba8:	232d      	movs	r3, #45	; 0x2d
 8005baa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bae:	4b92      	ldr	r3, [pc, #584]	; (8005df8 <_printf_float+0x2d0>)
 8005bb0:	4892      	ldr	r0, [pc, #584]	; (8005dfc <_printf_float+0x2d4>)
 8005bb2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005bb6:	bf94      	ite	ls
 8005bb8:	4698      	movls	r8, r3
 8005bba:	4680      	movhi	r8, r0
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	f04f 0a00 	mov.w	sl, #0
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	f02b 0304 	bic.w	r3, fp, #4
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	4633      	mov	r3, r6
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4628      	mov	r0, r5
 8005bd0:	9700      	str	r7, [sp, #0]
 8005bd2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005bd4:	f000 f9d4 	bl	8005f80 <_printf_common>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	f040 8090 	bne.w	8005cfe <_printf_float+0x1d6>
 8005bde:	f04f 30ff 	mov.w	r0, #4294967295
 8005be2:	b011      	add	sp, #68	; 0x44
 8005be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be8:	4642      	mov	r2, r8
 8005bea:	4653      	mov	r3, sl
 8005bec:	4640      	mov	r0, r8
 8005bee:	4651      	mov	r1, sl
 8005bf0:	f7fa ff24 	bl	8000a3c <__aeabi_dcmpun>
 8005bf4:	b148      	cbz	r0, 8005c0a <_printf_float+0xe2>
 8005bf6:	f1ba 0f00 	cmp.w	sl, #0
 8005bfa:	bfb8      	it	lt
 8005bfc:	232d      	movlt	r3, #45	; 0x2d
 8005bfe:	4880      	ldr	r0, [pc, #512]	; (8005e00 <_printf_float+0x2d8>)
 8005c00:	bfb8      	it	lt
 8005c02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c06:	4b7f      	ldr	r3, [pc, #508]	; (8005e04 <_printf_float+0x2dc>)
 8005c08:	e7d3      	b.n	8005bb2 <_printf_float+0x8a>
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	d142      	bne.n	8005c9a <_printf_float+0x172>
 8005c14:	2306      	movs	r3, #6
 8005c16:	6063      	str	r3, [r4, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	9206      	str	r2, [sp, #24]
 8005c1c:	aa0e      	add	r2, sp, #56	; 0x38
 8005c1e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005c22:	aa0d      	add	r2, sp, #52	; 0x34
 8005c24:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005c28:	9203      	str	r2, [sp, #12]
 8005c2a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005c2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c32:	6023      	str	r3, [r4, #0]
 8005c34:	6863      	ldr	r3, [r4, #4]
 8005c36:	4642      	mov	r2, r8
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	4653      	mov	r3, sl
 8005c3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005c40:	f7ff fed4 	bl	80059ec <__cvt>
 8005c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c46:	4680      	mov	r8, r0
 8005c48:	2947      	cmp	r1, #71	; 0x47
 8005c4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c4c:	d108      	bne.n	8005c60 <_printf_float+0x138>
 8005c4e:	1cc8      	adds	r0, r1, #3
 8005c50:	db02      	blt.n	8005c58 <_printf_float+0x130>
 8005c52:	6863      	ldr	r3, [r4, #4]
 8005c54:	4299      	cmp	r1, r3
 8005c56:	dd40      	ble.n	8005cda <_printf_float+0x1b2>
 8005c58:	f1a9 0902 	sub.w	r9, r9, #2
 8005c5c:	fa5f f989 	uxtb.w	r9, r9
 8005c60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005c64:	d81f      	bhi.n	8005ca6 <_printf_float+0x17e>
 8005c66:	464a      	mov	r2, r9
 8005c68:	3901      	subs	r1, #1
 8005c6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c6e:	910d      	str	r1, [sp, #52]	; 0x34
 8005c70:	f7ff ff1b 	bl	8005aaa <__exponent>
 8005c74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c76:	4682      	mov	sl, r0
 8005c78:	1813      	adds	r3, r2, r0
 8005c7a:	2a01      	cmp	r2, #1
 8005c7c:	6123      	str	r3, [r4, #16]
 8005c7e:	dc02      	bgt.n	8005c86 <_printf_float+0x15e>
 8005c80:	6822      	ldr	r2, [r4, #0]
 8005c82:	07d2      	lsls	r2, r2, #31
 8005c84:	d501      	bpl.n	8005c8a <_printf_float+0x162>
 8005c86:	3301      	adds	r3, #1
 8005c88:	6123      	str	r3, [r4, #16]
 8005c8a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d09b      	beq.n	8005bca <_printf_float+0xa2>
 8005c92:	232d      	movs	r3, #45	; 0x2d
 8005c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c98:	e797      	b.n	8005bca <_printf_float+0xa2>
 8005c9a:	2947      	cmp	r1, #71	; 0x47
 8005c9c:	d1bc      	bne.n	8005c18 <_printf_float+0xf0>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1ba      	bne.n	8005c18 <_printf_float+0xf0>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e7b7      	b.n	8005c16 <_printf_float+0xee>
 8005ca6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005caa:	d118      	bne.n	8005cde <_printf_float+0x1b6>
 8005cac:	2900      	cmp	r1, #0
 8005cae:	6863      	ldr	r3, [r4, #4]
 8005cb0:	dd0b      	ble.n	8005cca <_printf_float+0x1a2>
 8005cb2:	6121      	str	r1, [r4, #16]
 8005cb4:	b913      	cbnz	r3, 8005cbc <_printf_float+0x194>
 8005cb6:	6822      	ldr	r2, [r4, #0]
 8005cb8:	07d0      	lsls	r0, r2, #31
 8005cba:	d502      	bpl.n	8005cc2 <_printf_float+0x19a>
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	440b      	add	r3, r1
 8005cc0:	6123      	str	r3, [r4, #16]
 8005cc2:	f04f 0a00 	mov.w	sl, #0
 8005cc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005cc8:	e7df      	b.n	8005c8a <_printf_float+0x162>
 8005cca:	b913      	cbnz	r3, 8005cd2 <_printf_float+0x1aa>
 8005ccc:	6822      	ldr	r2, [r4, #0]
 8005cce:	07d2      	lsls	r2, r2, #31
 8005cd0:	d501      	bpl.n	8005cd6 <_printf_float+0x1ae>
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	e7f4      	b.n	8005cc0 <_printf_float+0x198>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e7f2      	b.n	8005cc0 <_printf_float+0x198>
 8005cda:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ce0:	4299      	cmp	r1, r3
 8005ce2:	db05      	blt.n	8005cf0 <_printf_float+0x1c8>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	6121      	str	r1, [r4, #16]
 8005ce8:	07d8      	lsls	r0, r3, #31
 8005cea:	d5ea      	bpl.n	8005cc2 <_printf_float+0x19a>
 8005cec:	1c4b      	adds	r3, r1, #1
 8005cee:	e7e7      	b.n	8005cc0 <_printf_float+0x198>
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	bfcc      	ite	gt
 8005cf4:	2201      	movgt	r2, #1
 8005cf6:	f1c1 0202 	rsble	r2, r1, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	e7e0      	b.n	8005cc0 <_printf_float+0x198>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	055a      	lsls	r2, r3, #21
 8005d02:	d407      	bmi.n	8005d14 <_printf_float+0x1ec>
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	4642      	mov	r2, r8
 8005d08:	4631      	mov	r1, r6
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	47b8      	blx	r7
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d12b      	bne.n	8005d6a <_printf_float+0x242>
 8005d12:	e764      	b.n	8005bde <_printf_float+0xb6>
 8005d14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d18:	f240 80dd 	bls.w	8005ed6 <_printf_float+0x3ae>
 8005d1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d20:	2200      	movs	r2, #0
 8005d22:	2300      	movs	r3, #0
 8005d24:	f7fa fe58 	bl	80009d8 <__aeabi_dcmpeq>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d033      	beq.n	8005d94 <_printf_float+0x26c>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	4a35      	ldr	r2, [pc, #212]	; (8005e08 <_printf_float+0x2e0>)
 8005d34:	47b8      	blx	r7
 8005d36:	3001      	adds	r0, #1
 8005d38:	f43f af51 	beq.w	8005bde <_printf_float+0xb6>
 8005d3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d40:	429a      	cmp	r2, r3
 8005d42:	db02      	blt.n	8005d4a <_printf_float+0x222>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	07d8      	lsls	r0, r3, #31
 8005d48:	d50f      	bpl.n	8005d6a <_printf_float+0x242>
 8005d4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4628      	mov	r0, r5
 8005d52:	47b8      	blx	r7
 8005d54:	3001      	adds	r0, #1
 8005d56:	f43f af42 	beq.w	8005bde <_printf_float+0xb6>
 8005d5a:	f04f 0800 	mov.w	r8, #0
 8005d5e:	f104 091a 	add.w	r9, r4, #26
 8005d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d64:	3b01      	subs	r3, #1
 8005d66:	4543      	cmp	r3, r8
 8005d68:	dc09      	bgt.n	8005d7e <_printf_float+0x256>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	079b      	lsls	r3, r3, #30
 8005d6e:	f100 8102 	bmi.w	8005f76 <_printf_float+0x44e>
 8005d72:	68e0      	ldr	r0, [r4, #12]
 8005d74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d76:	4298      	cmp	r0, r3
 8005d78:	bfb8      	it	lt
 8005d7a:	4618      	movlt	r0, r3
 8005d7c:	e731      	b.n	8005be2 <_printf_float+0xba>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	464a      	mov	r2, r9
 8005d82:	4631      	mov	r1, r6
 8005d84:	4628      	mov	r0, r5
 8005d86:	47b8      	blx	r7
 8005d88:	3001      	adds	r0, #1
 8005d8a:	f43f af28 	beq.w	8005bde <_printf_float+0xb6>
 8005d8e:	f108 0801 	add.w	r8, r8, #1
 8005d92:	e7e6      	b.n	8005d62 <_printf_float+0x23a>
 8005d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	dc38      	bgt.n	8005e0c <_printf_float+0x2e4>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4628      	mov	r0, r5
 8005da0:	4a19      	ldr	r2, [pc, #100]	; (8005e08 <_printf_float+0x2e0>)
 8005da2:	47b8      	blx	r7
 8005da4:	3001      	adds	r0, #1
 8005da6:	f43f af1a 	beq.w	8005bde <_printf_float+0xb6>
 8005daa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005dae:	4313      	orrs	r3, r2
 8005db0:	d102      	bne.n	8005db8 <_printf_float+0x290>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	07d9      	lsls	r1, r3, #31
 8005db6:	d5d8      	bpl.n	8005d6a <_printf_float+0x242>
 8005db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	47b8      	blx	r7
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	f43f af0b 	beq.w	8005bde <_printf_float+0xb6>
 8005dc8:	f04f 0900 	mov.w	r9, #0
 8005dcc:	f104 0a1a 	add.w	sl, r4, #26
 8005dd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dd2:	425b      	negs	r3, r3
 8005dd4:	454b      	cmp	r3, r9
 8005dd6:	dc01      	bgt.n	8005ddc <_printf_float+0x2b4>
 8005dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dda:	e794      	b.n	8005d06 <_printf_float+0x1de>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	4652      	mov	r2, sl
 8005de0:	4631      	mov	r1, r6
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b8      	blx	r7
 8005de6:	3001      	adds	r0, #1
 8005de8:	f43f aef9 	beq.w	8005bde <_printf_float+0xb6>
 8005dec:	f109 0901 	add.w	r9, r9, #1
 8005df0:	e7ee      	b.n	8005dd0 <_printf_float+0x2a8>
 8005df2:	bf00      	nop
 8005df4:	7fefffff 	.word	0x7fefffff
 8005df8:	08009290 	.word	0x08009290
 8005dfc:	08009294 	.word	0x08009294
 8005e00:	0800929c 	.word	0x0800929c
 8005e04:	08009298 	.word	0x08009298
 8005e08:	08009559 	.word	0x08009559
 8005e0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e10:	429a      	cmp	r2, r3
 8005e12:	bfa8      	it	ge
 8005e14:	461a      	movge	r2, r3
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	4691      	mov	r9, r2
 8005e1a:	dc37      	bgt.n	8005e8c <_printf_float+0x364>
 8005e1c:	f04f 0b00 	mov.w	fp, #0
 8005e20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e24:	f104 021a 	add.w	r2, r4, #26
 8005e28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005e2c:	ebaa 0309 	sub.w	r3, sl, r9
 8005e30:	455b      	cmp	r3, fp
 8005e32:	dc33      	bgt.n	8005e9c <_printf_float+0x374>
 8005e34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	db3b      	blt.n	8005eb4 <_printf_float+0x38c>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	07da      	lsls	r2, r3, #31
 8005e40:	d438      	bmi.n	8005eb4 <_printf_float+0x38c>
 8005e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e46:	eba3 020a 	sub.w	r2, r3, sl
 8005e4a:	eba3 0901 	sub.w	r9, r3, r1
 8005e4e:	4591      	cmp	r9, r2
 8005e50:	bfa8      	it	ge
 8005e52:	4691      	movge	r9, r2
 8005e54:	f1b9 0f00 	cmp.w	r9, #0
 8005e58:	dc34      	bgt.n	8005ec4 <_printf_float+0x39c>
 8005e5a:	f04f 0800 	mov.w	r8, #0
 8005e5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e62:	f104 0a1a 	add.w	sl, r4, #26
 8005e66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e6a:	1a9b      	subs	r3, r3, r2
 8005e6c:	eba3 0309 	sub.w	r3, r3, r9
 8005e70:	4543      	cmp	r3, r8
 8005e72:	f77f af7a 	ble.w	8005d6a <_printf_float+0x242>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4652      	mov	r2, sl
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	47b8      	blx	r7
 8005e80:	3001      	adds	r0, #1
 8005e82:	f43f aeac 	beq.w	8005bde <_printf_float+0xb6>
 8005e86:	f108 0801 	add.w	r8, r8, #1
 8005e8a:	e7ec      	b.n	8005e66 <_printf_float+0x33e>
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4642      	mov	r2, r8
 8005e92:	4628      	mov	r0, r5
 8005e94:	47b8      	blx	r7
 8005e96:	3001      	adds	r0, #1
 8005e98:	d1c0      	bne.n	8005e1c <_printf_float+0x2f4>
 8005e9a:	e6a0      	b.n	8005bde <_printf_float+0xb6>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ea4:	47b8      	blx	r7
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	f43f ae99 	beq.w	8005bde <_printf_float+0xb6>
 8005eac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005eae:	f10b 0b01 	add.w	fp, fp, #1
 8005eb2:	e7b9      	b.n	8005e28 <_printf_float+0x300>
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eba:	4628      	mov	r0, r5
 8005ebc:	47b8      	blx	r7
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d1bf      	bne.n	8005e42 <_printf_float+0x31a>
 8005ec2:	e68c      	b.n	8005bde <_printf_float+0xb6>
 8005ec4:	464b      	mov	r3, r9
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	eb08 020a 	add.w	r2, r8, sl
 8005ece:	47b8      	blx	r7
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d1c2      	bne.n	8005e5a <_printf_float+0x332>
 8005ed4:	e683      	b.n	8005bde <_printf_float+0xb6>
 8005ed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ed8:	2a01      	cmp	r2, #1
 8005eda:	dc01      	bgt.n	8005ee0 <_printf_float+0x3b8>
 8005edc:	07db      	lsls	r3, r3, #31
 8005ede:	d537      	bpl.n	8005f50 <_printf_float+0x428>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b8      	blx	r7
 8005eea:	3001      	adds	r0, #1
 8005eec:	f43f ae77 	beq.w	8005bde <_printf_float+0xb6>
 8005ef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	47b8      	blx	r7
 8005efa:	3001      	adds	r0, #1
 8005efc:	f43f ae6f 	beq.w	8005bde <_printf_float+0xb6>
 8005f00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f04:	2200      	movs	r2, #0
 8005f06:	2300      	movs	r3, #0
 8005f08:	f7fa fd66 	bl	80009d8 <__aeabi_dcmpeq>
 8005f0c:	b9d8      	cbnz	r0, 8005f46 <_printf_float+0x41e>
 8005f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f10:	f108 0201 	add.w	r2, r8, #1
 8005f14:	3b01      	subs	r3, #1
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d10e      	bne.n	8005f3e <_printf_float+0x416>
 8005f20:	e65d      	b.n	8005bde <_printf_float+0xb6>
 8005f22:	2301      	movs	r3, #1
 8005f24:	464a      	mov	r2, r9
 8005f26:	4631      	mov	r1, r6
 8005f28:	4628      	mov	r0, r5
 8005f2a:	47b8      	blx	r7
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f43f ae56 	beq.w	8005bde <_printf_float+0xb6>
 8005f32:	f108 0801 	add.w	r8, r8, #1
 8005f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	4543      	cmp	r3, r8
 8005f3c:	dcf1      	bgt.n	8005f22 <_printf_float+0x3fa>
 8005f3e:	4653      	mov	r3, sl
 8005f40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f44:	e6e0      	b.n	8005d08 <_printf_float+0x1e0>
 8005f46:	f04f 0800 	mov.w	r8, #0
 8005f4a:	f104 091a 	add.w	r9, r4, #26
 8005f4e:	e7f2      	b.n	8005f36 <_printf_float+0x40e>
 8005f50:	2301      	movs	r3, #1
 8005f52:	4642      	mov	r2, r8
 8005f54:	e7df      	b.n	8005f16 <_printf_float+0x3ee>
 8005f56:	2301      	movs	r3, #1
 8005f58:	464a      	mov	r2, r9
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	47b8      	blx	r7
 8005f60:	3001      	adds	r0, #1
 8005f62:	f43f ae3c 	beq.w	8005bde <_printf_float+0xb6>
 8005f66:	f108 0801 	add.w	r8, r8, #1
 8005f6a:	68e3      	ldr	r3, [r4, #12]
 8005f6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005f6e:	1a5b      	subs	r3, r3, r1
 8005f70:	4543      	cmp	r3, r8
 8005f72:	dcf0      	bgt.n	8005f56 <_printf_float+0x42e>
 8005f74:	e6fd      	b.n	8005d72 <_printf_float+0x24a>
 8005f76:	f04f 0800 	mov.w	r8, #0
 8005f7a:	f104 0919 	add.w	r9, r4, #25
 8005f7e:	e7f4      	b.n	8005f6a <_printf_float+0x442>

08005f80 <_printf_common>:
 8005f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	4616      	mov	r6, r2
 8005f86:	4699      	mov	r9, r3
 8005f88:	688a      	ldr	r2, [r1, #8]
 8005f8a:	690b      	ldr	r3, [r1, #16]
 8005f8c:	4607      	mov	r7, r0
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	bfb8      	it	lt
 8005f92:	4613      	movlt	r3, r2
 8005f94:	6033      	str	r3, [r6, #0]
 8005f96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fa0:	b10a      	cbz	r2, 8005fa6 <_printf_common+0x26>
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	6033      	str	r3, [r6, #0]
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	0699      	lsls	r1, r3, #26
 8005faa:	bf42      	ittt	mi
 8005fac:	6833      	ldrmi	r3, [r6, #0]
 8005fae:	3302      	addmi	r3, #2
 8005fb0:	6033      	strmi	r3, [r6, #0]
 8005fb2:	6825      	ldr	r5, [r4, #0]
 8005fb4:	f015 0506 	ands.w	r5, r5, #6
 8005fb8:	d106      	bne.n	8005fc8 <_printf_common+0x48>
 8005fba:	f104 0a19 	add.w	sl, r4, #25
 8005fbe:	68e3      	ldr	r3, [r4, #12]
 8005fc0:	6832      	ldr	r2, [r6, #0]
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	42ab      	cmp	r3, r5
 8005fc6:	dc28      	bgt.n	800601a <_printf_common+0x9a>
 8005fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fcc:	1e13      	subs	r3, r2, #0
 8005fce:	6822      	ldr	r2, [r4, #0]
 8005fd0:	bf18      	it	ne
 8005fd2:	2301      	movne	r3, #1
 8005fd4:	0692      	lsls	r2, r2, #26
 8005fd6:	d42d      	bmi.n	8006034 <_printf_common+0xb4>
 8005fd8:	4649      	mov	r1, r9
 8005fda:	4638      	mov	r0, r7
 8005fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fe0:	47c0      	blx	r8
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d020      	beq.n	8006028 <_printf_common+0xa8>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	68e5      	ldr	r5, [r4, #12]
 8005fea:	f003 0306 	and.w	r3, r3, #6
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	bf18      	it	ne
 8005ff2:	2500      	movne	r5, #0
 8005ff4:	6832      	ldr	r2, [r6, #0]
 8005ff6:	f04f 0600 	mov.w	r6, #0
 8005ffa:	68a3      	ldr	r3, [r4, #8]
 8005ffc:	bf08      	it	eq
 8005ffe:	1aad      	subeq	r5, r5, r2
 8006000:	6922      	ldr	r2, [r4, #16]
 8006002:	bf08      	it	eq
 8006004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006008:	4293      	cmp	r3, r2
 800600a:	bfc4      	itt	gt
 800600c:	1a9b      	subgt	r3, r3, r2
 800600e:	18ed      	addgt	r5, r5, r3
 8006010:	341a      	adds	r4, #26
 8006012:	42b5      	cmp	r5, r6
 8006014:	d11a      	bne.n	800604c <_printf_common+0xcc>
 8006016:	2000      	movs	r0, #0
 8006018:	e008      	b.n	800602c <_printf_common+0xac>
 800601a:	2301      	movs	r3, #1
 800601c:	4652      	mov	r2, sl
 800601e:	4649      	mov	r1, r9
 8006020:	4638      	mov	r0, r7
 8006022:	47c0      	blx	r8
 8006024:	3001      	adds	r0, #1
 8006026:	d103      	bne.n	8006030 <_printf_common+0xb0>
 8006028:	f04f 30ff 	mov.w	r0, #4294967295
 800602c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006030:	3501      	adds	r5, #1
 8006032:	e7c4      	b.n	8005fbe <_printf_common+0x3e>
 8006034:	2030      	movs	r0, #48	; 0x30
 8006036:	18e1      	adds	r1, r4, r3
 8006038:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006042:	4422      	add	r2, r4
 8006044:	3302      	adds	r3, #2
 8006046:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800604a:	e7c5      	b.n	8005fd8 <_printf_common+0x58>
 800604c:	2301      	movs	r3, #1
 800604e:	4622      	mov	r2, r4
 8006050:	4649      	mov	r1, r9
 8006052:	4638      	mov	r0, r7
 8006054:	47c0      	blx	r8
 8006056:	3001      	adds	r0, #1
 8006058:	d0e6      	beq.n	8006028 <_printf_common+0xa8>
 800605a:	3601      	adds	r6, #1
 800605c:	e7d9      	b.n	8006012 <_printf_common+0x92>
	...

08006060 <_printf_i>:
 8006060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006064:	7e0f      	ldrb	r7, [r1, #24]
 8006066:	4691      	mov	r9, r2
 8006068:	2f78      	cmp	r7, #120	; 0x78
 800606a:	4680      	mov	r8, r0
 800606c:	460c      	mov	r4, r1
 800606e:	469a      	mov	sl, r3
 8006070:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006076:	d807      	bhi.n	8006088 <_printf_i+0x28>
 8006078:	2f62      	cmp	r7, #98	; 0x62
 800607a:	d80a      	bhi.n	8006092 <_printf_i+0x32>
 800607c:	2f00      	cmp	r7, #0
 800607e:	f000 80d9 	beq.w	8006234 <_printf_i+0x1d4>
 8006082:	2f58      	cmp	r7, #88	; 0x58
 8006084:	f000 80a4 	beq.w	80061d0 <_printf_i+0x170>
 8006088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800608c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006090:	e03a      	b.n	8006108 <_printf_i+0xa8>
 8006092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006096:	2b15      	cmp	r3, #21
 8006098:	d8f6      	bhi.n	8006088 <_printf_i+0x28>
 800609a:	a101      	add	r1, pc, #4	; (adr r1, 80060a0 <_printf_i+0x40>)
 800609c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060a0:	080060f9 	.word	0x080060f9
 80060a4:	0800610d 	.word	0x0800610d
 80060a8:	08006089 	.word	0x08006089
 80060ac:	08006089 	.word	0x08006089
 80060b0:	08006089 	.word	0x08006089
 80060b4:	08006089 	.word	0x08006089
 80060b8:	0800610d 	.word	0x0800610d
 80060bc:	08006089 	.word	0x08006089
 80060c0:	08006089 	.word	0x08006089
 80060c4:	08006089 	.word	0x08006089
 80060c8:	08006089 	.word	0x08006089
 80060cc:	0800621b 	.word	0x0800621b
 80060d0:	0800613d 	.word	0x0800613d
 80060d4:	080061fd 	.word	0x080061fd
 80060d8:	08006089 	.word	0x08006089
 80060dc:	08006089 	.word	0x08006089
 80060e0:	0800623d 	.word	0x0800623d
 80060e4:	08006089 	.word	0x08006089
 80060e8:	0800613d 	.word	0x0800613d
 80060ec:	08006089 	.word	0x08006089
 80060f0:	08006089 	.word	0x08006089
 80060f4:	08006205 	.word	0x08006205
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	1d1a      	adds	r2, r3, #4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	602a      	str	r2, [r5, #0]
 8006100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006108:	2301      	movs	r3, #1
 800610a:	e0a4      	b.n	8006256 <_printf_i+0x1f6>
 800610c:	6820      	ldr	r0, [r4, #0]
 800610e:	6829      	ldr	r1, [r5, #0]
 8006110:	0606      	lsls	r6, r0, #24
 8006112:	f101 0304 	add.w	r3, r1, #4
 8006116:	d50a      	bpl.n	800612e <_printf_i+0xce>
 8006118:	680e      	ldr	r6, [r1, #0]
 800611a:	602b      	str	r3, [r5, #0]
 800611c:	2e00      	cmp	r6, #0
 800611e:	da03      	bge.n	8006128 <_printf_i+0xc8>
 8006120:	232d      	movs	r3, #45	; 0x2d
 8006122:	4276      	negs	r6, r6
 8006124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006128:	230a      	movs	r3, #10
 800612a:	485e      	ldr	r0, [pc, #376]	; (80062a4 <_printf_i+0x244>)
 800612c:	e019      	b.n	8006162 <_printf_i+0x102>
 800612e:	680e      	ldr	r6, [r1, #0]
 8006130:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006134:	602b      	str	r3, [r5, #0]
 8006136:	bf18      	it	ne
 8006138:	b236      	sxthne	r6, r6
 800613a:	e7ef      	b.n	800611c <_printf_i+0xbc>
 800613c:	682b      	ldr	r3, [r5, #0]
 800613e:	6820      	ldr	r0, [r4, #0]
 8006140:	1d19      	adds	r1, r3, #4
 8006142:	6029      	str	r1, [r5, #0]
 8006144:	0601      	lsls	r1, r0, #24
 8006146:	d501      	bpl.n	800614c <_printf_i+0xec>
 8006148:	681e      	ldr	r6, [r3, #0]
 800614a:	e002      	b.n	8006152 <_printf_i+0xf2>
 800614c:	0646      	lsls	r6, r0, #25
 800614e:	d5fb      	bpl.n	8006148 <_printf_i+0xe8>
 8006150:	881e      	ldrh	r6, [r3, #0]
 8006152:	2f6f      	cmp	r7, #111	; 0x6f
 8006154:	bf0c      	ite	eq
 8006156:	2308      	moveq	r3, #8
 8006158:	230a      	movne	r3, #10
 800615a:	4852      	ldr	r0, [pc, #328]	; (80062a4 <_printf_i+0x244>)
 800615c:	2100      	movs	r1, #0
 800615e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006162:	6865      	ldr	r5, [r4, #4]
 8006164:	2d00      	cmp	r5, #0
 8006166:	bfa8      	it	ge
 8006168:	6821      	ldrge	r1, [r4, #0]
 800616a:	60a5      	str	r5, [r4, #8]
 800616c:	bfa4      	itt	ge
 800616e:	f021 0104 	bicge.w	r1, r1, #4
 8006172:	6021      	strge	r1, [r4, #0]
 8006174:	b90e      	cbnz	r6, 800617a <_printf_i+0x11a>
 8006176:	2d00      	cmp	r5, #0
 8006178:	d04d      	beq.n	8006216 <_printf_i+0x1b6>
 800617a:	4615      	mov	r5, r2
 800617c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006180:	fb03 6711 	mls	r7, r3, r1, r6
 8006184:	5dc7      	ldrb	r7, [r0, r7]
 8006186:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800618a:	4637      	mov	r7, r6
 800618c:	42bb      	cmp	r3, r7
 800618e:	460e      	mov	r6, r1
 8006190:	d9f4      	bls.n	800617c <_printf_i+0x11c>
 8006192:	2b08      	cmp	r3, #8
 8006194:	d10b      	bne.n	80061ae <_printf_i+0x14e>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	07de      	lsls	r6, r3, #31
 800619a:	d508      	bpl.n	80061ae <_printf_i+0x14e>
 800619c:	6923      	ldr	r3, [r4, #16]
 800619e:	6861      	ldr	r1, [r4, #4]
 80061a0:	4299      	cmp	r1, r3
 80061a2:	bfde      	ittt	le
 80061a4:	2330      	movle	r3, #48	; 0x30
 80061a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061ae:	1b52      	subs	r2, r2, r5
 80061b0:	6122      	str	r2, [r4, #16]
 80061b2:	464b      	mov	r3, r9
 80061b4:	4621      	mov	r1, r4
 80061b6:	4640      	mov	r0, r8
 80061b8:	f8cd a000 	str.w	sl, [sp]
 80061bc:	aa03      	add	r2, sp, #12
 80061be:	f7ff fedf 	bl	8005f80 <_printf_common>
 80061c2:	3001      	adds	r0, #1
 80061c4:	d14c      	bne.n	8006260 <_printf_i+0x200>
 80061c6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ca:	b004      	add	sp, #16
 80061cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d0:	4834      	ldr	r0, [pc, #208]	; (80062a4 <_printf_i+0x244>)
 80061d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061d6:	6829      	ldr	r1, [r5, #0]
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	f851 6b04 	ldr.w	r6, [r1], #4
 80061de:	6029      	str	r1, [r5, #0]
 80061e0:	061d      	lsls	r5, r3, #24
 80061e2:	d514      	bpl.n	800620e <_printf_i+0x1ae>
 80061e4:	07df      	lsls	r7, r3, #31
 80061e6:	bf44      	itt	mi
 80061e8:	f043 0320 	orrmi.w	r3, r3, #32
 80061ec:	6023      	strmi	r3, [r4, #0]
 80061ee:	b91e      	cbnz	r6, 80061f8 <_printf_i+0x198>
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	f023 0320 	bic.w	r3, r3, #32
 80061f6:	6023      	str	r3, [r4, #0]
 80061f8:	2310      	movs	r3, #16
 80061fa:	e7af      	b.n	800615c <_printf_i+0xfc>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	f043 0320 	orr.w	r3, r3, #32
 8006202:	6023      	str	r3, [r4, #0]
 8006204:	2378      	movs	r3, #120	; 0x78
 8006206:	4828      	ldr	r0, [pc, #160]	; (80062a8 <_printf_i+0x248>)
 8006208:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800620c:	e7e3      	b.n	80061d6 <_printf_i+0x176>
 800620e:	0659      	lsls	r1, r3, #25
 8006210:	bf48      	it	mi
 8006212:	b2b6      	uxthmi	r6, r6
 8006214:	e7e6      	b.n	80061e4 <_printf_i+0x184>
 8006216:	4615      	mov	r5, r2
 8006218:	e7bb      	b.n	8006192 <_printf_i+0x132>
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	6826      	ldr	r6, [r4, #0]
 800621e:	1d18      	adds	r0, r3, #4
 8006220:	6961      	ldr	r1, [r4, #20]
 8006222:	6028      	str	r0, [r5, #0]
 8006224:	0635      	lsls	r5, r6, #24
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	d501      	bpl.n	800622e <_printf_i+0x1ce>
 800622a:	6019      	str	r1, [r3, #0]
 800622c:	e002      	b.n	8006234 <_printf_i+0x1d4>
 800622e:	0670      	lsls	r0, r6, #25
 8006230:	d5fb      	bpl.n	800622a <_printf_i+0x1ca>
 8006232:	8019      	strh	r1, [r3, #0]
 8006234:	2300      	movs	r3, #0
 8006236:	4615      	mov	r5, r2
 8006238:	6123      	str	r3, [r4, #16]
 800623a:	e7ba      	b.n	80061b2 <_printf_i+0x152>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	2100      	movs	r1, #0
 8006240:	1d1a      	adds	r2, r3, #4
 8006242:	602a      	str	r2, [r5, #0]
 8006244:	681d      	ldr	r5, [r3, #0]
 8006246:	6862      	ldr	r2, [r4, #4]
 8006248:	4628      	mov	r0, r5
 800624a:	f001 f813 	bl	8007274 <memchr>
 800624e:	b108      	cbz	r0, 8006254 <_printf_i+0x1f4>
 8006250:	1b40      	subs	r0, r0, r5
 8006252:	6060      	str	r0, [r4, #4]
 8006254:	6863      	ldr	r3, [r4, #4]
 8006256:	6123      	str	r3, [r4, #16]
 8006258:	2300      	movs	r3, #0
 800625a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800625e:	e7a8      	b.n	80061b2 <_printf_i+0x152>
 8006260:	462a      	mov	r2, r5
 8006262:	4649      	mov	r1, r9
 8006264:	4640      	mov	r0, r8
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	47d0      	blx	sl
 800626a:	3001      	adds	r0, #1
 800626c:	d0ab      	beq.n	80061c6 <_printf_i+0x166>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	079b      	lsls	r3, r3, #30
 8006272:	d413      	bmi.n	800629c <_printf_i+0x23c>
 8006274:	68e0      	ldr	r0, [r4, #12]
 8006276:	9b03      	ldr	r3, [sp, #12]
 8006278:	4298      	cmp	r0, r3
 800627a:	bfb8      	it	lt
 800627c:	4618      	movlt	r0, r3
 800627e:	e7a4      	b.n	80061ca <_printf_i+0x16a>
 8006280:	2301      	movs	r3, #1
 8006282:	4632      	mov	r2, r6
 8006284:	4649      	mov	r1, r9
 8006286:	4640      	mov	r0, r8
 8006288:	47d0      	blx	sl
 800628a:	3001      	adds	r0, #1
 800628c:	d09b      	beq.n	80061c6 <_printf_i+0x166>
 800628e:	3501      	adds	r5, #1
 8006290:	68e3      	ldr	r3, [r4, #12]
 8006292:	9903      	ldr	r1, [sp, #12]
 8006294:	1a5b      	subs	r3, r3, r1
 8006296:	42ab      	cmp	r3, r5
 8006298:	dcf2      	bgt.n	8006280 <_printf_i+0x220>
 800629a:	e7eb      	b.n	8006274 <_printf_i+0x214>
 800629c:	2500      	movs	r5, #0
 800629e:	f104 0619 	add.w	r6, r4, #25
 80062a2:	e7f5      	b.n	8006290 <_printf_i+0x230>
 80062a4:	080092a0 	.word	0x080092a0
 80062a8:	080092b1 	.word	0x080092b1

080062ac <siprintf>:
 80062ac:	b40e      	push	{r1, r2, r3}
 80062ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062b2:	b500      	push	{lr}
 80062b4:	b09c      	sub	sp, #112	; 0x70
 80062b6:	ab1d      	add	r3, sp, #116	; 0x74
 80062b8:	9002      	str	r0, [sp, #8]
 80062ba:	9006      	str	r0, [sp, #24]
 80062bc:	9107      	str	r1, [sp, #28]
 80062be:	9104      	str	r1, [sp, #16]
 80062c0:	4808      	ldr	r0, [pc, #32]	; (80062e4 <siprintf+0x38>)
 80062c2:	4909      	ldr	r1, [pc, #36]	; (80062e8 <siprintf+0x3c>)
 80062c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062c8:	9105      	str	r1, [sp, #20]
 80062ca:	6800      	ldr	r0, [r0, #0]
 80062cc:	a902      	add	r1, sp, #8
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	f001 fcac 	bl	8007c2c <_svfiprintf_r>
 80062d4:	2200      	movs	r2, #0
 80062d6:	9b02      	ldr	r3, [sp, #8]
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	b01c      	add	sp, #112	; 0x70
 80062dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80062e0:	b003      	add	sp, #12
 80062e2:	4770      	bx	lr
 80062e4:	20000010 	.word	0x20000010
 80062e8:	ffff0208 	.word	0xffff0208

080062ec <siscanf>:
 80062ec:	b40e      	push	{r1, r2, r3}
 80062ee:	f44f 7201 	mov.w	r2, #516	; 0x204
 80062f2:	b530      	push	{r4, r5, lr}
 80062f4:	b09c      	sub	sp, #112	; 0x70
 80062f6:	ac1f      	add	r4, sp, #124	; 0x7c
 80062f8:	f854 5b04 	ldr.w	r5, [r4], #4
 80062fc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006300:	9002      	str	r0, [sp, #8]
 8006302:	9006      	str	r0, [sp, #24]
 8006304:	f7f9 ff3c 	bl	8000180 <strlen>
 8006308:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <siscanf+0x4c>)
 800630a:	9003      	str	r0, [sp, #12]
 800630c:	930b      	str	r3, [sp, #44]	; 0x2c
 800630e:	2300      	movs	r3, #0
 8006310:	930f      	str	r3, [sp, #60]	; 0x3c
 8006312:	9314      	str	r3, [sp, #80]	; 0x50
 8006314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006318:	9007      	str	r0, [sp, #28]
 800631a:	4808      	ldr	r0, [pc, #32]	; (800633c <siscanf+0x50>)
 800631c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006320:	462a      	mov	r2, r5
 8006322:	4623      	mov	r3, r4
 8006324:	a902      	add	r1, sp, #8
 8006326:	6800      	ldr	r0, [r0, #0]
 8006328:	9401      	str	r4, [sp, #4]
 800632a:	f001 fdd9 	bl	8007ee0 <__ssvfiscanf_r>
 800632e:	b01c      	add	sp, #112	; 0x70
 8006330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006334:	b003      	add	sp, #12
 8006336:	4770      	bx	lr
 8006338:	08006363 	.word	0x08006363
 800633c:	20000010 	.word	0x20000010

08006340 <__sread>:
 8006340:	b510      	push	{r4, lr}
 8006342:	460c      	mov	r4, r1
 8006344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006348:	f002 f9ee 	bl	8008728 <_read_r>
 800634c:	2800      	cmp	r0, #0
 800634e:	bfab      	itete	ge
 8006350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006352:	89a3      	ldrhlt	r3, [r4, #12]
 8006354:	181b      	addge	r3, r3, r0
 8006356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800635a:	bfac      	ite	ge
 800635c:	6563      	strge	r3, [r4, #84]	; 0x54
 800635e:	81a3      	strhlt	r3, [r4, #12]
 8006360:	bd10      	pop	{r4, pc}

08006362 <__seofread>:
 8006362:	2000      	movs	r0, #0
 8006364:	4770      	bx	lr

08006366 <__swrite>:
 8006366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636a:	461f      	mov	r7, r3
 800636c:	898b      	ldrh	r3, [r1, #12]
 800636e:	4605      	mov	r5, r0
 8006370:	05db      	lsls	r3, r3, #23
 8006372:	460c      	mov	r4, r1
 8006374:	4616      	mov	r6, r2
 8006376:	d505      	bpl.n	8006384 <__swrite+0x1e>
 8006378:	2302      	movs	r3, #2
 800637a:	2200      	movs	r2, #0
 800637c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006380:	f000 ff5e 	bl	8007240 <_lseek_r>
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	4632      	mov	r2, r6
 8006388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	4628      	mov	r0, r5
 8006390:	463b      	mov	r3, r7
 8006392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800639a:	f000 b881 	b.w	80064a0 <_write_r>

0800639e <__sseek>:
 800639e:	b510      	push	{r4, lr}
 80063a0:	460c      	mov	r4, r1
 80063a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a6:	f000 ff4b 	bl	8007240 <_lseek_r>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	bf15      	itete	ne
 80063b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80063b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063ba:	81a3      	strheq	r3, [r4, #12]
 80063bc:	bf18      	it	ne
 80063be:	81a3      	strhne	r3, [r4, #12]
 80063c0:	bd10      	pop	{r4, pc}

080063c2 <__sclose>:
 80063c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c6:	f000 b89b 	b.w	8006500 <_close_r>

080063ca <strcat>:
 80063ca:	4602      	mov	r2, r0
 80063cc:	b510      	push	{r4, lr}
 80063ce:	7814      	ldrb	r4, [r2, #0]
 80063d0:	4613      	mov	r3, r2
 80063d2:	3201      	adds	r2, #1
 80063d4:	2c00      	cmp	r4, #0
 80063d6:	d1fa      	bne.n	80063ce <strcat+0x4>
 80063d8:	3b01      	subs	r3, #1
 80063da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063e2:	2a00      	cmp	r2, #0
 80063e4:	d1f9      	bne.n	80063da <strcat+0x10>
 80063e6:	bd10      	pop	{r4, pc}

080063e8 <strtok>:
 80063e8:	4b16      	ldr	r3, [pc, #88]	; (8006444 <strtok+0x5c>)
 80063ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ee:	681f      	ldr	r7, [r3, #0]
 80063f0:	4605      	mov	r5, r0
 80063f2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80063f4:	460e      	mov	r6, r1
 80063f6:	b9ec      	cbnz	r4, 8006434 <strtok+0x4c>
 80063f8:	2050      	movs	r0, #80	; 0x50
 80063fa:	f000 ff33 	bl	8007264 <malloc>
 80063fe:	4602      	mov	r2, r0
 8006400:	65b8      	str	r0, [r7, #88]	; 0x58
 8006402:	b920      	cbnz	r0, 800640e <strtok+0x26>
 8006404:	2157      	movs	r1, #87	; 0x57
 8006406:	4b10      	ldr	r3, [pc, #64]	; (8006448 <strtok+0x60>)
 8006408:	4810      	ldr	r0, [pc, #64]	; (800644c <strtok+0x64>)
 800640a:	f000 f85b 	bl	80064c4 <__assert_func>
 800640e:	e9c0 4400 	strd	r4, r4, [r0]
 8006412:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006416:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800641a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800641e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006422:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006426:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800642a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800642e:	6184      	str	r4, [r0, #24]
 8006430:	7704      	strb	r4, [r0, #28]
 8006432:	6244      	str	r4, [r0, #36]	; 0x24
 8006434:	4631      	mov	r1, r6
 8006436:	4628      	mov	r0, r5
 8006438:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800643a:	2301      	movs	r3, #1
 800643c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006440:	f000 b806 	b.w	8006450 <__strtok_r>
 8006444:	20000010 	.word	0x20000010
 8006448:	080092c2 	.word	0x080092c2
 800644c:	080092d9 	.word	0x080092d9

08006450 <__strtok_r>:
 8006450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006452:	b908      	cbnz	r0, 8006458 <__strtok_r+0x8>
 8006454:	6810      	ldr	r0, [r2, #0]
 8006456:	b188      	cbz	r0, 800647c <__strtok_r+0x2c>
 8006458:	4604      	mov	r4, r0
 800645a:	460f      	mov	r7, r1
 800645c:	4620      	mov	r0, r4
 800645e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006462:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006466:	b91e      	cbnz	r6, 8006470 <__strtok_r+0x20>
 8006468:	b965      	cbnz	r5, 8006484 <__strtok_r+0x34>
 800646a:	4628      	mov	r0, r5
 800646c:	6015      	str	r5, [r2, #0]
 800646e:	e005      	b.n	800647c <__strtok_r+0x2c>
 8006470:	42b5      	cmp	r5, r6
 8006472:	d1f6      	bne.n	8006462 <__strtok_r+0x12>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1f0      	bne.n	800645a <__strtok_r+0xa>
 8006478:	6014      	str	r4, [r2, #0]
 800647a:	7003      	strb	r3, [r0, #0]
 800647c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800647e:	461c      	mov	r4, r3
 8006480:	e00c      	b.n	800649c <__strtok_r+0x4c>
 8006482:	b915      	cbnz	r5, 800648a <__strtok_r+0x3a>
 8006484:	460e      	mov	r6, r1
 8006486:	f814 3b01 	ldrb.w	r3, [r4], #1
 800648a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800648e:	42ab      	cmp	r3, r5
 8006490:	d1f7      	bne.n	8006482 <__strtok_r+0x32>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f3      	beq.n	800647e <__strtok_r+0x2e>
 8006496:	2300      	movs	r3, #0
 8006498:	f804 3c01 	strb.w	r3, [r4, #-1]
 800649c:	6014      	str	r4, [r2, #0]
 800649e:	e7ed      	b.n	800647c <__strtok_r+0x2c>

080064a0 <_write_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	2200      	movs	r2, #0
 80064aa:	4d05      	ldr	r5, [pc, #20]	; (80064c0 <_write_r+0x20>)
 80064ac:	602a      	str	r2, [r5, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f7fb fd58 	bl	8001f64 <_write>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	d102      	bne.n	80064be <_write_r+0x1e>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	b103      	cbz	r3, 80064be <_write_r+0x1e>
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	bd38      	pop	{r3, r4, r5, pc}
 80064c0:	200003d0 	.word	0x200003d0

080064c4 <__assert_func>:
 80064c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064c6:	4614      	mov	r4, r2
 80064c8:	461a      	mov	r2, r3
 80064ca:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <__assert_func+0x2c>)
 80064cc:	4605      	mov	r5, r0
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68d8      	ldr	r0, [r3, #12]
 80064d2:	b14c      	cbz	r4, 80064e8 <__assert_func+0x24>
 80064d4:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <__assert_func+0x30>)
 80064d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064da:	9100      	str	r1, [sp, #0]
 80064dc:	462b      	mov	r3, r5
 80064de:	4906      	ldr	r1, [pc, #24]	; (80064f8 <__assert_func+0x34>)
 80064e0:	f000 fe98 	bl	8007214 <fiprintf>
 80064e4:	f002 fb64 	bl	8008bb0 <abort>
 80064e8:	4b04      	ldr	r3, [pc, #16]	; (80064fc <__assert_func+0x38>)
 80064ea:	461c      	mov	r4, r3
 80064ec:	e7f3      	b.n	80064d6 <__assert_func+0x12>
 80064ee:	bf00      	nop
 80064f0:	20000010 	.word	0x20000010
 80064f4:	08009336 	.word	0x08009336
 80064f8:	08009343 	.word	0x08009343
 80064fc:	08009371 	.word	0x08009371

08006500 <_close_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	2300      	movs	r3, #0
 8006504:	4d05      	ldr	r5, [pc, #20]	; (800651c <_close_r+0x1c>)
 8006506:	4604      	mov	r4, r0
 8006508:	4608      	mov	r0, r1
 800650a:	602b      	str	r3, [r5, #0]
 800650c:	f7fb fd46 	bl	8001f9c <_close>
 8006510:	1c43      	adds	r3, r0, #1
 8006512:	d102      	bne.n	800651a <_close_r+0x1a>
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	b103      	cbz	r3, 800651a <_close_r+0x1a>
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	bd38      	pop	{r3, r4, r5, pc}
 800651c:	200003d0 	.word	0x200003d0

08006520 <quorem>:
 8006520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	6903      	ldr	r3, [r0, #16]
 8006526:	690c      	ldr	r4, [r1, #16]
 8006528:	4607      	mov	r7, r0
 800652a:	42a3      	cmp	r3, r4
 800652c:	f2c0 8082 	blt.w	8006634 <quorem+0x114>
 8006530:	3c01      	subs	r4, #1
 8006532:	f100 0514 	add.w	r5, r0, #20
 8006536:	f101 0814 	add.w	r8, r1, #20
 800653a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006544:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006548:	3301      	adds	r3, #1
 800654a:	429a      	cmp	r2, r3
 800654c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006550:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006554:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006558:	d331      	bcc.n	80065be <quorem+0x9e>
 800655a:	f04f 0e00 	mov.w	lr, #0
 800655e:	4640      	mov	r0, r8
 8006560:	46ac      	mov	ip, r5
 8006562:	46f2      	mov	sl, lr
 8006564:	f850 2b04 	ldr.w	r2, [r0], #4
 8006568:	b293      	uxth	r3, r2
 800656a:	fb06 e303 	mla	r3, r6, r3, lr
 800656e:	0c12      	lsrs	r2, r2, #16
 8006570:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006574:	b29b      	uxth	r3, r3
 8006576:	fb06 e202 	mla	r2, r6, r2, lr
 800657a:	ebaa 0303 	sub.w	r3, sl, r3
 800657e:	f8dc a000 	ldr.w	sl, [ip]
 8006582:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006586:	fa1f fa8a 	uxth.w	sl, sl
 800658a:	4453      	add	r3, sl
 800658c:	f8dc a000 	ldr.w	sl, [ip]
 8006590:	b292      	uxth	r2, r2
 8006592:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006596:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800659a:	b29b      	uxth	r3, r3
 800659c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065a0:	4581      	cmp	r9, r0
 80065a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065a6:	f84c 3b04 	str.w	r3, [ip], #4
 80065aa:	d2db      	bcs.n	8006564 <quorem+0x44>
 80065ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80065b0:	b92b      	cbnz	r3, 80065be <quorem+0x9e>
 80065b2:	9b01      	ldr	r3, [sp, #4]
 80065b4:	3b04      	subs	r3, #4
 80065b6:	429d      	cmp	r5, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	d32f      	bcc.n	800661c <quorem+0xfc>
 80065bc:	613c      	str	r4, [r7, #16]
 80065be:	4638      	mov	r0, r7
 80065c0:	f001 f8e4 	bl	800778c <__mcmp>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	db25      	blt.n	8006614 <quorem+0xf4>
 80065c8:	4628      	mov	r0, r5
 80065ca:	f04f 0c00 	mov.w	ip, #0
 80065ce:	3601      	adds	r6, #1
 80065d0:	f858 1b04 	ldr.w	r1, [r8], #4
 80065d4:	f8d0 e000 	ldr.w	lr, [r0]
 80065d8:	b28b      	uxth	r3, r1
 80065da:	ebac 0303 	sub.w	r3, ip, r3
 80065de:	fa1f f28e 	uxth.w	r2, lr
 80065e2:	4413      	add	r3, r2
 80065e4:	0c0a      	lsrs	r2, r1, #16
 80065e6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065f4:	45c1      	cmp	r9, r8
 80065f6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065fa:	f840 3b04 	str.w	r3, [r0], #4
 80065fe:	d2e7      	bcs.n	80065d0 <quorem+0xb0>
 8006600:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006604:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006608:	b922      	cbnz	r2, 8006614 <quorem+0xf4>
 800660a:	3b04      	subs	r3, #4
 800660c:	429d      	cmp	r5, r3
 800660e:	461a      	mov	r2, r3
 8006610:	d30a      	bcc.n	8006628 <quorem+0x108>
 8006612:	613c      	str	r4, [r7, #16]
 8006614:	4630      	mov	r0, r6
 8006616:	b003      	add	sp, #12
 8006618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	3b04      	subs	r3, #4
 8006620:	2a00      	cmp	r2, #0
 8006622:	d1cb      	bne.n	80065bc <quorem+0x9c>
 8006624:	3c01      	subs	r4, #1
 8006626:	e7c6      	b.n	80065b6 <quorem+0x96>
 8006628:	6812      	ldr	r2, [r2, #0]
 800662a:	3b04      	subs	r3, #4
 800662c:	2a00      	cmp	r2, #0
 800662e:	d1f0      	bne.n	8006612 <quorem+0xf2>
 8006630:	3c01      	subs	r4, #1
 8006632:	e7eb      	b.n	800660c <quorem+0xec>
 8006634:	2000      	movs	r0, #0
 8006636:	e7ee      	b.n	8006616 <quorem+0xf6>

08006638 <_dtoa_r>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	4616      	mov	r6, r2
 800663e:	461f      	mov	r7, r3
 8006640:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006642:	b099      	sub	sp, #100	; 0x64
 8006644:	4605      	mov	r5, r0
 8006646:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800664a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800664e:	b974      	cbnz	r4, 800666e <_dtoa_r+0x36>
 8006650:	2010      	movs	r0, #16
 8006652:	f000 fe07 	bl	8007264 <malloc>
 8006656:	4602      	mov	r2, r0
 8006658:	6268      	str	r0, [r5, #36]	; 0x24
 800665a:	b920      	cbnz	r0, 8006666 <_dtoa_r+0x2e>
 800665c:	21ea      	movs	r1, #234	; 0xea
 800665e:	4ba8      	ldr	r3, [pc, #672]	; (8006900 <_dtoa_r+0x2c8>)
 8006660:	48a8      	ldr	r0, [pc, #672]	; (8006904 <_dtoa_r+0x2cc>)
 8006662:	f7ff ff2f 	bl	80064c4 <__assert_func>
 8006666:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800666a:	6004      	str	r4, [r0, #0]
 800666c:	60c4      	str	r4, [r0, #12]
 800666e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	b151      	cbz	r1, 800668a <_dtoa_r+0x52>
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	2301      	movs	r3, #1
 8006678:	4093      	lsls	r3, r2
 800667a:	604a      	str	r2, [r1, #4]
 800667c:	608b      	str	r3, [r1, #8]
 800667e:	4628      	mov	r0, r5
 8006680:	f000 fe46 	bl	8007310 <_Bfree>
 8006684:	2200      	movs	r2, #0
 8006686:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	1e3b      	subs	r3, r7, #0
 800668c:	bfaf      	iteee	ge
 800668e:	2300      	movge	r3, #0
 8006690:	2201      	movlt	r2, #1
 8006692:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006696:	9305      	strlt	r3, [sp, #20]
 8006698:	bfa8      	it	ge
 800669a:	f8c8 3000 	strge.w	r3, [r8]
 800669e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80066a2:	4b99      	ldr	r3, [pc, #612]	; (8006908 <_dtoa_r+0x2d0>)
 80066a4:	bfb8      	it	lt
 80066a6:	f8c8 2000 	strlt.w	r2, [r8]
 80066aa:	ea33 0309 	bics.w	r3, r3, r9
 80066ae:	d119      	bne.n	80066e4 <_dtoa_r+0xac>
 80066b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80066b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066bc:	4333      	orrs	r3, r6
 80066be:	f000 857f 	beq.w	80071c0 <_dtoa_r+0xb88>
 80066c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066c4:	b953      	cbnz	r3, 80066dc <_dtoa_r+0xa4>
 80066c6:	4b91      	ldr	r3, [pc, #580]	; (800690c <_dtoa_r+0x2d4>)
 80066c8:	e022      	b.n	8006710 <_dtoa_r+0xd8>
 80066ca:	4b91      	ldr	r3, [pc, #580]	; (8006910 <_dtoa_r+0x2d8>)
 80066cc:	9303      	str	r3, [sp, #12]
 80066ce:	3308      	adds	r3, #8
 80066d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	9803      	ldr	r0, [sp, #12]
 80066d6:	b019      	add	sp, #100	; 0x64
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	4b8b      	ldr	r3, [pc, #556]	; (800690c <_dtoa_r+0x2d4>)
 80066de:	9303      	str	r3, [sp, #12]
 80066e0:	3303      	adds	r3, #3
 80066e2:	e7f5      	b.n	80066d0 <_dtoa_r+0x98>
 80066e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80066ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066f0:	2200      	movs	r2, #0
 80066f2:	2300      	movs	r3, #0
 80066f4:	f7fa f970 	bl	80009d8 <__aeabi_dcmpeq>
 80066f8:	4680      	mov	r8, r0
 80066fa:	b158      	cbz	r0, 8006714 <_dtoa_r+0xdc>
 80066fc:	2301      	movs	r3, #1
 80066fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 8558 	beq.w	80071ba <_dtoa_r+0xb82>
 800670a:	4882      	ldr	r0, [pc, #520]	; (8006914 <_dtoa_r+0x2dc>)
 800670c:	6018      	str	r0, [r3, #0]
 800670e:	1e43      	subs	r3, r0, #1
 8006710:	9303      	str	r3, [sp, #12]
 8006712:	e7df      	b.n	80066d4 <_dtoa_r+0x9c>
 8006714:	ab16      	add	r3, sp, #88	; 0x58
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	ab17      	add	r3, sp, #92	; 0x5c
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	4628      	mov	r0, r5
 800671e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006722:	f001 f8db 	bl	80078dc <__d2b>
 8006726:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800672a:	4683      	mov	fp, r0
 800672c:	2c00      	cmp	r4, #0
 800672e:	d07f      	beq.n	8006830 <_dtoa_r+0x1f8>
 8006730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006736:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800673a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800673e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006742:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006746:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800674a:	2200      	movs	r2, #0
 800674c:	4b72      	ldr	r3, [pc, #456]	; (8006918 <_dtoa_r+0x2e0>)
 800674e:	f7f9 fd23 	bl	8000198 <__aeabi_dsub>
 8006752:	a365      	add	r3, pc, #404	; (adr r3, 80068e8 <_dtoa_r+0x2b0>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f7f9 fed6 	bl	8000508 <__aeabi_dmul>
 800675c:	a364      	add	r3, pc, #400	; (adr r3, 80068f0 <_dtoa_r+0x2b8>)
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	f7f9 fd1b 	bl	800019c <__adddf3>
 8006766:	4606      	mov	r6, r0
 8006768:	4620      	mov	r0, r4
 800676a:	460f      	mov	r7, r1
 800676c:	f7f9 fe62 	bl	8000434 <__aeabi_i2d>
 8006770:	a361      	add	r3, pc, #388	; (adr r3, 80068f8 <_dtoa_r+0x2c0>)
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f7f9 fec7 	bl	8000508 <__aeabi_dmul>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4630      	mov	r0, r6
 8006780:	4639      	mov	r1, r7
 8006782:	f7f9 fd0b 	bl	800019c <__adddf3>
 8006786:	4606      	mov	r6, r0
 8006788:	460f      	mov	r7, r1
 800678a:	f7fa f96d 	bl	8000a68 <__aeabi_d2iz>
 800678e:	2200      	movs	r2, #0
 8006790:	4682      	mov	sl, r0
 8006792:	2300      	movs	r3, #0
 8006794:	4630      	mov	r0, r6
 8006796:	4639      	mov	r1, r7
 8006798:	f7fa f928 	bl	80009ec <__aeabi_dcmplt>
 800679c:	b148      	cbz	r0, 80067b2 <_dtoa_r+0x17a>
 800679e:	4650      	mov	r0, sl
 80067a0:	f7f9 fe48 	bl	8000434 <__aeabi_i2d>
 80067a4:	4632      	mov	r2, r6
 80067a6:	463b      	mov	r3, r7
 80067a8:	f7fa f916 	bl	80009d8 <__aeabi_dcmpeq>
 80067ac:	b908      	cbnz	r0, 80067b2 <_dtoa_r+0x17a>
 80067ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067b2:	f1ba 0f16 	cmp.w	sl, #22
 80067b6:	d858      	bhi.n	800686a <_dtoa_r+0x232>
 80067b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067bc:	4b57      	ldr	r3, [pc, #348]	; (800691c <_dtoa_r+0x2e4>)
 80067be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	f7fa f911 	bl	80009ec <__aeabi_dcmplt>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d04f      	beq.n	800686e <_dtoa_r+0x236>
 80067ce:	2300      	movs	r3, #0
 80067d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80067d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067d8:	1b1c      	subs	r4, r3, r4
 80067da:	1e63      	subs	r3, r4, #1
 80067dc:	9309      	str	r3, [sp, #36]	; 0x24
 80067de:	bf49      	itett	mi
 80067e0:	f1c4 0301 	rsbmi	r3, r4, #1
 80067e4:	2300      	movpl	r3, #0
 80067e6:	9306      	strmi	r3, [sp, #24]
 80067e8:	2300      	movmi	r3, #0
 80067ea:	bf54      	ite	pl
 80067ec:	9306      	strpl	r3, [sp, #24]
 80067ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 80067f0:	f1ba 0f00 	cmp.w	sl, #0
 80067f4:	db3d      	blt.n	8006872 <_dtoa_r+0x23a>
 80067f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80067fc:	4453      	add	r3, sl
 80067fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006800:	2300      	movs	r3, #0
 8006802:	930a      	str	r3, [sp, #40]	; 0x28
 8006804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006806:	2b09      	cmp	r3, #9
 8006808:	f200 808c 	bhi.w	8006924 <_dtoa_r+0x2ec>
 800680c:	2b05      	cmp	r3, #5
 800680e:	bfc4      	itt	gt
 8006810:	3b04      	subgt	r3, #4
 8006812:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006816:	bfc8      	it	gt
 8006818:	2400      	movgt	r4, #0
 800681a:	f1a3 0302 	sub.w	r3, r3, #2
 800681e:	bfd8      	it	le
 8006820:	2401      	movle	r4, #1
 8006822:	2b03      	cmp	r3, #3
 8006824:	f200 808a 	bhi.w	800693c <_dtoa_r+0x304>
 8006828:	e8df f003 	tbb	[pc, r3]
 800682c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006830:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006834:	441c      	add	r4, r3
 8006836:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800683a:	2b20      	cmp	r3, #32
 800683c:	bfc3      	ittte	gt
 800683e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006842:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006846:	fa09 f303 	lslgt.w	r3, r9, r3
 800684a:	f1c3 0320 	rsble	r3, r3, #32
 800684e:	bfc6      	itte	gt
 8006850:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006854:	4318      	orrgt	r0, r3
 8006856:	fa06 f003 	lslle.w	r0, r6, r3
 800685a:	f7f9 fddb 	bl	8000414 <__aeabi_ui2d>
 800685e:	2301      	movs	r3, #1
 8006860:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006864:	3c01      	subs	r4, #1
 8006866:	9313      	str	r3, [sp, #76]	; 0x4c
 8006868:	e76f      	b.n	800674a <_dtoa_r+0x112>
 800686a:	2301      	movs	r3, #1
 800686c:	e7b2      	b.n	80067d4 <_dtoa_r+0x19c>
 800686e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006870:	e7b1      	b.n	80067d6 <_dtoa_r+0x19e>
 8006872:	9b06      	ldr	r3, [sp, #24]
 8006874:	eba3 030a 	sub.w	r3, r3, sl
 8006878:	9306      	str	r3, [sp, #24]
 800687a:	f1ca 0300 	rsb	r3, sl, #0
 800687e:	930a      	str	r3, [sp, #40]	; 0x28
 8006880:	2300      	movs	r3, #0
 8006882:	930e      	str	r3, [sp, #56]	; 0x38
 8006884:	e7be      	b.n	8006804 <_dtoa_r+0x1cc>
 8006886:	2300      	movs	r3, #0
 8006888:	930b      	str	r3, [sp, #44]	; 0x2c
 800688a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800688c:	2b00      	cmp	r3, #0
 800688e:	dc58      	bgt.n	8006942 <_dtoa_r+0x30a>
 8006890:	f04f 0901 	mov.w	r9, #1
 8006894:	464b      	mov	r3, r9
 8006896:	f8cd 9020 	str.w	r9, [sp, #32]
 800689a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800689e:	2200      	movs	r2, #0
 80068a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80068a2:	6042      	str	r2, [r0, #4]
 80068a4:	2204      	movs	r2, #4
 80068a6:	f102 0614 	add.w	r6, r2, #20
 80068aa:	429e      	cmp	r6, r3
 80068ac:	6841      	ldr	r1, [r0, #4]
 80068ae:	d94e      	bls.n	800694e <_dtoa_r+0x316>
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 fced 	bl	8007290 <_Balloc>
 80068b6:	9003      	str	r0, [sp, #12]
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d14c      	bne.n	8006956 <_dtoa_r+0x31e>
 80068bc:	4602      	mov	r2, r0
 80068be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068c2:	4b17      	ldr	r3, [pc, #92]	; (8006920 <_dtoa_r+0x2e8>)
 80068c4:	e6cc      	b.n	8006660 <_dtoa_r+0x28>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e7de      	b.n	8006888 <_dtoa_r+0x250>
 80068ca:	2300      	movs	r3, #0
 80068cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80068ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068d0:	eb0a 0903 	add.w	r9, sl, r3
 80068d4:	f109 0301 	add.w	r3, r9, #1
 80068d8:	2b01      	cmp	r3, #1
 80068da:	9308      	str	r3, [sp, #32]
 80068dc:	bfb8      	it	lt
 80068de:	2301      	movlt	r3, #1
 80068e0:	e7dd      	b.n	800689e <_dtoa_r+0x266>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e7f2      	b.n	80068cc <_dtoa_r+0x294>
 80068e6:	bf00      	nop
 80068e8:	636f4361 	.word	0x636f4361
 80068ec:	3fd287a7 	.word	0x3fd287a7
 80068f0:	8b60c8b3 	.word	0x8b60c8b3
 80068f4:	3fc68a28 	.word	0x3fc68a28
 80068f8:	509f79fb 	.word	0x509f79fb
 80068fc:	3fd34413 	.word	0x3fd34413
 8006900:	080092c2 	.word	0x080092c2
 8006904:	0800937f 	.word	0x0800937f
 8006908:	7ff00000 	.word	0x7ff00000
 800690c:	0800937b 	.word	0x0800937b
 8006910:	08009372 	.word	0x08009372
 8006914:	0800955a 	.word	0x0800955a
 8006918:	3ff80000 	.word	0x3ff80000
 800691c:	08009470 	.word	0x08009470
 8006920:	080093da 	.word	0x080093da
 8006924:	2401      	movs	r4, #1
 8006926:	2300      	movs	r3, #0
 8006928:	940b      	str	r4, [sp, #44]	; 0x2c
 800692a:	9322      	str	r3, [sp, #136]	; 0x88
 800692c:	f04f 39ff 	mov.w	r9, #4294967295
 8006930:	2200      	movs	r2, #0
 8006932:	2312      	movs	r3, #18
 8006934:	f8cd 9020 	str.w	r9, [sp, #32]
 8006938:	9223      	str	r2, [sp, #140]	; 0x8c
 800693a:	e7b0      	b.n	800689e <_dtoa_r+0x266>
 800693c:	2301      	movs	r3, #1
 800693e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006940:	e7f4      	b.n	800692c <_dtoa_r+0x2f4>
 8006942:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006946:	464b      	mov	r3, r9
 8006948:	f8cd 9020 	str.w	r9, [sp, #32]
 800694c:	e7a7      	b.n	800689e <_dtoa_r+0x266>
 800694e:	3101      	adds	r1, #1
 8006950:	6041      	str	r1, [r0, #4]
 8006952:	0052      	lsls	r2, r2, #1
 8006954:	e7a7      	b.n	80068a6 <_dtoa_r+0x26e>
 8006956:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006958:	9a03      	ldr	r2, [sp, #12]
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	9b08      	ldr	r3, [sp, #32]
 800695e:	2b0e      	cmp	r3, #14
 8006960:	f200 80a8 	bhi.w	8006ab4 <_dtoa_r+0x47c>
 8006964:	2c00      	cmp	r4, #0
 8006966:	f000 80a5 	beq.w	8006ab4 <_dtoa_r+0x47c>
 800696a:	f1ba 0f00 	cmp.w	sl, #0
 800696e:	dd34      	ble.n	80069da <_dtoa_r+0x3a2>
 8006970:	4a9a      	ldr	r2, [pc, #616]	; (8006bdc <_dtoa_r+0x5a4>)
 8006972:	f00a 030f 	and.w	r3, sl, #15
 8006976:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800697a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800697e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006982:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006986:	ea4f 142a 	mov.w	r4, sl, asr #4
 800698a:	d016      	beq.n	80069ba <_dtoa_r+0x382>
 800698c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006990:	4b93      	ldr	r3, [pc, #588]	; (8006be0 <_dtoa_r+0x5a8>)
 8006992:	2703      	movs	r7, #3
 8006994:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006998:	f7f9 fee0 	bl	800075c <__aeabi_ddiv>
 800699c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069a0:	f004 040f 	and.w	r4, r4, #15
 80069a4:	4e8e      	ldr	r6, [pc, #568]	; (8006be0 <_dtoa_r+0x5a8>)
 80069a6:	b954      	cbnz	r4, 80069be <_dtoa_r+0x386>
 80069a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069b0:	f7f9 fed4 	bl	800075c <__aeabi_ddiv>
 80069b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069b8:	e029      	b.n	8006a0e <_dtoa_r+0x3d6>
 80069ba:	2702      	movs	r7, #2
 80069bc:	e7f2      	b.n	80069a4 <_dtoa_r+0x36c>
 80069be:	07e1      	lsls	r1, r4, #31
 80069c0:	d508      	bpl.n	80069d4 <_dtoa_r+0x39c>
 80069c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069ca:	f7f9 fd9d 	bl	8000508 <__aeabi_dmul>
 80069ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069d2:	3701      	adds	r7, #1
 80069d4:	1064      	asrs	r4, r4, #1
 80069d6:	3608      	adds	r6, #8
 80069d8:	e7e5      	b.n	80069a6 <_dtoa_r+0x36e>
 80069da:	f000 80a5 	beq.w	8006b28 <_dtoa_r+0x4f0>
 80069de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069e2:	f1ca 0400 	rsb	r4, sl, #0
 80069e6:	4b7d      	ldr	r3, [pc, #500]	; (8006bdc <_dtoa_r+0x5a4>)
 80069e8:	f004 020f 	and.w	r2, r4, #15
 80069ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f7f9 fd88 	bl	8000508 <__aeabi_dmul>
 80069f8:	2702      	movs	r7, #2
 80069fa:	2300      	movs	r3, #0
 80069fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a00:	4e77      	ldr	r6, [pc, #476]	; (8006be0 <_dtoa_r+0x5a8>)
 8006a02:	1124      	asrs	r4, r4, #4
 8006a04:	2c00      	cmp	r4, #0
 8006a06:	f040 8084 	bne.w	8006b12 <_dtoa_r+0x4da>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1d2      	bne.n	80069b4 <_dtoa_r+0x37c>
 8006a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 808b 	beq.w	8006b2c <_dtoa_r+0x4f4>
 8006a16:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a1a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a22:	2200      	movs	r2, #0
 8006a24:	4b6f      	ldr	r3, [pc, #444]	; (8006be4 <_dtoa_r+0x5ac>)
 8006a26:	f7f9 ffe1 	bl	80009ec <__aeabi_dcmplt>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d07e      	beq.n	8006b2c <_dtoa_r+0x4f4>
 8006a2e:	9b08      	ldr	r3, [sp, #32]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d07b      	beq.n	8006b2c <_dtoa_r+0x4f4>
 8006a34:	f1b9 0f00 	cmp.w	r9, #0
 8006a38:	dd38      	ble.n	8006aac <_dtoa_r+0x474>
 8006a3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a3e:	2200      	movs	r2, #0
 8006a40:	4b69      	ldr	r3, [pc, #420]	; (8006be8 <_dtoa_r+0x5b0>)
 8006a42:	f7f9 fd61 	bl	8000508 <__aeabi_dmul>
 8006a46:	464c      	mov	r4, r9
 8006a48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a4c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006a50:	3701      	adds	r7, #1
 8006a52:	4638      	mov	r0, r7
 8006a54:	f7f9 fcee 	bl	8000434 <__aeabi_i2d>
 8006a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a5c:	f7f9 fd54 	bl	8000508 <__aeabi_dmul>
 8006a60:	2200      	movs	r2, #0
 8006a62:	4b62      	ldr	r3, [pc, #392]	; (8006bec <_dtoa_r+0x5b4>)
 8006a64:	f7f9 fb9a 	bl	800019c <__adddf3>
 8006a68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006a6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a70:	9611      	str	r6, [sp, #68]	; 0x44
 8006a72:	2c00      	cmp	r4, #0
 8006a74:	d15d      	bne.n	8006b32 <_dtoa_r+0x4fa>
 8006a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	4b5c      	ldr	r3, [pc, #368]	; (8006bf0 <_dtoa_r+0x5b8>)
 8006a7e:	f7f9 fb8b 	bl	8000198 <__aeabi_dsub>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a8a:	4633      	mov	r3, r6
 8006a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a8e:	f7f9 ffcb 	bl	8000a28 <__aeabi_dcmpgt>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f040 829c 	bne.w	8006fd0 <_dtoa_r+0x998>
 8006a98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a9e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006aa2:	f7f9 ffa3 	bl	80009ec <__aeabi_dcmplt>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	f040 8290 	bne.w	8006fcc <_dtoa_r+0x994>
 8006aac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006ab0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f2c0 8152 	blt.w	8006d60 <_dtoa_r+0x728>
 8006abc:	f1ba 0f0e 	cmp.w	sl, #14
 8006ac0:	f300 814e 	bgt.w	8006d60 <_dtoa_r+0x728>
 8006ac4:	4b45      	ldr	r3, [pc, #276]	; (8006bdc <_dtoa_r+0x5a4>)
 8006ac6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006aca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ace:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006ad2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f280 80db 	bge.w	8006c90 <_dtoa_r+0x658>
 8006ada:	9b08      	ldr	r3, [sp, #32]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f300 80d7 	bgt.w	8006c90 <_dtoa_r+0x658>
 8006ae2:	f040 8272 	bne.w	8006fca <_dtoa_r+0x992>
 8006ae6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aea:	2200      	movs	r2, #0
 8006aec:	4b40      	ldr	r3, [pc, #256]	; (8006bf0 <_dtoa_r+0x5b8>)
 8006aee:	f7f9 fd0b 	bl	8000508 <__aeabi_dmul>
 8006af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006af6:	f7f9 ff8d 	bl	8000a14 <__aeabi_dcmpge>
 8006afa:	9c08      	ldr	r4, [sp, #32]
 8006afc:	4626      	mov	r6, r4
 8006afe:	2800      	cmp	r0, #0
 8006b00:	f040 8248 	bne.w	8006f94 <_dtoa_r+0x95c>
 8006b04:	2331      	movs	r3, #49	; 0x31
 8006b06:	9f03      	ldr	r7, [sp, #12]
 8006b08:	f10a 0a01 	add.w	sl, sl, #1
 8006b0c:	f807 3b01 	strb.w	r3, [r7], #1
 8006b10:	e244      	b.n	8006f9c <_dtoa_r+0x964>
 8006b12:	07e2      	lsls	r2, r4, #31
 8006b14:	d505      	bpl.n	8006b22 <_dtoa_r+0x4ea>
 8006b16:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b1a:	f7f9 fcf5 	bl	8000508 <__aeabi_dmul>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	3701      	adds	r7, #1
 8006b22:	1064      	asrs	r4, r4, #1
 8006b24:	3608      	adds	r6, #8
 8006b26:	e76d      	b.n	8006a04 <_dtoa_r+0x3cc>
 8006b28:	2702      	movs	r7, #2
 8006b2a:	e770      	b.n	8006a0e <_dtoa_r+0x3d6>
 8006b2c:	46d0      	mov	r8, sl
 8006b2e:	9c08      	ldr	r4, [sp, #32]
 8006b30:	e78f      	b.n	8006a52 <_dtoa_r+0x41a>
 8006b32:	9903      	ldr	r1, [sp, #12]
 8006b34:	4b29      	ldr	r3, [pc, #164]	; (8006bdc <_dtoa_r+0x5a4>)
 8006b36:	4421      	add	r1, r4
 8006b38:	9112      	str	r1, [sp, #72]	; 0x48
 8006b3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b40:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006b44:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	d055      	beq.n	8006bf8 <_dtoa_r+0x5c0>
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	4929      	ldr	r1, [pc, #164]	; (8006bf4 <_dtoa_r+0x5bc>)
 8006b50:	f7f9 fe04 	bl	800075c <__aeabi_ddiv>
 8006b54:	463b      	mov	r3, r7
 8006b56:	4632      	mov	r2, r6
 8006b58:	f7f9 fb1e 	bl	8000198 <__aeabi_dsub>
 8006b5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b60:	9f03      	ldr	r7, [sp, #12]
 8006b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b66:	f7f9 ff7f 	bl	8000a68 <__aeabi_d2iz>
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	f7f9 fc62 	bl	8000434 <__aeabi_i2d>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b78:	f7f9 fb0e 	bl	8000198 <__aeabi_dsub>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	3430      	adds	r4, #48	; 0x30
 8006b82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b8a:	f807 4b01 	strb.w	r4, [r7], #1
 8006b8e:	f7f9 ff2d 	bl	80009ec <__aeabi_dcmplt>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d174      	bne.n	8006c80 <_dtoa_r+0x648>
 8006b96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	4911      	ldr	r1, [pc, #68]	; (8006be4 <_dtoa_r+0x5ac>)
 8006b9e:	f7f9 fafb 	bl	8000198 <__aeabi_dsub>
 8006ba2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ba6:	f7f9 ff21 	bl	80009ec <__aeabi_dcmplt>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	f040 80b7 	bne.w	8006d1e <_dtoa_r+0x6e6>
 8006bb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bb2:	429f      	cmp	r7, r3
 8006bb4:	f43f af7a 	beq.w	8006aac <_dtoa_r+0x474>
 8006bb8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <_dtoa_r+0x5b0>)
 8006bc0:	f7f9 fca2 	bl	8000508 <__aeabi_dmul>
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bce:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <_dtoa_r+0x5b0>)
 8006bd0:	f7f9 fc9a 	bl	8000508 <__aeabi_dmul>
 8006bd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bd8:	e7c3      	b.n	8006b62 <_dtoa_r+0x52a>
 8006bda:	bf00      	nop
 8006bdc:	08009470 	.word	0x08009470
 8006be0:	08009448 	.word	0x08009448
 8006be4:	3ff00000 	.word	0x3ff00000
 8006be8:	40240000 	.word	0x40240000
 8006bec:	401c0000 	.word	0x401c0000
 8006bf0:	40140000 	.word	0x40140000
 8006bf4:	3fe00000 	.word	0x3fe00000
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	4639      	mov	r1, r7
 8006bfc:	f7f9 fc84 	bl	8000508 <__aeabi_dmul>
 8006c00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c06:	9c03      	ldr	r4, [sp, #12]
 8006c08:	9314      	str	r3, [sp, #80]	; 0x50
 8006c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c0e:	f7f9 ff2b 	bl	8000a68 <__aeabi_d2iz>
 8006c12:	9015      	str	r0, [sp, #84]	; 0x54
 8006c14:	f7f9 fc0e 	bl	8000434 <__aeabi_i2d>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c20:	f7f9 faba 	bl	8000198 <__aeabi_dsub>
 8006c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c26:	4606      	mov	r6, r0
 8006c28:	3330      	adds	r3, #48	; 0x30
 8006c2a:	f804 3b01 	strb.w	r3, [r4], #1
 8006c2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c30:	460f      	mov	r7, r1
 8006c32:	429c      	cmp	r4, r3
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	d124      	bne.n	8006c84 <_dtoa_r+0x64c>
 8006c3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c3e:	4bb0      	ldr	r3, [pc, #704]	; (8006f00 <_dtoa_r+0x8c8>)
 8006c40:	f7f9 faac 	bl	800019c <__adddf3>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4630      	mov	r0, r6
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 feec 	bl	8000a28 <__aeabi_dcmpgt>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d163      	bne.n	8006d1c <_dtoa_r+0x6e4>
 8006c54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c58:	2000      	movs	r0, #0
 8006c5a:	49a9      	ldr	r1, [pc, #676]	; (8006f00 <_dtoa_r+0x8c8>)
 8006c5c:	f7f9 fa9c 	bl	8000198 <__aeabi_dsub>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4630      	mov	r0, r6
 8006c66:	4639      	mov	r1, r7
 8006c68:	f7f9 fec0 	bl	80009ec <__aeabi_dcmplt>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	f43f af1d 	beq.w	8006aac <_dtoa_r+0x474>
 8006c72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006c74:	1e7b      	subs	r3, r7, #1
 8006c76:	9314      	str	r3, [sp, #80]	; 0x50
 8006c78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006c7c:	2b30      	cmp	r3, #48	; 0x30
 8006c7e:	d0f8      	beq.n	8006c72 <_dtoa_r+0x63a>
 8006c80:	46c2      	mov	sl, r8
 8006c82:	e03b      	b.n	8006cfc <_dtoa_r+0x6c4>
 8006c84:	4b9f      	ldr	r3, [pc, #636]	; (8006f04 <_dtoa_r+0x8cc>)
 8006c86:	f7f9 fc3f 	bl	8000508 <__aeabi_dmul>
 8006c8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c8e:	e7bc      	b.n	8006c0a <_dtoa_r+0x5d2>
 8006c90:	9f03      	ldr	r7, [sp, #12]
 8006c92:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006c96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	f7f9 fd5d 	bl	800075c <__aeabi_ddiv>
 8006ca2:	f7f9 fee1 	bl	8000a68 <__aeabi_d2iz>
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	f7f9 fbc4 	bl	8000434 <__aeabi_i2d>
 8006cac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cb0:	f7f9 fc2a 	bl	8000508 <__aeabi_dmul>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7f9 fa6c 	bl	8000198 <__aeabi_dsub>
 8006cc0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006cc4:	f807 6b01 	strb.w	r6, [r7], #1
 8006cc8:	9e03      	ldr	r6, [sp, #12]
 8006cca:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006cce:	1bbe      	subs	r6, r7, r6
 8006cd0:	45b4      	cmp	ip, r6
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	d136      	bne.n	8006d46 <_dtoa_r+0x70e>
 8006cd8:	f7f9 fa60 	bl	800019c <__adddf3>
 8006cdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ce0:	4680      	mov	r8, r0
 8006ce2:	4689      	mov	r9, r1
 8006ce4:	f7f9 fea0 	bl	8000a28 <__aeabi_dcmpgt>
 8006ce8:	bb58      	cbnz	r0, 8006d42 <_dtoa_r+0x70a>
 8006cea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cee:	4640      	mov	r0, r8
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	f7f9 fe71 	bl	80009d8 <__aeabi_dcmpeq>
 8006cf6:	b108      	cbz	r0, 8006cfc <_dtoa_r+0x6c4>
 8006cf8:	07e1      	lsls	r1, r4, #31
 8006cfa:	d422      	bmi.n	8006d42 <_dtoa_r+0x70a>
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	4659      	mov	r1, fp
 8006d00:	f000 fb06 	bl	8007310 <_Bfree>
 8006d04:	2300      	movs	r3, #0
 8006d06:	703b      	strb	r3, [r7, #0]
 8006d08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006d0a:	f10a 0001 	add.w	r0, sl, #1
 8006d0e:	6018      	str	r0, [r3, #0]
 8006d10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f43f acde 	beq.w	80066d4 <_dtoa_r+0x9c>
 8006d18:	601f      	str	r7, [r3, #0]
 8006d1a:	e4db      	b.n	80066d4 <_dtoa_r+0x9c>
 8006d1c:	4627      	mov	r7, r4
 8006d1e:	463b      	mov	r3, r7
 8006d20:	461f      	mov	r7, r3
 8006d22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d26:	2a39      	cmp	r2, #57	; 0x39
 8006d28:	d107      	bne.n	8006d3a <_dtoa_r+0x702>
 8006d2a:	9a03      	ldr	r2, [sp, #12]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d1f7      	bne.n	8006d20 <_dtoa_r+0x6e8>
 8006d30:	2230      	movs	r2, #48	; 0x30
 8006d32:	9903      	ldr	r1, [sp, #12]
 8006d34:	f108 0801 	add.w	r8, r8, #1
 8006d38:	700a      	strb	r2, [r1, #0]
 8006d3a:	781a      	ldrb	r2, [r3, #0]
 8006d3c:	3201      	adds	r2, #1
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	e79e      	b.n	8006c80 <_dtoa_r+0x648>
 8006d42:	46d0      	mov	r8, sl
 8006d44:	e7eb      	b.n	8006d1e <_dtoa_r+0x6e6>
 8006d46:	2200      	movs	r2, #0
 8006d48:	4b6e      	ldr	r3, [pc, #440]	; (8006f04 <_dtoa_r+0x8cc>)
 8006d4a:	f7f9 fbdd 	bl	8000508 <__aeabi_dmul>
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2300      	movs	r3, #0
 8006d52:	4680      	mov	r8, r0
 8006d54:	4689      	mov	r9, r1
 8006d56:	f7f9 fe3f 	bl	80009d8 <__aeabi_dcmpeq>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d09b      	beq.n	8006c96 <_dtoa_r+0x65e>
 8006d5e:	e7cd      	b.n	8006cfc <_dtoa_r+0x6c4>
 8006d60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d62:	2a00      	cmp	r2, #0
 8006d64:	f000 80d0 	beq.w	8006f08 <_dtoa_r+0x8d0>
 8006d68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006d6a:	2a01      	cmp	r2, #1
 8006d6c:	f300 80ae 	bgt.w	8006ecc <_dtoa_r+0x894>
 8006d70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d72:	2a00      	cmp	r2, #0
 8006d74:	f000 80a6 	beq.w	8006ec4 <_dtoa_r+0x88c>
 8006d78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d7e:	9f06      	ldr	r7, [sp, #24]
 8006d80:	9a06      	ldr	r2, [sp, #24]
 8006d82:	2101      	movs	r1, #1
 8006d84:	441a      	add	r2, r3
 8006d86:	9206      	str	r2, [sp, #24]
 8006d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	441a      	add	r2, r3
 8006d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d90:	f000 fb74 	bl	800747c <__i2b>
 8006d94:	4606      	mov	r6, r0
 8006d96:	2f00      	cmp	r7, #0
 8006d98:	dd0c      	ble.n	8006db4 <_dtoa_r+0x77c>
 8006d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd09      	ble.n	8006db4 <_dtoa_r+0x77c>
 8006da0:	42bb      	cmp	r3, r7
 8006da2:	bfa8      	it	ge
 8006da4:	463b      	movge	r3, r7
 8006da6:	9a06      	ldr	r2, [sp, #24]
 8006da8:	1aff      	subs	r7, r7, r3
 8006daa:	1ad2      	subs	r2, r2, r3
 8006dac:	9206      	str	r2, [sp, #24]
 8006dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	9309      	str	r3, [sp, #36]	; 0x24
 8006db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db6:	b1f3      	cbz	r3, 8006df6 <_dtoa_r+0x7be>
 8006db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80a8 	beq.w	8006f10 <_dtoa_r+0x8d8>
 8006dc0:	2c00      	cmp	r4, #0
 8006dc2:	dd10      	ble.n	8006de6 <_dtoa_r+0x7ae>
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f000 fc15 	bl	80075f8 <__pow5mult>
 8006dce:	465a      	mov	r2, fp
 8006dd0:	4601      	mov	r1, r0
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	f000 fb67 	bl	80074a8 <__multiply>
 8006dda:	4680      	mov	r8, r0
 8006ddc:	4659      	mov	r1, fp
 8006dde:	4628      	mov	r0, r5
 8006de0:	f000 fa96 	bl	8007310 <_Bfree>
 8006de4:	46c3      	mov	fp, r8
 8006de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de8:	1b1a      	subs	r2, r3, r4
 8006dea:	d004      	beq.n	8006df6 <_dtoa_r+0x7be>
 8006dec:	4659      	mov	r1, fp
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 fc02 	bl	80075f8 <__pow5mult>
 8006df4:	4683      	mov	fp, r0
 8006df6:	2101      	movs	r1, #1
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f000 fb3f 	bl	800747c <__i2b>
 8006dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e00:	4604      	mov	r4, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f340 8086 	ble.w	8006f14 <_dtoa_r+0x8dc>
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4601      	mov	r1, r0
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f000 fbf3 	bl	80075f8 <__pow5mult>
 8006e12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e14:	4604      	mov	r4, r0
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	dd7f      	ble.n	8006f1a <_dtoa_r+0x8e2>
 8006e1a:	f04f 0800 	mov.w	r8, #0
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e24:	6918      	ldr	r0, [r3, #16]
 8006e26:	f000 fadb 	bl	80073e0 <__hi0bits>
 8006e2a:	f1c0 0020 	rsb	r0, r0, #32
 8006e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e30:	4418      	add	r0, r3
 8006e32:	f010 001f 	ands.w	r0, r0, #31
 8006e36:	f000 8092 	beq.w	8006f5e <_dtoa_r+0x926>
 8006e3a:	f1c0 0320 	rsb	r3, r0, #32
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	f340 808a 	ble.w	8006f58 <_dtoa_r+0x920>
 8006e44:	f1c0 001c 	rsb	r0, r0, #28
 8006e48:	9b06      	ldr	r3, [sp, #24]
 8006e4a:	4407      	add	r7, r0
 8006e4c:	4403      	add	r3, r0
 8006e4e:	9306      	str	r3, [sp, #24]
 8006e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e52:	4403      	add	r3, r0
 8006e54:	9309      	str	r3, [sp, #36]	; 0x24
 8006e56:	9b06      	ldr	r3, [sp, #24]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	dd05      	ble.n	8006e68 <_dtoa_r+0x830>
 8006e5c:	4659      	mov	r1, fp
 8006e5e:	461a      	mov	r2, r3
 8006e60:	4628      	mov	r0, r5
 8006e62:	f000 fc23 	bl	80076ac <__lshift>
 8006e66:	4683      	mov	fp, r0
 8006e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	dd05      	ble.n	8006e7a <_dtoa_r+0x842>
 8006e6e:	4621      	mov	r1, r4
 8006e70:	461a      	mov	r2, r3
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 fc1a 	bl	80076ac <__lshift>
 8006e78:	4604      	mov	r4, r0
 8006e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d070      	beq.n	8006f62 <_dtoa_r+0x92a>
 8006e80:	4621      	mov	r1, r4
 8006e82:	4658      	mov	r0, fp
 8006e84:	f000 fc82 	bl	800778c <__mcmp>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	da6a      	bge.n	8006f62 <_dtoa_r+0x92a>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4659      	mov	r1, fp
 8006e90:	220a      	movs	r2, #10
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 fa5e 	bl	8007354 <__multadd>
 8006e98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e9a:	4683      	mov	fp, r0
 8006e9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8194 	beq.w	80071ce <_dtoa_r+0xb96>
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	220a      	movs	r2, #10
 8006eac:	4628      	mov	r0, r5
 8006eae:	f000 fa51 	bl	8007354 <__multadd>
 8006eb2:	f1b9 0f00 	cmp.w	r9, #0
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	f300 8093 	bgt.w	8006fe2 <_dtoa_r+0x9aa>
 8006ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	dc57      	bgt.n	8006f72 <_dtoa_r+0x93a>
 8006ec2:	e08e      	b.n	8006fe2 <_dtoa_r+0x9aa>
 8006ec4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006eca:	e757      	b.n	8006d7c <_dtoa_r+0x744>
 8006ecc:	9b08      	ldr	r3, [sp, #32]
 8006ece:	1e5c      	subs	r4, r3, #1
 8006ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	bfb7      	itett	lt
 8006ed6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ed8:	1b1c      	subge	r4, r3, r4
 8006eda:	1ae2      	sublt	r2, r4, r3
 8006edc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006ede:	bfbe      	ittt	lt
 8006ee0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006ee2:	189b      	addlt	r3, r3, r2
 8006ee4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006ee6:	9b08      	ldr	r3, [sp, #32]
 8006ee8:	bfb8      	it	lt
 8006eea:	2400      	movlt	r4, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bfbb      	ittet	lt
 8006ef0:	9b06      	ldrlt	r3, [sp, #24]
 8006ef2:	9a08      	ldrlt	r2, [sp, #32]
 8006ef4:	9f06      	ldrge	r7, [sp, #24]
 8006ef6:	1a9f      	sublt	r7, r3, r2
 8006ef8:	bfac      	ite	ge
 8006efa:	9b08      	ldrge	r3, [sp, #32]
 8006efc:	2300      	movlt	r3, #0
 8006efe:	e73f      	b.n	8006d80 <_dtoa_r+0x748>
 8006f00:	3fe00000 	.word	0x3fe00000
 8006f04:	40240000 	.word	0x40240000
 8006f08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f0a:	9f06      	ldr	r7, [sp, #24]
 8006f0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006f0e:	e742      	b.n	8006d96 <_dtoa_r+0x75e>
 8006f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f12:	e76b      	b.n	8006dec <_dtoa_r+0x7b4>
 8006f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	dc19      	bgt.n	8006f4e <_dtoa_r+0x916>
 8006f1a:	9b04      	ldr	r3, [sp, #16]
 8006f1c:	b9bb      	cbnz	r3, 8006f4e <_dtoa_r+0x916>
 8006f1e:	9b05      	ldr	r3, [sp, #20]
 8006f20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f24:	b99b      	cbnz	r3, 8006f4e <_dtoa_r+0x916>
 8006f26:	9b05      	ldr	r3, [sp, #20]
 8006f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f2c:	0d1b      	lsrs	r3, r3, #20
 8006f2e:	051b      	lsls	r3, r3, #20
 8006f30:	b183      	cbz	r3, 8006f54 <_dtoa_r+0x91c>
 8006f32:	f04f 0801 	mov.w	r8, #1
 8006f36:	9b06      	ldr	r3, [sp, #24]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	9306      	str	r3, [sp, #24]
 8006f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3e:	3301      	adds	r3, #1
 8006f40:	9309      	str	r3, [sp, #36]	; 0x24
 8006f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f47f af6a 	bne.w	8006e1e <_dtoa_r+0x7e6>
 8006f4a:	2001      	movs	r0, #1
 8006f4c:	e76f      	b.n	8006e2e <_dtoa_r+0x7f6>
 8006f4e:	f04f 0800 	mov.w	r8, #0
 8006f52:	e7f6      	b.n	8006f42 <_dtoa_r+0x90a>
 8006f54:	4698      	mov	r8, r3
 8006f56:	e7f4      	b.n	8006f42 <_dtoa_r+0x90a>
 8006f58:	f43f af7d 	beq.w	8006e56 <_dtoa_r+0x81e>
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	301c      	adds	r0, #28
 8006f60:	e772      	b.n	8006e48 <_dtoa_r+0x810>
 8006f62:	9b08      	ldr	r3, [sp, #32]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dc36      	bgt.n	8006fd6 <_dtoa_r+0x99e>
 8006f68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	dd33      	ble.n	8006fd6 <_dtoa_r+0x99e>
 8006f6e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f72:	f1b9 0f00 	cmp.w	r9, #0
 8006f76:	d10d      	bne.n	8006f94 <_dtoa_r+0x95c>
 8006f78:	4621      	mov	r1, r4
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	2205      	movs	r2, #5
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f000 f9e8 	bl	8007354 <__multadd>
 8006f84:	4601      	mov	r1, r0
 8006f86:	4604      	mov	r4, r0
 8006f88:	4658      	mov	r0, fp
 8006f8a:	f000 fbff 	bl	800778c <__mcmp>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	f73f adb8 	bgt.w	8006b04 <_dtoa_r+0x4cc>
 8006f94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f96:	9f03      	ldr	r7, [sp, #12]
 8006f98:	ea6f 0a03 	mvn.w	sl, r3
 8006f9c:	f04f 0800 	mov.w	r8, #0
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f000 f9b4 	bl	8007310 <_Bfree>
 8006fa8:	2e00      	cmp	r6, #0
 8006faa:	f43f aea7 	beq.w	8006cfc <_dtoa_r+0x6c4>
 8006fae:	f1b8 0f00 	cmp.w	r8, #0
 8006fb2:	d005      	beq.n	8006fc0 <_dtoa_r+0x988>
 8006fb4:	45b0      	cmp	r8, r6
 8006fb6:	d003      	beq.n	8006fc0 <_dtoa_r+0x988>
 8006fb8:	4641      	mov	r1, r8
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f000 f9a8 	bl	8007310 <_Bfree>
 8006fc0:	4631      	mov	r1, r6
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f000 f9a4 	bl	8007310 <_Bfree>
 8006fc8:	e698      	b.n	8006cfc <_dtoa_r+0x6c4>
 8006fca:	2400      	movs	r4, #0
 8006fcc:	4626      	mov	r6, r4
 8006fce:	e7e1      	b.n	8006f94 <_dtoa_r+0x95c>
 8006fd0:	46c2      	mov	sl, r8
 8006fd2:	4626      	mov	r6, r4
 8006fd4:	e596      	b.n	8006b04 <_dtoa_r+0x4cc>
 8006fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80fd 	beq.w	80071dc <_dtoa_r+0xba4>
 8006fe2:	2f00      	cmp	r7, #0
 8006fe4:	dd05      	ble.n	8006ff2 <_dtoa_r+0x9ba>
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	463a      	mov	r2, r7
 8006fea:	4628      	mov	r0, r5
 8006fec:	f000 fb5e 	bl	80076ac <__lshift>
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	f1b8 0f00 	cmp.w	r8, #0
 8006ff6:	d05c      	beq.n	80070b2 <_dtoa_r+0xa7a>
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	6871      	ldr	r1, [r6, #4]
 8006ffc:	f000 f948 	bl	8007290 <_Balloc>
 8007000:	4607      	mov	r7, r0
 8007002:	b928      	cbnz	r0, 8007010 <_dtoa_r+0x9d8>
 8007004:	4602      	mov	r2, r0
 8007006:	f240 21ea 	movw	r1, #746	; 0x2ea
 800700a:	4b7f      	ldr	r3, [pc, #508]	; (8007208 <_dtoa_r+0xbd0>)
 800700c:	f7ff bb28 	b.w	8006660 <_dtoa_r+0x28>
 8007010:	6932      	ldr	r2, [r6, #16]
 8007012:	f106 010c 	add.w	r1, r6, #12
 8007016:	3202      	adds	r2, #2
 8007018:	0092      	lsls	r2, r2, #2
 800701a:	300c      	adds	r0, #12
 800701c:	f7fe fcd0 	bl	80059c0 <memcpy>
 8007020:	2201      	movs	r2, #1
 8007022:	4639      	mov	r1, r7
 8007024:	4628      	mov	r0, r5
 8007026:	f000 fb41 	bl	80076ac <__lshift>
 800702a:	46b0      	mov	r8, r6
 800702c:	4606      	mov	r6, r0
 800702e:	9b03      	ldr	r3, [sp, #12]
 8007030:	3301      	adds	r3, #1
 8007032:	9308      	str	r3, [sp, #32]
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	444b      	add	r3, r9
 8007038:	930a      	str	r3, [sp, #40]	; 0x28
 800703a:	9b04      	ldr	r3, [sp, #16]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	9309      	str	r3, [sp, #36]	; 0x24
 8007042:	9b08      	ldr	r3, [sp, #32]
 8007044:	4621      	mov	r1, r4
 8007046:	3b01      	subs	r3, #1
 8007048:	4658      	mov	r0, fp
 800704a:	9304      	str	r3, [sp, #16]
 800704c:	f7ff fa68 	bl	8006520 <quorem>
 8007050:	4603      	mov	r3, r0
 8007052:	4641      	mov	r1, r8
 8007054:	3330      	adds	r3, #48	; 0x30
 8007056:	9006      	str	r0, [sp, #24]
 8007058:	4658      	mov	r0, fp
 800705a:	930b      	str	r3, [sp, #44]	; 0x2c
 800705c:	f000 fb96 	bl	800778c <__mcmp>
 8007060:	4632      	mov	r2, r6
 8007062:	4681      	mov	r9, r0
 8007064:	4621      	mov	r1, r4
 8007066:	4628      	mov	r0, r5
 8007068:	f000 fbac 	bl	80077c4 <__mdiff>
 800706c:	68c2      	ldr	r2, [r0, #12]
 800706e:	4607      	mov	r7, r0
 8007070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007072:	bb02      	cbnz	r2, 80070b6 <_dtoa_r+0xa7e>
 8007074:	4601      	mov	r1, r0
 8007076:	4658      	mov	r0, fp
 8007078:	f000 fb88 	bl	800778c <__mcmp>
 800707c:	4602      	mov	r2, r0
 800707e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007080:	4639      	mov	r1, r7
 8007082:	4628      	mov	r0, r5
 8007084:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007088:	f000 f942 	bl	8007310 <_Bfree>
 800708c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800708e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007090:	9f08      	ldr	r7, [sp, #32]
 8007092:	ea43 0102 	orr.w	r1, r3, r2
 8007096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007098:	430b      	orrs	r3, r1
 800709a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800709c:	d10d      	bne.n	80070ba <_dtoa_r+0xa82>
 800709e:	2b39      	cmp	r3, #57	; 0x39
 80070a0:	d029      	beq.n	80070f6 <_dtoa_r+0xabe>
 80070a2:	f1b9 0f00 	cmp.w	r9, #0
 80070a6:	dd01      	ble.n	80070ac <_dtoa_r+0xa74>
 80070a8:	9b06      	ldr	r3, [sp, #24]
 80070aa:	3331      	adds	r3, #49	; 0x31
 80070ac:	9a04      	ldr	r2, [sp, #16]
 80070ae:	7013      	strb	r3, [r2, #0]
 80070b0:	e776      	b.n	8006fa0 <_dtoa_r+0x968>
 80070b2:	4630      	mov	r0, r6
 80070b4:	e7b9      	b.n	800702a <_dtoa_r+0x9f2>
 80070b6:	2201      	movs	r2, #1
 80070b8:	e7e2      	b.n	8007080 <_dtoa_r+0xa48>
 80070ba:	f1b9 0f00 	cmp.w	r9, #0
 80070be:	db06      	blt.n	80070ce <_dtoa_r+0xa96>
 80070c0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80070c2:	ea41 0909 	orr.w	r9, r1, r9
 80070c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070c8:	ea59 0101 	orrs.w	r1, r9, r1
 80070cc:	d120      	bne.n	8007110 <_dtoa_r+0xad8>
 80070ce:	2a00      	cmp	r2, #0
 80070d0:	ddec      	ble.n	80070ac <_dtoa_r+0xa74>
 80070d2:	4659      	mov	r1, fp
 80070d4:	2201      	movs	r2, #1
 80070d6:	4628      	mov	r0, r5
 80070d8:	9308      	str	r3, [sp, #32]
 80070da:	f000 fae7 	bl	80076ac <__lshift>
 80070de:	4621      	mov	r1, r4
 80070e0:	4683      	mov	fp, r0
 80070e2:	f000 fb53 	bl	800778c <__mcmp>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	9b08      	ldr	r3, [sp, #32]
 80070ea:	dc02      	bgt.n	80070f2 <_dtoa_r+0xaba>
 80070ec:	d1de      	bne.n	80070ac <_dtoa_r+0xa74>
 80070ee:	07da      	lsls	r2, r3, #31
 80070f0:	d5dc      	bpl.n	80070ac <_dtoa_r+0xa74>
 80070f2:	2b39      	cmp	r3, #57	; 0x39
 80070f4:	d1d8      	bne.n	80070a8 <_dtoa_r+0xa70>
 80070f6:	2339      	movs	r3, #57	; 0x39
 80070f8:	9a04      	ldr	r2, [sp, #16]
 80070fa:	7013      	strb	r3, [r2, #0]
 80070fc:	463b      	mov	r3, r7
 80070fe:	461f      	mov	r7, r3
 8007100:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007104:	3b01      	subs	r3, #1
 8007106:	2a39      	cmp	r2, #57	; 0x39
 8007108:	d050      	beq.n	80071ac <_dtoa_r+0xb74>
 800710a:	3201      	adds	r2, #1
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	e747      	b.n	8006fa0 <_dtoa_r+0x968>
 8007110:	2a00      	cmp	r2, #0
 8007112:	dd03      	ble.n	800711c <_dtoa_r+0xae4>
 8007114:	2b39      	cmp	r3, #57	; 0x39
 8007116:	d0ee      	beq.n	80070f6 <_dtoa_r+0xabe>
 8007118:	3301      	adds	r3, #1
 800711a:	e7c7      	b.n	80070ac <_dtoa_r+0xa74>
 800711c:	9a08      	ldr	r2, [sp, #32]
 800711e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007120:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007124:	428a      	cmp	r2, r1
 8007126:	d02a      	beq.n	800717e <_dtoa_r+0xb46>
 8007128:	4659      	mov	r1, fp
 800712a:	2300      	movs	r3, #0
 800712c:	220a      	movs	r2, #10
 800712e:	4628      	mov	r0, r5
 8007130:	f000 f910 	bl	8007354 <__multadd>
 8007134:	45b0      	cmp	r8, r6
 8007136:	4683      	mov	fp, r0
 8007138:	f04f 0300 	mov.w	r3, #0
 800713c:	f04f 020a 	mov.w	r2, #10
 8007140:	4641      	mov	r1, r8
 8007142:	4628      	mov	r0, r5
 8007144:	d107      	bne.n	8007156 <_dtoa_r+0xb1e>
 8007146:	f000 f905 	bl	8007354 <__multadd>
 800714a:	4680      	mov	r8, r0
 800714c:	4606      	mov	r6, r0
 800714e:	9b08      	ldr	r3, [sp, #32]
 8007150:	3301      	adds	r3, #1
 8007152:	9308      	str	r3, [sp, #32]
 8007154:	e775      	b.n	8007042 <_dtoa_r+0xa0a>
 8007156:	f000 f8fd 	bl	8007354 <__multadd>
 800715a:	4631      	mov	r1, r6
 800715c:	4680      	mov	r8, r0
 800715e:	2300      	movs	r3, #0
 8007160:	220a      	movs	r2, #10
 8007162:	4628      	mov	r0, r5
 8007164:	f000 f8f6 	bl	8007354 <__multadd>
 8007168:	4606      	mov	r6, r0
 800716a:	e7f0      	b.n	800714e <_dtoa_r+0xb16>
 800716c:	f1b9 0f00 	cmp.w	r9, #0
 8007170:	bfcc      	ite	gt
 8007172:	464f      	movgt	r7, r9
 8007174:	2701      	movle	r7, #1
 8007176:	f04f 0800 	mov.w	r8, #0
 800717a:	9a03      	ldr	r2, [sp, #12]
 800717c:	4417      	add	r7, r2
 800717e:	4659      	mov	r1, fp
 8007180:	2201      	movs	r2, #1
 8007182:	4628      	mov	r0, r5
 8007184:	9308      	str	r3, [sp, #32]
 8007186:	f000 fa91 	bl	80076ac <__lshift>
 800718a:	4621      	mov	r1, r4
 800718c:	4683      	mov	fp, r0
 800718e:	f000 fafd 	bl	800778c <__mcmp>
 8007192:	2800      	cmp	r0, #0
 8007194:	dcb2      	bgt.n	80070fc <_dtoa_r+0xac4>
 8007196:	d102      	bne.n	800719e <_dtoa_r+0xb66>
 8007198:	9b08      	ldr	r3, [sp, #32]
 800719a:	07db      	lsls	r3, r3, #31
 800719c:	d4ae      	bmi.n	80070fc <_dtoa_r+0xac4>
 800719e:	463b      	mov	r3, r7
 80071a0:	461f      	mov	r7, r3
 80071a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071a6:	2a30      	cmp	r2, #48	; 0x30
 80071a8:	d0fa      	beq.n	80071a0 <_dtoa_r+0xb68>
 80071aa:	e6f9      	b.n	8006fa0 <_dtoa_r+0x968>
 80071ac:	9a03      	ldr	r2, [sp, #12]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d1a5      	bne.n	80070fe <_dtoa_r+0xac6>
 80071b2:	2331      	movs	r3, #49	; 0x31
 80071b4:	f10a 0a01 	add.w	sl, sl, #1
 80071b8:	e779      	b.n	80070ae <_dtoa_r+0xa76>
 80071ba:	4b14      	ldr	r3, [pc, #80]	; (800720c <_dtoa_r+0xbd4>)
 80071bc:	f7ff baa8 	b.w	8006710 <_dtoa_r+0xd8>
 80071c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f47f aa81 	bne.w	80066ca <_dtoa_r+0x92>
 80071c8:	4b11      	ldr	r3, [pc, #68]	; (8007210 <_dtoa_r+0xbd8>)
 80071ca:	f7ff baa1 	b.w	8006710 <_dtoa_r+0xd8>
 80071ce:	f1b9 0f00 	cmp.w	r9, #0
 80071d2:	dc03      	bgt.n	80071dc <_dtoa_r+0xba4>
 80071d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	f73f aecb 	bgt.w	8006f72 <_dtoa_r+0x93a>
 80071dc:	9f03      	ldr	r7, [sp, #12]
 80071de:	4621      	mov	r1, r4
 80071e0:	4658      	mov	r0, fp
 80071e2:	f7ff f99d 	bl	8006520 <quorem>
 80071e6:	9a03      	ldr	r2, [sp, #12]
 80071e8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80071ec:	f807 3b01 	strb.w	r3, [r7], #1
 80071f0:	1aba      	subs	r2, r7, r2
 80071f2:	4591      	cmp	r9, r2
 80071f4:	ddba      	ble.n	800716c <_dtoa_r+0xb34>
 80071f6:	4659      	mov	r1, fp
 80071f8:	2300      	movs	r3, #0
 80071fa:	220a      	movs	r2, #10
 80071fc:	4628      	mov	r0, r5
 80071fe:	f000 f8a9 	bl	8007354 <__multadd>
 8007202:	4683      	mov	fp, r0
 8007204:	e7eb      	b.n	80071de <_dtoa_r+0xba6>
 8007206:	bf00      	nop
 8007208:	080093da 	.word	0x080093da
 800720c:	08009559 	.word	0x08009559
 8007210:	08009372 	.word	0x08009372

08007214 <fiprintf>:
 8007214:	b40e      	push	{r1, r2, r3}
 8007216:	b503      	push	{r0, r1, lr}
 8007218:	4601      	mov	r1, r0
 800721a:	ab03      	add	r3, sp, #12
 800721c:	4805      	ldr	r0, [pc, #20]	; (8007234 <fiprintf+0x20>)
 800721e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007222:	6800      	ldr	r0, [r0, #0]
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	f000 fffd 	bl	8008224 <_vfiprintf_r>
 800722a:	b002      	add	sp, #8
 800722c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007230:	b003      	add	sp, #12
 8007232:	4770      	bx	lr
 8007234:	20000010 	.word	0x20000010

08007238 <_localeconv_r>:
 8007238:	4800      	ldr	r0, [pc, #0]	; (800723c <_localeconv_r+0x4>)
 800723a:	4770      	bx	lr
 800723c:	20000164 	.word	0x20000164

08007240 <_lseek_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	4611      	mov	r1, r2
 8007248:	2200      	movs	r2, #0
 800724a:	4d05      	ldr	r5, [pc, #20]	; (8007260 <_lseek_r+0x20>)
 800724c:	602a      	str	r2, [r5, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	f7fa fec8 	bl	8001fe4 <_lseek>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_lseek_r+0x1e>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_lseek_r+0x1e>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	200003d0 	.word	0x200003d0

08007264 <malloc>:
 8007264:	4b02      	ldr	r3, [pc, #8]	; (8007270 <malloc+0xc>)
 8007266:	4601      	mov	r1, r0
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	f000 bc0f 	b.w	8007a8c <_malloc_r>
 800726e:	bf00      	nop
 8007270:	20000010 	.word	0x20000010

08007274 <memchr>:
 8007274:	4603      	mov	r3, r0
 8007276:	b510      	push	{r4, lr}
 8007278:	b2c9      	uxtb	r1, r1
 800727a:	4402      	add	r2, r0
 800727c:	4293      	cmp	r3, r2
 800727e:	4618      	mov	r0, r3
 8007280:	d101      	bne.n	8007286 <memchr+0x12>
 8007282:	2000      	movs	r0, #0
 8007284:	e003      	b.n	800728e <memchr+0x1a>
 8007286:	7804      	ldrb	r4, [r0, #0]
 8007288:	3301      	adds	r3, #1
 800728a:	428c      	cmp	r4, r1
 800728c:	d1f6      	bne.n	800727c <memchr+0x8>
 800728e:	bd10      	pop	{r4, pc}

08007290 <_Balloc>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007294:	4604      	mov	r4, r0
 8007296:	460d      	mov	r5, r1
 8007298:	b976      	cbnz	r6, 80072b8 <_Balloc+0x28>
 800729a:	2010      	movs	r0, #16
 800729c:	f7ff ffe2 	bl	8007264 <malloc>
 80072a0:	4602      	mov	r2, r0
 80072a2:	6260      	str	r0, [r4, #36]	; 0x24
 80072a4:	b920      	cbnz	r0, 80072b0 <_Balloc+0x20>
 80072a6:	2166      	movs	r1, #102	; 0x66
 80072a8:	4b17      	ldr	r3, [pc, #92]	; (8007308 <_Balloc+0x78>)
 80072aa:	4818      	ldr	r0, [pc, #96]	; (800730c <_Balloc+0x7c>)
 80072ac:	f7ff f90a 	bl	80064c4 <__assert_func>
 80072b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072b4:	6006      	str	r6, [r0, #0]
 80072b6:	60c6      	str	r6, [r0, #12]
 80072b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072ba:	68f3      	ldr	r3, [r6, #12]
 80072bc:	b183      	cbz	r3, 80072e0 <_Balloc+0x50>
 80072be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072c6:	b9b8      	cbnz	r0, 80072f8 <_Balloc+0x68>
 80072c8:	2101      	movs	r1, #1
 80072ca:	fa01 f605 	lsl.w	r6, r1, r5
 80072ce:	1d72      	adds	r2, r6, #5
 80072d0:	4620      	mov	r0, r4
 80072d2:	0092      	lsls	r2, r2, #2
 80072d4:	f000 fb5e 	bl	8007994 <_calloc_r>
 80072d8:	b160      	cbz	r0, 80072f4 <_Balloc+0x64>
 80072da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072de:	e00e      	b.n	80072fe <_Balloc+0x6e>
 80072e0:	2221      	movs	r2, #33	; 0x21
 80072e2:	2104      	movs	r1, #4
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 fb55 	bl	8007994 <_calloc_r>
 80072ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072ec:	60f0      	str	r0, [r6, #12]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e4      	bne.n	80072be <_Balloc+0x2e>
 80072f4:	2000      	movs	r0, #0
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	6802      	ldr	r2, [r0, #0]
 80072fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072fe:	2300      	movs	r3, #0
 8007300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007304:	e7f7      	b.n	80072f6 <_Balloc+0x66>
 8007306:	bf00      	nop
 8007308:	080092c2 	.word	0x080092c2
 800730c:	080093eb 	.word	0x080093eb

08007310 <_Bfree>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007314:	4605      	mov	r5, r0
 8007316:	460c      	mov	r4, r1
 8007318:	b976      	cbnz	r6, 8007338 <_Bfree+0x28>
 800731a:	2010      	movs	r0, #16
 800731c:	f7ff ffa2 	bl	8007264 <malloc>
 8007320:	4602      	mov	r2, r0
 8007322:	6268      	str	r0, [r5, #36]	; 0x24
 8007324:	b920      	cbnz	r0, 8007330 <_Bfree+0x20>
 8007326:	218a      	movs	r1, #138	; 0x8a
 8007328:	4b08      	ldr	r3, [pc, #32]	; (800734c <_Bfree+0x3c>)
 800732a:	4809      	ldr	r0, [pc, #36]	; (8007350 <_Bfree+0x40>)
 800732c:	f7ff f8ca 	bl	80064c4 <__assert_func>
 8007330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007334:	6006      	str	r6, [r0, #0]
 8007336:	60c6      	str	r6, [r0, #12]
 8007338:	b13c      	cbz	r4, 800734a <_Bfree+0x3a>
 800733a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800733c:	6862      	ldr	r2, [r4, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007344:	6021      	str	r1, [r4, #0]
 8007346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	080092c2 	.word	0x080092c2
 8007350:	080093eb 	.word	0x080093eb

08007354 <__multadd>:
 8007354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007358:	4607      	mov	r7, r0
 800735a:	460c      	mov	r4, r1
 800735c:	461e      	mov	r6, r3
 800735e:	2000      	movs	r0, #0
 8007360:	690d      	ldr	r5, [r1, #16]
 8007362:	f101 0c14 	add.w	ip, r1, #20
 8007366:	f8dc 3000 	ldr.w	r3, [ip]
 800736a:	3001      	adds	r0, #1
 800736c:	b299      	uxth	r1, r3
 800736e:	fb02 6101 	mla	r1, r2, r1, r6
 8007372:	0c1e      	lsrs	r6, r3, #16
 8007374:	0c0b      	lsrs	r3, r1, #16
 8007376:	fb02 3306 	mla	r3, r2, r6, r3
 800737a:	b289      	uxth	r1, r1
 800737c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007380:	4285      	cmp	r5, r0
 8007382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007386:	f84c 1b04 	str.w	r1, [ip], #4
 800738a:	dcec      	bgt.n	8007366 <__multadd+0x12>
 800738c:	b30e      	cbz	r6, 80073d2 <__multadd+0x7e>
 800738e:	68a3      	ldr	r3, [r4, #8]
 8007390:	42ab      	cmp	r3, r5
 8007392:	dc19      	bgt.n	80073c8 <__multadd+0x74>
 8007394:	6861      	ldr	r1, [r4, #4]
 8007396:	4638      	mov	r0, r7
 8007398:	3101      	adds	r1, #1
 800739a:	f7ff ff79 	bl	8007290 <_Balloc>
 800739e:	4680      	mov	r8, r0
 80073a0:	b928      	cbnz	r0, 80073ae <__multadd+0x5a>
 80073a2:	4602      	mov	r2, r0
 80073a4:	21b5      	movs	r1, #181	; 0xb5
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <__multadd+0x84>)
 80073a8:	480c      	ldr	r0, [pc, #48]	; (80073dc <__multadd+0x88>)
 80073aa:	f7ff f88b 	bl	80064c4 <__assert_func>
 80073ae:	6922      	ldr	r2, [r4, #16]
 80073b0:	f104 010c 	add.w	r1, r4, #12
 80073b4:	3202      	adds	r2, #2
 80073b6:	0092      	lsls	r2, r2, #2
 80073b8:	300c      	adds	r0, #12
 80073ba:	f7fe fb01 	bl	80059c0 <memcpy>
 80073be:	4621      	mov	r1, r4
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff ffa5 	bl	8007310 <_Bfree>
 80073c6:	4644      	mov	r4, r8
 80073c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073cc:	3501      	adds	r5, #1
 80073ce:	615e      	str	r6, [r3, #20]
 80073d0:	6125      	str	r5, [r4, #16]
 80073d2:	4620      	mov	r0, r4
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	080093da 	.word	0x080093da
 80073dc:	080093eb 	.word	0x080093eb

080073e0 <__hi0bits>:
 80073e0:	0c02      	lsrs	r2, r0, #16
 80073e2:	0412      	lsls	r2, r2, #16
 80073e4:	4603      	mov	r3, r0
 80073e6:	b9ca      	cbnz	r2, 800741c <__hi0bits+0x3c>
 80073e8:	0403      	lsls	r3, r0, #16
 80073ea:	2010      	movs	r0, #16
 80073ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80073f0:	bf04      	itt	eq
 80073f2:	021b      	lsleq	r3, r3, #8
 80073f4:	3008      	addeq	r0, #8
 80073f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80073fa:	bf04      	itt	eq
 80073fc:	011b      	lsleq	r3, r3, #4
 80073fe:	3004      	addeq	r0, #4
 8007400:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007404:	bf04      	itt	eq
 8007406:	009b      	lsleq	r3, r3, #2
 8007408:	3002      	addeq	r0, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	db05      	blt.n	800741a <__hi0bits+0x3a>
 800740e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007412:	f100 0001 	add.w	r0, r0, #1
 8007416:	bf08      	it	eq
 8007418:	2020      	moveq	r0, #32
 800741a:	4770      	bx	lr
 800741c:	2000      	movs	r0, #0
 800741e:	e7e5      	b.n	80073ec <__hi0bits+0xc>

08007420 <__lo0bits>:
 8007420:	6803      	ldr	r3, [r0, #0]
 8007422:	4602      	mov	r2, r0
 8007424:	f013 0007 	ands.w	r0, r3, #7
 8007428:	d00b      	beq.n	8007442 <__lo0bits+0x22>
 800742a:	07d9      	lsls	r1, r3, #31
 800742c:	d421      	bmi.n	8007472 <__lo0bits+0x52>
 800742e:	0798      	lsls	r0, r3, #30
 8007430:	bf49      	itett	mi
 8007432:	085b      	lsrmi	r3, r3, #1
 8007434:	089b      	lsrpl	r3, r3, #2
 8007436:	2001      	movmi	r0, #1
 8007438:	6013      	strmi	r3, [r2, #0]
 800743a:	bf5c      	itt	pl
 800743c:	2002      	movpl	r0, #2
 800743e:	6013      	strpl	r3, [r2, #0]
 8007440:	4770      	bx	lr
 8007442:	b299      	uxth	r1, r3
 8007444:	b909      	cbnz	r1, 800744a <__lo0bits+0x2a>
 8007446:	2010      	movs	r0, #16
 8007448:	0c1b      	lsrs	r3, r3, #16
 800744a:	b2d9      	uxtb	r1, r3
 800744c:	b909      	cbnz	r1, 8007452 <__lo0bits+0x32>
 800744e:	3008      	adds	r0, #8
 8007450:	0a1b      	lsrs	r3, r3, #8
 8007452:	0719      	lsls	r1, r3, #28
 8007454:	bf04      	itt	eq
 8007456:	091b      	lsreq	r3, r3, #4
 8007458:	3004      	addeq	r0, #4
 800745a:	0799      	lsls	r1, r3, #30
 800745c:	bf04      	itt	eq
 800745e:	089b      	lsreq	r3, r3, #2
 8007460:	3002      	addeq	r0, #2
 8007462:	07d9      	lsls	r1, r3, #31
 8007464:	d403      	bmi.n	800746e <__lo0bits+0x4e>
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	f100 0001 	add.w	r0, r0, #1
 800746c:	d003      	beq.n	8007476 <__lo0bits+0x56>
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	4770      	bx	lr
 8007472:	2000      	movs	r0, #0
 8007474:	4770      	bx	lr
 8007476:	2020      	movs	r0, #32
 8007478:	4770      	bx	lr
	...

0800747c <__i2b>:
 800747c:	b510      	push	{r4, lr}
 800747e:	460c      	mov	r4, r1
 8007480:	2101      	movs	r1, #1
 8007482:	f7ff ff05 	bl	8007290 <_Balloc>
 8007486:	4602      	mov	r2, r0
 8007488:	b928      	cbnz	r0, 8007496 <__i2b+0x1a>
 800748a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800748e:	4b04      	ldr	r3, [pc, #16]	; (80074a0 <__i2b+0x24>)
 8007490:	4804      	ldr	r0, [pc, #16]	; (80074a4 <__i2b+0x28>)
 8007492:	f7ff f817 	bl	80064c4 <__assert_func>
 8007496:	2301      	movs	r3, #1
 8007498:	6144      	str	r4, [r0, #20]
 800749a:	6103      	str	r3, [r0, #16]
 800749c:	bd10      	pop	{r4, pc}
 800749e:	bf00      	nop
 80074a0:	080093da 	.word	0x080093da
 80074a4:	080093eb 	.word	0x080093eb

080074a8 <__multiply>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	4691      	mov	r9, r2
 80074ae:	690a      	ldr	r2, [r1, #16]
 80074b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074b4:	460c      	mov	r4, r1
 80074b6:	429a      	cmp	r2, r3
 80074b8:	bfbe      	ittt	lt
 80074ba:	460b      	movlt	r3, r1
 80074bc:	464c      	movlt	r4, r9
 80074be:	4699      	movlt	r9, r3
 80074c0:	6927      	ldr	r7, [r4, #16]
 80074c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074c6:	68a3      	ldr	r3, [r4, #8]
 80074c8:	6861      	ldr	r1, [r4, #4]
 80074ca:	eb07 060a 	add.w	r6, r7, sl
 80074ce:	42b3      	cmp	r3, r6
 80074d0:	b085      	sub	sp, #20
 80074d2:	bfb8      	it	lt
 80074d4:	3101      	addlt	r1, #1
 80074d6:	f7ff fedb 	bl	8007290 <_Balloc>
 80074da:	b930      	cbnz	r0, 80074ea <__multiply+0x42>
 80074dc:	4602      	mov	r2, r0
 80074de:	f240 115d 	movw	r1, #349	; 0x15d
 80074e2:	4b43      	ldr	r3, [pc, #268]	; (80075f0 <__multiply+0x148>)
 80074e4:	4843      	ldr	r0, [pc, #268]	; (80075f4 <__multiply+0x14c>)
 80074e6:	f7fe ffed 	bl	80064c4 <__assert_func>
 80074ea:	f100 0514 	add.w	r5, r0, #20
 80074ee:	462b      	mov	r3, r5
 80074f0:	2200      	movs	r2, #0
 80074f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074f6:	4543      	cmp	r3, r8
 80074f8:	d321      	bcc.n	800753e <__multiply+0x96>
 80074fa:	f104 0314 	add.w	r3, r4, #20
 80074fe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007502:	f109 0314 	add.w	r3, r9, #20
 8007506:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800750a:	9202      	str	r2, [sp, #8]
 800750c:	1b3a      	subs	r2, r7, r4
 800750e:	3a15      	subs	r2, #21
 8007510:	f022 0203 	bic.w	r2, r2, #3
 8007514:	3204      	adds	r2, #4
 8007516:	f104 0115 	add.w	r1, r4, #21
 800751a:	428f      	cmp	r7, r1
 800751c:	bf38      	it	cc
 800751e:	2204      	movcc	r2, #4
 8007520:	9201      	str	r2, [sp, #4]
 8007522:	9a02      	ldr	r2, [sp, #8]
 8007524:	9303      	str	r3, [sp, #12]
 8007526:	429a      	cmp	r2, r3
 8007528:	d80c      	bhi.n	8007544 <__multiply+0x9c>
 800752a:	2e00      	cmp	r6, #0
 800752c:	dd03      	ble.n	8007536 <__multiply+0x8e>
 800752e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007532:	2b00      	cmp	r3, #0
 8007534:	d059      	beq.n	80075ea <__multiply+0x142>
 8007536:	6106      	str	r6, [r0, #16]
 8007538:	b005      	add	sp, #20
 800753a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753e:	f843 2b04 	str.w	r2, [r3], #4
 8007542:	e7d8      	b.n	80074f6 <__multiply+0x4e>
 8007544:	f8b3 a000 	ldrh.w	sl, [r3]
 8007548:	f1ba 0f00 	cmp.w	sl, #0
 800754c:	d023      	beq.n	8007596 <__multiply+0xee>
 800754e:	46a9      	mov	r9, r5
 8007550:	f04f 0c00 	mov.w	ip, #0
 8007554:	f104 0e14 	add.w	lr, r4, #20
 8007558:	f85e 2b04 	ldr.w	r2, [lr], #4
 800755c:	f8d9 1000 	ldr.w	r1, [r9]
 8007560:	fa1f fb82 	uxth.w	fp, r2
 8007564:	b289      	uxth	r1, r1
 8007566:	fb0a 110b 	mla	r1, sl, fp, r1
 800756a:	4461      	add	r1, ip
 800756c:	f8d9 c000 	ldr.w	ip, [r9]
 8007570:	0c12      	lsrs	r2, r2, #16
 8007572:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007576:	fb0a c202 	mla	r2, sl, r2, ip
 800757a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800757e:	b289      	uxth	r1, r1
 8007580:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007584:	4577      	cmp	r7, lr
 8007586:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800758a:	f849 1b04 	str.w	r1, [r9], #4
 800758e:	d8e3      	bhi.n	8007558 <__multiply+0xb0>
 8007590:	9a01      	ldr	r2, [sp, #4]
 8007592:	f845 c002 	str.w	ip, [r5, r2]
 8007596:	9a03      	ldr	r2, [sp, #12]
 8007598:	3304      	adds	r3, #4
 800759a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800759e:	f1b9 0f00 	cmp.w	r9, #0
 80075a2:	d020      	beq.n	80075e6 <__multiply+0x13e>
 80075a4:	46ae      	mov	lr, r5
 80075a6:	f04f 0a00 	mov.w	sl, #0
 80075aa:	6829      	ldr	r1, [r5, #0]
 80075ac:	f104 0c14 	add.w	ip, r4, #20
 80075b0:	f8bc b000 	ldrh.w	fp, [ip]
 80075b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075b8:	b289      	uxth	r1, r1
 80075ba:	fb09 220b 	mla	r2, r9, fp, r2
 80075be:	4492      	add	sl, r2
 80075c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80075c4:	f84e 1b04 	str.w	r1, [lr], #4
 80075c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80075cc:	f8be 1000 	ldrh.w	r1, [lr]
 80075d0:	0c12      	lsrs	r2, r2, #16
 80075d2:	fb09 1102 	mla	r1, r9, r2, r1
 80075d6:	4567      	cmp	r7, ip
 80075d8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80075dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075e0:	d8e6      	bhi.n	80075b0 <__multiply+0x108>
 80075e2:	9a01      	ldr	r2, [sp, #4]
 80075e4:	50a9      	str	r1, [r5, r2]
 80075e6:	3504      	adds	r5, #4
 80075e8:	e79b      	b.n	8007522 <__multiply+0x7a>
 80075ea:	3e01      	subs	r6, #1
 80075ec:	e79d      	b.n	800752a <__multiply+0x82>
 80075ee:	bf00      	nop
 80075f0:	080093da 	.word	0x080093da
 80075f4:	080093eb 	.word	0x080093eb

080075f8 <__pow5mult>:
 80075f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075fc:	4615      	mov	r5, r2
 80075fe:	f012 0203 	ands.w	r2, r2, #3
 8007602:	4606      	mov	r6, r0
 8007604:	460f      	mov	r7, r1
 8007606:	d007      	beq.n	8007618 <__pow5mult+0x20>
 8007608:	4c25      	ldr	r4, [pc, #148]	; (80076a0 <__pow5mult+0xa8>)
 800760a:	3a01      	subs	r2, #1
 800760c:	2300      	movs	r3, #0
 800760e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007612:	f7ff fe9f 	bl	8007354 <__multadd>
 8007616:	4607      	mov	r7, r0
 8007618:	10ad      	asrs	r5, r5, #2
 800761a:	d03d      	beq.n	8007698 <__pow5mult+0xa0>
 800761c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800761e:	b97c      	cbnz	r4, 8007640 <__pow5mult+0x48>
 8007620:	2010      	movs	r0, #16
 8007622:	f7ff fe1f 	bl	8007264 <malloc>
 8007626:	4602      	mov	r2, r0
 8007628:	6270      	str	r0, [r6, #36]	; 0x24
 800762a:	b928      	cbnz	r0, 8007638 <__pow5mult+0x40>
 800762c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007630:	4b1c      	ldr	r3, [pc, #112]	; (80076a4 <__pow5mult+0xac>)
 8007632:	481d      	ldr	r0, [pc, #116]	; (80076a8 <__pow5mult+0xb0>)
 8007634:	f7fe ff46 	bl	80064c4 <__assert_func>
 8007638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800763c:	6004      	str	r4, [r0, #0]
 800763e:	60c4      	str	r4, [r0, #12]
 8007640:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007648:	b94c      	cbnz	r4, 800765e <__pow5mult+0x66>
 800764a:	f240 2171 	movw	r1, #625	; 0x271
 800764e:	4630      	mov	r0, r6
 8007650:	f7ff ff14 	bl	800747c <__i2b>
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	f8c8 0008 	str.w	r0, [r8, #8]
 800765c:	6003      	str	r3, [r0, #0]
 800765e:	f04f 0900 	mov.w	r9, #0
 8007662:	07eb      	lsls	r3, r5, #31
 8007664:	d50a      	bpl.n	800767c <__pow5mult+0x84>
 8007666:	4639      	mov	r1, r7
 8007668:	4622      	mov	r2, r4
 800766a:	4630      	mov	r0, r6
 800766c:	f7ff ff1c 	bl	80074a8 <__multiply>
 8007670:	4680      	mov	r8, r0
 8007672:	4639      	mov	r1, r7
 8007674:	4630      	mov	r0, r6
 8007676:	f7ff fe4b 	bl	8007310 <_Bfree>
 800767a:	4647      	mov	r7, r8
 800767c:	106d      	asrs	r5, r5, #1
 800767e:	d00b      	beq.n	8007698 <__pow5mult+0xa0>
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	b938      	cbnz	r0, 8007694 <__pow5mult+0x9c>
 8007684:	4622      	mov	r2, r4
 8007686:	4621      	mov	r1, r4
 8007688:	4630      	mov	r0, r6
 800768a:	f7ff ff0d 	bl	80074a8 <__multiply>
 800768e:	6020      	str	r0, [r4, #0]
 8007690:	f8c0 9000 	str.w	r9, [r0]
 8007694:	4604      	mov	r4, r0
 8007696:	e7e4      	b.n	8007662 <__pow5mult+0x6a>
 8007698:	4638      	mov	r0, r7
 800769a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800769e:	bf00      	nop
 80076a0:	08009538 	.word	0x08009538
 80076a4:	080092c2 	.word	0x080092c2
 80076a8:	080093eb 	.word	0x080093eb

080076ac <__lshift>:
 80076ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b0:	460c      	mov	r4, r1
 80076b2:	4607      	mov	r7, r0
 80076b4:	4691      	mov	r9, r2
 80076b6:	6923      	ldr	r3, [r4, #16]
 80076b8:	6849      	ldr	r1, [r1, #4]
 80076ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076be:	68a3      	ldr	r3, [r4, #8]
 80076c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076c4:	f108 0601 	add.w	r6, r8, #1
 80076c8:	42b3      	cmp	r3, r6
 80076ca:	db0b      	blt.n	80076e4 <__lshift+0x38>
 80076cc:	4638      	mov	r0, r7
 80076ce:	f7ff fddf 	bl	8007290 <_Balloc>
 80076d2:	4605      	mov	r5, r0
 80076d4:	b948      	cbnz	r0, 80076ea <__lshift+0x3e>
 80076d6:	4602      	mov	r2, r0
 80076d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80076dc:	4b29      	ldr	r3, [pc, #164]	; (8007784 <__lshift+0xd8>)
 80076de:	482a      	ldr	r0, [pc, #168]	; (8007788 <__lshift+0xdc>)
 80076e0:	f7fe fef0 	bl	80064c4 <__assert_func>
 80076e4:	3101      	adds	r1, #1
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	e7ee      	b.n	80076c8 <__lshift+0x1c>
 80076ea:	2300      	movs	r3, #0
 80076ec:	f100 0114 	add.w	r1, r0, #20
 80076f0:	f100 0210 	add.w	r2, r0, #16
 80076f4:	4618      	mov	r0, r3
 80076f6:	4553      	cmp	r3, sl
 80076f8:	db37      	blt.n	800776a <__lshift+0xbe>
 80076fa:	6920      	ldr	r0, [r4, #16]
 80076fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007700:	f104 0314 	add.w	r3, r4, #20
 8007704:	f019 091f 	ands.w	r9, r9, #31
 8007708:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800770c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007710:	d02f      	beq.n	8007772 <__lshift+0xc6>
 8007712:	468a      	mov	sl, r1
 8007714:	f04f 0c00 	mov.w	ip, #0
 8007718:	f1c9 0e20 	rsb	lr, r9, #32
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	fa02 f209 	lsl.w	r2, r2, r9
 8007722:	ea42 020c 	orr.w	r2, r2, ip
 8007726:	f84a 2b04 	str.w	r2, [sl], #4
 800772a:	f853 2b04 	ldr.w	r2, [r3], #4
 800772e:	4298      	cmp	r0, r3
 8007730:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007734:	d8f2      	bhi.n	800771c <__lshift+0x70>
 8007736:	1b03      	subs	r3, r0, r4
 8007738:	3b15      	subs	r3, #21
 800773a:	f023 0303 	bic.w	r3, r3, #3
 800773e:	3304      	adds	r3, #4
 8007740:	f104 0215 	add.w	r2, r4, #21
 8007744:	4290      	cmp	r0, r2
 8007746:	bf38      	it	cc
 8007748:	2304      	movcc	r3, #4
 800774a:	f841 c003 	str.w	ip, [r1, r3]
 800774e:	f1bc 0f00 	cmp.w	ip, #0
 8007752:	d001      	beq.n	8007758 <__lshift+0xac>
 8007754:	f108 0602 	add.w	r6, r8, #2
 8007758:	3e01      	subs	r6, #1
 800775a:	4638      	mov	r0, r7
 800775c:	4621      	mov	r1, r4
 800775e:	612e      	str	r6, [r5, #16]
 8007760:	f7ff fdd6 	bl	8007310 <_Bfree>
 8007764:	4628      	mov	r0, r5
 8007766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776a:	f842 0f04 	str.w	r0, [r2, #4]!
 800776e:	3301      	adds	r3, #1
 8007770:	e7c1      	b.n	80076f6 <__lshift+0x4a>
 8007772:	3904      	subs	r1, #4
 8007774:	f853 2b04 	ldr.w	r2, [r3], #4
 8007778:	4298      	cmp	r0, r3
 800777a:	f841 2f04 	str.w	r2, [r1, #4]!
 800777e:	d8f9      	bhi.n	8007774 <__lshift+0xc8>
 8007780:	e7ea      	b.n	8007758 <__lshift+0xac>
 8007782:	bf00      	nop
 8007784:	080093da 	.word	0x080093da
 8007788:	080093eb 	.word	0x080093eb

0800778c <__mcmp>:
 800778c:	4603      	mov	r3, r0
 800778e:	690a      	ldr	r2, [r1, #16]
 8007790:	6900      	ldr	r0, [r0, #16]
 8007792:	b530      	push	{r4, r5, lr}
 8007794:	1a80      	subs	r0, r0, r2
 8007796:	d10d      	bne.n	80077b4 <__mcmp+0x28>
 8007798:	3314      	adds	r3, #20
 800779a:	3114      	adds	r1, #20
 800779c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077ac:	4295      	cmp	r5, r2
 80077ae:	d002      	beq.n	80077b6 <__mcmp+0x2a>
 80077b0:	d304      	bcc.n	80077bc <__mcmp+0x30>
 80077b2:	2001      	movs	r0, #1
 80077b4:	bd30      	pop	{r4, r5, pc}
 80077b6:	42a3      	cmp	r3, r4
 80077b8:	d3f4      	bcc.n	80077a4 <__mcmp+0x18>
 80077ba:	e7fb      	b.n	80077b4 <__mcmp+0x28>
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	e7f8      	b.n	80077b4 <__mcmp+0x28>
	...

080077c4 <__mdiff>:
 80077c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c8:	460d      	mov	r5, r1
 80077ca:	4607      	mov	r7, r0
 80077cc:	4611      	mov	r1, r2
 80077ce:	4628      	mov	r0, r5
 80077d0:	4614      	mov	r4, r2
 80077d2:	f7ff ffdb 	bl	800778c <__mcmp>
 80077d6:	1e06      	subs	r6, r0, #0
 80077d8:	d111      	bne.n	80077fe <__mdiff+0x3a>
 80077da:	4631      	mov	r1, r6
 80077dc:	4638      	mov	r0, r7
 80077de:	f7ff fd57 	bl	8007290 <_Balloc>
 80077e2:	4602      	mov	r2, r0
 80077e4:	b928      	cbnz	r0, 80077f2 <__mdiff+0x2e>
 80077e6:	f240 2132 	movw	r1, #562	; 0x232
 80077ea:	4b3a      	ldr	r3, [pc, #232]	; (80078d4 <__mdiff+0x110>)
 80077ec:	483a      	ldr	r0, [pc, #232]	; (80078d8 <__mdiff+0x114>)
 80077ee:	f7fe fe69 	bl	80064c4 <__assert_func>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80077f8:	4610      	mov	r0, r2
 80077fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fe:	bfa4      	itt	ge
 8007800:	4623      	movge	r3, r4
 8007802:	462c      	movge	r4, r5
 8007804:	4638      	mov	r0, r7
 8007806:	6861      	ldr	r1, [r4, #4]
 8007808:	bfa6      	itte	ge
 800780a:	461d      	movge	r5, r3
 800780c:	2600      	movge	r6, #0
 800780e:	2601      	movlt	r6, #1
 8007810:	f7ff fd3e 	bl	8007290 <_Balloc>
 8007814:	4602      	mov	r2, r0
 8007816:	b918      	cbnz	r0, 8007820 <__mdiff+0x5c>
 8007818:	f44f 7110 	mov.w	r1, #576	; 0x240
 800781c:	4b2d      	ldr	r3, [pc, #180]	; (80078d4 <__mdiff+0x110>)
 800781e:	e7e5      	b.n	80077ec <__mdiff+0x28>
 8007820:	f102 0814 	add.w	r8, r2, #20
 8007824:	46c2      	mov	sl, r8
 8007826:	f04f 0c00 	mov.w	ip, #0
 800782a:	6927      	ldr	r7, [r4, #16]
 800782c:	60c6      	str	r6, [r0, #12]
 800782e:	692e      	ldr	r6, [r5, #16]
 8007830:	f104 0014 	add.w	r0, r4, #20
 8007834:	f105 0914 	add.w	r9, r5, #20
 8007838:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800783c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007840:	3410      	adds	r4, #16
 8007842:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007846:	f859 3b04 	ldr.w	r3, [r9], #4
 800784a:	fa1f f18b 	uxth.w	r1, fp
 800784e:	448c      	add	ip, r1
 8007850:	b299      	uxth	r1, r3
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	ebac 0101 	sub.w	r1, ip, r1
 8007858:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800785c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007860:	b289      	uxth	r1, r1
 8007862:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007866:	454e      	cmp	r6, r9
 8007868:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800786c:	f84a 3b04 	str.w	r3, [sl], #4
 8007870:	d8e7      	bhi.n	8007842 <__mdiff+0x7e>
 8007872:	1b73      	subs	r3, r6, r5
 8007874:	3b15      	subs	r3, #21
 8007876:	f023 0303 	bic.w	r3, r3, #3
 800787a:	3515      	adds	r5, #21
 800787c:	3304      	adds	r3, #4
 800787e:	42ae      	cmp	r6, r5
 8007880:	bf38      	it	cc
 8007882:	2304      	movcc	r3, #4
 8007884:	4418      	add	r0, r3
 8007886:	4443      	add	r3, r8
 8007888:	461e      	mov	r6, r3
 800788a:	4605      	mov	r5, r0
 800788c:	4575      	cmp	r5, lr
 800788e:	d30e      	bcc.n	80078ae <__mdiff+0xea>
 8007890:	f10e 0103 	add.w	r1, lr, #3
 8007894:	1a09      	subs	r1, r1, r0
 8007896:	f021 0103 	bic.w	r1, r1, #3
 800789a:	3803      	subs	r0, #3
 800789c:	4586      	cmp	lr, r0
 800789e:	bf38      	it	cc
 80078a0:	2100      	movcc	r1, #0
 80078a2:	4419      	add	r1, r3
 80078a4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80078a8:	b18b      	cbz	r3, 80078ce <__mdiff+0x10a>
 80078aa:	6117      	str	r7, [r2, #16]
 80078ac:	e7a4      	b.n	80077f8 <__mdiff+0x34>
 80078ae:	f855 8b04 	ldr.w	r8, [r5], #4
 80078b2:	fa1f f188 	uxth.w	r1, r8
 80078b6:	4461      	add	r1, ip
 80078b8:	140c      	asrs	r4, r1, #16
 80078ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078be:	b289      	uxth	r1, r1
 80078c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80078c4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80078c8:	f846 1b04 	str.w	r1, [r6], #4
 80078cc:	e7de      	b.n	800788c <__mdiff+0xc8>
 80078ce:	3f01      	subs	r7, #1
 80078d0:	e7e8      	b.n	80078a4 <__mdiff+0xe0>
 80078d2:	bf00      	nop
 80078d4:	080093da 	.word	0x080093da
 80078d8:	080093eb 	.word	0x080093eb

080078dc <__d2b>:
 80078dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078e0:	2101      	movs	r1, #1
 80078e2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80078e6:	4690      	mov	r8, r2
 80078e8:	461d      	mov	r5, r3
 80078ea:	f7ff fcd1 	bl	8007290 <_Balloc>
 80078ee:	4604      	mov	r4, r0
 80078f0:	b930      	cbnz	r0, 8007900 <__d2b+0x24>
 80078f2:	4602      	mov	r2, r0
 80078f4:	f240 310a 	movw	r1, #778	; 0x30a
 80078f8:	4b24      	ldr	r3, [pc, #144]	; (800798c <__d2b+0xb0>)
 80078fa:	4825      	ldr	r0, [pc, #148]	; (8007990 <__d2b+0xb4>)
 80078fc:	f7fe fde2 	bl	80064c4 <__assert_func>
 8007900:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007904:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007908:	bb2d      	cbnz	r5, 8007956 <__d2b+0x7a>
 800790a:	9301      	str	r3, [sp, #4]
 800790c:	f1b8 0300 	subs.w	r3, r8, #0
 8007910:	d026      	beq.n	8007960 <__d2b+0x84>
 8007912:	4668      	mov	r0, sp
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	f7ff fd83 	bl	8007420 <__lo0bits>
 800791a:	9900      	ldr	r1, [sp, #0]
 800791c:	b1f0      	cbz	r0, 800795c <__d2b+0x80>
 800791e:	9a01      	ldr	r2, [sp, #4]
 8007920:	f1c0 0320 	rsb	r3, r0, #32
 8007924:	fa02 f303 	lsl.w	r3, r2, r3
 8007928:	430b      	orrs	r3, r1
 800792a:	40c2      	lsrs	r2, r0
 800792c:	6163      	str	r3, [r4, #20]
 800792e:	9201      	str	r2, [sp, #4]
 8007930:	9b01      	ldr	r3, [sp, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	bf14      	ite	ne
 8007936:	2102      	movne	r1, #2
 8007938:	2101      	moveq	r1, #1
 800793a:	61a3      	str	r3, [r4, #24]
 800793c:	6121      	str	r1, [r4, #16]
 800793e:	b1c5      	cbz	r5, 8007972 <__d2b+0x96>
 8007940:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007944:	4405      	add	r5, r0
 8007946:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800794a:	603d      	str	r5, [r7, #0]
 800794c:	6030      	str	r0, [r6, #0]
 800794e:	4620      	mov	r0, r4
 8007950:	b002      	add	sp, #8
 8007952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800795a:	e7d6      	b.n	800790a <__d2b+0x2e>
 800795c:	6161      	str	r1, [r4, #20]
 800795e:	e7e7      	b.n	8007930 <__d2b+0x54>
 8007960:	a801      	add	r0, sp, #4
 8007962:	f7ff fd5d 	bl	8007420 <__lo0bits>
 8007966:	2101      	movs	r1, #1
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	6121      	str	r1, [r4, #16]
 800796c:	6163      	str	r3, [r4, #20]
 800796e:	3020      	adds	r0, #32
 8007970:	e7e5      	b.n	800793e <__d2b+0x62>
 8007972:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007976:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800797a:	6038      	str	r0, [r7, #0]
 800797c:	6918      	ldr	r0, [r3, #16]
 800797e:	f7ff fd2f 	bl	80073e0 <__hi0bits>
 8007982:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007986:	6031      	str	r1, [r6, #0]
 8007988:	e7e1      	b.n	800794e <__d2b+0x72>
 800798a:	bf00      	nop
 800798c:	080093da 	.word	0x080093da
 8007990:	080093eb 	.word	0x080093eb

08007994 <_calloc_r>:
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	fba1 5402 	umull	r5, r4, r1, r2
 800799a:	b934      	cbnz	r4, 80079aa <_calloc_r+0x16>
 800799c:	4629      	mov	r1, r5
 800799e:	f000 f875 	bl	8007a8c <_malloc_r>
 80079a2:	4606      	mov	r6, r0
 80079a4:	b928      	cbnz	r0, 80079b2 <_calloc_r+0x1e>
 80079a6:	4630      	mov	r0, r6
 80079a8:	bd70      	pop	{r4, r5, r6, pc}
 80079aa:	220c      	movs	r2, #12
 80079ac:	2600      	movs	r6, #0
 80079ae:	6002      	str	r2, [r0, #0]
 80079b0:	e7f9      	b.n	80079a6 <_calloc_r+0x12>
 80079b2:	462a      	mov	r2, r5
 80079b4:	4621      	mov	r1, r4
 80079b6:	f7fe f811 	bl	80059dc <memset>
 80079ba:	e7f4      	b.n	80079a6 <_calloc_r+0x12>

080079bc <_free_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4605      	mov	r5, r0
 80079c0:	2900      	cmp	r1, #0
 80079c2:	d040      	beq.n	8007a46 <_free_r+0x8a>
 80079c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c8:	1f0c      	subs	r4, r1, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bfb8      	it	lt
 80079ce:	18e4      	addlt	r4, r4, r3
 80079d0:	f001 fb3e 	bl	8009050 <__malloc_lock>
 80079d4:	4a1c      	ldr	r2, [pc, #112]	; (8007a48 <_free_r+0x8c>)
 80079d6:	6813      	ldr	r3, [r2, #0]
 80079d8:	b933      	cbnz	r3, 80079e8 <_free_r+0x2c>
 80079da:	6063      	str	r3, [r4, #4]
 80079dc:	6014      	str	r4, [r2, #0]
 80079de:	4628      	mov	r0, r5
 80079e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079e4:	f001 bb3a 	b.w	800905c <__malloc_unlock>
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	d908      	bls.n	80079fe <_free_r+0x42>
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	1821      	adds	r1, r4, r0
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf01      	itttt	eq
 80079f4:	6819      	ldreq	r1, [r3, #0]
 80079f6:	685b      	ldreq	r3, [r3, #4]
 80079f8:	1809      	addeq	r1, r1, r0
 80079fa:	6021      	streq	r1, [r4, #0]
 80079fc:	e7ed      	b.n	80079da <_free_r+0x1e>
 80079fe:	461a      	mov	r2, r3
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	b10b      	cbz	r3, 8007a08 <_free_r+0x4c>
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	d9fa      	bls.n	80079fe <_free_r+0x42>
 8007a08:	6811      	ldr	r1, [r2, #0]
 8007a0a:	1850      	adds	r0, r2, r1
 8007a0c:	42a0      	cmp	r0, r4
 8007a0e:	d10b      	bne.n	8007a28 <_free_r+0x6c>
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	4401      	add	r1, r0
 8007a14:	1850      	adds	r0, r2, r1
 8007a16:	4283      	cmp	r3, r0
 8007a18:	6011      	str	r1, [r2, #0]
 8007a1a:	d1e0      	bne.n	80079de <_free_r+0x22>
 8007a1c:	6818      	ldr	r0, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	4401      	add	r1, r0
 8007a22:	6011      	str	r1, [r2, #0]
 8007a24:	6053      	str	r3, [r2, #4]
 8007a26:	e7da      	b.n	80079de <_free_r+0x22>
 8007a28:	d902      	bls.n	8007a30 <_free_r+0x74>
 8007a2a:	230c      	movs	r3, #12
 8007a2c:	602b      	str	r3, [r5, #0]
 8007a2e:	e7d6      	b.n	80079de <_free_r+0x22>
 8007a30:	6820      	ldr	r0, [r4, #0]
 8007a32:	1821      	adds	r1, r4, r0
 8007a34:	428b      	cmp	r3, r1
 8007a36:	bf01      	itttt	eq
 8007a38:	6819      	ldreq	r1, [r3, #0]
 8007a3a:	685b      	ldreq	r3, [r3, #4]
 8007a3c:	1809      	addeq	r1, r1, r0
 8007a3e:	6021      	streq	r1, [r4, #0]
 8007a40:	6063      	str	r3, [r4, #4]
 8007a42:	6054      	str	r4, [r2, #4]
 8007a44:	e7cb      	b.n	80079de <_free_r+0x22>
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
 8007a48:	200003c8 	.word	0x200003c8

08007a4c <sbrk_aligned>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4e0e      	ldr	r6, [pc, #56]	; (8007a88 <sbrk_aligned+0x3c>)
 8007a50:	460c      	mov	r4, r1
 8007a52:	6831      	ldr	r1, [r6, #0]
 8007a54:	4605      	mov	r5, r0
 8007a56:	b911      	cbnz	r1, 8007a5e <sbrk_aligned+0x12>
 8007a58:	f000 fe78 	bl	800874c <_sbrk_r>
 8007a5c:	6030      	str	r0, [r6, #0]
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4628      	mov	r0, r5
 8007a62:	f000 fe73 	bl	800874c <_sbrk_r>
 8007a66:	1c43      	adds	r3, r0, #1
 8007a68:	d00a      	beq.n	8007a80 <sbrk_aligned+0x34>
 8007a6a:	1cc4      	adds	r4, r0, #3
 8007a6c:	f024 0403 	bic.w	r4, r4, #3
 8007a70:	42a0      	cmp	r0, r4
 8007a72:	d007      	beq.n	8007a84 <sbrk_aligned+0x38>
 8007a74:	1a21      	subs	r1, r4, r0
 8007a76:	4628      	mov	r0, r5
 8007a78:	f000 fe68 	bl	800874c <_sbrk_r>
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d101      	bne.n	8007a84 <sbrk_aligned+0x38>
 8007a80:	f04f 34ff 	mov.w	r4, #4294967295
 8007a84:	4620      	mov	r0, r4
 8007a86:	bd70      	pop	{r4, r5, r6, pc}
 8007a88:	200003cc 	.word	0x200003cc

08007a8c <_malloc_r>:
 8007a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a90:	1ccd      	adds	r5, r1, #3
 8007a92:	f025 0503 	bic.w	r5, r5, #3
 8007a96:	3508      	adds	r5, #8
 8007a98:	2d0c      	cmp	r5, #12
 8007a9a:	bf38      	it	cc
 8007a9c:	250c      	movcc	r5, #12
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	4607      	mov	r7, r0
 8007aa2:	db01      	blt.n	8007aa8 <_malloc_r+0x1c>
 8007aa4:	42a9      	cmp	r1, r5
 8007aa6:	d905      	bls.n	8007ab4 <_malloc_r+0x28>
 8007aa8:	230c      	movs	r3, #12
 8007aaa:	2600      	movs	r6, #0
 8007aac:	603b      	str	r3, [r7, #0]
 8007aae:	4630      	mov	r0, r6
 8007ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab4:	4e2e      	ldr	r6, [pc, #184]	; (8007b70 <_malloc_r+0xe4>)
 8007ab6:	f001 facb 	bl	8009050 <__malloc_lock>
 8007aba:	6833      	ldr	r3, [r6, #0]
 8007abc:	461c      	mov	r4, r3
 8007abe:	bb34      	cbnz	r4, 8007b0e <_malloc_r+0x82>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	f7ff ffc2 	bl	8007a4c <sbrk_aligned>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	4604      	mov	r4, r0
 8007acc:	d14d      	bne.n	8007b6a <_malloc_r+0xde>
 8007ace:	6834      	ldr	r4, [r6, #0]
 8007ad0:	4626      	mov	r6, r4
 8007ad2:	2e00      	cmp	r6, #0
 8007ad4:	d140      	bne.n	8007b58 <_malloc_r+0xcc>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4638      	mov	r0, r7
 8007adc:	eb04 0803 	add.w	r8, r4, r3
 8007ae0:	f000 fe34 	bl	800874c <_sbrk_r>
 8007ae4:	4580      	cmp	r8, r0
 8007ae6:	d13a      	bne.n	8007b5e <_malloc_r+0xd2>
 8007ae8:	6821      	ldr	r1, [r4, #0]
 8007aea:	3503      	adds	r5, #3
 8007aec:	1a6d      	subs	r5, r5, r1
 8007aee:	f025 0503 	bic.w	r5, r5, #3
 8007af2:	3508      	adds	r5, #8
 8007af4:	2d0c      	cmp	r5, #12
 8007af6:	bf38      	it	cc
 8007af8:	250c      	movcc	r5, #12
 8007afa:	4638      	mov	r0, r7
 8007afc:	4629      	mov	r1, r5
 8007afe:	f7ff ffa5 	bl	8007a4c <sbrk_aligned>
 8007b02:	3001      	adds	r0, #1
 8007b04:	d02b      	beq.n	8007b5e <_malloc_r+0xd2>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	442b      	add	r3, r5
 8007b0a:	6023      	str	r3, [r4, #0]
 8007b0c:	e00e      	b.n	8007b2c <_malloc_r+0xa0>
 8007b0e:	6822      	ldr	r2, [r4, #0]
 8007b10:	1b52      	subs	r2, r2, r5
 8007b12:	d41e      	bmi.n	8007b52 <_malloc_r+0xc6>
 8007b14:	2a0b      	cmp	r2, #11
 8007b16:	d916      	bls.n	8007b46 <_malloc_r+0xba>
 8007b18:	1961      	adds	r1, r4, r5
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	6025      	str	r5, [r4, #0]
 8007b1e:	bf18      	it	ne
 8007b20:	6059      	strne	r1, [r3, #4]
 8007b22:	6863      	ldr	r3, [r4, #4]
 8007b24:	bf08      	it	eq
 8007b26:	6031      	streq	r1, [r6, #0]
 8007b28:	5162      	str	r2, [r4, r5]
 8007b2a:	604b      	str	r3, [r1, #4]
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	f104 060b 	add.w	r6, r4, #11
 8007b32:	f001 fa93 	bl	800905c <__malloc_unlock>
 8007b36:	f026 0607 	bic.w	r6, r6, #7
 8007b3a:	1d23      	adds	r3, r4, #4
 8007b3c:	1af2      	subs	r2, r6, r3
 8007b3e:	d0b6      	beq.n	8007aae <_malloc_r+0x22>
 8007b40:	1b9b      	subs	r3, r3, r6
 8007b42:	50a3      	str	r3, [r4, r2]
 8007b44:	e7b3      	b.n	8007aae <_malloc_r+0x22>
 8007b46:	6862      	ldr	r2, [r4, #4]
 8007b48:	42a3      	cmp	r3, r4
 8007b4a:	bf0c      	ite	eq
 8007b4c:	6032      	streq	r2, [r6, #0]
 8007b4e:	605a      	strne	r2, [r3, #4]
 8007b50:	e7ec      	b.n	8007b2c <_malloc_r+0xa0>
 8007b52:	4623      	mov	r3, r4
 8007b54:	6864      	ldr	r4, [r4, #4]
 8007b56:	e7b2      	b.n	8007abe <_malloc_r+0x32>
 8007b58:	4634      	mov	r4, r6
 8007b5a:	6876      	ldr	r6, [r6, #4]
 8007b5c:	e7b9      	b.n	8007ad2 <_malloc_r+0x46>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	4638      	mov	r0, r7
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	f001 fa7a 	bl	800905c <__malloc_unlock>
 8007b68:	e7a1      	b.n	8007aae <_malloc_r+0x22>
 8007b6a:	6025      	str	r5, [r4, #0]
 8007b6c:	e7de      	b.n	8007b2c <_malloc_r+0xa0>
 8007b6e:	bf00      	nop
 8007b70:	200003c8 	.word	0x200003c8

08007b74 <__ssputs_r>:
 8007b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b78:	688e      	ldr	r6, [r1, #8]
 8007b7a:	4682      	mov	sl, r0
 8007b7c:	429e      	cmp	r6, r3
 8007b7e:	460c      	mov	r4, r1
 8007b80:	4690      	mov	r8, r2
 8007b82:	461f      	mov	r7, r3
 8007b84:	d838      	bhi.n	8007bf8 <__ssputs_r+0x84>
 8007b86:	898a      	ldrh	r2, [r1, #12]
 8007b88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b8c:	d032      	beq.n	8007bf4 <__ssputs_r+0x80>
 8007b8e:	6825      	ldr	r5, [r4, #0]
 8007b90:	6909      	ldr	r1, [r1, #16]
 8007b92:	3301      	adds	r3, #1
 8007b94:	eba5 0901 	sub.w	r9, r5, r1
 8007b98:	6965      	ldr	r5, [r4, #20]
 8007b9a:	444b      	add	r3, r9
 8007b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ba0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ba4:	106d      	asrs	r5, r5, #1
 8007ba6:	429d      	cmp	r5, r3
 8007ba8:	bf38      	it	cc
 8007baa:	461d      	movcc	r5, r3
 8007bac:	0553      	lsls	r3, r2, #21
 8007bae:	d531      	bpl.n	8007c14 <__ssputs_r+0xa0>
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	f7ff ff6b 	bl	8007a8c <_malloc_r>
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	b950      	cbnz	r0, 8007bd0 <__ssputs_r+0x5c>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc0:	f8ca 3000 	str.w	r3, [sl]
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bca:	81a3      	strh	r3, [r4, #12]
 8007bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd0:	464a      	mov	r2, r9
 8007bd2:	6921      	ldr	r1, [r4, #16]
 8007bd4:	f7fd fef4 	bl	80059c0 <memcpy>
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be2:	81a3      	strh	r3, [r4, #12]
 8007be4:	6126      	str	r6, [r4, #16]
 8007be6:	444e      	add	r6, r9
 8007be8:	6026      	str	r6, [r4, #0]
 8007bea:	463e      	mov	r6, r7
 8007bec:	6165      	str	r5, [r4, #20]
 8007bee:	eba5 0509 	sub.w	r5, r5, r9
 8007bf2:	60a5      	str	r5, [r4, #8]
 8007bf4:	42be      	cmp	r6, r7
 8007bf6:	d900      	bls.n	8007bfa <__ssputs_r+0x86>
 8007bf8:	463e      	mov	r6, r7
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	4641      	mov	r1, r8
 8007bfe:	6820      	ldr	r0, [r4, #0]
 8007c00:	f001 fa0c 	bl	800901c <memmove>
 8007c04:	68a3      	ldr	r3, [r4, #8]
 8007c06:	2000      	movs	r0, #0
 8007c08:	1b9b      	subs	r3, r3, r6
 8007c0a:	60a3      	str	r3, [r4, #8]
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	4433      	add	r3, r6
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	e7db      	b.n	8007bcc <__ssputs_r+0x58>
 8007c14:	462a      	mov	r2, r5
 8007c16:	f001 fa27 	bl	8009068 <_realloc_r>
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d1e1      	bne.n	8007be4 <__ssputs_r+0x70>
 8007c20:	4650      	mov	r0, sl
 8007c22:	6921      	ldr	r1, [r4, #16]
 8007c24:	f7ff feca 	bl	80079bc <_free_r>
 8007c28:	e7c7      	b.n	8007bba <__ssputs_r+0x46>
	...

08007c2c <_svfiprintf_r>:
 8007c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	4698      	mov	r8, r3
 8007c32:	898b      	ldrh	r3, [r1, #12]
 8007c34:	4607      	mov	r7, r0
 8007c36:	061b      	lsls	r3, r3, #24
 8007c38:	460d      	mov	r5, r1
 8007c3a:	4614      	mov	r4, r2
 8007c3c:	b09d      	sub	sp, #116	; 0x74
 8007c3e:	d50e      	bpl.n	8007c5e <_svfiprintf_r+0x32>
 8007c40:	690b      	ldr	r3, [r1, #16]
 8007c42:	b963      	cbnz	r3, 8007c5e <_svfiprintf_r+0x32>
 8007c44:	2140      	movs	r1, #64	; 0x40
 8007c46:	f7ff ff21 	bl	8007a8c <_malloc_r>
 8007c4a:	6028      	str	r0, [r5, #0]
 8007c4c:	6128      	str	r0, [r5, #16]
 8007c4e:	b920      	cbnz	r0, 8007c5a <_svfiprintf_r+0x2e>
 8007c50:	230c      	movs	r3, #12
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	e0d1      	b.n	8007dfe <_svfiprintf_r+0x1d2>
 8007c5a:	2340      	movs	r3, #64	; 0x40
 8007c5c:	616b      	str	r3, [r5, #20]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9309      	str	r3, [sp, #36]	; 0x24
 8007c62:	2320      	movs	r3, #32
 8007c64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c68:	2330      	movs	r3, #48	; 0x30
 8007c6a:	f04f 0901 	mov.w	r9, #1
 8007c6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e18 <_svfiprintf_r+0x1ec>
 8007c76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	469a      	mov	sl, r3
 8007c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c82:	b10a      	cbz	r2, 8007c88 <_svfiprintf_r+0x5c>
 8007c84:	2a25      	cmp	r2, #37	; 0x25
 8007c86:	d1f9      	bne.n	8007c7c <_svfiprintf_r+0x50>
 8007c88:	ebba 0b04 	subs.w	fp, sl, r4
 8007c8c:	d00b      	beq.n	8007ca6 <_svfiprintf_r+0x7a>
 8007c8e:	465b      	mov	r3, fp
 8007c90:	4622      	mov	r2, r4
 8007c92:	4629      	mov	r1, r5
 8007c94:	4638      	mov	r0, r7
 8007c96:	f7ff ff6d 	bl	8007b74 <__ssputs_r>
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	f000 80aa 	beq.w	8007df4 <_svfiprintf_r+0x1c8>
 8007ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ca2:	445a      	add	r2, fp
 8007ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 80a2 	beq.w	8007df4 <_svfiprintf_r+0x1c8>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cba:	f10a 0a01 	add.w	sl, sl, #1
 8007cbe:	9304      	str	r3, [sp, #16]
 8007cc0:	9307      	str	r3, [sp, #28]
 8007cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8007cc8:	4654      	mov	r4, sl
 8007cca:	2205      	movs	r2, #5
 8007ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd0:	4851      	ldr	r0, [pc, #324]	; (8007e18 <_svfiprintf_r+0x1ec>)
 8007cd2:	f7ff facf 	bl	8007274 <memchr>
 8007cd6:	9a04      	ldr	r2, [sp, #16]
 8007cd8:	b9d8      	cbnz	r0, 8007d12 <_svfiprintf_r+0xe6>
 8007cda:	06d0      	lsls	r0, r2, #27
 8007cdc:	bf44      	itt	mi
 8007cde:	2320      	movmi	r3, #32
 8007ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ce4:	0711      	lsls	r1, r2, #28
 8007ce6:	bf44      	itt	mi
 8007ce8:	232b      	movmi	r3, #43	; 0x2b
 8007cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cee:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf4:	d015      	beq.n	8007d22 <_svfiprintf_r+0xf6>
 8007cf6:	4654      	mov	r4, sl
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	f04f 0c0a 	mov.w	ip, #10
 8007cfe:	9a07      	ldr	r2, [sp, #28]
 8007d00:	4621      	mov	r1, r4
 8007d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d06:	3b30      	subs	r3, #48	; 0x30
 8007d08:	2b09      	cmp	r3, #9
 8007d0a:	d94e      	bls.n	8007daa <_svfiprintf_r+0x17e>
 8007d0c:	b1b0      	cbz	r0, 8007d3c <_svfiprintf_r+0x110>
 8007d0e:	9207      	str	r2, [sp, #28]
 8007d10:	e014      	b.n	8007d3c <_svfiprintf_r+0x110>
 8007d12:	eba0 0308 	sub.w	r3, r0, r8
 8007d16:	fa09 f303 	lsl.w	r3, r9, r3
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	46a2      	mov	sl, r4
 8007d1e:	9304      	str	r3, [sp, #16]
 8007d20:	e7d2      	b.n	8007cc8 <_svfiprintf_r+0x9c>
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	1d19      	adds	r1, r3, #4
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	9103      	str	r1, [sp, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bfbb      	ittet	lt
 8007d2e:	425b      	neglt	r3, r3
 8007d30:	f042 0202 	orrlt.w	r2, r2, #2
 8007d34:	9307      	strge	r3, [sp, #28]
 8007d36:	9307      	strlt	r3, [sp, #28]
 8007d38:	bfb8      	it	lt
 8007d3a:	9204      	strlt	r2, [sp, #16]
 8007d3c:	7823      	ldrb	r3, [r4, #0]
 8007d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d40:	d10c      	bne.n	8007d5c <_svfiprintf_r+0x130>
 8007d42:	7863      	ldrb	r3, [r4, #1]
 8007d44:	2b2a      	cmp	r3, #42	; 0x2a
 8007d46:	d135      	bne.n	8007db4 <_svfiprintf_r+0x188>
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	3402      	adds	r4, #2
 8007d4c:	1d1a      	adds	r2, r3, #4
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	9203      	str	r2, [sp, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bfb8      	it	lt
 8007d56:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007e1c <_svfiprintf_r+0x1f0>
 8007d60:	2203      	movs	r2, #3
 8007d62:	4650      	mov	r0, sl
 8007d64:	7821      	ldrb	r1, [r4, #0]
 8007d66:	f7ff fa85 	bl	8007274 <memchr>
 8007d6a:	b140      	cbz	r0, 8007d7e <_svfiprintf_r+0x152>
 8007d6c:	2340      	movs	r3, #64	; 0x40
 8007d6e:	eba0 000a 	sub.w	r0, r0, sl
 8007d72:	fa03 f000 	lsl.w	r0, r3, r0
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	3401      	adds	r4, #1
 8007d7a:	4303      	orrs	r3, r0
 8007d7c:	9304      	str	r3, [sp, #16]
 8007d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d82:	2206      	movs	r2, #6
 8007d84:	4826      	ldr	r0, [pc, #152]	; (8007e20 <_svfiprintf_r+0x1f4>)
 8007d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d8a:	f7ff fa73 	bl	8007274 <memchr>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d038      	beq.n	8007e04 <_svfiprintf_r+0x1d8>
 8007d92:	4b24      	ldr	r3, [pc, #144]	; (8007e24 <_svfiprintf_r+0x1f8>)
 8007d94:	bb1b      	cbnz	r3, 8007dde <_svfiprintf_r+0x1b2>
 8007d96:	9b03      	ldr	r3, [sp, #12]
 8007d98:	3307      	adds	r3, #7
 8007d9a:	f023 0307 	bic.w	r3, r3, #7
 8007d9e:	3308      	adds	r3, #8
 8007da0:	9303      	str	r3, [sp, #12]
 8007da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da4:	4433      	add	r3, r6
 8007da6:	9309      	str	r3, [sp, #36]	; 0x24
 8007da8:	e767      	b.n	8007c7a <_svfiprintf_r+0x4e>
 8007daa:	460c      	mov	r4, r1
 8007dac:	2001      	movs	r0, #1
 8007dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8007db2:	e7a5      	b.n	8007d00 <_svfiprintf_r+0xd4>
 8007db4:	2300      	movs	r3, #0
 8007db6:	f04f 0c0a 	mov.w	ip, #10
 8007dba:	4619      	mov	r1, r3
 8007dbc:	3401      	adds	r4, #1
 8007dbe:	9305      	str	r3, [sp, #20]
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dc6:	3a30      	subs	r2, #48	; 0x30
 8007dc8:	2a09      	cmp	r2, #9
 8007dca:	d903      	bls.n	8007dd4 <_svfiprintf_r+0x1a8>
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0c5      	beq.n	8007d5c <_svfiprintf_r+0x130>
 8007dd0:	9105      	str	r1, [sp, #20]
 8007dd2:	e7c3      	b.n	8007d5c <_svfiprintf_r+0x130>
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ddc:	e7f0      	b.n	8007dc0 <_svfiprintf_r+0x194>
 8007dde:	ab03      	add	r3, sp, #12
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	462a      	mov	r2, r5
 8007de4:	4638      	mov	r0, r7
 8007de6:	4b10      	ldr	r3, [pc, #64]	; (8007e28 <_svfiprintf_r+0x1fc>)
 8007de8:	a904      	add	r1, sp, #16
 8007dea:	f7fd fe9d 	bl	8005b28 <_printf_float>
 8007dee:	1c42      	adds	r2, r0, #1
 8007df0:	4606      	mov	r6, r0
 8007df2:	d1d6      	bne.n	8007da2 <_svfiprintf_r+0x176>
 8007df4:	89ab      	ldrh	r3, [r5, #12]
 8007df6:	065b      	lsls	r3, r3, #25
 8007df8:	f53f af2c 	bmi.w	8007c54 <_svfiprintf_r+0x28>
 8007dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dfe:	b01d      	add	sp, #116	; 0x74
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e04:	ab03      	add	r3, sp, #12
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	462a      	mov	r2, r5
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	4b06      	ldr	r3, [pc, #24]	; (8007e28 <_svfiprintf_r+0x1fc>)
 8007e0e:	a904      	add	r1, sp, #16
 8007e10:	f7fe f926 	bl	8006060 <_printf_i>
 8007e14:	e7eb      	b.n	8007dee <_svfiprintf_r+0x1c2>
 8007e16:	bf00      	nop
 8007e18:	08009544 	.word	0x08009544
 8007e1c:	0800954a 	.word	0x0800954a
 8007e20:	0800954e 	.word	0x0800954e
 8007e24:	08005b29 	.word	0x08005b29
 8007e28:	08007b75 	.word	0x08007b75

08007e2c <_sungetc_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	1c4b      	adds	r3, r1, #1
 8007e30:	4614      	mov	r4, r2
 8007e32:	d103      	bne.n	8007e3c <_sungetc_r+0x10>
 8007e34:	f04f 35ff 	mov.w	r5, #4294967295
 8007e38:	4628      	mov	r0, r5
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	8993      	ldrh	r3, [r2, #12]
 8007e3e:	b2cd      	uxtb	r5, r1
 8007e40:	f023 0320 	bic.w	r3, r3, #32
 8007e44:	8193      	strh	r3, [r2, #12]
 8007e46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e48:	6852      	ldr	r2, [r2, #4]
 8007e4a:	b18b      	cbz	r3, 8007e70 <_sungetc_r+0x44>
 8007e4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	dd08      	ble.n	8007e64 <_sungetc_r+0x38>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	1e5a      	subs	r2, r3, #1
 8007e56:	6022      	str	r2, [r4, #0]
 8007e58:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007e5c:	6863      	ldr	r3, [r4, #4]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	6063      	str	r3, [r4, #4]
 8007e62:	e7e9      	b.n	8007e38 <_sungetc_r+0xc>
 8007e64:	4621      	mov	r1, r4
 8007e66:	f000 fdab 	bl	80089c0 <__submore>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d0f1      	beq.n	8007e52 <_sungetc_r+0x26>
 8007e6e:	e7e1      	b.n	8007e34 <_sungetc_r+0x8>
 8007e70:	6921      	ldr	r1, [r4, #16]
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	b151      	cbz	r1, 8007e8c <_sungetc_r+0x60>
 8007e76:	4299      	cmp	r1, r3
 8007e78:	d208      	bcs.n	8007e8c <_sungetc_r+0x60>
 8007e7a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007e7e:	42a9      	cmp	r1, r5
 8007e80:	d104      	bne.n	8007e8c <_sungetc_r+0x60>
 8007e82:	3b01      	subs	r3, #1
 8007e84:	3201      	adds	r2, #1
 8007e86:	6023      	str	r3, [r4, #0]
 8007e88:	6062      	str	r2, [r4, #4]
 8007e8a:	e7d5      	b.n	8007e38 <_sungetc_r+0xc>
 8007e8c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e94:	6363      	str	r3, [r4, #52]	; 0x34
 8007e96:	2303      	movs	r3, #3
 8007e98:	63a3      	str	r3, [r4, #56]	; 0x38
 8007e9a:	4623      	mov	r3, r4
 8007e9c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e7dc      	b.n	8007e60 <_sungetc_r+0x34>

08007ea6 <__ssrefill_r>:
 8007ea6:	b510      	push	{r4, lr}
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007eac:	b169      	cbz	r1, 8007eca <__ssrefill_r+0x24>
 8007eae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	d001      	beq.n	8007eba <__ssrefill_r+0x14>
 8007eb6:	f7ff fd81 	bl	80079bc <_free_r>
 8007eba:	2000      	movs	r0, #0
 8007ebc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ebe:	6360      	str	r0, [r4, #52]	; 0x34
 8007ec0:	6063      	str	r3, [r4, #4]
 8007ec2:	b113      	cbz	r3, 8007eca <__ssrefill_r+0x24>
 8007ec4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007ec6:	6023      	str	r3, [r4, #0]
 8007ec8:	bd10      	pop	{r4, pc}
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	6063      	str	r3, [r4, #4]
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	f043 0320 	orr.w	r3, r3, #32
 8007edc:	81a3      	strh	r3, [r4, #12]
 8007ede:	e7f3      	b.n	8007ec8 <__ssrefill_r+0x22>

08007ee0 <__ssvfiscanf_r>:
 8007ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4606      	mov	r6, r0
 8007eea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007eee:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007ef2:	49a7      	ldr	r1, [pc, #668]	; (8008190 <__ssvfiscanf_r+0x2b0>)
 8007ef4:	f10d 0804 	add.w	r8, sp, #4
 8007ef8:	91a0      	str	r1, [sp, #640]	; 0x280
 8007efa:	49a6      	ldr	r1, [pc, #664]	; (8008194 <__ssvfiscanf_r+0x2b4>)
 8007efc:	4fa6      	ldr	r7, [pc, #664]	; (8008198 <__ssvfiscanf_r+0x2b8>)
 8007efe:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800819c <__ssvfiscanf_r+0x2bc>
 8007f02:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007f06:	91a1      	str	r1, [sp, #644]	; 0x284
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	7813      	ldrb	r3, [r2, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 815c 	beq.w	80081ca <__ssvfiscanf_r+0x2ea>
 8007f12:	5dd9      	ldrb	r1, [r3, r7]
 8007f14:	1c55      	adds	r5, r2, #1
 8007f16:	f011 0108 	ands.w	r1, r1, #8
 8007f1a:	d019      	beq.n	8007f50 <__ssvfiscanf_r+0x70>
 8007f1c:	6863      	ldr	r3, [r4, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dd0f      	ble.n	8007f42 <__ssvfiscanf_r+0x62>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	781a      	ldrb	r2, [r3, #0]
 8007f26:	5cba      	ldrb	r2, [r7, r2]
 8007f28:	0712      	lsls	r2, r2, #28
 8007f2a:	d401      	bmi.n	8007f30 <__ssvfiscanf_r+0x50>
 8007f2c:	462a      	mov	r2, r5
 8007f2e:	e7ec      	b.n	8007f0a <__ssvfiscanf_r+0x2a>
 8007f30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007f32:	3301      	adds	r3, #1
 8007f34:	3201      	adds	r2, #1
 8007f36:	9245      	str	r2, [sp, #276]	; 0x114
 8007f38:	6862      	ldr	r2, [r4, #4]
 8007f3a:	6023      	str	r3, [r4, #0]
 8007f3c:	3a01      	subs	r2, #1
 8007f3e:	6062      	str	r2, [r4, #4]
 8007f40:	e7ec      	b.n	8007f1c <__ssvfiscanf_r+0x3c>
 8007f42:	4621      	mov	r1, r4
 8007f44:	4630      	mov	r0, r6
 8007f46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f48:	4798      	blx	r3
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d0e9      	beq.n	8007f22 <__ssvfiscanf_r+0x42>
 8007f4e:	e7ed      	b.n	8007f2c <__ssvfiscanf_r+0x4c>
 8007f50:	2b25      	cmp	r3, #37	; 0x25
 8007f52:	d012      	beq.n	8007f7a <__ssvfiscanf_r+0x9a>
 8007f54:	469a      	mov	sl, r3
 8007f56:	6863      	ldr	r3, [r4, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f340 8094 	ble.w	8008086 <__ssvfiscanf_r+0x1a6>
 8007f5e:	6822      	ldr	r2, [r4, #0]
 8007f60:	7813      	ldrb	r3, [r2, #0]
 8007f62:	4553      	cmp	r3, sl
 8007f64:	f040 8131 	bne.w	80081ca <__ssvfiscanf_r+0x2ea>
 8007f68:	6863      	ldr	r3, [r4, #4]
 8007f6a:	3201      	adds	r2, #1
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	6063      	str	r3, [r4, #4]
 8007f70:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007f72:	6022      	str	r2, [r4, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	9345      	str	r3, [sp, #276]	; 0x114
 8007f78:	e7d8      	b.n	8007f2c <__ssvfiscanf_r+0x4c>
 8007f7a:	9141      	str	r1, [sp, #260]	; 0x104
 8007f7c:	9143      	str	r1, [sp, #268]	; 0x10c
 8007f7e:	7853      	ldrb	r3, [r2, #1]
 8007f80:	2b2a      	cmp	r3, #42	; 0x2a
 8007f82:	bf04      	itt	eq
 8007f84:	2310      	moveq	r3, #16
 8007f86:	1c95      	addeq	r5, r2, #2
 8007f88:	f04f 020a 	mov.w	r2, #10
 8007f8c:	bf08      	it	eq
 8007f8e:	9341      	streq	r3, [sp, #260]	; 0x104
 8007f90:	46aa      	mov	sl, r5
 8007f92:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007f96:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007f9a:	2b09      	cmp	r3, #9
 8007f9c:	d91d      	bls.n	8007fda <__ssvfiscanf_r+0xfa>
 8007f9e:	2203      	movs	r2, #3
 8007fa0:	487e      	ldr	r0, [pc, #504]	; (800819c <__ssvfiscanf_r+0x2bc>)
 8007fa2:	f7ff f967 	bl	8007274 <memchr>
 8007fa6:	b140      	cbz	r0, 8007fba <__ssvfiscanf_r+0xda>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4655      	mov	r5, sl
 8007fac:	eba0 0009 	sub.w	r0, r0, r9
 8007fb0:	fa03 f000 	lsl.w	r0, r3, r0
 8007fb4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007fb6:	4318      	orrs	r0, r3
 8007fb8:	9041      	str	r0, [sp, #260]	; 0x104
 8007fba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007fbe:	2b78      	cmp	r3, #120	; 0x78
 8007fc0:	d806      	bhi.n	8007fd0 <__ssvfiscanf_r+0xf0>
 8007fc2:	2b57      	cmp	r3, #87	; 0x57
 8007fc4:	d810      	bhi.n	8007fe8 <__ssvfiscanf_r+0x108>
 8007fc6:	2b25      	cmp	r3, #37	; 0x25
 8007fc8:	d0c4      	beq.n	8007f54 <__ssvfiscanf_r+0x74>
 8007fca:	d857      	bhi.n	800807c <__ssvfiscanf_r+0x19c>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d065      	beq.n	800809c <__ssvfiscanf_r+0x1bc>
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	9347      	str	r3, [sp, #284]	; 0x11c
 8007fd4:	230a      	movs	r3, #10
 8007fd6:	9342      	str	r3, [sp, #264]	; 0x108
 8007fd8:	e072      	b.n	80080c0 <__ssvfiscanf_r+0x1e0>
 8007fda:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007fdc:	4655      	mov	r5, sl
 8007fde:	fb02 1103 	mla	r1, r2, r3, r1
 8007fe2:	3930      	subs	r1, #48	; 0x30
 8007fe4:	9143      	str	r1, [sp, #268]	; 0x10c
 8007fe6:	e7d3      	b.n	8007f90 <__ssvfiscanf_r+0xb0>
 8007fe8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007fec:	2a20      	cmp	r2, #32
 8007fee:	d8ef      	bhi.n	8007fd0 <__ssvfiscanf_r+0xf0>
 8007ff0:	a101      	add	r1, pc, #4	; (adr r1, 8007ff8 <__ssvfiscanf_r+0x118>)
 8007ff2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	080080ab 	.word	0x080080ab
 8007ffc:	08007fd1 	.word	0x08007fd1
 8008000:	08007fd1 	.word	0x08007fd1
 8008004:	08008109 	.word	0x08008109
 8008008:	08007fd1 	.word	0x08007fd1
 800800c:	08007fd1 	.word	0x08007fd1
 8008010:	08007fd1 	.word	0x08007fd1
 8008014:	08007fd1 	.word	0x08007fd1
 8008018:	08007fd1 	.word	0x08007fd1
 800801c:	08007fd1 	.word	0x08007fd1
 8008020:	08007fd1 	.word	0x08007fd1
 8008024:	0800811f 	.word	0x0800811f
 8008028:	080080f5 	.word	0x080080f5
 800802c:	08008083 	.word	0x08008083
 8008030:	08008083 	.word	0x08008083
 8008034:	08008083 	.word	0x08008083
 8008038:	08007fd1 	.word	0x08007fd1
 800803c:	080080f9 	.word	0x080080f9
 8008040:	08007fd1 	.word	0x08007fd1
 8008044:	08007fd1 	.word	0x08007fd1
 8008048:	08007fd1 	.word	0x08007fd1
 800804c:	08007fd1 	.word	0x08007fd1
 8008050:	0800812f 	.word	0x0800812f
 8008054:	08008101 	.word	0x08008101
 8008058:	080080a3 	.word	0x080080a3
 800805c:	08007fd1 	.word	0x08007fd1
 8008060:	08007fd1 	.word	0x08007fd1
 8008064:	0800812b 	.word	0x0800812b
 8008068:	08007fd1 	.word	0x08007fd1
 800806c:	080080f5 	.word	0x080080f5
 8008070:	08007fd1 	.word	0x08007fd1
 8008074:	08007fd1 	.word	0x08007fd1
 8008078:	080080ab 	.word	0x080080ab
 800807c:	3b45      	subs	r3, #69	; 0x45
 800807e:	2b02      	cmp	r3, #2
 8008080:	d8a6      	bhi.n	8007fd0 <__ssvfiscanf_r+0xf0>
 8008082:	2305      	movs	r3, #5
 8008084:	e01b      	b.n	80080be <__ssvfiscanf_r+0x1de>
 8008086:	4621      	mov	r1, r4
 8008088:	4630      	mov	r0, r6
 800808a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800808c:	4798      	blx	r3
 800808e:	2800      	cmp	r0, #0
 8008090:	f43f af65 	beq.w	8007f5e <__ssvfiscanf_r+0x7e>
 8008094:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008096:	2800      	cmp	r0, #0
 8008098:	f040 808d 	bne.w	80081b6 <__ssvfiscanf_r+0x2d6>
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	e08f      	b.n	80081c2 <__ssvfiscanf_r+0x2e2>
 80080a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80080a4:	f042 0220 	orr.w	r2, r2, #32
 80080a8:	9241      	str	r2, [sp, #260]	; 0x104
 80080aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80080ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080b0:	9241      	str	r2, [sp, #260]	; 0x104
 80080b2:	2210      	movs	r2, #16
 80080b4:	2b6f      	cmp	r3, #111	; 0x6f
 80080b6:	bf34      	ite	cc
 80080b8:	2303      	movcc	r3, #3
 80080ba:	2304      	movcs	r3, #4
 80080bc:	9242      	str	r2, [sp, #264]	; 0x108
 80080be:	9347      	str	r3, [sp, #284]	; 0x11c
 80080c0:	6863      	ldr	r3, [r4, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	dd42      	ble.n	800814c <__ssvfiscanf_r+0x26c>
 80080c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80080c8:	0659      	lsls	r1, r3, #25
 80080ca:	d404      	bmi.n	80080d6 <__ssvfiscanf_r+0x1f6>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	781a      	ldrb	r2, [r3, #0]
 80080d0:	5cba      	ldrb	r2, [r7, r2]
 80080d2:	0712      	lsls	r2, r2, #28
 80080d4:	d441      	bmi.n	800815a <__ssvfiscanf_r+0x27a>
 80080d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80080d8:	2b02      	cmp	r3, #2
 80080da:	dc50      	bgt.n	800817e <__ssvfiscanf_r+0x29e>
 80080dc:	466b      	mov	r3, sp
 80080de:	4622      	mov	r2, r4
 80080e0:	4630      	mov	r0, r6
 80080e2:	a941      	add	r1, sp, #260	; 0x104
 80080e4:	f000 f9ce 	bl	8008484 <_scanf_chars>
 80080e8:	2801      	cmp	r0, #1
 80080ea:	d06e      	beq.n	80081ca <__ssvfiscanf_r+0x2ea>
 80080ec:	2802      	cmp	r0, #2
 80080ee:	f47f af1d 	bne.w	8007f2c <__ssvfiscanf_r+0x4c>
 80080f2:	e7cf      	b.n	8008094 <__ssvfiscanf_r+0x1b4>
 80080f4:	220a      	movs	r2, #10
 80080f6:	e7dd      	b.n	80080b4 <__ssvfiscanf_r+0x1d4>
 80080f8:	2300      	movs	r3, #0
 80080fa:	9342      	str	r3, [sp, #264]	; 0x108
 80080fc:	2303      	movs	r3, #3
 80080fe:	e7de      	b.n	80080be <__ssvfiscanf_r+0x1de>
 8008100:	2308      	movs	r3, #8
 8008102:	9342      	str	r3, [sp, #264]	; 0x108
 8008104:	2304      	movs	r3, #4
 8008106:	e7da      	b.n	80080be <__ssvfiscanf_r+0x1de>
 8008108:	4629      	mov	r1, r5
 800810a:	4640      	mov	r0, r8
 800810c:	f000 fb2e 	bl	800876c <__sccl>
 8008110:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008112:	4605      	mov	r5, r0
 8008114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008118:	9341      	str	r3, [sp, #260]	; 0x104
 800811a:	2301      	movs	r3, #1
 800811c:	e7cf      	b.n	80080be <__ssvfiscanf_r+0x1de>
 800811e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008124:	9341      	str	r3, [sp, #260]	; 0x104
 8008126:	2300      	movs	r3, #0
 8008128:	e7c9      	b.n	80080be <__ssvfiscanf_r+0x1de>
 800812a:	2302      	movs	r3, #2
 800812c:	e7c7      	b.n	80080be <__ssvfiscanf_r+0x1de>
 800812e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008130:	06c3      	lsls	r3, r0, #27
 8008132:	f53f aefb 	bmi.w	8007f2c <__ssvfiscanf_r+0x4c>
 8008136:	9b00      	ldr	r3, [sp, #0]
 8008138:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800813a:	1d19      	adds	r1, r3, #4
 800813c:	9100      	str	r1, [sp, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f010 0f01 	tst.w	r0, #1
 8008144:	bf14      	ite	ne
 8008146:	801a      	strhne	r2, [r3, #0]
 8008148:	601a      	streq	r2, [r3, #0]
 800814a:	e6ef      	b.n	8007f2c <__ssvfiscanf_r+0x4c>
 800814c:	4621      	mov	r1, r4
 800814e:	4630      	mov	r0, r6
 8008150:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008152:	4798      	blx	r3
 8008154:	2800      	cmp	r0, #0
 8008156:	d0b6      	beq.n	80080c6 <__ssvfiscanf_r+0x1e6>
 8008158:	e79c      	b.n	8008094 <__ssvfiscanf_r+0x1b4>
 800815a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800815c:	3201      	adds	r2, #1
 800815e:	9245      	str	r2, [sp, #276]	; 0x114
 8008160:	6862      	ldr	r2, [r4, #4]
 8008162:	3a01      	subs	r2, #1
 8008164:	2a00      	cmp	r2, #0
 8008166:	6062      	str	r2, [r4, #4]
 8008168:	dd02      	ble.n	8008170 <__ssvfiscanf_r+0x290>
 800816a:	3301      	adds	r3, #1
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	e7ad      	b.n	80080cc <__ssvfiscanf_r+0x1ec>
 8008170:	4621      	mov	r1, r4
 8008172:	4630      	mov	r0, r6
 8008174:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008176:	4798      	blx	r3
 8008178:	2800      	cmp	r0, #0
 800817a:	d0a7      	beq.n	80080cc <__ssvfiscanf_r+0x1ec>
 800817c:	e78a      	b.n	8008094 <__ssvfiscanf_r+0x1b4>
 800817e:	2b04      	cmp	r3, #4
 8008180:	dc0e      	bgt.n	80081a0 <__ssvfiscanf_r+0x2c0>
 8008182:	466b      	mov	r3, sp
 8008184:	4622      	mov	r2, r4
 8008186:	4630      	mov	r0, r6
 8008188:	a941      	add	r1, sp, #260	; 0x104
 800818a:	f000 f9d5 	bl	8008538 <_scanf_i>
 800818e:	e7ab      	b.n	80080e8 <__ssvfiscanf_r+0x208>
 8008190:	08007e2d 	.word	0x08007e2d
 8008194:	08007ea7 	.word	0x08007ea7
 8008198:	08009571 	.word	0x08009571
 800819c:	0800954a 	.word	0x0800954a
 80081a0:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <__ssvfiscanf_r+0x2f0>)
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f43f aec2 	beq.w	8007f2c <__ssvfiscanf_r+0x4c>
 80081a8:	466b      	mov	r3, sp
 80081aa:	4622      	mov	r2, r4
 80081ac:	4630      	mov	r0, r6
 80081ae:	a941      	add	r1, sp, #260	; 0x104
 80081b0:	f3af 8000 	nop.w
 80081b4:	e798      	b.n	80080e8 <__ssvfiscanf_r+0x208>
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80081bc:	bf18      	it	ne
 80081be:	f04f 30ff 	movne.w	r0, #4294967295
 80081c2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80081c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ca:	9844      	ldr	r0, [sp, #272]	; 0x110
 80081cc:	e7f9      	b.n	80081c2 <__ssvfiscanf_r+0x2e2>
 80081ce:	bf00      	nop
 80081d0:	00000000 	.word	0x00000000

080081d4 <__sfputc_r>:
 80081d4:	6893      	ldr	r3, [r2, #8]
 80081d6:	b410      	push	{r4}
 80081d8:	3b01      	subs	r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	6093      	str	r3, [r2, #8]
 80081de:	da07      	bge.n	80081f0 <__sfputc_r+0x1c>
 80081e0:	6994      	ldr	r4, [r2, #24]
 80081e2:	42a3      	cmp	r3, r4
 80081e4:	db01      	blt.n	80081ea <__sfputc_r+0x16>
 80081e6:	290a      	cmp	r1, #10
 80081e8:	d102      	bne.n	80081f0 <__sfputc_r+0x1c>
 80081ea:	bc10      	pop	{r4}
 80081ec:	f000 bc20 	b.w	8008a30 <__swbuf_r>
 80081f0:	6813      	ldr	r3, [r2, #0]
 80081f2:	1c58      	adds	r0, r3, #1
 80081f4:	6010      	str	r0, [r2, #0]
 80081f6:	7019      	strb	r1, [r3, #0]
 80081f8:	4608      	mov	r0, r1
 80081fa:	bc10      	pop	{r4}
 80081fc:	4770      	bx	lr

080081fe <__sfputs_r>:
 80081fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008200:	4606      	mov	r6, r0
 8008202:	460f      	mov	r7, r1
 8008204:	4614      	mov	r4, r2
 8008206:	18d5      	adds	r5, r2, r3
 8008208:	42ac      	cmp	r4, r5
 800820a:	d101      	bne.n	8008210 <__sfputs_r+0x12>
 800820c:	2000      	movs	r0, #0
 800820e:	e007      	b.n	8008220 <__sfputs_r+0x22>
 8008210:	463a      	mov	r2, r7
 8008212:	4630      	mov	r0, r6
 8008214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008218:	f7ff ffdc 	bl	80081d4 <__sfputc_r>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d1f3      	bne.n	8008208 <__sfputs_r+0xa>
 8008220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008224 <_vfiprintf_r>:
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	460d      	mov	r5, r1
 800822a:	4614      	mov	r4, r2
 800822c:	4698      	mov	r8, r3
 800822e:	4606      	mov	r6, r0
 8008230:	b09d      	sub	sp, #116	; 0x74
 8008232:	b118      	cbz	r0, 800823c <_vfiprintf_r+0x18>
 8008234:	6983      	ldr	r3, [r0, #24]
 8008236:	b90b      	cbnz	r3, 800823c <_vfiprintf_r+0x18>
 8008238:	f000 fdd8 	bl	8008dec <__sinit>
 800823c:	4b89      	ldr	r3, [pc, #548]	; (8008464 <_vfiprintf_r+0x240>)
 800823e:	429d      	cmp	r5, r3
 8008240:	d11b      	bne.n	800827a <_vfiprintf_r+0x56>
 8008242:	6875      	ldr	r5, [r6, #4]
 8008244:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008246:	07d9      	lsls	r1, r3, #31
 8008248:	d405      	bmi.n	8008256 <_vfiprintf_r+0x32>
 800824a:	89ab      	ldrh	r3, [r5, #12]
 800824c:	059a      	lsls	r2, r3, #22
 800824e:	d402      	bmi.n	8008256 <_vfiprintf_r+0x32>
 8008250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008252:	f000 fe69 	bl	8008f28 <__retarget_lock_acquire_recursive>
 8008256:	89ab      	ldrh	r3, [r5, #12]
 8008258:	071b      	lsls	r3, r3, #28
 800825a:	d501      	bpl.n	8008260 <_vfiprintf_r+0x3c>
 800825c:	692b      	ldr	r3, [r5, #16]
 800825e:	b9eb      	cbnz	r3, 800829c <_vfiprintf_r+0x78>
 8008260:	4629      	mov	r1, r5
 8008262:	4630      	mov	r0, r6
 8008264:	f000 fc36 	bl	8008ad4 <__swsetup_r>
 8008268:	b1c0      	cbz	r0, 800829c <_vfiprintf_r+0x78>
 800826a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800826c:	07dc      	lsls	r4, r3, #31
 800826e:	d50e      	bpl.n	800828e <_vfiprintf_r+0x6a>
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	b01d      	add	sp, #116	; 0x74
 8008276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827a:	4b7b      	ldr	r3, [pc, #492]	; (8008468 <_vfiprintf_r+0x244>)
 800827c:	429d      	cmp	r5, r3
 800827e:	d101      	bne.n	8008284 <_vfiprintf_r+0x60>
 8008280:	68b5      	ldr	r5, [r6, #8]
 8008282:	e7df      	b.n	8008244 <_vfiprintf_r+0x20>
 8008284:	4b79      	ldr	r3, [pc, #484]	; (800846c <_vfiprintf_r+0x248>)
 8008286:	429d      	cmp	r5, r3
 8008288:	bf08      	it	eq
 800828a:	68f5      	ldreq	r5, [r6, #12]
 800828c:	e7da      	b.n	8008244 <_vfiprintf_r+0x20>
 800828e:	89ab      	ldrh	r3, [r5, #12]
 8008290:	0598      	lsls	r0, r3, #22
 8008292:	d4ed      	bmi.n	8008270 <_vfiprintf_r+0x4c>
 8008294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008296:	f000 fe48 	bl	8008f2a <__retarget_lock_release_recursive>
 800829a:	e7e9      	b.n	8008270 <_vfiprintf_r+0x4c>
 800829c:	2300      	movs	r3, #0
 800829e:	9309      	str	r3, [sp, #36]	; 0x24
 80082a0:	2320      	movs	r3, #32
 80082a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082a6:	2330      	movs	r3, #48	; 0x30
 80082a8:	f04f 0901 	mov.w	r9, #1
 80082ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80082b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008470 <_vfiprintf_r+0x24c>
 80082b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082b8:	4623      	mov	r3, r4
 80082ba:	469a      	mov	sl, r3
 80082bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082c0:	b10a      	cbz	r2, 80082c6 <_vfiprintf_r+0xa2>
 80082c2:	2a25      	cmp	r2, #37	; 0x25
 80082c4:	d1f9      	bne.n	80082ba <_vfiprintf_r+0x96>
 80082c6:	ebba 0b04 	subs.w	fp, sl, r4
 80082ca:	d00b      	beq.n	80082e4 <_vfiprintf_r+0xc0>
 80082cc:	465b      	mov	r3, fp
 80082ce:	4622      	mov	r2, r4
 80082d0:	4629      	mov	r1, r5
 80082d2:	4630      	mov	r0, r6
 80082d4:	f7ff ff93 	bl	80081fe <__sfputs_r>
 80082d8:	3001      	adds	r0, #1
 80082da:	f000 80aa 	beq.w	8008432 <_vfiprintf_r+0x20e>
 80082de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082e0:	445a      	add	r2, fp
 80082e2:	9209      	str	r2, [sp, #36]	; 0x24
 80082e4:	f89a 3000 	ldrb.w	r3, [sl]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 80a2 	beq.w	8008432 <_vfiprintf_r+0x20e>
 80082ee:	2300      	movs	r3, #0
 80082f0:	f04f 32ff 	mov.w	r2, #4294967295
 80082f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082f8:	f10a 0a01 	add.w	sl, sl, #1
 80082fc:	9304      	str	r3, [sp, #16]
 80082fe:	9307      	str	r3, [sp, #28]
 8008300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008304:	931a      	str	r3, [sp, #104]	; 0x68
 8008306:	4654      	mov	r4, sl
 8008308:	2205      	movs	r2, #5
 800830a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830e:	4858      	ldr	r0, [pc, #352]	; (8008470 <_vfiprintf_r+0x24c>)
 8008310:	f7fe ffb0 	bl	8007274 <memchr>
 8008314:	9a04      	ldr	r2, [sp, #16]
 8008316:	b9d8      	cbnz	r0, 8008350 <_vfiprintf_r+0x12c>
 8008318:	06d1      	lsls	r1, r2, #27
 800831a:	bf44      	itt	mi
 800831c:	2320      	movmi	r3, #32
 800831e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008322:	0713      	lsls	r3, r2, #28
 8008324:	bf44      	itt	mi
 8008326:	232b      	movmi	r3, #43	; 0x2b
 8008328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800832c:	f89a 3000 	ldrb.w	r3, [sl]
 8008330:	2b2a      	cmp	r3, #42	; 0x2a
 8008332:	d015      	beq.n	8008360 <_vfiprintf_r+0x13c>
 8008334:	4654      	mov	r4, sl
 8008336:	2000      	movs	r0, #0
 8008338:	f04f 0c0a 	mov.w	ip, #10
 800833c:	9a07      	ldr	r2, [sp, #28]
 800833e:	4621      	mov	r1, r4
 8008340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008344:	3b30      	subs	r3, #48	; 0x30
 8008346:	2b09      	cmp	r3, #9
 8008348:	d94e      	bls.n	80083e8 <_vfiprintf_r+0x1c4>
 800834a:	b1b0      	cbz	r0, 800837a <_vfiprintf_r+0x156>
 800834c:	9207      	str	r2, [sp, #28]
 800834e:	e014      	b.n	800837a <_vfiprintf_r+0x156>
 8008350:	eba0 0308 	sub.w	r3, r0, r8
 8008354:	fa09 f303 	lsl.w	r3, r9, r3
 8008358:	4313      	orrs	r3, r2
 800835a:	46a2      	mov	sl, r4
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	e7d2      	b.n	8008306 <_vfiprintf_r+0xe2>
 8008360:	9b03      	ldr	r3, [sp, #12]
 8008362:	1d19      	adds	r1, r3, #4
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	9103      	str	r1, [sp, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	bfbb      	ittet	lt
 800836c:	425b      	neglt	r3, r3
 800836e:	f042 0202 	orrlt.w	r2, r2, #2
 8008372:	9307      	strge	r3, [sp, #28]
 8008374:	9307      	strlt	r3, [sp, #28]
 8008376:	bfb8      	it	lt
 8008378:	9204      	strlt	r2, [sp, #16]
 800837a:	7823      	ldrb	r3, [r4, #0]
 800837c:	2b2e      	cmp	r3, #46	; 0x2e
 800837e:	d10c      	bne.n	800839a <_vfiprintf_r+0x176>
 8008380:	7863      	ldrb	r3, [r4, #1]
 8008382:	2b2a      	cmp	r3, #42	; 0x2a
 8008384:	d135      	bne.n	80083f2 <_vfiprintf_r+0x1ce>
 8008386:	9b03      	ldr	r3, [sp, #12]
 8008388:	3402      	adds	r4, #2
 800838a:	1d1a      	adds	r2, r3, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	9203      	str	r2, [sp, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	bfb8      	it	lt
 8008394:	f04f 33ff 	movlt.w	r3, #4294967295
 8008398:	9305      	str	r3, [sp, #20]
 800839a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008474 <_vfiprintf_r+0x250>
 800839e:	2203      	movs	r2, #3
 80083a0:	4650      	mov	r0, sl
 80083a2:	7821      	ldrb	r1, [r4, #0]
 80083a4:	f7fe ff66 	bl	8007274 <memchr>
 80083a8:	b140      	cbz	r0, 80083bc <_vfiprintf_r+0x198>
 80083aa:	2340      	movs	r3, #64	; 0x40
 80083ac:	eba0 000a 	sub.w	r0, r0, sl
 80083b0:	fa03 f000 	lsl.w	r0, r3, r0
 80083b4:	9b04      	ldr	r3, [sp, #16]
 80083b6:	3401      	adds	r4, #1
 80083b8:	4303      	orrs	r3, r0
 80083ba:	9304      	str	r3, [sp, #16]
 80083bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c0:	2206      	movs	r2, #6
 80083c2:	482d      	ldr	r0, [pc, #180]	; (8008478 <_vfiprintf_r+0x254>)
 80083c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083c8:	f7fe ff54 	bl	8007274 <memchr>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d03f      	beq.n	8008450 <_vfiprintf_r+0x22c>
 80083d0:	4b2a      	ldr	r3, [pc, #168]	; (800847c <_vfiprintf_r+0x258>)
 80083d2:	bb1b      	cbnz	r3, 800841c <_vfiprintf_r+0x1f8>
 80083d4:	9b03      	ldr	r3, [sp, #12]
 80083d6:	3307      	adds	r3, #7
 80083d8:	f023 0307 	bic.w	r3, r3, #7
 80083dc:	3308      	adds	r3, #8
 80083de:	9303      	str	r3, [sp, #12]
 80083e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e2:	443b      	add	r3, r7
 80083e4:	9309      	str	r3, [sp, #36]	; 0x24
 80083e6:	e767      	b.n	80082b8 <_vfiprintf_r+0x94>
 80083e8:	460c      	mov	r4, r1
 80083ea:	2001      	movs	r0, #1
 80083ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80083f0:	e7a5      	b.n	800833e <_vfiprintf_r+0x11a>
 80083f2:	2300      	movs	r3, #0
 80083f4:	f04f 0c0a 	mov.w	ip, #10
 80083f8:	4619      	mov	r1, r3
 80083fa:	3401      	adds	r4, #1
 80083fc:	9305      	str	r3, [sp, #20]
 80083fe:	4620      	mov	r0, r4
 8008400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008404:	3a30      	subs	r2, #48	; 0x30
 8008406:	2a09      	cmp	r2, #9
 8008408:	d903      	bls.n	8008412 <_vfiprintf_r+0x1ee>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0c5      	beq.n	800839a <_vfiprintf_r+0x176>
 800840e:	9105      	str	r1, [sp, #20]
 8008410:	e7c3      	b.n	800839a <_vfiprintf_r+0x176>
 8008412:	4604      	mov	r4, r0
 8008414:	2301      	movs	r3, #1
 8008416:	fb0c 2101 	mla	r1, ip, r1, r2
 800841a:	e7f0      	b.n	80083fe <_vfiprintf_r+0x1da>
 800841c:	ab03      	add	r3, sp, #12
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	462a      	mov	r2, r5
 8008422:	4630      	mov	r0, r6
 8008424:	4b16      	ldr	r3, [pc, #88]	; (8008480 <_vfiprintf_r+0x25c>)
 8008426:	a904      	add	r1, sp, #16
 8008428:	f7fd fb7e 	bl	8005b28 <_printf_float>
 800842c:	4607      	mov	r7, r0
 800842e:	1c78      	adds	r0, r7, #1
 8008430:	d1d6      	bne.n	80083e0 <_vfiprintf_r+0x1bc>
 8008432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008434:	07d9      	lsls	r1, r3, #31
 8008436:	d405      	bmi.n	8008444 <_vfiprintf_r+0x220>
 8008438:	89ab      	ldrh	r3, [r5, #12]
 800843a:	059a      	lsls	r2, r3, #22
 800843c:	d402      	bmi.n	8008444 <_vfiprintf_r+0x220>
 800843e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008440:	f000 fd73 	bl	8008f2a <__retarget_lock_release_recursive>
 8008444:	89ab      	ldrh	r3, [r5, #12]
 8008446:	065b      	lsls	r3, r3, #25
 8008448:	f53f af12 	bmi.w	8008270 <_vfiprintf_r+0x4c>
 800844c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800844e:	e711      	b.n	8008274 <_vfiprintf_r+0x50>
 8008450:	ab03      	add	r3, sp, #12
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	462a      	mov	r2, r5
 8008456:	4630      	mov	r0, r6
 8008458:	4b09      	ldr	r3, [pc, #36]	; (8008480 <_vfiprintf_r+0x25c>)
 800845a:	a904      	add	r1, sp, #16
 800845c:	f7fd fe00 	bl	8006060 <_printf_i>
 8008460:	e7e4      	b.n	800842c <_vfiprintf_r+0x208>
 8008462:	bf00      	nop
 8008464:	08009694 	.word	0x08009694
 8008468:	080096b4 	.word	0x080096b4
 800846c:	08009674 	.word	0x08009674
 8008470:	08009544 	.word	0x08009544
 8008474:	0800954a 	.word	0x0800954a
 8008478:	0800954e 	.word	0x0800954e
 800847c:	08005b29 	.word	0x08005b29
 8008480:	080081ff 	.word	0x080081ff

08008484 <_scanf_chars>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	4615      	mov	r5, r2
 800848a:	688a      	ldr	r2, [r1, #8]
 800848c:	4680      	mov	r8, r0
 800848e:	460c      	mov	r4, r1
 8008490:	b932      	cbnz	r2, 80084a0 <_scanf_chars+0x1c>
 8008492:	698a      	ldr	r2, [r1, #24]
 8008494:	2a00      	cmp	r2, #0
 8008496:	bf0c      	ite	eq
 8008498:	2201      	moveq	r2, #1
 800849a:	f04f 32ff 	movne.w	r2, #4294967295
 800849e:	608a      	str	r2, [r1, #8]
 80084a0:	2700      	movs	r7, #0
 80084a2:	6822      	ldr	r2, [r4, #0]
 80084a4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008534 <_scanf_chars+0xb0>
 80084a8:	06d1      	lsls	r1, r2, #27
 80084aa:	bf5f      	itttt	pl
 80084ac:	681a      	ldrpl	r2, [r3, #0]
 80084ae:	1d11      	addpl	r1, r2, #4
 80084b0:	6019      	strpl	r1, [r3, #0]
 80084b2:	6816      	ldrpl	r6, [r2, #0]
 80084b4:	69a0      	ldr	r0, [r4, #24]
 80084b6:	b188      	cbz	r0, 80084dc <_scanf_chars+0x58>
 80084b8:	2801      	cmp	r0, #1
 80084ba:	d107      	bne.n	80084cc <_scanf_chars+0x48>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	781a      	ldrb	r2, [r3, #0]
 80084c0:	6963      	ldr	r3, [r4, #20]
 80084c2:	5c9b      	ldrb	r3, [r3, r2]
 80084c4:	b953      	cbnz	r3, 80084dc <_scanf_chars+0x58>
 80084c6:	2f00      	cmp	r7, #0
 80084c8:	d031      	beq.n	800852e <_scanf_chars+0xaa>
 80084ca:	e022      	b.n	8008512 <_scanf_chars+0x8e>
 80084cc:	2802      	cmp	r0, #2
 80084ce:	d120      	bne.n	8008512 <_scanf_chars+0x8e>
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80084d8:	071b      	lsls	r3, r3, #28
 80084da:	d41a      	bmi.n	8008512 <_scanf_chars+0x8e>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	3701      	adds	r7, #1
 80084e0:	06da      	lsls	r2, r3, #27
 80084e2:	bf5e      	ittt	pl
 80084e4:	682b      	ldrpl	r3, [r5, #0]
 80084e6:	781b      	ldrbpl	r3, [r3, #0]
 80084e8:	f806 3b01 	strbpl.w	r3, [r6], #1
 80084ec:	682a      	ldr	r2, [r5, #0]
 80084ee:	686b      	ldr	r3, [r5, #4]
 80084f0:	3201      	adds	r2, #1
 80084f2:	602a      	str	r2, [r5, #0]
 80084f4:	68a2      	ldr	r2, [r4, #8]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	3a01      	subs	r2, #1
 80084fa:	606b      	str	r3, [r5, #4]
 80084fc:	60a2      	str	r2, [r4, #8]
 80084fe:	b142      	cbz	r2, 8008512 <_scanf_chars+0x8e>
 8008500:	2b00      	cmp	r3, #0
 8008502:	dcd7      	bgt.n	80084b4 <_scanf_chars+0x30>
 8008504:	4629      	mov	r1, r5
 8008506:	4640      	mov	r0, r8
 8008508:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800850c:	4798      	blx	r3
 800850e:	2800      	cmp	r0, #0
 8008510:	d0d0      	beq.n	80084b4 <_scanf_chars+0x30>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	f013 0310 	ands.w	r3, r3, #16
 8008518:	d105      	bne.n	8008526 <_scanf_chars+0xa2>
 800851a:	68e2      	ldr	r2, [r4, #12]
 800851c:	3201      	adds	r2, #1
 800851e:	60e2      	str	r2, [r4, #12]
 8008520:	69a2      	ldr	r2, [r4, #24]
 8008522:	b102      	cbz	r2, 8008526 <_scanf_chars+0xa2>
 8008524:	7033      	strb	r3, [r6, #0]
 8008526:	2000      	movs	r0, #0
 8008528:	6923      	ldr	r3, [r4, #16]
 800852a:	443b      	add	r3, r7
 800852c:	6123      	str	r3, [r4, #16]
 800852e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008532:	bf00      	nop
 8008534:	08009571 	.word	0x08009571

08008538 <_scanf_i>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	460c      	mov	r4, r1
 800853e:	4698      	mov	r8, r3
 8008540:	4b75      	ldr	r3, [pc, #468]	; (8008718 <_scanf_i+0x1e0>)
 8008542:	b087      	sub	sp, #28
 8008544:	4682      	mov	sl, r0
 8008546:	4616      	mov	r6, r2
 8008548:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800854c:	ab03      	add	r3, sp, #12
 800854e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008552:	4b72      	ldr	r3, [pc, #456]	; (800871c <_scanf_i+0x1e4>)
 8008554:	69a1      	ldr	r1, [r4, #24]
 8008556:	4a72      	ldr	r2, [pc, #456]	; (8008720 <_scanf_i+0x1e8>)
 8008558:	4627      	mov	r7, r4
 800855a:	2903      	cmp	r1, #3
 800855c:	bf18      	it	ne
 800855e:	461a      	movne	r2, r3
 8008560:	68a3      	ldr	r3, [r4, #8]
 8008562:	9201      	str	r2, [sp, #4]
 8008564:	1e5a      	subs	r2, r3, #1
 8008566:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800856a:	bf81      	itttt	hi
 800856c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008570:	eb03 0905 	addhi.w	r9, r3, r5
 8008574:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008578:	60a3      	strhi	r3, [r4, #8]
 800857a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800857e:	bf98      	it	ls
 8008580:	f04f 0900 	movls.w	r9, #0
 8008584:	463d      	mov	r5, r7
 8008586:	f04f 0b00 	mov.w	fp, #0
 800858a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	6831      	ldr	r1, [r6, #0]
 8008592:	ab03      	add	r3, sp, #12
 8008594:	2202      	movs	r2, #2
 8008596:	7809      	ldrb	r1, [r1, #0]
 8008598:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800859c:	f7fe fe6a 	bl	8007274 <memchr>
 80085a0:	b328      	cbz	r0, 80085ee <_scanf_i+0xb6>
 80085a2:	f1bb 0f01 	cmp.w	fp, #1
 80085a6:	d159      	bne.n	800865c <_scanf_i+0x124>
 80085a8:	6862      	ldr	r2, [r4, #4]
 80085aa:	b92a      	cbnz	r2, 80085b8 <_scanf_i+0x80>
 80085ac:	2308      	movs	r3, #8
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	6063      	str	r3, [r4, #4]
 80085b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085b6:	6022      	str	r2, [r4, #0]
 80085b8:	6822      	ldr	r2, [r4, #0]
 80085ba:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80085be:	6022      	str	r2, [r4, #0]
 80085c0:	68a2      	ldr	r2, [r4, #8]
 80085c2:	1e51      	subs	r1, r2, #1
 80085c4:	60a1      	str	r1, [r4, #8]
 80085c6:	b192      	cbz	r2, 80085ee <_scanf_i+0xb6>
 80085c8:	6832      	ldr	r2, [r6, #0]
 80085ca:	1c51      	adds	r1, r2, #1
 80085cc:	6031      	str	r1, [r6, #0]
 80085ce:	7812      	ldrb	r2, [r2, #0]
 80085d0:	f805 2b01 	strb.w	r2, [r5], #1
 80085d4:	6872      	ldr	r2, [r6, #4]
 80085d6:	3a01      	subs	r2, #1
 80085d8:	2a00      	cmp	r2, #0
 80085da:	6072      	str	r2, [r6, #4]
 80085dc:	dc07      	bgt.n	80085ee <_scanf_i+0xb6>
 80085de:	4631      	mov	r1, r6
 80085e0:	4650      	mov	r0, sl
 80085e2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80085e6:	4790      	blx	r2
 80085e8:	2800      	cmp	r0, #0
 80085ea:	f040 8085 	bne.w	80086f8 <_scanf_i+0x1c0>
 80085ee:	f10b 0b01 	add.w	fp, fp, #1
 80085f2:	f1bb 0f03 	cmp.w	fp, #3
 80085f6:	d1cb      	bne.n	8008590 <_scanf_i+0x58>
 80085f8:	6863      	ldr	r3, [r4, #4]
 80085fa:	b90b      	cbnz	r3, 8008600 <_scanf_i+0xc8>
 80085fc:	230a      	movs	r3, #10
 80085fe:	6063      	str	r3, [r4, #4]
 8008600:	6863      	ldr	r3, [r4, #4]
 8008602:	4948      	ldr	r1, [pc, #288]	; (8008724 <_scanf_i+0x1ec>)
 8008604:	6960      	ldr	r0, [r4, #20]
 8008606:	1ac9      	subs	r1, r1, r3
 8008608:	f000 f8b0 	bl	800876c <__sccl>
 800860c:	f04f 0b00 	mov.w	fp, #0
 8008610:	68a3      	ldr	r3, [r4, #8]
 8008612:	6822      	ldr	r2, [r4, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d03d      	beq.n	8008694 <_scanf_i+0x15c>
 8008618:	6831      	ldr	r1, [r6, #0]
 800861a:	6960      	ldr	r0, [r4, #20]
 800861c:	f891 c000 	ldrb.w	ip, [r1]
 8008620:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008624:	2800      	cmp	r0, #0
 8008626:	d035      	beq.n	8008694 <_scanf_i+0x15c>
 8008628:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800862c:	d124      	bne.n	8008678 <_scanf_i+0x140>
 800862e:	0510      	lsls	r0, r2, #20
 8008630:	d522      	bpl.n	8008678 <_scanf_i+0x140>
 8008632:	f10b 0b01 	add.w	fp, fp, #1
 8008636:	f1b9 0f00 	cmp.w	r9, #0
 800863a:	d003      	beq.n	8008644 <_scanf_i+0x10c>
 800863c:	3301      	adds	r3, #1
 800863e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008642:	60a3      	str	r3, [r4, #8]
 8008644:	6873      	ldr	r3, [r6, #4]
 8008646:	3b01      	subs	r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	6073      	str	r3, [r6, #4]
 800864c:	dd1b      	ble.n	8008686 <_scanf_i+0x14e>
 800864e:	6833      	ldr	r3, [r6, #0]
 8008650:	3301      	adds	r3, #1
 8008652:	6033      	str	r3, [r6, #0]
 8008654:	68a3      	ldr	r3, [r4, #8]
 8008656:	3b01      	subs	r3, #1
 8008658:	60a3      	str	r3, [r4, #8]
 800865a:	e7d9      	b.n	8008610 <_scanf_i+0xd8>
 800865c:	f1bb 0f02 	cmp.w	fp, #2
 8008660:	d1ae      	bne.n	80085c0 <_scanf_i+0x88>
 8008662:	6822      	ldr	r2, [r4, #0]
 8008664:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008668:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800866c:	d1bf      	bne.n	80085ee <_scanf_i+0xb6>
 800866e:	2310      	movs	r3, #16
 8008670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008674:	6063      	str	r3, [r4, #4]
 8008676:	e7a2      	b.n	80085be <_scanf_i+0x86>
 8008678:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800867c:	6022      	str	r2, [r4, #0]
 800867e:	780b      	ldrb	r3, [r1, #0]
 8008680:	f805 3b01 	strb.w	r3, [r5], #1
 8008684:	e7de      	b.n	8008644 <_scanf_i+0x10c>
 8008686:	4631      	mov	r1, r6
 8008688:	4650      	mov	r0, sl
 800868a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800868e:	4798      	blx	r3
 8008690:	2800      	cmp	r0, #0
 8008692:	d0df      	beq.n	8008654 <_scanf_i+0x11c>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	05db      	lsls	r3, r3, #23
 8008698:	d50d      	bpl.n	80086b6 <_scanf_i+0x17e>
 800869a:	42bd      	cmp	r5, r7
 800869c:	d909      	bls.n	80086b2 <_scanf_i+0x17a>
 800869e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80086a2:	4632      	mov	r2, r6
 80086a4:	4650      	mov	r0, sl
 80086a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80086ae:	4798      	blx	r3
 80086b0:	464d      	mov	r5, r9
 80086b2:	42bd      	cmp	r5, r7
 80086b4:	d02d      	beq.n	8008712 <_scanf_i+0x1da>
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	f012 0210 	ands.w	r2, r2, #16
 80086bc:	d113      	bne.n	80086e6 <_scanf_i+0x1ae>
 80086be:	702a      	strb	r2, [r5, #0]
 80086c0:	4639      	mov	r1, r7
 80086c2:	6863      	ldr	r3, [r4, #4]
 80086c4:	4650      	mov	r0, sl
 80086c6:	9e01      	ldr	r6, [sp, #4]
 80086c8:	47b0      	blx	r6
 80086ca:	6821      	ldr	r1, [r4, #0]
 80086cc:	f8d8 3000 	ldr.w	r3, [r8]
 80086d0:	f011 0f20 	tst.w	r1, #32
 80086d4:	d013      	beq.n	80086fe <_scanf_i+0x1c6>
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	f8c8 2000 	str.w	r2, [r8]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6018      	str	r0, [r3, #0]
 80086e0:	68e3      	ldr	r3, [r4, #12]
 80086e2:	3301      	adds	r3, #1
 80086e4:	60e3      	str	r3, [r4, #12]
 80086e6:	2000      	movs	r0, #0
 80086e8:	1bed      	subs	r5, r5, r7
 80086ea:	44ab      	add	fp, r5
 80086ec:	6925      	ldr	r5, [r4, #16]
 80086ee:	445d      	add	r5, fp
 80086f0:	6125      	str	r5, [r4, #16]
 80086f2:	b007      	add	sp, #28
 80086f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f8:	f04f 0b00 	mov.w	fp, #0
 80086fc:	e7ca      	b.n	8008694 <_scanf_i+0x15c>
 80086fe:	1d1a      	adds	r2, r3, #4
 8008700:	f8c8 2000 	str.w	r2, [r8]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f011 0f01 	tst.w	r1, #1
 800870a:	bf14      	ite	ne
 800870c:	8018      	strhne	r0, [r3, #0]
 800870e:	6018      	streq	r0, [r3, #0]
 8008710:	e7e6      	b.n	80086e0 <_scanf_i+0x1a8>
 8008712:	2001      	movs	r0, #1
 8008714:	e7ed      	b.n	80086f2 <_scanf_i+0x1ba>
 8008716:	bf00      	nop
 8008718:	0800925c 	.word	0x0800925c
 800871c:	080089bd 	.word	0x080089bd
 8008720:	080088d5 	.word	0x080088d5
 8008724:	0800956e 	.word	0x0800956e

08008728 <_read_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4604      	mov	r4, r0
 800872c:	4608      	mov	r0, r1
 800872e:	4611      	mov	r1, r2
 8008730:	2200      	movs	r2, #0
 8008732:	4d05      	ldr	r5, [pc, #20]	; (8008748 <_read_r+0x20>)
 8008734:	602a      	str	r2, [r5, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	f7f9 fbf7 	bl	8001f2a <_read>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d102      	bne.n	8008746 <_read_r+0x1e>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	b103      	cbz	r3, 8008746 <_read_r+0x1e>
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	200003d0 	.word	0x200003d0

0800874c <_sbrk_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	2300      	movs	r3, #0
 8008750:	4d05      	ldr	r5, [pc, #20]	; (8008768 <_sbrk_r+0x1c>)
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	f7f9 fc50 	bl	8001ffc <_sbrk>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_sbrk_r+0x1a>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_sbrk_r+0x1a>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	200003d0 	.word	0x200003d0

0800876c <__sccl>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	780b      	ldrb	r3, [r1, #0]
 8008770:	4604      	mov	r4, r0
 8008772:	2b5e      	cmp	r3, #94	; 0x5e
 8008774:	bf13      	iteet	ne
 8008776:	2200      	movne	r2, #0
 8008778:	2201      	moveq	r2, #1
 800877a:	784b      	ldrbeq	r3, [r1, #1]
 800877c:	1c48      	addne	r0, r1, #1
 800877e:	bf08      	it	eq
 8008780:	1c88      	addeq	r0, r1, #2
 8008782:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008786:	1e61      	subs	r1, r4, #1
 8008788:	f801 2f01 	strb.w	r2, [r1, #1]!
 800878c:	42a9      	cmp	r1, r5
 800878e:	d1fb      	bne.n	8008788 <__sccl+0x1c>
 8008790:	b90b      	cbnz	r3, 8008796 <__sccl+0x2a>
 8008792:	3801      	subs	r0, #1
 8008794:	bd70      	pop	{r4, r5, r6, pc}
 8008796:	f082 0201 	eor.w	r2, r2, #1
 800879a:	4605      	mov	r5, r0
 800879c:	54e2      	strb	r2, [r4, r3]
 800879e:	4628      	mov	r0, r5
 80087a0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80087a4:	292d      	cmp	r1, #45	; 0x2d
 80087a6:	d006      	beq.n	80087b6 <__sccl+0x4a>
 80087a8:	295d      	cmp	r1, #93	; 0x5d
 80087aa:	d0f3      	beq.n	8008794 <__sccl+0x28>
 80087ac:	b909      	cbnz	r1, 80087b2 <__sccl+0x46>
 80087ae:	4628      	mov	r0, r5
 80087b0:	e7f0      	b.n	8008794 <__sccl+0x28>
 80087b2:	460b      	mov	r3, r1
 80087b4:	e7f1      	b.n	800879a <__sccl+0x2e>
 80087b6:	786e      	ldrb	r6, [r5, #1]
 80087b8:	2e5d      	cmp	r6, #93	; 0x5d
 80087ba:	d0fa      	beq.n	80087b2 <__sccl+0x46>
 80087bc:	42b3      	cmp	r3, r6
 80087be:	dcf8      	bgt.n	80087b2 <__sccl+0x46>
 80087c0:	4619      	mov	r1, r3
 80087c2:	3502      	adds	r5, #2
 80087c4:	3101      	adds	r1, #1
 80087c6:	428e      	cmp	r6, r1
 80087c8:	5462      	strb	r2, [r4, r1]
 80087ca:	dcfb      	bgt.n	80087c4 <__sccl+0x58>
 80087cc:	1af1      	subs	r1, r6, r3
 80087ce:	3901      	subs	r1, #1
 80087d0:	42b3      	cmp	r3, r6
 80087d2:	bfa8      	it	ge
 80087d4:	2100      	movge	r1, #0
 80087d6:	1c58      	adds	r0, r3, #1
 80087d8:	1843      	adds	r3, r0, r1
 80087da:	e7e0      	b.n	800879e <__sccl+0x32>

080087dc <_strtol_l.constprop.0>:
 80087dc:	2b01      	cmp	r3, #1
 80087de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e2:	4680      	mov	r8, r0
 80087e4:	d001      	beq.n	80087ea <_strtol_l.constprop.0+0xe>
 80087e6:	2b24      	cmp	r3, #36	; 0x24
 80087e8:	d906      	bls.n	80087f8 <_strtol_l.constprop.0+0x1c>
 80087ea:	f7fd f8bf 	bl	800596c <__errno>
 80087ee:	2316      	movs	r3, #22
 80087f0:	6003      	str	r3, [r0, #0]
 80087f2:	2000      	movs	r0, #0
 80087f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f8:	460d      	mov	r5, r1
 80087fa:	4f35      	ldr	r7, [pc, #212]	; (80088d0 <_strtol_l.constprop.0+0xf4>)
 80087fc:	4628      	mov	r0, r5
 80087fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008802:	5de6      	ldrb	r6, [r4, r7]
 8008804:	f016 0608 	ands.w	r6, r6, #8
 8008808:	d1f8      	bne.n	80087fc <_strtol_l.constprop.0+0x20>
 800880a:	2c2d      	cmp	r4, #45	; 0x2d
 800880c:	d12f      	bne.n	800886e <_strtol_l.constprop.0+0x92>
 800880e:	2601      	movs	r6, #1
 8008810:	782c      	ldrb	r4, [r5, #0]
 8008812:	1c85      	adds	r5, r0, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d057      	beq.n	80088c8 <_strtol_l.constprop.0+0xec>
 8008818:	2b10      	cmp	r3, #16
 800881a:	d109      	bne.n	8008830 <_strtol_l.constprop.0+0x54>
 800881c:	2c30      	cmp	r4, #48	; 0x30
 800881e:	d107      	bne.n	8008830 <_strtol_l.constprop.0+0x54>
 8008820:	7828      	ldrb	r0, [r5, #0]
 8008822:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008826:	2858      	cmp	r0, #88	; 0x58
 8008828:	d149      	bne.n	80088be <_strtol_l.constprop.0+0xe2>
 800882a:	2310      	movs	r3, #16
 800882c:	786c      	ldrb	r4, [r5, #1]
 800882e:	3502      	adds	r5, #2
 8008830:	2700      	movs	r7, #0
 8008832:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008836:	f10e 3eff 	add.w	lr, lr, #4294967295
 800883a:	fbbe f9f3 	udiv	r9, lr, r3
 800883e:	4638      	mov	r0, r7
 8008840:	fb03 ea19 	mls	sl, r3, r9, lr
 8008844:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008848:	f1bc 0f09 	cmp.w	ip, #9
 800884c:	d814      	bhi.n	8008878 <_strtol_l.constprop.0+0x9c>
 800884e:	4664      	mov	r4, ip
 8008850:	42a3      	cmp	r3, r4
 8008852:	dd22      	ble.n	800889a <_strtol_l.constprop.0+0xbe>
 8008854:	2f00      	cmp	r7, #0
 8008856:	db1d      	blt.n	8008894 <_strtol_l.constprop.0+0xb8>
 8008858:	4581      	cmp	r9, r0
 800885a:	d31b      	bcc.n	8008894 <_strtol_l.constprop.0+0xb8>
 800885c:	d101      	bne.n	8008862 <_strtol_l.constprop.0+0x86>
 800885e:	45a2      	cmp	sl, r4
 8008860:	db18      	blt.n	8008894 <_strtol_l.constprop.0+0xb8>
 8008862:	2701      	movs	r7, #1
 8008864:	fb00 4003 	mla	r0, r0, r3, r4
 8008868:	f815 4b01 	ldrb.w	r4, [r5], #1
 800886c:	e7ea      	b.n	8008844 <_strtol_l.constprop.0+0x68>
 800886e:	2c2b      	cmp	r4, #43	; 0x2b
 8008870:	bf04      	itt	eq
 8008872:	782c      	ldrbeq	r4, [r5, #0]
 8008874:	1c85      	addeq	r5, r0, #2
 8008876:	e7cd      	b.n	8008814 <_strtol_l.constprop.0+0x38>
 8008878:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800887c:	f1bc 0f19 	cmp.w	ip, #25
 8008880:	d801      	bhi.n	8008886 <_strtol_l.constprop.0+0xaa>
 8008882:	3c37      	subs	r4, #55	; 0x37
 8008884:	e7e4      	b.n	8008850 <_strtol_l.constprop.0+0x74>
 8008886:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800888a:	f1bc 0f19 	cmp.w	ip, #25
 800888e:	d804      	bhi.n	800889a <_strtol_l.constprop.0+0xbe>
 8008890:	3c57      	subs	r4, #87	; 0x57
 8008892:	e7dd      	b.n	8008850 <_strtol_l.constprop.0+0x74>
 8008894:	f04f 37ff 	mov.w	r7, #4294967295
 8008898:	e7e6      	b.n	8008868 <_strtol_l.constprop.0+0x8c>
 800889a:	2f00      	cmp	r7, #0
 800889c:	da07      	bge.n	80088ae <_strtol_l.constprop.0+0xd2>
 800889e:	2322      	movs	r3, #34	; 0x22
 80088a0:	4670      	mov	r0, lr
 80088a2:	f8c8 3000 	str.w	r3, [r8]
 80088a6:	2a00      	cmp	r2, #0
 80088a8:	d0a4      	beq.n	80087f4 <_strtol_l.constprop.0+0x18>
 80088aa:	1e69      	subs	r1, r5, #1
 80088ac:	e005      	b.n	80088ba <_strtol_l.constprop.0+0xde>
 80088ae:	b106      	cbz	r6, 80088b2 <_strtol_l.constprop.0+0xd6>
 80088b0:	4240      	negs	r0, r0
 80088b2:	2a00      	cmp	r2, #0
 80088b4:	d09e      	beq.n	80087f4 <_strtol_l.constprop.0+0x18>
 80088b6:	2f00      	cmp	r7, #0
 80088b8:	d1f7      	bne.n	80088aa <_strtol_l.constprop.0+0xce>
 80088ba:	6011      	str	r1, [r2, #0]
 80088bc:	e79a      	b.n	80087f4 <_strtol_l.constprop.0+0x18>
 80088be:	2430      	movs	r4, #48	; 0x30
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1b5      	bne.n	8008830 <_strtol_l.constprop.0+0x54>
 80088c4:	2308      	movs	r3, #8
 80088c6:	e7b3      	b.n	8008830 <_strtol_l.constprop.0+0x54>
 80088c8:	2c30      	cmp	r4, #48	; 0x30
 80088ca:	d0a9      	beq.n	8008820 <_strtol_l.constprop.0+0x44>
 80088cc:	230a      	movs	r3, #10
 80088ce:	e7af      	b.n	8008830 <_strtol_l.constprop.0+0x54>
 80088d0:	08009571 	.word	0x08009571

080088d4 <_strtol_r>:
 80088d4:	f7ff bf82 	b.w	80087dc <_strtol_l.constprop.0>

080088d8 <_strtoul_l.constprop.0>:
 80088d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088dc:	4686      	mov	lr, r0
 80088de:	460d      	mov	r5, r1
 80088e0:	4f35      	ldr	r7, [pc, #212]	; (80089b8 <_strtoul_l.constprop.0+0xe0>)
 80088e2:	4628      	mov	r0, r5
 80088e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088e8:	5de6      	ldrb	r6, [r4, r7]
 80088ea:	f016 0608 	ands.w	r6, r6, #8
 80088ee:	d1f8      	bne.n	80088e2 <_strtoul_l.constprop.0+0xa>
 80088f0:	2c2d      	cmp	r4, #45	; 0x2d
 80088f2:	d12f      	bne.n	8008954 <_strtoul_l.constprop.0+0x7c>
 80088f4:	2601      	movs	r6, #1
 80088f6:	782c      	ldrb	r4, [r5, #0]
 80088f8:	1c85      	adds	r5, r0, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d057      	beq.n	80089ae <_strtoul_l.constprop.0+0xd6>
 80088fe:	2b10      	cmp	r3, #16
 8008900:	d109      	bne.n	8008916 <_strtoul_l.constprop.0+0x3e>
 8008902:	2c30      	cmp	r4, #48	; 0x30
 8008904:	d107      	bne.n	8008916 <_strtoul_l.constprop.0+0x3e>
 8008906:	7828      	ldrb	r0, [r5, #0]
 8008908:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800890c:	2858      	cmp	r0, #88	; 0x58
 800890e:	d149      	bne.n	80089a4 <_strtoul_l.constprop.0+0xcc>
 8008910:	2310      	movs	r3, #16
 8008912:	786c      	ldrb	r4, [r5, #1]
 8008914:	3502      	adds	r5, #2
 8008916:	f04f 38ff 	mov.w	r8, #4294967295
 800891a:	fbb8 f8f3 	udiv	r8, r8, r3
 800891e:	2700      	movs	r7, #0
 8008920:	fb03 f908 	mul.w	r9, r3, r8
 8008924:	4638      	mov	r0, r7
 8008926:	ea6f 0909 	mvn.w	r9, r9
 800892a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800892e:	f1bc 0f09 	cmp.w	ip, #9
 8008932:	d814      	bhi.n	800895e <_strtoul_l.constprop.0+0x86>
 8008934:	4664      	mov	r4, ip
 8008936:	42a3      	cmp	r3, r4
 8008938:	dd22      	ble.n	8008980 <_strtoul_l.constprop.0+0xa8>
 800893a:	2f00      	cmp	r7, #0
 800893c:	db1d      	blt.n	800897a <_strtoul_l.constprop.0+0xa2>
 800893e:	4580      	cmp	r8, r0
 8008940:	d31b      	bcc.n	800897a <_strtoul_l.constprop.0+0xa2>
 8008942:	d101      	bne.n	8008948 <_strtoul_l.constprop.0+0x70>
 8008944:	45a1      	cmp	r9, r4
 8008946:	db18      	blt.n	800897a <_strtoul_l.constprop.0+0xa2>
 8008948:	2701      	movs	r7, #1
 800894a:	fb00 4003 	mla	r0, r0, r3, r4
 800894e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008952:	e7ea      	b.n	800892a <_strtoul_l.constprop.0+0x52>
 8008954:	2c2b      	cmp	r4, #43	; 0x2b
 8008956:	bf04      	itt	eq
 8008958:	782c      	ldrbeq	r4, [r5, #0]
 800895a:	1c85      	addeq	r5, r0, #2
 800895c:	e7cd      	b.n	80088fa <_strtoul_l.constprop.0+0x22>
 800895e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008962:	f1bc 0f19 	cmp.w	ip, #25
 8008966:	d801      	bhi.n	800896c <_strtoul_l.constprop.0+0x94>
 8008968:	3c37      	subs	r4, #55	; 0x37
 800896a:	e7e4      	b.n	8008936 <_strtoul_l.constprop.0+0x5e>
 800896c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008970:	f1bc 0f19 	cmp.w	ip, #25
 8008974:	d804      	bhi.n	8008980 <_strtoul_l.constprop.0+0xa8>
 8008976:	3c57      	subs	r4, #87	; 0x57
 8008978:	e7dd      	b.n	8008936 <_strtoul_l.constprop.0+0x5e>
 800897a:	f04f 37ff 	mov.w	r7, #4294967295
 800897e:	e7e6      	b.n	800894e <_strtoul_l.constprop.0+0x76>
 8008980:	2f00      	cmp	r7, #0
 8008982:	da07      	bge.n	8008994 <_strtoul_l.constprop.0+0xbc>
 8008984:	2322      	movs	r3, #34	; 0x22
 8008986:	f04f 30ff 	mov.w	r0, #4294967295
 800898a:	f8ce 3000 	str.w	r3, [lr]
 800898e:	b932      	cbnz	r2, 800899e <_strtoul_l.constprop.0+0xc6>
 8008990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008994:	b106      	cbz	r6, 8008998 <_strtoul_l.constprop.0+0xc0>
 8008996:	4240      	negs	r0, r0
 8008998:	2a00      	cmp	r2, #0
 800899a:	d0f9      	beq.n	8008990 <_strtoul_l.constprop.0+0xb8>
 800899c:	b107      	cbz	r7, 80089a0 <_strtoul_l.constprop.0+0xc8>
 800899e:	1e69      	subs	r1, r5, #1
 80089a0:	6011      	str	r1, [r2, #0]
 80089a2:	e7f5      	b.n	8008990 <_strtoul_l.constprop.0+0xb8>
 80089a4:	2430      	movs	r4, #48	; 0x30
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1b5      	bne.n	8008916 <_strtoul_l.constprop.0+0x3e>
 80089aa:	2308      	movs	r3, #8
 80089ac:	e7b3      	b.n	8008916 <_strtoul_l.constprop.0+0x3e>
 80089ae:	2c30      	cmp	r4, #48	; 0x30
 80089b0:	d0a9      	beq.n	8008906 <_strtoul_l.constprop.0+0x2e>
 80089b2:	230a      	movs	r3, #10
 80089b4:	e7af      	b.n	8008916 <_strtoul_l.constprop.0+0x3e>
 80089b6:	bf00      	nop
 80089b8:	08009571 	.word	0x08009571

080089bc <_strtoul_r>:
 80089bc:	f7ff bf8c 	b.w	80088d8 <_strtoul_l.constprop.0>

080089c0 <__submore>:
 80089c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c4:	460c      	mov	r4, r1
 80089c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80089c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089cc:	4299      	cmp	r1, r3
 80089ce:	d11b      	bne.n	8008a08 <__submore+0x48>
 80089d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80089d4:	f7ff f85a 	bl	8007a8c <_malloc_r>
 80089d8:	b918      	cbnz	r0, 80089e2 <__submore+0x22>
 80089da:	f04f 30ff 	mov.w	r0, #4294967295
 80089de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80089e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80089ec:	6360      	str	r0, [r4, #52]	; 0x34
 80089ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80089f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80089f6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80089fa:	7043      	strb	r3, [r0, #1]
 80089fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008a00:	7003      	strb	r3, [r0, #0]
 8008a02:	6020      	str	r0, [r4, #0]
 8008a04:	2000      	movs	r0, #0
 8008a06:	e7ea      	b.n	80089de <__submore+0x1e>
 8008a08:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008a0a:	0077      	lsls	r7, r6, #1
 8008a0c:	463a      	mov	r2, r7
 8008a0e:	f000 fb2b 	bl	8009068 <_realloc_r>
 8008a12:	4605      	mov	r5, r0
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d0e0      	beq.n	80089da <__submore+0x1a>
 8008a18:	eb00 0806 	add.w	r8, r0, r6
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	4632      	mov	r2, r6
 8008a20:	4640      	mov	r0, r8
 8008a22:	f7fc ffcd 	bl	80059c0 <memcpy>
 8008a26:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008a2a:	f8c4 8000 	str.w	r8, [r4]
 8008a2e:	e7e9      	b.n	8008a04 <__submore+0x44>

08008a30 <__swbuf_r>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	460e      	mov	r6, r1
 8008a34:	4614      	mov	r4, r2
 8008a36:	4605      	mov	r5, r0
 8008a38:	b118      	cbz	r0, 8008a42 <__swbuf_r+0x12>
 8008a3a:	6983      	ldr	r3, [r0, #24]
 8008a3c:	b90b      	cbnz	r3, 8008a42 <__swbuf_r+0x12>
 8008a3e:	f000 f9d5 	bl	8008dec <__sinit>
 8008a42:	4b21      	ldr	r3, [pc, #132]	; (8008ac8 <__swbuf_r+0x98>)
 8008a44:	429c      	cmp	r4, r3
 8008a46:	d12b      	bne.n	8008aa0 <__swbuf_r+0x70>
 8008a48:	686c      	ldr	r4, [r5, #4]
 8008a4a:	69a3      	ldr	r3, [r4, #24]
 8008a4c:	60a3      	str	r3, [r4, #8]
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	071a      	lsls	r2, r3, #28
 8008a52:	d52f      	bpl.n	8008ab4 <__swbuf_r+0x84>
 8008a54:	6923      	ldr	r3, [r4, #16]
 8008a56:	b36b      	cbz	r3, 8008ab4 <__swbuf_r+0x84>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	6820      	ldr	r0, [r4, #0]
 8008a5c:	b2f6      	uxtb	r6, r6
 8008a5e:	1ac0      	subs	r0, r0, r3
 8008a60:	6963      	ldr	r3, [r4, #20]
 8008a62:	4637      	mov	r7, r6
 8008a64:	4283      	cmp	r3, r0
 8008a66:	dc04      	bgt.n	8008a72 <__swbuf_r+0x42>
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 f92a 	bl	8008cc4 <_fflush_r>
 8008a70:	bb30      	cbnz	r0, 8008ac0 <__swbuf_r+0x90>
 8008a72:	68a3      	ldr	r3, [r4, #8]
 8008a74:	3001      	adds	r0, #1
 8008a76:	3b01      	subs	r3, #1
 8008a78:	60a3      	str	r3, [r4, #8]
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	6022      	str	r2, [r4, #0]
 8008a80:	701e      	strb	r6, [r3, #0]
 8008a82:	6963      	ldr	r3, [r4, #20]
 8008a84:	4283      	cmp	r3, r0
 8008a86:	d004      	beq.n	8008a92 <__swbuf_r+0x62>
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	07db      	lsls	r3, r3, #31
 8008a8c:	d506      	bpl.n	8008a9c <__swbuf_r+0x6c>
 8008a8e:	2e0a      	cmp	r6, #10
 8008a90:	d104      	bne.n	8008a9c <__swbuf_r+0x6c>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 f915 	bl	8008cc4 <_fflush_r>
 8008a9a:	b988      	cbnz	r0, 8008ac0 <__swbuf_r+0x90>
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <__swbuf_r+0x9c>)
 8008aa2:	429c      	cmp	r4, r3
 8008aa4:	d101      	bne.n	8008aaa <__swbuf_r+0x7a>
 8008aa6:	68ac      	ldr	r4, [r5, #8]
 8008aa8:	e7cf      	b.n	8008a4a <__swbuf_r+0x1a>
 8008aaa:	4b09      	ldr	r3, [pc, #36]	; (8008ad0 <__swbuf_r+0xa0>)
 8008aac:	429c      	cmp	r4, r3
 8008aae:	bf08      	it	eq
 8008ab0:	68ec      	ldreq	r4, [r5, #12]
 8008ab2:	e7ca      	b.n	8008a4a <__swbuf_r+0x1a>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f000 f80c 	bl	8008ad4 <__swsetup_r>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d0cb      	beq.n	8008a58 <__swbuf_r+0x28>
 8008ac0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ac4:	e7ea      	b.n	8008a9c <__swbuf_r+0x6c>
 8008ac6:	bf00      	nop
 8008ac8:	08009694 	.word	0x08009694
 8008acc:	080096b4 	.word	0x080096b4
 8008ad0:	08009674 	.word	0x08009674

08008ad4 <__swsetup_r>:
 8008ad4:	4b32      	ldr	r3, [pc, #200]	; (8008ba0 <__swsetup_r+0xcc>)
 8008ad6:	b570      	push	{r4, r5, r6, lr}
 8008ad8:	681d      	ldr	r5, [r3, #0]
 8008ada:	4606      	mov	r6, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	b125      	cbz	r5, 8008aea <__swsetup_r+0x16>
 8008ae0:	69ab      	ldr	r3, [r5, #24]
 8008ae2:	b913      	cbnz	r3, 8008aea <__swsetup_r+0x16>
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f000 f981 	bl	8008dec <__sinit>
 8008aea:	4b2e      	ldr	r3, [pc, #184]	; (8008ba4 <__swsetup_r+0xd0>)
 8008aec:	429c      	cmp	r4, r3
 8008aee:	d10f      	bne.n	8008b10 <__swsetup_r+0x3c>
 8008af0:	686c      	ldr	r4, [r5, #4]
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008af8:	0719      	lsls	r1, r3, #28
 8008afa:	d42c      	bmi.n	8008b56 <__swsetup_r+0x82>
 8008afc:	06dd      	lsls	r5, r3, #27
 8008afe:	d411      	bmi.n	8008b24 <__swsetup_r+0x50>
 8008b00:	2309      	movs	r3, #9
 8008b02:	6033      	str	r3, [r6, #0]
 8008b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	81a3      	strh	r3, [r4, #12]
 8008b0e:	e03e      	b.n	8008b8e <__swsetup_r+0xba>
 8008b10:	4b25      	ldr	r3, [pc, #148]	; (8008ba8 <__swsetup_r+0xd4>)
 8008b12:	429c      	cmp	r4, r3
 8008b14:	d101      	bne.n	8008b1a <__swsetup_r+0x46>
 8008b16:	68ac      	ldr	r4, [r5, #8]
 8008b18:	e7eb      	b.n	8008af2 <__swsetup_r+0x1e>
 8008b1a:	4b24      	ldr	r3, [pc, #144]	; (8008bac <__swsetup_r+0xd8>)
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	bf08      	it	eq
 8008b20:	68ec      	ldreq	r4, [r5, #12]
 8008b22:	e7e6      	b.n	8008af2 <__swsetup_r+0x1e>
 8008b24:	0758      	lsls	r0, r3, #29
 8008b26:	d512      	bpl.n	8008b4e <__swsetup_r+0x7a>
 8008b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b2a:	b141      	cbz	r1, 8008b3e <__swsetup_r+0x6a>
 8008b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d002      	beq.n	8008b3a <__swsetup_r+0x66>
 8008b34:	4630      	mov	r0, r6
 8008b36:	f7fe ff41 	bl	80079bc <_free_r>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b44:	81a3      	strh	r3, [r4, #12]
 8008b46:	2300      	movs	r3, #0
 8008b48:	6063      	str	r3, [r4, #4]
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	f043 0308 	orr.w	r3, r3, #8
 8008b54:	81a3      	strh	r3, [r4, #12]
 8008b56:	6923      	ldr	r3, [r4, #16]
 8008b58:	b94b      	cbnz	r3, 8008b6e <__swsetup_r+0x9a>
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b64:	d003      	beq.n	8008b6e <__swsetup_r+0x9a>
 8008b66:	4621      	mov	r1, r4
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 fa05 	bl	8008f78 <__smakebuf_r>
 8008b6e:	89a0      	ldrh	r0, [r4, #12]
 8008b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b74:	f010 0301 	ands.w	r3, r0, #1
 8008b78:	d00a      	beq.n	8008b90 <__swsetup_r+0xbc>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60a3      	str	r3, [r4, #8]
 8008b7e:	6963      	ldr	r3, [r4, #20]
 8008b80:	425b      	negs	r3, r3
 8008b82:	61a3      	str	r3, [r4, #24]
 8008b84:	6923      	ldr	r3, [r4, #16]
 8008b86:	b943      	cbnz	r3, 8008b9a <__swsetup_r+0xc6>
 8008b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b8c:	d1ba      	bne.n	8008b04 <__swsetup_r+0x30>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	0781      	lsls	r1, r0, #30
 8008b92:	bf58      	it	pl
 8008b94:	6963      	ldrpl	r3, [r4, #20]
 8008b96:	60a3      	str	r3, [r4, #8]
 8008b98:	e7f4      	b.n	8008b84 <__swsetup_r+0xb0>
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e7f7      	b.n	8008b8e <__swsetup_r+0xba>
 8008b9e:	bf00      	nop
 8008ba0:	20000010 	.word	0x20000010
 8008ba4:	08009694 	.word	0x08009694
 8008ba8:	080096b4 	.word	0x080096b4
 8008bac:	08009674 	.word	0x08009674

08008bb0 <abort>:
 8008bb0:	2006      	movs	r0, #6
 8008bb2:	b508      	push	{r3, lr}
 8008bb4:	f000 fab0 	bl	8009118 <raise>
 8008bb8:	2001      	movs	r0, #1
 8008bba:	f7f9 f9ac 	bl	8001f16 <_exit>
	...

08008bc0 <__sflush_r>:
 8008bc0:	898a      	ldrh	r2, [r1, #12]
 8008bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	0710      	lsls	r0, r2, #28
 8008bc8:	460c      	mov	r4, r1
 8008bca:	d457      	bmi.n	8008c7c <__sflush_r+0xbc>
 8008bcc:	684b      	ldr	r3, [r1, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	dc04      	bgt.n	8008bdc <__sflush_r+0x1c>
 8008bd2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	dc01      	bgt.n	8008bdc <__sflush_r+0x1c>
 8008bd8:	2000      	movs	r0, #0
 8008bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	d0fa      	beq.n	8008bd8 <__sflush_r+0x18>
 8008be2:	2300      	movs	r3, #0
 8008be4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008be8:	682f      	ldr	r7, [r5, #0]
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	d032      	beq.n	8008c54 <__sflush_r+0x94>
 8008bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	075a      	lsls	r2, r3, #29
 8008bf4:	d505      	bpl.n	8008c02 <__sflush_r+0x42>
 8008bf6:	6863      	ldr	r3, [r4, #4]
 8008bf8:	1ac0      	subs	r0, r0, r3
 8008bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bfc:	b10b      	cbz	r3, 8008c02 <__sflush_r+0x42>
 8008bfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c00:	1ac0      	subs	r0, r0, r3
 8008c02:	2300      	movs	r3, #0
 8008c04:	4602      	mov	r2, r0
 8008c06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c08:	4628      	mov	r0, r5
 8008c0a:	6a21      	ldr	r1, [r4, #32]
 8008c0c:	47b0      	blx	r6
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	d106      	bne.n	8008c22 <__sflush_r+0x62>
 8008c14:	6829      	ldr	r1, [r5, #0]
 8008c16:	291d      	cmp	r1, #29
 8008c18:	d82c      	bhi.n	8008c74 <__sflush_r+0xb4>
 8008c1a:	4a29      	ldr	r2, [pc, #164]	; (8008cc0 <__sflush_r+0x100>)
 8008c1c:	40ca      	lsrs	r2, r1
 8008c1e:	07d6      	lsls	r6, r2, #31
 8008c20:	d528      	bpl.n	8008c74 <__sflush_r+0xb4>
 8008c22:	2200      	movs	r2, #0
 8008c24:	6062      	str	r2, [r4, #4]
 8008c26:	6922      	ldr	r2, [r4, #16]
 8008c28:	04d9      	lsls	r1, r3, #19
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	d504      	bpl.n	8008c38 <__sflush_r+0x78>
 8008c2e:	1c42      	adds	r2, r0, #1
 8008c30:	d101      	bne.n	8008c36 <__sflush_r+0x76>
 8008c32:	682b      	ldr	r3, [r5, #0]
 8008c34:	b903      	cbnz	r3, 8008c38 <__sflush_r+0x78>
 8008c36:	6560      	str	r0, [r4, #84]	; 0x54
 8008c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c3a:	602f      	str	r7, [r5, #0]
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	d0cb      	beq.n	8008bd8 <__sflush_r+0x18>
 8008c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c44:	4299      	cmp	r1, r3
 8008c46:	d002      	beq.n	8008c4e <__sflush_r+0x8e>
 8008c48:	4628      	mov	r0, r5
 8008c4a:	f7fe feb7 	bl	80079bc <_free_r>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	6360      	str	r0, [r4, #52]	; 0x34
 8008c52:	e7c2      	b.n	8008bda <__sflush_r+0x1a>
 8008c54:	6a21      	ldr	r1, [r4, #32]
 8008c56:	2301      	movs	r3, #1
 8008c58:	4628      	mov	r0, r5
 8008c5a:	47b0      	blx	r6
 8008c5c:	1c41      	adds	r1, r0, #1
 8008c5e:	d1c7      	bne.n	8008bf0 <__sflush_r+0x30>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0c4      	beq.n	8008bf0 <__sflush_r+0x30>
 8008c66:	2b1d      	cmp	r3, #29
 8008c68:	d001      	beq.n	8008c6e <__sflush_r+0xae>
 8008c6a:	2b16      	cmp	r3, #22
 8008c6c:	d101      	bne.n	8008c72 <__sflush_r+0xb2>
 8008c6e:	602f      	str	r7, [r5, #0]
 8008c70:	e7b2      	b.n	8008bd8 <__sflush_r+0x18>
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c78:	81a3      	strh	r3, [r4, #12]
 8008c7a:	e7ae      	b.n	8008bda <__sflush_r+0x1a>
 8008c7c:	690f      	ldr	r7, [r1, #16]
 8008c7e:	2f00      	cmp	r7, #0
 8008c80:	d0aa      	beq.n	8008bd8 <__sflush_r+0x18>
 8008c82:	0793      	lsls	r3, r2, #30
 8008c84:	bf18      	it	ne
 8008c86:	2300      	movne	r3, #0
 8008c88:	680e      	ldr	r6, [r1, #0]
 8008c8a:	bf08      	it	eq
 8008c8c:	694b      	ldreq	r3, [r1, #20]
 8008c8e:	1bf6      	subs	r6, r6, r7
 8008c90:	600f      	str	r7, [r1, #0]
 8008c92:	608b      	str	r3, [r1, #8]
 8008c94:	2e00      	cmp	r6, #0
 8008c96:	dd9f      	ble.n	8008bd8 <__sflush_r+0x18>
 8008c98:	4633      	mov	r3, r6
 8008c9a:	463a      	mov	r2, r7
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	6a21      	ldr	r1, [r4, #32]
 8008ca0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008ca4:	47e0      	blx	ip
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	dc06      	bgt.n	8008cb8 <__sflush_r+0xf8>
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	e790      	b.n	8008bda <__sflush_r+0x1a>
 8008cb8:	4407      	add	r7, r0
 8008cba:	1a36      	subs	r6, r6, r0
 8008cbc:	e7ea      	b.n	8008c94 <__sflush_r+0xd4>
 8008cbe:	bf00      	nop
 8008cc0:	20400001 	.word	0x20400001

08008cc4 <_fflush_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	690b      	ldr	r3, [r1, #16]
 8008cc8:	4605      	mov	r5, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	b913      	cbnz	r3, 8008cd4 <_fflush_r+0x10>
 8008cce:	2500      	movs	r5, #0
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	b118      	cbz	r0, 8008cde <_fflush_r+0x1a>
 8008cd6:	6983      	ldr	r3, [r0, #24]
 8008cd8:	b90b      	cbnz	r3, 8008cde <_fflush_r+0x1a>
 8008cda:	f000 f887 	bl	8008dec <__sinit>
 8008cde:	4b14      	ldr	r3, [pc, #80]	; (8008d30 <_fflush_r+0x6c>)
 8008ce0:	429c      	cmp	r4, r3
 8008ce2:	d11b      	bne.n	8008d1c <_fflush_r+0x58>
 8008ce4:	686c      	ldr	r4, [r5, #4]
 8008ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0ef      	beq.n	8008cce <_fflush_r+0xa>
 8008cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cf0:	07d0      	lsls	r0, r2, #31
 8008cf2:	d404      	bmi.n	8008cfe <_fflush_r+0x3a>
 8008cf4:	0599      	lsls	r1, r3, #22
 8008cf6:	d402      	bmi.n	8008cfe <_fflush_r+0x3a>
 8008cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cfa:	f000 f915 	bl	8008f28 <__retarget_lock_acquire_recursive>
 8008cfe:	4628      	mov	r0, r5
 8008d00:	4621      	mov	r1, r4
 8008d02:	f7ff ff5d 	bl	8008bc0 <__sflush_r>
 8008d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d08:	4605      	mov	r5, r0
 8008d0a:	07da      	lsls	r2, r3, #31
 8008d0c:	d4e0      	bmi.n	8008cd0 <_fflush_r+0xc>
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	059b      	lsls	r3, r3, #22
 8008d12:	d4dd      	bmi.n	8008cd0 <_fflush_r+0xc>
 8008d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d16:	f000 f908 	bl	8008f2a <__retarget_lock_release_recursive>
 8008d1a:	e7d9      	b.n	8008cd0 <_fflush_r+0xc>
 8008d1c:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <_fflush_r+0x70>)
 8008d1e:	429c      	cmp	r4, r3
 8008d20:	d101      	bne.n	8008d26 <_fflush_r+0x62>
 8008d22:	68ac      	ldr	r4, [r5, #8]
 8008d24:	e7df      	b.n	8008ce6 <_fflush_r+0x22>
 8008d26:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <_fflush_r+0x74>)
 8008d28:	429c      	cmp	r4, r3
 8008d2a:	bf08      	it	eq
 8008d2c:	68ec      	ldreq	r4, [r5, #12]
 8008d2e:	e7da      	b.n	8008ce6 <_fflush_r+0x22>
 8008d30:	08009694 	.word	0x08009694
 8008d34:	080096b4 	.word	0x080096b4
 8008d38:	08009674 	.word	0x08009674

08008d3c <std>:
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	b510      	push	{r4, lr}
 8008d40:	4604      	mov	r4, r0
 8008d42:	e9c0 3300 	strd	r3, r3, [r0]
 8008d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d4a:	6083      	str	r3, [r0, #8]
 8008d4c:	8181      	strh	r1, [r0, #12]
 8008d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d50:	81c2      	strh	r2, [r0, #14]
 8008d52:	6183      	str	r3, [r0, #24]
 8008d54:	4619      	mov	r1, r3
 8008d56:	2208      	movs	r2, #8
 8008d58:	305c      	adds	r0, #92	; 0x5c
 8008d5a:	f7fc fe3f 	bl	80059dc <memset>
 8008d5e:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <std+0x38>)
 8008d60:	6224      	str	r4, [r4, #32]
 8008d62:	6263      	str	r3, [r4, #36]	; 0x24
 8008d64:	4b04      	ldr	r3, [pc, #16]	; (8008d78 <std+0x3c>)
 8008d66:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d68:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <std+0x40>)
 8008d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d6c:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <std+0x44>)
 8008d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8008d70:	bd10      	pop	{r4, pc}
 8008d72:	bf00      	nop
 8008d74:	08006341 	.word	0x08006341
 8008d78:	08006367 	.word	0x08006367
 8008d7c:	0800639f 	.word	0x0800639f
 8008d80:	080063c3 	.word	0x080063c3

08008d84 <_cleanup_r>:
 8008d84:	4901      	ldr	r1, [pc, #4]	; (8008d8c <_cleanup_r+0x8>)
 8008d86:	f000 b8af 	b.w	8008ee8 <_fwalk_reent>
 8008d8a:	bf00      	nop
 8008d8c:	08008cc5 	.word	0x08008cc5

08008d90 <__sfmoreglue>:
 8008d90:	2268      	movs	r2, #104	; 0x68
 8008d92:	b570      	push	{r4, r5, r6, lr}
 8008d94:	1e4d      	subs	r5, r1, #1
 8008d96:	4355      	muls	r5, r2
 8008d98:	460e      	mov	r6, r1
 8008d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d9e:	f7fe fe75 	bl	8007a8c <_malloc_r>
 8008da2:	4604      	mov	r4, r0
 8008da4:	b140      	cbz	r0, 8008db8 <__sfmoreglue+0x28>
 8008da6:	2100      	movs	r1, #0
 8008da8:	e9c0 1600 	strd	r1, r6, [r0]
 8008dac:	300c      	adds	r0, #12
 8008dae:	60a0      	str	r0, [r4, #8]
 8008db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008db4:	f7fc fe12 	bl	80059dc <memset>
 8008db8:	4620      	mov	r0, r4
 8008dba:	bd70      	pop	{r4, r5, r6, pc}

08008dbc <__sfp_lock_acquire>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	; (8008dc4 <__sfp_lock_acquire+0x8>)
 8008dbe:	f000 b8b3 	b.w	8008f28 <__retarget_lock_acquire_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	200003d5 	.word	0x200003d5

08008dc8 <__sfp_lock_release>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	; (8008dd0 <__sfp_lock_release+0x8>)
 8008dca:	f000 b8ae 	b.w	8008f2a <__retarget_lock_release_recursive>
 8008dce:	bf00      	nop
 8008dd0:	200003d5 	.word	0x200003d5

08008dd4 <__sinit_lock_acquire>:
 8008dd4:	4801      	ldr	r0, [pc, #4]	; (8008ddc <__sinit_lock_acquire+0x8>)
 8008dd6:	f000 b8a7 	b.w	8008f28 <__retarget_lock_acquire_recursive>
 8008dda:	bf00      	nop
 8008ddc:	200003d6 	.word	0x200003d6

08008de0 <__sinit_lock_release>:
 8008de0:	4801      	ldr	r0, [pc, #4]	; (8008de8 <__sinit_lock_release+0x8>)
 8008de2:	f000 b8a2 	b.w	8008f2a <__retarget_lock_release_recursive>
 8008de6:	bf00      	nop
 8008de8:	200003d6 	.word	0x200003d6

08008dec <__sinit>:
 8008dec:	b510      	push	{r4, lr}
 8008dee:	4604      	mov	r4, r0
 8008df0:	f7ff fff0 	bl	8008dd4 <__sinit_lock_acquire>
 8008df4:	69a3      	ldr	r3, [r4, #24]
 8008df6:	b11b      	cbz	r3, 8008e00 <__sinit+0x14>
 8008df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dfc:	f7ff bff0 	b.w	8008de0 <__sinit_lock_release>
 8008e00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e04:	6523      	str	r3, [r4, #80]	; 0x50
 8008e06:	4b13      	ldr	r3, [pc, #76]	; (8008e54 <__sinit+0x68>)
 8008e08:	4a13      	ldr	r2, [pc, #76]	; (8008e58 <__sinit+0x6c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	bf08      	it	eq
 8008e12:	2301      	moveq	r3, #1
 8008e14:	4620      	mov	r0, r4
 8008e16:	bf08      	it	eq
 8008e18:	61a3      	streq	r3, [r4, #24]
 8008e1a:	f000 f81f 	bl	8008e5c <__sfp>
 8008e1e:	6060      	str	r0, [r4, #4]
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 f81b 	bl	8008e5c <__sfp>
 8008e26:	60a0      	str	r0, [r4, #8]
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f000 f817 	bl	8008e5c <__sfp>
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2104      	movs	r1, #4
 8008e32:	60e0      	str	r0, [r4, #12]
 8008e34:	6860      	ldr	r0, [r4, #4]
 8008e36:	f7ff ff81 	bl	8008d3c <std>
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	2109      	movs	r1, #9
 8008e3e:	68a0      	ldr	r0, [r4, #8]
 8008e40:	f7ff ff7c 	bl	8008d3c <std>
 8008e44:	2202      	movs	r2, #2
 8008e46:	2112      	movs	r1, #18
 8008e48:	68e0      	ldr	r0, [r4, #12]
 8008e4a:	f7ff ff77 	bl	8008d3c <std>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	61a3      	str	r3, [r4, #24]
 8008e52:	e7d1      	b.n	8008df8 <__sinit+0xc>
 8008e54:	0800928c 	.word	0x0800928c
 8008e58:	08008d85 	.word	0x08008d85

08008e5c <__sfp>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	4607      	mov	r7, r0
 8008e60:	f7ff ffac 	bl	8008dbc <__sfp_lock_acquire>
 8008e64:	4b1e      	ldr	r3, [pc, #120]	; (8008ee0 <__sfp+0x84>)
 8008e66:	681e      	ldr	r6, [r3, #0]
 8008e68:	69b3      	ldr	r3, [r6, #24]
 8008e6a:	b913      	cbnz	r3, 8008e72 <__sfp+0x16>
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff ffbd 	bl	8008dec <__sinit>
 8008e72:	3648      	adds	r6, #72	; 0x48
 8008e74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	d503      	bpl.n	8008e84 <__sfp+0x28>
 8008e7c:	6833      	ldr	r3, [r6, #0]
 8008e7e:	b30b      	cbz	r3, 8008ec4 <__sfp+0x68>
 8008e80:	6836      	ldr	r6, [r6, #0]
 8008e82:	e7f7      	b.n	8008e74 <__sfp+0x18>
 8008e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e88:	b9d5      	cbnz	r5, 8008ec0 <__sfp+0x64>
 8008e8a:	4b16      	ldr	r3, [pc, #88]	; (8008ee4 <__sfp+0x88>)
 8008e8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e90:	60e3      	str	r3, [r4, #12]
 8008e92:	6665      	str	r5, [r4, #100]	; 0x64
 8008e94:	f000 f847 	bl	8008f26 <__retarget_lock_init_recursive>
 8008e98:	f7ff ff96 	bl	8008dc8 <__sfp_lock_release>
 8008e9c:	2208      	movs	r2, #8
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ea8:	6025      	str	r5, [r4, #0]
 8008eaa:	61a5      	str	r5, [r4, #24]
 8008eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008eb0:	f7fc fd94 	bl	80059dc <memset>
 8008eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec0:	3468      	adds	r4, #104	; 0x68
 8008ec2:	e7d9      	b.n	8008e78 <__sfp+0x1c>
 8008ec4:	2104      	movs	r1, #4
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	f7ff ff62 	bl	8008d90 <__sfmoreglue>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	6030      	str	r0, [r6, #0]
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d1d5      	bne.n	8008e80 <__sfp+0x24>
 8008ed4:	f7ff ff78 	bl	8008dc8 <__sfp_lock_release>
 8008ed8:	230c      	movs	r3, #12
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	e7ee      	b.n	8008ebc <__sfp+0x60>
 8008ede:	bf00      	nop
 8008ee0:	0800928c 	.word	0x0800928c
 8008ee4:	ffff0001 	.word	0xffff0001

08008ee8 <_fwalk_reent>:
 8008ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eec:	4606      	mov	r6, r0
 8008eee:	4688      	mov	r8, r1
 8008ef0:	2700      	movs	r7, #0
 8008ef2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008efa:	f1b9 0901 	subs.w	r9, r9, #1
 8008efe:	d505      	bpl.n	8008f0c <_fwalk_reent+0x24>
 8008f00:	6824      	ldr	r4, [r4, #0]
 8008f02:	2c00      	cmp	r4, #0
 8008f04:	d1f7      	bne.n	8008ef6 <_fwalk_reent+0xe>
 8008f06:	4638      	mov	r0, r7
 8008f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0c:	89ab      	ldrh	r3, [r5, #12]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d907      	bls.n	8008f22 <_fwalk_reent+0x3a>
 8008f12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f16:	3301      	adds	r3, #1
 8008f18:	d003      	beq.n	8008f22 <_fwalk_reent+0x3a>
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	47c0      	blx	r8
 8008f20:	4307      	orrs	r7, r0
 8008f22:	3568      	adds	r5, #104	; 0x68
 8008f24:	e7e9      	b.n	8008efa <_fwalk_reent+0x12>

08008f26 <__retarget_lock_init_recursive>:
 8008f26:	4770      	bx	lr

08008f28 <__retarget_lock_acquire_recursive>:
 8008f28:	4770      	bx	lr

08008f2a <__retarget_lock_release_recursive>:
 8008f2a:	4770      	bx	lr

08008f2c <__swhatbuf_r>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	460e      	mov	r6, r1
 8008f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f34:	4614      	mov	r4, r2
 8008f36:	2900      	cmp	r1, #0
 8008f38:	461d      	mov	r5, r3
 8008f3a:	b096      	sub	sp, #88	; 0x58
 8008f3c:	da08      	bge.n	8008f50 <__swhatbuf_r+0x24>
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f44:	602a      	str	r2, [r5, #0]
 8008f46:	061a      	lsls	r2, r3, #24
 8008f48:	d410      	bmi.n	8008f6c <__swhatbuf_r+0x40>
 8008f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f4e:	e00e      	b.n	8008f6e <__swhatbuf_r+0x42>
 8008f50:	466a      	mov	r2, sp
 8008f52:	f000 f90b 	bl	800916c <_fstat_r>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	dbf1      	blt.n	8008f3e <__swhatbuf_r+0x12>
 8008f5a:	9a01      	ldr	r2, [sp, #4]
 8008f5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f64:	425a      	negs	r2, r3
 8008f66:	415a      	adcs	r2, r3
 8008f68:	602a      	str	r2, [r5, #0]
 8008f6a:	e7ee      	b.n	8008f4a <__swhatbuf_r+0x1e>
 8008f6c:	2340      	movs	r3, #64	; 0x40
 8008f6e:	2000      	movs	r0, #0
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	b016      	add	sp, #88	; 0x58
 8008f74:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f78 <__smakebuf_r>:
 8008f78:	898b      	ldrh	r3, [r1, #12]
 8008f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f7c:	079d      	lsls	r5, r3, #30
 8008f7e:	4606      	mov	r6, r0
 8008f80:	460c      	mov	r4, r1
 8008f82:	d507      	bpl.n	8008f94 <__smakebuf_r+0x1c>
 8008f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	6123      	str	r3, [r4, #16]
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	6163      	str	r3, [r4, #20]
 8008f90:	b002      	add	sp, #8
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	466a      	mov	r2, sp
 8008f96:	ab01      	add	r3, sp, #4
 8008f98:	f7ff ffc8 	bl	8008f2c <__swhatbuf_r>
 8008f9c:	9900      	ldr	r1, [sp, #0]
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f7fe fd73 	bl	8007a8c <_malloc_r>
 8008fa6:	b948      	cbnz	r0, 8008fbc <__smakebuf_r+0x44>
 8008fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fac:	059a      	lsls	r2, r3, #22
 8008fae:	d4ef      	bmi.n	8008f90 <__smakebuf_r+0x18>
 8008fb0:	f023 0303 	bic.w	r3, r3, #3
 8008fb4:	f043 0302 	orr.w	r3, r3, #2
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	e7e3      	b.n	8008f84 <__smakebuf_r+0xc>
 8008fbc:	4b0d      	ldr	r3, [pc, #52]	; (8008ff4 <__smakebuf_r+0x7c>)
 8008fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	6020      	str	r0, [r4, #0]
 8008fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc8:	81a3      	strh	r3, [r4, #12]
 8008fca:	9b00      	ldr	r3, [sp, #0]
 8008fcc:	6120      	str	r0, [r4, #16]
 8008fce:	6163      	str	r3, [r4, #20]
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	b15b      	cbz	r3, 8008fec <__smakebuf_r+0x74>
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fda:	f000 f8d9 	bl	8009190 <_isatty_r>
 8008fde:	b128      	cbz	r0, 8008fec <__smakebuf_r+0x74>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f023 0303 	bic.w	r3, r3, #3
 8008fe6:	f043 0301 	orr.w	r3, r3, #1
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	89a0      	ldrh	r0, [r4, #12]
 8008fee:	4305      	orrs	r5, r0
 8008ff0:	81a5      	strh	r5, [r4, #12]
 8008ff2:	e7cd      	b.n	8008f90 <__smakebuf_r+0x18>
 8008ff4:	08008d85 	.word	0x08008d85

08008ff8 <__ascii_mbtowc>:
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	b901      	cbnz	r1, 8008ffe <__ascii_mbtowc+0x6>
 8008ffc:	a901      	add	r1, sp, #4
 8008ffe:	b142      	cbz	r2, 8009012 <__ascii_mbtowc+0x1a>
 8009000:	b14b      	cbz	r3, 8009016 <__ascii_mbtowc+0x1e>
 8009002:	7813      	ldrb	r3, [r2, #0]
 8009004:	600b      	str	r3, [r1, #0]
 8009006:	7812      	ldrb	r2, [r2, #0]
 8009008:	1e10      	subs	r0, r2, #0
 800900a:	bf18      	it	ne
 800900c:	2001      	movne	r0, #1
 800900e:	b002      	add	sp, #8
 8009010:	4770      	bx	lr
 8009012:	4610      	mov	r0, r2
 8009014:	e7fb      	b.n	800900e <__ascii_mbtowc+0x16>
 8009016:	f06f 0001 	mvn.w	r0, #1
 800901a:	e7f8      	b.n	800900e <__ascii_mbtowc+0x16>

0800901c <memmove>:
 800901c:	4288      	cmp	r0, r1
 800901e:	b510      	push	{r4, lr}
 8009020:	eb01 0402 	add.w	r4, r1, r2
 8009024:	d902      	bls.n	800902c <memmove+0x10>
 8009026:	4284      	cmp	r4, r0
 8009028:	4623      	mov	r3, r4
 800902a:	d807      	bhi.n	800903c <memmove+0x20>
 800902c:	1e43      	subs	r3, r0, #1
 800902e:	42a1      	cmp	r1, r4
 8009030:	d008      	beq.n	8009044 <memmove+0x28>
 8009032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800903a:	e7f8      	b.n	800902e <memmove+0x12>
 800903c:	4601      	mov	r1, r0
 800903e:	4402      	add	r2, r0
 8009040:	428a      	cmp	r2, r1
 8009042:	d100      	bne.n	8009046 <memmove+0x2a>
 8009044:	bd10      	pop	{r4, pc}
 8009046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800904a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800904e:	e7f7      	b.n	8009040 <memmove+0x24>

08009050 <__malloc_lock>:
 8009050:	4801      	ldr	r0, [pc, #4]	; (8009058 <__malloc_lock+0x8>)
 8009052:	f7ff bf69 	b.w	8008f28 <__retarget_lock_acquire_recursive>
 8009056:	bf00      	nop
 8009058:	200003d4 	.word	0x200003d4

0800905c <__malloc_unlock>:
 800905c:	4801      	ldr	r0, [pc, #4]	; (8009064 <__malloc_unlock+0x8>)
 800905e:	f7ff bf64 	b.w	8008f2a <__retarget_lock_release_recursive>
 8009062:	bf00      	nop
 8009064:	200003d4 	.word	0x200003d4

08009068 <_realloc_r>:
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	4680      	mov	r8, r0
 800906e:	4614      	mov	r4, r2
 8009070:	460e      	mov	r6, r1
 8009072:	b921      	cbnz	r1, 800907e <_realloc_r+0x16>
 8009074:	4611      	mov	r1, r2
 8009076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800907a:	f7fe bd07 	b.w	8007a8c <_malloc_r>
 800907e:	b92a      	cbnz	r2, 800908c <_realloc_r+0x24>
 8009080:	f7fe fc9c 	bl	80079bc <_free_r>
 8009084:	4625      	mov	r5, r4
 8009086:	4628      	mov	r0, r5
 8009088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800908c:	f000 f890 	bl	80091b0 <_malloc_usable_size_r>
 8009090:	4284      	cmp	r4, r0
 8009092:	4607      	mov	r7, r0
 8009094:	d802      	bhi.n	800909c <_realloc_r+0x34>
 8009096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800909a:	d812      	bhi.n	80090c2 <_realloc_r+0x5a>
 800909c:	4621      	mov	r1, r4
 800909e:	4640      	mov	r0, r8
 80090a0:	f7fe fcf4 	bl	8007a8c <_malloc_r>
 80090a4:	4605      	mov	r5, r0
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d0ed      	beq.n	8009086 <_realloc_r+0x1e>
 80090aa:	42bc      	cmp	r4, r7
 80090ac:	4622      	mov	r2, r4
 80090ae:	4631      	mov	r1, r6
 80090b0:	bf28      	it	cs
 80090b2:	463a      	movcs	r2, r7
 80090b4:	f7fc fc84 	bl	80059c0 <memcpy>
 80090b8:	4631      	mov	r1, r6
 80090ba:	4640      	mov	r0, r8
 80090bc:	f7fe fc7e 	bl	80079bc <_free_r>
 80090c0:	e7e1      	b.n	8009086 <_realloc_r+0x1e>
 80090c2:	4635      	mov	r5, r6
 80090c4:	e7df      	b.n	8009086 <_realloc_r+0x1e>

080090c6 <_raise_r>:
 80090c6:	291f      	cmp	r1, #31
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4604      	mov	r4, r0
 80090cc:	460d      	mov	r5, r1
 80090ce:	d904      	bls.n	80090da <_raise_r+0x14>
 80090d0:	2316      	movs	r3, #22
 80090d2:	6003      	str	r3, [r0, #0]
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	bd38      	pop	{r3, r4, r5, pc}
 80090da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090dc:	b112      	cbz	r2, 80090e4 <_raise_r+0x1e>
 80090de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090e2:	b94b      	cbnz	r3, 80090f8 <_raise_r+0x32>
 80090e4:	4620      	mov	r0, r4
 80090e6:	f000 f831 	bl	800914c <_getpid_r>
 80090ea:	462a      	mov	r2, r5
 80090ec:	4601      	mov	r1, r0
 80090ee:	4620      	mov	r0, r4
 80090f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090f4:	f000 b818 	b.w	8009128 <_kill_r>
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d00a      	beq.n	8009112 <_raise_r+0x4c>
 80090fc:	1c59      	adds	r1, r3, #1
 80090fe:	d103      	bne.n	8009108 <_raise_r+0x42>
 8009100:	2316      	movs	r3, #22
 8009102:	6003      	str	r3, [r0, #0]
 8009104:	2001      	movs	r0, #1
 8009106:	e7e7      	b.n	80090d8 <_raise_r+0x12>
 8009108:	2400      	movs	r4, #0
 800910a:	4628      	mov	r0, r5
 800910c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009110:	4798      	blx	r3
 8009112:	2000      	movs	r0, #0
 8009114:	e7e0      	b.n	80090d8 <_raise_r+0x12>
	...

08009118 <raise>:
 8009118:	4b02      	ldr	r3, [pc, #8]	; (8009124 <raise+0xc>)
 800911a:	4601      	mov	r1, r0
 800911c:	6818      	ldr	r0, [r3, #0]
 800911e:	f7ff bfd2 	b.w	80090c6 <_raise_r>
 8009122:	bf00      	nop
 8009124:	20000010 	.word	0x20000010

08009128 <_kill_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	2300      	movs	r3, #0
 800912c:	4d06      	ldr	r5, [pc, #24]	; (8009148 <_kill_r+0x20>)
 800912e:	4604      	mov	r4, r0
 8009130:	4608      	mov	r0, r1
 8009132:	4611      	mov	r1, r2
 8009134:	602b      	str	r3, [r5, #0]
 8009136:	f7f8 fede 	bl	8001ef6 <_kill>
 800913a:	1c43      	adds	r3, r0, #1
 800913c:	d102      	bne.n	8009144 <_kill_r+0x1c>
 800913e:	682b      	ldr	r3, [r5, #0]
 8009140:	b103      	cbz	r3, 8009144 <_kill_r+0x1c>
 8009142:	6023      	str	r3, [r4, #0]
 8009144:	bd38      	pop	{r3, r4, r5, pc}
 8009146:	bf00      	nop
 8009148:	200003d0 	.word	0x200003d0

0800914c <_getpid_r>:
 800914c:	f7f8 becc 	b.w	8001ee8 <_getpid>

08009150 <__ascii_wctomb>:
 8009150:	4603      	mov	r3, r0
 8009152:	4608      	mov	r0, r1
 8009154:	b141      	cbz	r1, 8009168 <__ascii_wctomb+0x18>
 8009156:	2aff      	cmp	r2, #255	; 0xff
 8009158:	d904      	bls.n	8009164 <__ascii_wctomb+0x14>
 800915a:	228a      	movs	r2, #138	; 0x8a
 800915c:	f04f 30ff 	mov.w	r0, #4294967295
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	4770      	bx	lr
 8009164:	2001      	movs	r0, #1
 8009166:	700a      	strb	r2, [r1, #0]
 8009168:	4770      	bx	lr
	...

0800916c <_fstat_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	2300      	movs	r3, #0
 8009170:	4d06      	ldr	r5, [pc, #24]	; (800918c <_fstat_r+0x20>)
 8009172:	4604      	mov	r4, r0
 8009174:	4608      	mov	r0, r1
 8009176:	4611      	mov	r1, r2
 8009178:	602b      	str	r3, [r5, #0]
 800917a:	f7f8 ff1a 	bl	8001fb2 <_fstat>
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	d102      	bne.n	8009188 <_fstat_r+0x1c>
 8009182:	682b      	ldr	r3, [r5, #0]
 8009184:	b103      	cbz	r3, 8009188 <_fstat_r+0x1c>
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	bd38      	pop	{r3, r4, r5, pc}
 800918a:	bf00      	nop
 800918c:	200003d0 	.word	0x200003d0

08009190 <_isatty_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	2300      	movs	r3, #0
 8009194:	4d05      	ldr	r5, [pc, #20]	; (80091ac <_isatty_r+0x1c>)
 8009196:	4604      	mov	r4, r0
 8009198:	4608      	mov	r0, r1
 800919a:	602b      	str	r3, [r5, #0]
 800919c:	f7f8 ff18 	bl	8001fd0 <_isatty>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <_isatty_r+0x1a>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	b103      	cbz	r3, 80091aa <_isatty_r+0x1a>
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	200003d0 	.word	0x200003d0

080091b0 <_malloc_usable_size_r>:
 80091b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b4:	1f18      	subs	r0, r3, #4
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	bfbc      	itt	lt
 80091ba:	580b      	ldrlt	r3, [r1, r0]
 80091bc:	18c0      	addlt	r0, r0, r3
 80091be:	4770      	bx	lr

080091c0 <_init>:
 80091c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c2:	bf00      	nop
 80091c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c6:	bc08      	pop	{r3}
 80091c8:	469e      	mov	lr, r3
 80091ca:	4770      	bx	lr

080091cc <_fini>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	bf00      	nop
 80091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d2:	bc08      	pop	{r3}
 80091d4:	469e      	mov	lr, r3
 80091d6:	4770      	bx	lr
