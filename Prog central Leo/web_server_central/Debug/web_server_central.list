
web_server_central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b9c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08007ce0  08007ce0  00017ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800814c  0800814c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800814c  0800814c  0001814c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008154  08008154  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008158  08008158  00018158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800815c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200001e0  0800833c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800833c  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012074  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d3f  00000000  00000000  0003227d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00034fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00035f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018721  00000000  00000000  00036e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fd0  00000000  00000000  0004f531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090190  00000000  00000000  00062501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2691  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000522c  00000000  00000000  000f26e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08007cc4 	.word	0x08007cc4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08007cc4 	.word	0x08007cc4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96e 	b.w	8000e4c <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	460d      	mov	r5, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	468e      	mov	lr, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f040 8083 	bne.w	8000ca0 <__udivmoddi4+0x118>
 8000b9a:	428a      	cmp	r2, r1
 8000b9c:	4617      	mov	r7, r2
 8000b9e:	d947      	bls.n	8000c30 <__udivmoddi4+0xa8>
 8000ba0:	fab2 f382 	clz	r3, r2
 8000ba4:	b14b      	cbz	r3, 8000bba <__udivmoddi4+0x32>
 8000ba6:	f1c3 0120 	rsb	r1, r3, #32
 8000baa:	fa05 fe03 	lsl.w	lr, r5, r3
 8000bae:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb2:	409f      	lsls	r7, r3
 8000bb4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bbe:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc2:	fa1f f987 	uxth.w	r9, r7
 8000bc6:	fb08 e21c 	mls	r2, r8, ip, lr
 8000bca:	fb0c f009 	mul.w	r0, ip, r9
 8000bce:	0c21      	lsrs	r1, r4, #16
 8000bd0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x66>
 8000bd8:	18ba      	adds	r2, r7, r2
 8000bda:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000bde:	f080 8118 	bcs.w	8000e12 <__udivmoddi4+0x28a>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f240 8115 	bls.w	8000e12 <__udivmoddi4+0x28a>
 8000be8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bec:	443a      	add	r2, r7
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	fbb2 f0f8 	udiv	r0, r2, r8
 8000bf4:	fb08 2210 	mls	r2, r8, r0, r2
 8000bf8:	fb00 f109 	mul.w	r1, r0, r9
 8000bfc:	b2a4      	uxth	r4, r4
 8000bfe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c02:	42a1      	cmp	r1, r4
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c06:	193c      	adds	r4, r7, r4
 8000c08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0c:	f080 8103 	bcs.w	8000e16 <__udivmoddi4+0x28e>
 8000c10:	42a1      	cmp	r1, r4
 8000c12:	f240 8100 	bls.w	8000e16 <__udivmoddi4+0x28e>
 8000c16:	3802      	subs	r0, #2
 8000c18:	443c      	add	r4, r7
 8000c1a:	1a64      	subs	r4, r4, r1
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	b11e      	cbz	r6, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	2200      	movs	r2, #0
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	e9c6 4200 	strd	r4, r2, [r6]
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	b902      	cbnz	r2, 8000c34 <__udivmoddi4+0xac>
 8000c32:	deff      	udf	#255	; 0xff
 8000c34:	fab2 f382 	clz	r3, r2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14f      	bne.n	8000cdc <__udivmoddi4+0x154>
 8000c3c:	1a8d      	subs	r5, r1, r2
 8000c3e:	2101      	movs	r1, #1
 8000c40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c44:	fa1f f882 	uxth.w	r8, r2
 8000c48:	fbb5 fcfe 	udiv	ip, r5, lr
 8000c4c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000c50:	fb08 f00c 	mul.w	r0, r8, ip
 8000c54:	0c22      	lsrs	r2, r4, #16
 8000c56:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000c5a:	42a8      	cmp	r0, r5
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0xe6>
 8000c5e:	197d      	adds	r5, r7, r5
 8000c60:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0xe4>
 8000c66:	42a8      	cmp	r0, r5
 8000c68:	f200 80e9 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000c6c:	4694      	mov	ip, r2
 8000c6e:	1a2d      	subs	r5, r5, r0
 8000c70:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c74:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c82:	45a0      	cmp	r8, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x10e>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x10c>
 8000c8e:	45a0      	cmp	r8, r4
 8000c90:	f200 80d9 	bhi.w	8000e46 <__udivmoddi4+0x2be>
 8000c94:	4610      	mov	r0, r2
 8000c96:	eba4 0408 	sub.w	r4, r4, r8
 8000c9a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9e:	e7c0      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x12e>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	f000 80b1 	beq.w	8000e0c <__udivmoddi4+0x284>
 8000caa:	2100      	movs	r1, #0
 8000cac:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f183 	clz	r1, r3
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d14b      	bne.n	8000d56 <__udivmoddi4+0x1ce>
 8000cbe:	42ab      	cmp	r3, r5
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0x140>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80b9 	bhi.w	8000e3a <__udivmoddi4+0x2b2>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb65 0303 	sbc.w	r3, r5, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	469e      	mov	lr, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0aa      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000cd6:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cda:	e7a7      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	f1c3 0220 	rsb	r2, r3, #32
 8000ce2:	40d1      	lsrs	r1, r2
 8000ce4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fa1f f887 	uxth.w	r8, r7
 8000cf0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf4:	fa24 f202 	lsr.w	r2, r4, r2
 8000cf8:	409d      	lsls	r5, r3
 8000cfa:	fb00 fc08 	mul.w	ip, r0, r8
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	0c15      	lsrs	r5, r2, #16
 8000d02:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d06:	45ac      	cmp	ip, r5
 8000d08:	fa04 f403 	lsl.w	r4, r4, r3
 8000d0c:	d909      	bls.n	8000d22 <__udivmoddi4+0x19a>
 8000d0e:	197d      	adds	r5, r7, r5
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	f080 808f 	bcs.w	8000e36 <__udivmoddi4+0x2ae>
 8000d18:	45ac      	cmp	ip, r5
 8000d1a:	f240 808c 	bls.w	8000e36 <__udivmoddi4+0x2ae>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	443d      	add	r5, r7
 8000d22:	eba5 050c 	sub.w	r5, r5, ip
 8000d26:	fbb5 f1fe 	udiv	r1, r5, lr
 8000d2a:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000d2e:	fb01 f908 	mul.w	r9, r1, r8
 8000d32:	b295      	uxth	r5, r2
 8000d34:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d38:	45a9      	cmp	r9, r5
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x1c4>
 8000d3c:	197d      	adds	r5, r7, r5
 8000d3e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d42:	d274      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000d44:	45a9      	cmp	r9, r5
 8000d46:	d972      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000d48:	3902      	subs	r1, #2
 8000d4a:	443d      	add	r5, r7
 8000d4c:	eba5 0509 	sub.w	r5, r5, r9
 8000d50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d54:	e778      	b.n	8000c48 <__udivmoddi4+0xc0>
 8000d56:	f1c1 0720 	rsb	r7, r1, #32
 8000d5a:	408b      	lsls	r3, r1
 8000d5c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d60:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d64:	fa25 f407 	lsr.w	r4, r5, r7
 8000d68:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d6c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d70:	fa1f f88c 	uxth.w	r8, ip
 8000d74:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d78:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7c:	fb09 fa08 	mul.w	sl, r9, r8
 8000d80:	408d      	lsls	r5, r1
 8000d82:	431d      	orrs	r5, r3
 8000d84:	0c2b      	lsrs	r3, r5, #16
 8000d86:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8a:	45a2      	cmp	sl, r4
 8000d8c:	fa02 f201 	lsl.w	r2, r2, r1
 8000d90:	fa00 f301 	lsl.w	r3, r0, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0x222>
 8000d96:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d248      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000da0:	45a2      	cmp	sl, r4
 8000da2:	d946      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	fbb4 f0fe 	udiv	r0, r4, lr
 8000db2:	fb0e 4410 	mls	r4, lr, r0, r4
 8000db6:	fb00 fa08 	mul.w	sl, r0, r8
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc0:	45a2      	cmp	sl, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x24e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dcc:	d22d      	bcs.n	8000e2a <__udivmoddi4+0x2a2>
 8000dce:	45a2      	cmp	sl, r4
 8000dd0:	d92b      	bls.n	8000e2a <__udivmoddi4+0x2a2>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4464      	add	r4, ip
 8000dd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	eba4 040a 	sub.w	r4, r4, sl
 8000de2:	454c      	cmp	r4, r9
 8000de4:	46c6      	mov	lr, r8
 8000de6:	464d      	mov	r5, r9
 8000de8:	d319      	bcc.n	8000e1e <__udivmoddi4+0x296>
 8000dea:	d016      	beq.n	8000e1a <__udivmoddi4+0x292>
 8000dec:	b15e      	cbz	r6, 8000e06 <__udivmoddi4+0x27e>
 8000dee:	ebb3 020e 	subs.w	r2, r3, lr
 8000df2:	eb64 0405 	sbc.w	r4, r4, r5
 8000df6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dfa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	e9c6 7400 	strd	r7, r4, [r6]
 8000e06:	2100      	movs	r1, #0
 8000e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e70c      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e12:	468c      	mov	ip, r1
 8000e14:	e6eb      	b.n	8000bee <__udivmoddi4+0x66>
 8000e16:	4610      	mov	r0, r2
 8000e18:	e6ff      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e1a:	4543      	cmp	r3, r8
 8000e1c:	d2e6      	bcs.n	8000dec <__udivmoddi4+0x264>
 8000e1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e22:	eb69 050c 	sbc.w	r5, r9, ip
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7e0      	b.n	8000dec <__udivmoddi4+0x264>
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	e7d3      	b.n	8000dd6 <__udivmoddi4+0x24e>
 8000e2e:	4611      	mov	r1, r2
 8000e30:	e78c      	b.n	8000d4c <__udivmoddi4+0x1c4>
 8000e32:	4681      	mov	r9, r0
 8000e34:	e7b9      	b.n	8000daa <__udivmoddi4+0x222>
 8000e36:	4608      	mov	r0, r1
 8000e38:	e773      	b.n	8000d22 <__udivmoddi4+0x19a>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e749      	b.n	8000cd2 <__udivmoddi4+0x14a>
 8000e3e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e42:	443d      	add	r5, r7
 8000e44:	e713      	b.n	8000c6e <__udivmoddi4+0xe6>
 8000e46:	3802      	subs	r0, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	e724      	b.n	8000c96 <__udivmoddi4+0x10e>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <DHT22_Init>:

#include "DHT22.h"


void DHT22_Init (struct DHT22 *sensor_DHT22, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	80fb      	strh	r3, [r7, #6]
	 sensor_DHT22->GPIOx = GPIOx;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	601a      	str	r2, [r3, #0]
	 sensor_DHT22->GPIO_Pin = GPIO_Pin;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	88fa      	ldrh	r2, [r7, #6]
 8000e68:	809a      	strh	r2, [r3, #4]
	 sensor_DHT22->temperature = 0.;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
	 sensor_DHT22->humidity = 0.;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <DHT22_Set_Output>:

void DHT22_Set_Output(struct DHT22 *sensor_DHT22)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = sensor_DHT22->GPIO_Pin;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	889b      	ldrh	r3, [r3, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(sensor_DHT22->GPIOx, &GPIO_InitStruct);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f107 020c 	add.w	r2, r7, #12
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 fbf9 	bl	80026b0 <HAL_GPIO_Init>

}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <DHT22_Set_Input>:

void DHT22_Set_Input (struct DHT22 *sensor_DHT22)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b088      	sub	sp, #32
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = sensor_DHT22->GPIO_Pin;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	889b      	ldrh	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(sensor_DHT22->GPIOx, &GPIO_InitStruct);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f107 020c 	add.w	r2, r7, #12
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fbda 	bl	80026b0 <HAL_GPIO_Init>
}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <DHT22_Start>:

/*Set pinmode to output and send > 1ms low signal,  20-40 us high signal and set input*/
uint8_t DHT22_Start (struct DHT22 *sensor_DHT22)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	DHT22_Set_Output(sensor_DHT22);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ffb9 	bl	8000e84 <DHT22_Set_Output>
	HAL_Delay(10);
 8000f12:	200a      	movs	r0, #10
 8000f14:	f001 f970 	bl	80021f8 <HAL_Delay>
    HAL_GPIO_WritePin (sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin, GPIO_PIN_RESET);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	889b      	ldrh	r3, [r3, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	4619      	mov	r1, r3
 8000f24:	f001 fd6b 	bl	80029fe <HAL_GPIO_WritePin>
	delay_us(1200);
 8000f28:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000f2c:	f001 f8b8 	bl	80020a0 <delay_us>
	HAL_GPIO_WritePin (sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin, GPIO_PIN_SET);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	889b      	ldrh	r3, [r3, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f001 fd5f 	bl	80029fe <HAL_GPIO_WritePin>
	delay_us(30);
 8000f40:	201e      	movs	r0, #30
 8000f42:	f001 f8ad 	bl	80020a0 <delay_us>
	DHT22_Set_Input(sensor_DHT22);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffbd 	bl	8000ec6 <DHT22_Set_Input>

	return 0;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <DHT22_Check_Response>:

/*Wait sensor response, 80 us low signal and 80 us high signal*/
uint8_t DHT22_Check_Response (struct DHT22 *sensor_DHT22)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
	uint8_t wd_timer = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
	while(!(HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 85))
 8000f62:	e005      	b.n	8000f70 <DHT22_Check_Response+0x1a>
	{
		delay_us(1);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f001 f89b 	bl	80020a0 <delay_us>
		wd_timer++;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
	while(!(HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 85))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	889b      	ldrh	r3, [r3, #4]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	f001 fd28 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d102      	bne.n	8000f8c <DHT22_Check_Response+0x36>
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	2b54      	cmp	r3, #84	; 0x54
 8000f8a:	d9eb      	bls.n	8000f64 <DHT22_Check_Response+0xe>
	}

	if(wd_timer == 85)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b55      	cmp	r3, #85	; 0x55
 8000f90:	d101      	bne.n	8000f96 <DHT22_Check_Response+0x40>
	{
		return 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e01c      	b.n	8000fd0 <DHT22_Check_Response+0x7a>
	}
	else
	{

		wd_timer = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
		while((HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 85))
 8000f9a:	e005      	b.n	8000fa8 <DHT22_Check_Response+0x52>
		{
			delay_us(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f001 f87f 	bl	80020a0 <delay_us>
			wd_timer++;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
		while((HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 85))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	889b      	ldrh	r3, [r3, #4]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	f001 fd0c 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <DHT22_Check_Response+0x6e>
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	2b54      	cmp	r3, #84	; 0x54
 8000fc2:	d9eb      	bls.n	8000f9c <DHT22_Check_Response+0x46>
		}

		if(wd_timer == 85)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b55      	cmp	r3, #85	; 0x55
 8000fc8:	d101      	bne.n	8000fce <DHT22_Check_Response+0x78>
		{
			return 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <DHT22_Check_Response+0x7a>
		}
		else
		{
			return 0;
 8000fce:	2300      	movs	r3, #0
		}
	}

}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <DHT22_Read_raw>:

uint8_t DHT22_Read_raw (struct DHT22 *sensor_DHT22, uint8_t * data)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
	uint8_t wd_timer = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]

	for (i=0;i<8;i++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e05f      	b.n	80010b0 <DHT22_Read_raw+0xd8>
	{
		wd_timer = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73bb      	strb	r3, [r7, #14]

		//Start bit of 50us
		while(!(HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 50))
 8000ff4:	e005      	b.n	8001002 <DHT22_Read_raw+0x2a>
		{
			delay_us(1);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f001 f852 	bl	80020a0 <delay_us>
			wd_timer++;
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	3301      	adds	r3, #1
 8001000:	73bb      	strb	r3, [r7, #14]
		while(!(HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 50))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	889b      	ldrh	r3, [r3, #4]
 800100a:	4619      	mov	r1, r3
 800100c:	4610      	mov	r0, r2
 800100e:	f001 fcdf 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <DHT22_Read_raw+0x46>
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	2b31      	cmp	r3, #49	; 0x31
 800101c:	d9eb      	bls.n	8000ff6 <DHT22_Read_raw+0x1e>
		}

		wd_timer = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]

		while((HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 90))
 8001022:	e005      	b.n	8001030 <DHT22_Read_raw+0x58>
		{
			wd_timer += 10;
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	330a      	adds	r3, #10
 8001028:	73bb      	strb	r3, [r7, #14]
			delay_us(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f001 f838 	bl	80020a0 <delay_us>
		while((HAL_GPIO_ReadPin(sensor_DHT22->GPIOx, sensor_DHT22->GPIO_Pin)) && (wd_timer < 90))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	889b      	ldrh	r3, [r3, #4]
 8001038:	4619      	mov	r1, r3
 800103a:	4610      	mov	r0, r2
 800103c:	f001 fcc8 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <DHT22_Read_raw+0x74>
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	2b59      	cmp	r3, #89	; 0x59
 800104a:	d9eb      	bls.n	8001024 <DHT22_Read_raw+0x4c>
		}


		if((wd_timer >= 20)&&(wd_timer <= 30 ))
 800104c:	7bbb      	ldrb	r3, [r7, #14]
 800104e:	2b13      	cmp	r3, #19
 8001050:	d913      	bls.n	800107a <DHT22_Read_raw+0xa2>
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	2b1e      	cmp	r3, #30
 8001056:	d810      	bhi.n	800107a <DHT22_Read_raw+0xa2>
		{
			*data &= ~1<<(7-i);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b25a      	sxtb	r2, r3
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	f1c3 0307 	rsb	r3, r3, #7
 8001064:	f06f 0101 	mvn.w	r1, #1
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4013      	ands	r3, r2
 8001070:	b25b      	sxtb	r3, r3
 8001072:	b2da      	uxtb	r2, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	701a      	strb	r2, [r3, #0]
 8001078:	e017      	b.n	80010aa <DHT22_Read_raw+0xd2>
		}
		else if((wd_timer >= 60)&&(wd_timer <= 80 ))
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	2b3b      	cmp	r3, #59	; 0x3b
 800107e:	d912      	bls.n	80010a6 <DHT22_Read_raw+0xce>
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	2b50      	cmp	r3, #80	; 0x50
 8001084:	d80f      	bhi.n	80010a6 <DHT22_Read_raw+0xce>
		{
			*data |= 1<<(7-i);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b25a      	sxtb	r2, r3
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2101      	movs	r1, #1
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	b25b      	sxtb	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b25b      	sxtb	r3, r3
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e001      	b.n	80010aa <DHT22_Read_raw+0xd2>
		}
		else
		{
			return 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e006      	b.n	80010b8 <DHT22_Read_raw+0xe0>
	for (i=0;i<8;i++)
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	3301      	adds	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	d99c      	bls.n	8000ff0 <DHT22_Read_raw+0x18>
		}
	}

	return 0;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <DHT22_Read_Temp_Hum>:

uint8_t DHT22_Read_Temp_Hum (struct DHT22 *sensor_DHT22)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	uint8_t Rh_byte1 = 0, Rh_byte2 = 0, Temp_byte1 = 0, Temp_byte2 = 0 , SUM = 0, SUM_temp = 0, read_error = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	747b      	strb	r3, [r7, #17]
 80010cc:	2300      	movs	r3, #0
 80010ce:	743b      	strb	r3, [r7, #16]
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	2300      	movs	r3, #0
 80010d6:	73bb      	strb	r3, [r7, #14]
 80010d8:	2300      	movs	r3, #0
 80010da:	737b      	strb	r3, [r7, #13]
 80010dc:	2300      	movs	r3, #0
 80010de:	75fb      	strb	r3, [r7, #23]
 80010e0:	2300      	movs	r3, #0
 80010e2:	75bb      	strb	r3, [r7, #22]
	uint16_t RH = 0, TEMP = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	82bb      	strh	r3, [r7, #20]
 80010e8:	2300      	movs	r3, #0
 80010ea:	827b      	strh	r3, [r7, #18]


	  read_error += DHT22_Read_raw(sensor_DHT22, &Rh_byte1);
 80010ec:	f107 0311 	add.w	r3, r7, #17
 80010f0:	4619      	mov	r1, r3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff70 	bl	8000fd8 <DHT22_Read_raw>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	7dbb      	ldrb	r3, [r7, #22]
 80010fe:	4413      	add	r3, r2
 8001100:	75bb      	strb	r3, [r7, #22]
	  read_error += DHT22_Read_raw(sensor_DHT22, &Rh_byte2);
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff65 	bl	8000fd8 <DHT22_Read_raw>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	7dbb      	ldrb	r3, [r7, #22]
 8001114:	4413      	add	r3, r2
 8001116:	75bb      	strb	r3, [r7, #22]
	  read_error += DHT22_Read_raw(sensor_DHT22, &Temp_byte1);
 8001118:	f107 030f 	add.w	r3, r7, #15
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff5a 	bl	8000fd8 <DHT22_Read_raw>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	7dbb      	ldrb	r3, [r7, #22]
 800112a:	4413      	add	r3, r2
 800112c:	75bb      	strb	r3, [r7, #22]
	  read_error += DHT22_Read_raw(sensor_DHT22, &Temp_byte2);
 800112e:	f107 030e 	add.w	r3, r7, #14
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff4f 	bl	8000fd8 <DHT22_Read_raw>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	7dbb      	ldrb	r3, [r7, #22]
 8001140:	4413      	add	r3, r2
 8001142:	75bb      	strb	r3, [r7, #22]
	  read_error += DHT22_Read_raw(sensor_DHT22, &SUM);
 8001144:	f107 030d 	add.w	r3, r7, #13
 8001148:	4619      	mov	r1, r3
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ff44 	bl	8000fd8 <DHT22_Read_raw>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	7dbb      	ldrb	r3, [r7, #22]
 8001156:	4413      	add	r3, r2
 8001158:	75bb      	strb	r3, [r7, #22]

	  if(read_error == 0)
 800115a:	7dbb      	ldrb	r3, [r7, #22]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d145      	bne.n	80011ec <DHT22_Read_Temp_Hum+0x12c>
	  {
		  SUM_temp = Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2 ;
 8001160:	7c7a      	ldrb	r2, [r7, #17]
 8001162:	7c3b      	ldrb	r3, [r7, #16]
 8001164:	4413      	add	r3, r2
 8001166:	b2da      	uxtb	r2, r3
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4413      	add	r3, r2
 800116c:	b2da      	uxtb	r2, r3
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	4413      	add	r3, r2
 8001172:	75fb      	strb	r3, [r7, #23]

		  if(SUM == SUM_temp)
 8001174:	7b7b      	ldrb	r3, [r7, #13]
 8001176:	7dfa      	ldrb	r2, [r7, #23]
 8001178:	429a      	cmp	r2, r3
 800117a:	d135      	bne.n	80011e8 <DHT22_Read_Temp_Hum+0x128>
		  {

			  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21b      	sxth	r3, r3
 800118a:	827b      	strh	r3, [r7, #18]
			  RH = ((Rh_byte1<<8)|Rh_byte2);
 800118c:	7c7b      	ldrb	r3, [r7, #17]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b21a      	sxth	r2, r3
 8001192:	7c3b      	ldrb	r3, [r7, #16]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21b      	sxth	r3, r3
 800119a:	82bb      	strh	r3, [r7, #20]

			  sensor_DHT22->temperature = (float) (TEMP/10.0);
 800119c:	8a7b      	ldrh	r3, [r7, #18]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f948 	bl	8000434 <__aeabi_i2d>
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <DHT22_Read_Temp_Hum+0x138>)
 80011aa:	f7ff fad7 	bl	800075c <__aeabi_ddiv>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fc7f 	bl	8000ab8 <__aeabi_d2f>
 80011ba:	4602      	mov	r2, r0
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	609a      	str	r2, [r3, #8]
			  sensor_DHT22->humidity = (float) (RH/10.0);
 80011c0:	8abb      	ldrh	r3, [r7, #20]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f936 	bl	8000434 <__aeabi_i2d>
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <DHT22_Read_Temp_Hum+0x138>)
 80011ce:	f7ff fac5 	bl	800075c <__aeabi_ddiv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fc6d 	bl	8000ab8 <__aeabi_d2f>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	60da      	str	r2, [r3, #12]
			  return 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e002      	b.n	80011ee <DHT22_Read_Temp_Hum+0x12e>
		  }
		  else
		  {
			  return 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <DHT22_Read_Temp_Hum+0x12e>
		  }
	  }
	  else
	  {
		  return 1;
 80011ec:	2301      	movs	r3, #1
	  }
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40240000 	.word	0x40240000

080011fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_DMA_Init+0x38>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <MX_DMA_Init+0x38>)
 8001208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_DMA_Init+0x38>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2010      	movs	r0, #16
 8001220:	f001 f8e3 	bl	80023ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001224:	2010      	movs	r0, #16
 8001226:	f001 f8fc 	bl	8002422 <HAL_NVIC_EnableIRQ>

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <MX_GPIO_Init+0xcc>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <MX_GPIO_Init+0xcc>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	61d3      	str	r3, [r2, #28]
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <MX_GPIO_Init+0xcc>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <MX_GPIO_Init+0xcc>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a26      	ldr	r2, [pc, #152]	; (8001304 <MX_GPIO_Init+0xcc>)
 800126c:	f043 0320 	orr.w	r3, r3, #32
 8001270:	61d3      	str	r3, [r2, #28]
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <MX_GPIO_Init+0xcc>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_GPIO_Init+0xcc>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a20      	ldr	r2, [pc, #128]	; (8001304 <MX_GPIO_Init+0xcc>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_GPIO_Init+0xcc>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_GPIO_Init+0xcc>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <MX_GPIO_Init+0xcc>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_GPIO_Init+0xcc>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2102      	movs	r1, #2
 80012b2:	4815      	ldr	r0, [pc, #84]	; (8001308 <MX_GPIO_Init+0xd0>)
 80012b4:	f001 fba3 	bl	80029fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	4812      	ldr	r0, [pc, #72]	; (8001308 <MX_GPIO_Init+0xd0>)
 80012be:	f001 fb9e 	bl	80029fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <MX_GPIO_Init+0xd4>)
 80012da:	f001 f9e9 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 80012de:	2322      	movs	r3, #34	; 0x22
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_GPIO_Init+0xd0>)
 80012f6:	f001 f9db 	bl	80026b0 <HAL_GPIO_Init>

}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	; 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020800 	.word	0x40020800

08001310 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_I2C1_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <MX_I2C1_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_I2C1_Init+0x50>)
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MX_I2C1_Init+0x58>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_I2C1_Init+0x50>)
 800132e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_I2C1_Init+0x50>)
 800134e:	f001 fb6f 	bl	8002a30 <HAL_I2C_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 fc78 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000420 	.word	0x20000420
 8001364:	40005400 	.word	0x40005400
 8001368:	000186a0 	.word	0x000186a0

0800136c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_I2C_MspInit+0x7c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d128      	bne.n	80013e0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_I2C_MspInit+0x80>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a16      	ldr	r2, [pc, #88]	; (80013ec <HAL_I2C_MspInit+0x80>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_I2C_MspInit+0x80>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ac:	2312      	movs	r3, #18
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b8:	2304      	movs	r3, #4
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	480b      	ldr	r0, [pc, #44]	; (80013f0 <HAL_I2C_MspInit+0x84>)
 80013c4:	f001 f974 	bl	80026b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_I2C_MspInit+0x80>)
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_I2C_MspInit+0x80>)
 80013ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d2:	6253      	str	r3, [r2, #36]	; 0x24
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_I2C_MspInit+0x80>)
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40005400 	.word	0x40005400
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400

080013f4 <set_usar1_irq>:

#include "irq.h"

/*uart section*/
void set_usar1_irq(uint8_t value)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013fe:	f3ef 8310 	mrs	r3, PRIMASK
 8001402:	60bb      	str	r3, [r7, #8]
  return(result);
 8001404:	68bb      	ldr	r3, [r7, #8]
    uint32_t prim;
    prim = __get_PRIMASK();
 8001406:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop

    __disable_irq();

	RX_UART1_irq	= value;
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <set_usar1_irq+0x34>)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	7013      	strb	r3, [r2, #0]

    if (!prim) {
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <set_usar1_irq+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
 8001418:	b662      	cpsie	i
}
 800141a:	bf00      	nop
          __enable_irq();
    }
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200001fc 	.word	0x200001fc

0800142c <get_usar1_irq>:

uint8_t get_usar1_irq()
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001436:	f3ef 8310 	mrs	r3, PRIMASK
 800143a:	607b      	str	r3, [r7, #4]
  return(result);
 800143c:	687b      	ldr	r3, [r7, #4]
    uint32_t prim;

    prim = __get_PRIMASK();
 800143e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
    __disable_irq();

	ret	= RX_UART1_irq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <get_usar1_irq+0x34>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	73fb      	strb	r3, [r7, #15]


    if (!prim) {
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <get_usar1_irq+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
 8001450:	b662      	cpsie	i
}
 8001452:	bf00      	nop
          __enable_irq();
    }

	return ret;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	200001fc 	.word	0x200001fc

08001464 <USART1_SendIT>:

	return ret;
}

void USART1_SendIT(UART_HandleTypeDef *huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

    /* Disable the UART Data Register not empty Interrupt */
    __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0220 	bic.w	r2, r2, #32
 800147a:	60da      	str	r2, [r3, #12]

    /* Disable the UART Parity Error Interrupt */
    __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800148a:	60da      	str	r2, [r3, #12]

    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	615a      	str	r2, [r3, #20]

    /* Rx process is completed, restore huart1.RxState to Ready */
    huart1.RxState = HAL_UART_STATE_READY;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <USART1_SendIT+0x4c>)
 800149e:	2220      	movs	r2, #32
 80014a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /*Call legacy weak Rx complete callback*/
    rx_cb_USART_1();
 80014a4:	f000 f988 	bl	80017b8 <rx_cb_USART_1>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000540 	.word	0x20000540

080014b4 <USART1_Enable_IT>:

void USART1_Enable_IT(UART_HandleTypeDef *huart)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
    //Reactivate interrupt after callback
    __HAL_LOCK(huart);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d02a      	beq.n	800151c <USART1_Enable_IT+0x68>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Set Reception type to Standard reception */
    huart1.ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <USART1_Enable_IT+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
    huart1.ErrorCode = HAL_UART_ERROR_NONE;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <USART1_Enable_IT+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart1.RxState = HAL_UART_STATE_BUSY_RX;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <USART1_Enable_IT+0x74>)
 80014dc:	2222      	movs	r2, #34	; 0x22
 80014de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014f8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0201 	orr.w	r2, r2, #1
 8001508:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0220 	orr.w	r2, r2, #32
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	e000      	b.n	800151e <USART1_Enable_IT+0x6a>
    __HAL_LOCK(huart);
 800151c:	bf00      	nop
}
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000540 	.word	0x20000540

0800152c <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af02      	add	r7, sp, #8
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	617b      	str	r3, [r7, #20]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	f043 030c 	orr.w	r3, r3, #12
 8001542:	b2da      	uxtb	r2, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	743b      	strb	r3, [r7, #16]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	f043 0320 	orr.w	r3, r3, #32
 8001554:	b2db      	uxtb	r3, r3
 8001556:	747b      	strb	r3, [r7, #17]

	//HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
	//char newline[2] = "\r\n";
	//HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);

	/*HAL_StatusTypeDef status = */HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001558:	2364      	movs	r3, #100	; 0x64
 800155a:	2205      	movs	r2, #5
 800155c:	217c      	movs	r1, #124	; 0x7c
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f001 fca8 	bl	8002eb4 <HAL_I2C_IsDeviceReady>
	//HAL_UART_Transmit(&huart2,&status,1,10);
	HAL_Delay(50);
 8001564:	2032      	movs	r0, #50	; 0x32
 8001566:	f000 fe47 	bl	80021f8 <HAL_Delay>

	/*HAL_StatusTypeDef status2 = */HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 800156a:	f107 0210 	add.w	r2, r7, #16
 800156e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2302      	movs	r3, #2
 8001576:	217c      	movs	r1, #124	; 0x7c
 8001578:	6978      	ldr	r0, [r7, #20]
 800157a:	f001 fb9d 	bl	8002cb8 <HAL_I2C_Master_Transmit>
	//HAL_UART_Transmit(&huart2,&status2,1,10);
	HAL_Delay(50);
 800157e:	2032      	movs	r0, #50	; 0x32
 8001580:	f000 fe3a 	bl	80021f8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001584:	f107 0210 	add.w	r2, r7, #16
 8001588:	f241 3388 	movw	r3, #5000	; 0x1388
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2302      	movs	r3, #2
 8001590:	217c      	movs	r1, #124	; 0x7c
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f001 fb90 	bl	8002cb8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001598:	2005      	movs	r0, #5
 800159a:	f000 fe2d 	bl	80021f8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800159e:	f107 0210 	add.w	r2, r7, #16
 80015a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2302      	movs	r3, #2
 80015aa:	217c      	movs	r1, #124	; 0x7c
 80015ac:	6978      	ldr	r0, [r7, #20]
 80015ae:	f001 fb83 	bl	8002cb8 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2204      	movs	r2, #4
 80015b6:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	785b      	ldrb	r3, [r3, #1]
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80015c4:	f107 0210 	add.w	r2, r7, #16
 80015c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2302      	movs	r3, #2
 80015d0:	217c      	movs	r1, #124	; 0x7c
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f001 fb70 	bl	8002cb8 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 80015d8:	2301      	movs	r3, #1
 80015da:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80015dc:	f107 0210 	add.w	r2, r7, #16
 80015e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2302      	movs	r3, #2
 80015e8:	217c      	movs	r1, #124	; 0x7c
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f001 fb64 	bl	8002cb8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80015f0:	2002      	movs	r0, #2
 80015f2:	f000 fe01 	bl	80021f8 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2202      	movs	r2, #2
 80015fa:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	b2db      	uxtb	r3, r3
 8001606:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001608:	f107 0210 	add.w	r2, r7, #16
 800160c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2302      	movs	r3, #2
 8001614:	217c      	movs	r1, #124	; 0x7c
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f001 fb4e 	bl	8002cb8 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 800161c:	2300      	movs	r3, #0
 800161e:	733b      	strb	r3, [r7, #12]
		data_backlight[1] = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001624:	f107 020c 	add.w	r2, r7, #12
 8001628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2302      	movs	r3, #2
 8001630:	21c4      	movs	r1, #196	; 0xc4
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f001 fb40 	bl	8002cb8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8001638:	2308      	movs	r3, #8
 800163a:	733b      	strb	r3, [r7, #12]
		data_backlight[1] = 0xFF;
 800163c:	23ff      	movs	r3, #255	; 0xff
 800163e:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001640:	f107 020c 	add.w	r2, r7, #12
 8001644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2302      	movs	r3, #2
 800164c:	21c4      	movs	r1, #196	; 0xc4
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f001 fb32 	bl	8002cb8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8001654:	2301      	movs	r3, #1
 8001656:	733b      	strb	r3, [r7, #12]
		data_backlight[1] = 0x20;
 8001658:	2320      	movs	r3, #32
 800165a:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800165c:	f107 020c 	add.w	r2, r7, #12
 8001660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2302      	movs	r3, #2
 8001668:	21c4      	movs	r1, #196	; 0xc4
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f001 fb24 	bl	8002cb8 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8001670:	2304      	movs	r3, #4
 8001672:	723b      	strb	r3, [r7, #8]
		data_rgb[1] = 255;
 8001674:	23ff      	movs	r3, #255	; 0xff
 8001676:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001678:	f107 0208 	add.w	r2, r7, #8
 800167c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2302      	movs	r3, #2
 8001684:	21c4      	movs	r1, #196	; 0xc4
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f001 fb16 	bl	8002cb8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 800168c:	2303      	movs	r3, #3
 800168e:	723b      	strb	r3, [r7, #8]
		data_rgb[1] = 255;
 8001690:	23ff      	movs	r3, #255	; 0xff
 8001692:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001694:	f107 0208 	add.w	r2, r7, #8
 8001698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2302      	movs	r3, #2
 80016a0:	21c4      	movs	r1, #196	; 0xc4
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f001 fb08 	bl	8002cb8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 80016a8:	2302      	movs	r3, #2
 80016aa:	723b      	strb	r3, [r7, #8]
		data_rgb[1] = 255;
 80016ac:	23ff      	movs	r3, #255	; 0xff
 80016ae:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80016b0:	f107 0208 	add.w	r2, r7, #8
 80016b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2302      	movs	r3, #2
 80016bc:	21c4      	movs	r1, #196	; 0xc4
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f001 fafa 	bl	8002cb8 <HAL_I2C_Master_Transmit>


}
 80016c4:	bf00      	nop
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	4808      	ldr	r0, [pc, #32]	; (80016f8 <clearlcd+0x2c>)
 80016d6:	f000 f83c 	bl	8001752 <lcd_position>
	lcd_print(&hi2c1,"                ");
 80016da:	4908      	ldr	r1, [pc, #32]	; (80016fc <clearlcd+0x30>)
 80016dc:	4806      	ldr	r0, [pc, #24]	; (80016f8 <clearlcd+0x2c>)
 80016de:	f000 f80f 	bl	8001700 <lcd_print>
	lcd_position(&hi2c1,0,1);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2100      	movs	r1, #0
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <clearlcd+0x2c>)
 80016e8:	f000 f833 	bl	8001752 <lcd_position>
	lcd_print(&hi2c1,"                ");
 80016ec:	4903      	ldr	r1, [pc, #12]	; (80016fc <clearlcd+0x30>)
 80016ee:	4802      	ldr	r0, [pc, #8]	; (80016f8 <clearlcd+0x2c>)
 80016f0:	f000 f806 	bl	8001700 <lcd_print>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000420 	.word	0x20000420
 80016fc:	08007ce0 	.word	0x08007ce0

08001700 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af02      	add	r7, sp, #8
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 800170e:	2340      	movs	r3, #64	; 0x40
 8001710:	733b      	strb	r3, [r7, #12]
    int i=0;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001716:	e011      	b.n	800173c <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001722:	f107 020c 	add.w	r2, r7, #12
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2302      	movs	r3, #2
 800172e:	217c      	movs	r1, #124	; 0x7c
 8001730:	6938      	ldr	r0, [r7, #16]
 8001732:	f001 fac1 	bl	8002cb8 <HAL_I2C_Master_Transmit>
            i++;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	4413      	add	r3, r2
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1e7      	bne.n	8001718 <lcd_print+0x18>
   }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af02      	add	r7, sp, #8
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	70fb      	strb	r3, [r7, #3]
 800175e:	4613      	mov	r3, r2
 8001760:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001766:	78bb      	ldrb	r3, [r7, #2]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d104      	bne.n	8001776 <lcd_position+0x24>
    {
        col = col | 0x80;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001772:	70fb      	strb	r3, [r7, #3]
 8001774:	e003      	b.n	800177e <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800177c:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001786:	f107 0208 	add.w	r2, r7, #8
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2302      	movs	r3, #2
 8001792:	217c      	movs	r1, #124	; 0x7c
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f001 fa8f 	bl	8002cb8 <HAL_I2C_Master_Transmit>
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 HAL_Delay(1);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f000 fd24 	bl	80021f8 <HAL_Delay>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <rx_cb_USART_1>:

//CallBack function for IRQ
void rx_cb_USART_1()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	set_usar1_irq(1);
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff fe19 	bl	80013f4 <set_usar1_irq>
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0be      	sub	sp, #248	; 0xf8
 80017cc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint8_t send_buffer[100] ="";
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017d8:	2260      	movs	r2, #96	; 0x60
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 fbc1 	bl	8004f64 <memset>
  uint8_t temp[128] = "";
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	227c      	movs	r2, #124	; 0x7c
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fbb8 	bl	8004f64 <memset>
  uint8_t data_ok = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint8_t get_try = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
  uint32_t	wd_timer			= 0;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

  fsm_state = ST_IDLE;
 8001806:	4bd5      	ldr	r3, [pc, #852]	; (8001b5c <main+0x394>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180c:	f000 fc85 	bl	800211a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001810:	f000 f9ce 	bl	8001bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001814:	f7ff fd10 	bl	8001238 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001818:	f7ff fd7a 	bl	8001310 <MX_I2C1_Init>
  MX_TIM2_Init();
 800181c:	f000 fbd8 	bl	8001fd0 <MX_TIM2_Init>
  //MX_USART1_UART_Init();
  MX_DMA_Init();
 8001820:	f7ff fcec 	bl	80011fc <MX_DMA_Init>
  //MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  //Timer init
  HAL_TIM_Base_Start(&htim2);
 8001824:	48ce      	ldr	r0, [pc, #824]	; (8001b60 <main+0x398>)
 8001826:	f002 fc6b 	bl	8004100 <HAL_TIM_Base_Start>

  //DHT22 init
  DHT22_Init(&DHT22_1, DHT22_PORT, DHT22_PIN);
 800182a:	2202      	movs	r2, #2
 800182c:	49cd      	ldr	r1, [pc, #820]	; (8001b64 <main+0x39c>)
 800182e:	48ce      	ldr	r0, [pc, #824]	; (8001b68 <main+0x3a0>)
 8001830:	f7ff fb0e 	bl	8000e50 <DHT22_Init>

  //Enable IRQ on UART1
  //USART1_Enable_IT(&huart1);

  //First sequence of LCD
  lcd_init(&hi2c1, &rgbData);
 8001834:	49cd      	ldr	r1, [pc, #820]	; (8001b6c <main+0x3a4>)
 8001836:	48ce      	ldr	r0, [pc, #824]	; (8001b70 <main+0x3a8>)
 8001838:	f7ff fe78 	bl	800152c <lcd_init>
  HAL_Delay(100);
 800183c:	2064      	movs	r0, #100	; 0x64
 800183e:	f000 fcdb 	bl	80021f8 <HAL_Delay>
  clearlcd();
 8001842:	f7ff ff43 	bl	80016cc <clearlcd>
  HAL_Delay(100);
 8001846:	2064      	movs	r0, #100	; 0x64
 8001848:	f000 fcd6 	bl	80021f8 <HAL_Delay>
  lcd_position(&hi2c1,0,0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	48c7      	ldr	r0, [pc, #796]	; (8001b70 <main+0x3a8>)
 8001852:	f7ff ff7e 	bl	8001752 <lcd_position>
  HAL_Delay(10);
 8001856:	200a      	movs	r0, #10
 8001858:	f000 fcce 	bl	80021f8 <HAL_Delay>
  lcd_print(&hi2c1,"Starting...");
 800185c:	49c5      	ldr	r1, [pc, #788]	; (8001b74 <main+0x3ac>)
 800185e:	48c4      	ldr	r0, [pc, #784]	; (8001b70 <main+0x3a8>)
 8001860:	f7ff ff4e 	bl	8001700 <lcd_print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (fsm_state)
 8001864:	4bbd      	ldr	r3, [pc, #756]	; (8001b5c <main+0x394>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b06      	cmp	r3, #6
 800186a:	f200 819d 	bhi.w	8001ba8 <main+0x3e0>
 800186e:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <main+0xac>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	08001891 	.word	0x08001891
 8001878:	080018a1 	.word	0x080018a1
 800187c:	080019a1 	.word	0x080019a1
 8001880:	080019a9 	.word	0x080019a9
 8001884:	08001b43 	.word	0x08001b43
 8001888:	08001b53 	.word	0x08001b53
 800188c:	08001b4b 	.word	0x08001b4b
	        	 // memset(send_buffer,0, sizeof(send_buffer));
	        	  //HAL_UART_Receive_DMA (&huart1, DMA_buff, 12);
	        	 /* HAL_UART_Receive(&huart1, DMA_buff, 10, 5000);
	        	  HAL_Delay(2000);*/
	        	  //           HAL_UART_Transmit(&huart1, (uint8_t*)"leo\n", strlen("leo\n"), 100);
	        	  HAL_Delay(1000);
 8001890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001894:	f000 fcb0 	bl	80021f8 <HAL_Delay>

		    	  fsm_state = ST_GET_DATA;
 8001898:	4bb0      	ldr	r3, [pc, #704]	; (8001b5c <main+0x394>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
	        	  break;
 800189e:	e186      	b.n	8001bae <main+0x3e6>
	          /***********************************/
		      /*				GET_DATA			*/
		      /***********************************/
		       case ST_GET_DATA:

	   			  get_try = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	   			  data_ok = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

		    	   while((get_try < 3 ) && (data_ok == 0))
 80018ac:	e06c      	b.n	8001988 <main+0x1c0>
		    	   {

			    	   if(DHT22_Start(&DHT22_1) == 0)
 80018ae:	48ae      	ldr	r0, [pc, #696]	; (8001b68 <main+0x3a0>)
 80018b0:	f7ff fb28 	bl	8000f04 <DHT22_Start>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d15e      	bne.n	8001978 <main+0x1b0>
			    	   	  {
			    	   		  if( DHT22_Check_Response(&DHT22_1)== 0)
 80018ba:	48ab      	ldr	r0, [pc, #684]	; (8001b68 <main+0x3a0>)
 80018bc:	f7ff fb4b 	bl	8000f56 <DHT22_Check_Response>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d14f      	bne.n	8001966 <main+0x19e>
			    	   		  {
			    	   			  if(DHT22_Read_Temp_Hum(&DHT22_1) == 0)
 80018c6:	48a8      	ldr	r0, [pc, #672]	; (8001b68 <main+0x3a0>)
 80018c8:	f7ff fbfa 	bl	80010c0 <DHT22_Read_Temp_Hum>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d140      	bne.n	8001954 <main+0x18c>
			    	   			  {
			    	   				  clearlcd();
 80018d2:	f7ff fefb 	bl	80016cc <clearlcd>

			    	   				  lcd_position(&hi2c1,0,0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	48a5      	ldr	r0, [pc, #660]	; (8001b70 <main+0x3a8>)
 80018dc:	f7ff ff39 	bl	8001752 <lcd_position>

			    	   				  memset(temp,0,sizeof(temp));
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 fb3c 	bl	8004f64 <memset>
			    	   				  sprintf((char*)temp,"Hum: %.2f %c ",DHT22_1.humidity, 0x25);
 80018ec:	4b9e      	ldr	r3, [pc, #632]	; (8001b68 <main+0x3a0>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fdb1 	bl	8000458 <__aeabi_f2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	1d38      	adds	r0, r7, #4
 80018fc:	2125      	movs	r1, #37	; 0x25
 80018fe:	9100      	str	r1, [sp, #0]
 8001900:	499d      	ldr	r1, [pc, #628]	; (8001b78 <main+0x3b0>)
 8001902:	f003 ff97 	bl	8005834 <siprintf>
			    	   				  lcd_print(&hi2c1,(char*)temp);
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	4619      	mov	r1, r3
 800190a:	4899      	ldr	r0, [pc, #612]	; (8001b70 <main+0x3a8>)
 800190c:	f7ff fef8 	bl	8001700 <lcd_print>

			    	   				  lcd_position(&hi2c1,0,1);
 8001910:	2201      	movs	r2, #1
 8001912:	2100      	movs	r1, #0
 8001914:	4896      	ldr	r0, [pc, #600]	; (8001b70 <main+0x3a8>)
 8001916:	f7ff ff1c 	bl	8001752 <lcd_position>

			    	   				  memset(temp,0,sizeof(temp));
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f003 fb1f 	bl	8004f64 <memset>
			    	   				  sprintf((char*)temp,"Temp: %.2fC  ",DHT22_1.temperature);
 8001926:	4b90      	ldr	r3, [pc, #576]	; (8001b68 <main+0x3a0>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fd94 	bl	8000458 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	1d38      	adds	r0, r7, #4
 8001936:	4991      	ldr	r1, [pc, #580]	; (8001b7c <main+0x3b4>)
 8001938:	f003 ff7c 	bl	8005834 <siprintf>
			    	   				  lcd_print(&hi2c1,(char*)temp);
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	4619      	mov	r1, r3
 8001940:	488b      	ldr	r0, [pc, #556]	; (8001b70 <main+0x3a8>)
 8001942:	f7ff fedd 	bl	8001700 <lcd_print>

			    	   				  get_try = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
			    	   				  data_ok = 1;
 800194c:	2301      	movs	r3, #1
 800194e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8001952:	e019      	b.n	8001988 <main+0x1c0>
			    	   			  }
			    	   			  else
			    	   			  {
					    	   		HAL_Delay(10);
 8001954:	200a      	movs	r0, #10
 8001956:	f000 fc4f 	bl	80021f8 <HAL_Delay>
			    	   				get_try++;
 800195a:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800195e:	3301      	adds	r3, #1
 8001960:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 8001964:	e010      	b.n	8001988 <main+0x1c0>
			    	   			  }

			    	   		  }
			    	   		  else
			    	   		  {
				    	   		    HAL_Delay(10);
 8001966:	200a      	movs	r0, #10
 8001968:	f000 fc46 	bl	80021f8 <HAL_Delay>
			    	   				get_try++;
 800196c:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8001970:	3301      	adds	r3, #1
 8001972:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 8001976:	e007      	b.n	8001988 <main+0x1c0>
			    	   		  }

			    	   	  }
			    	   	  else
			    	   	  {
			    	   		    HAL_Delay(10);
 8001978:	200a      	movs	r0, #10
 800197a:	f000 fc3d 	bl	80021f8 <HAL_Delay>
		    	   				get_try++;
 800197e:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8001982:	3301      	adds	r3, #1
 8001984:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
		    	   while((get_try < 3 ) && (data_ok == 0))
 8001988:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800198c:	2b02      	cmp	r3, #2
 800198e:	d803      	bhi.n	8001998 <main+0x1d0>
 8001990:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8001994:	2b00      	cmp	r3, #0
 8001996:	d08a      	beq.n	80018ae <main+0xe6>
			    	   	  }
		    	   }

			      fsm_state = ST_IDLE;
 8001998:	4b70      	ldr	r3, [pc, #448]	; (8001b5c <main+0x394>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
		    	 // fsm_state = ST_CHECK_DMA;
		          break;
 800199e:	e106      	b.n	8001bae <main+0x3e6>

				 // HAL_Delay(10000);

				 // HAL_UART_Receive_DMA(&huart4, DMA_buff, sizeof(DMA_buff));

		    	  fsm_state = ST_SEND_DATA;
 80019a0:	4b6e      	ldr	r3, [pc, #440]	; (8001b5c <main+0x394>)
 80019a2:	2203      	movs	r2, #3
 80019a4:	701a      	strb	r2, [r3, #0]
		          break;
 80019a6:	e102      	b.n	8001bae <main+0x3e6>
			 /***********************************/
			 /*				SEND DATA			*/
			 /***********************************/
			 case ST_SEND_DATA:

	        	  memset(send_buffer,0, sizeof(send_buffer));
 80019a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019ac:	2264      	movs	r2, #100	; 0x64
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 fad7 	bl	8004f64 <memset>
	        	  strcat((char *)send_buffer,"$");
 80019b6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fbe0 	bl	8000180 <strlen>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019c8:	4413      	add	r3, r2
 80019ca:	496d      	ldr	r1, [pc, #436]	; (8001b80 <main+0x3b8>)
 80019cc:	461a      	mov	r2, r3
 80019ce:	460b      	mov	r3, r1
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	8013      	strh	r3, [r2, #0]

	        	  memset(temp,0, sizeof(temp));
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fac2 	bl	8004f64 <memset>
	        	  sprintf((char *)temp,"&i=%d", device_ID);
 80019e0:	4b68      	ldr	r3, [pc, #416]	; (8001b84 <main+0x3bc>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4967      	ldr	r1, [pc, #412]	; (8001b88 <main+0x3c0>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 ff22 	bl	8005834 <siprintf>
	        	  strcat((char *)send_buffer,(char *)temp);
 80019f0:	1d3a      	adds	r2, r7, #4
 80019f2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 ff3b 	bl	8005874 <strcat>

	        	  memset(temp,0, sizeof(temp));
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 faad 	bl	8004f64 <memset>
	        	  sprintf((char *)temp,"&t=%.2f", DHT22_1.temperature);
 8001a0a:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <main+0x3a0>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd22 	bl	8000458 <__aeabi_f2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	1d38      	adds	r0, r7, #4
 8001a1a:	495c      	ldr	r1, [pc, #368]	; (8001b8c <main+0x3c4>)
 8001a1c:	f003 ff0a 	bl	8005834 <siprintf>
	        	  strcat((char *)send_buffer,(char *)temp);
 8001a20:	1d3a      	adds	r2, r7, #4
 8001a22:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 ff23 	bl	8005874 <strcat>

	        	  memset(temp,0, sizeof(temp));
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 fa95 	bl	8004f64 <memset>
	        	  sprintf((char *)temp,"&h=%.2f", DHT22_1.humidity);
 8001a3a:	4b4b      	ldr	r3, [pc, #300]	; (8001b68 <main+0x3a0>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd0a 	bl	8000458 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	1d38      	adds	r0, r7, #4
 8001a4a:	4951      	ldr	r1, [pc, #324]	; (8001b90 <main+0x3c8>)
 8001a4c:	f003 fef2 	bl	8005834 <siprintf>
	        	  strcat((char *)send_buffer,(char *)temp);
 8001a50:	1d3a      	adds	r2, r7, #4
 8001a52:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 ff0b 	bl	8005874 <strcat>
	        	  strcat((char *)send_buffer,(char *)"\r\n");
 8001a5e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fb8c 	bl	8000180 <strlen>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a70:	4413      	add	r3, r2
 8001a72:	4a48      	ldr	r2, [pc, #288]	; (8001b94 <main+0x3cc>)
 8001a74:	8811      	ldrh	r1, [r2, #0]
 8001a76:	7892      	ldrb	r2, [r2, #2]
 8001a78:	8019      	strh	r1, [r3, #0]
 8001a7a:	709a      	strb	r2, [r3, #2]

	        	  strcat((char *)send_buffer,"&i=");
 8001a7c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fb7d 	bl	8000180 <strlen>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a41      	ldr	r2, [pc, #260]	; (8001b98 <main+0x3d0>)
 8001a92:	6810      	ldr	r0, [r2, #0]
 8001a94:	6018      	str	r0, [r3, #0]
	        	  strcat((char *)send_buffer,(char *)DMA_buff);
 8001a96:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a9a:	4940      	ldr	r1, [pc, #256]	; (8001b9c <main+0x3d4>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 fee9 	bl	8005874 <strcat>
	        	  strcat((char *)send_buffer,"\r\n");
 8001aa2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fb6a 	bl	8000180 <strlen>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a37      	ldr	r2, [pc, #220]	; (8001b94 <main+0x3cc>)
 8001ab8:	8811      	ldrh	r1, [r2, #0]
 8001aba:	7892      	ldrb	r2, [r2, #2]
 8001abc:	8019      	strh	r1, [r3, #0]
 8001abe:	709a      	strb	r2, [r3, #2]

				 memset(USART1_BUFFER, 0, sizeof(USART1_BUFFER));
 8001ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4836      	ldr	r0, [pc, #216]	; (8001ba0 <main+0x3d8>)
 8001ac8:	f003 fa4c 	bl	8004f64 <memset>

				 set_usar1_irq(0);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fc91 	bl	80013f4 <set_usar1_irq>
				 HAL_UART_Transmit(&huart1,(uint8_t*)send_buffer, strlen((char *)send_buffer), 100);
 8001ad2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fb52 	bl	8000180 <strlen>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001ae4:	2364      	movs	r3, #100	; 0x64
 8001ae6:	482f      	ldr	r0, [pc, #188]	; (8001ba4 <main+0x3dc>)
 8001ae8:	f002 fd7c 	bl	80045e4 <HAL_UART_Transmit>
				 while (get_usar1_irq()!=1 && wd_timer <= 50)
 8001aec:	e007      	b.n	8001afe <main+0x336>
				 {
				 	HAL_Delay(1);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f000 fb82 	bl	80021f8 <HAL_Delay>
				 	wd_timer++;
 8001af4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001af8:	3301      	adds	r3, #1
 8001afa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
				 while (get_usar1_irq()!=1 && wd_timer <= 50)
 8001afe:	f7ff fc95 	bl	800142c <get_usar1_irq>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d003      	beq.n	8001b10 <main+0x348>
 8001b08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b0c:	2b32      	cmp	r3, #50	; 0x32
 8001b0e:	d9ee      	bls.n	8001aee <main+0x326>
				 }
				 if (get_usar1_irq() ==1)
 8001b10:	f7ff fc8c 	bl	800142c <get_usar1_irq>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d10f      	bne.n	8001b3a <main+0x372>
				 {
					HAL_Delay(30);
 8001b1a:	201e      	movs	r0, #30
 8001b1c:	f000 fb6c 	bl	80021f8 <HAL_Delay>
					HAL_UART_Receive(&huart1,(uint8_t*)send_buffer, strlen((char *)send_buffer), 1);
 8001b20:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fb2b 	bl	8000180 <strlen>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001b32:	2301      	movs	r3, #1
 8001b34:	481b      	ldr	r0, [pc, #108]	; (8001ba4 <main+0x3dc>)
 8001b36:	f002 fde7 	bl	8004708 <HAL_UART_Receive>
				 else
				 {
				 	return ERR_FAILURE;
				 }*/

		    	 fsm_state = ST_CHECK_RESP;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <main+0x394>)
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	701a      	strb	r2, [r3, #0]
		         break;
 8001b40:	e035      	b.n	8001bae <main+0x3e6>
			 /***********************************/
			 /*				CHECK RESP			*/
			 /***********************************/
			 case ST_CHECK_RESP:

		    	  fsm_state = ST_UPDATE;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <main+0x394>)
 8001b44:	2206      	movs	r2, #6
 8001b46:	701a      	strb	r2, [r3, #0]
		          break;
 8001b48:	e031      	b.n	8001bae <main+0x3e6>
			 /***********************************/
			 /*				UPDATE				*/
			 /***********************************/
			 case ST_UPDATE:

		    	  fsm_state = ST_SLEEP;
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <main+0x394>)
 8001b4c:	2205      	movs	r2, #5
 8001b4e:	701a      	strb	r2, [r3, #0]
		          break;
 8001b50:	e02d      	b.n	8001bae <main+0x3e6>
			 /***********************************/
			 /*				SLEEP       		*/
			 /***********************************/
			 case ST_SLEEP:

		    	  fsm_state = ST_IDLE;
 8001b52:	4b02      	ldr	r3, [pc, #8]	; (8001b5c <main+0x394>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
		          break;
 8001b58:	e029      	b.n	8001bae <main+0x3e6>
 8001b5a:	bf00      	nop
 8001b5c:	20000410 	.word	0x20000410
 8001b60:	200004bc 	.word	0x200004bc
 8001b64:	40020000 	.word	0x40020000
 8001b68:	20000200 	.word	0x20000200
 8001b6c:	20000474 	.word	0x20000474
 8001b70:	20000420 	.word	0x20000420
 8001b74:	08007cf4 	.word	0x08007cf4
 8001b78:	08007d00 	.word	0x08007d00
 8001b7c:	08007d10 	.word	0x08007d10
 8001b80:	08007d20 	.word	0x08007d20
 8001b84:	20000000 	.word	0x20000000
 8001b88:	08007d24 	.word	0x08007d24
 8001b8c:	08007d2c 	.word	0x08007d2c
 8001b90:	08007d34 	.word	0x08007d34
 8001b94:	08007d3c 	.word	0x08007d3c
 8001b98:	08007d40 	.word	0x08007d40
 8001b9c:	20000210 	.word	0x20000210
 8001ba0:	20000310 	.word	0x20000310
 8001ba4:	20000540 	.word	0x20000540
			 /***********************************/
			 /*				default       		*/
			 /***********************************/
			 default:

				  Error_Handler();
 8001ba8:	f000 f850 	bl	8001c4c <Error_Handler>
		          break;
 8001bac:	bf00      	nop
	  switch (fsm_state)
 8001bae:	e659      	b.n	8001864 <main+0x9c>

08001bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b092      	sub	sp, #72	; 0x48
 8001bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	2234      	movs	r2, #52	; 0x34
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 f9d0 	bl	8004f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <SystemClock_Config+0x98>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001bda:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <SystemClock_Config+0x98>)
 8001bdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be0:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be2:	2302      	movs	r3, #2
 8001be4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be6:	2301      	movs	r3, #1
 8001be8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bea:	2310      	movs	r3, #16
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001bf6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001bfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c00:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4618      	mov	r0, r3
 8001c08:	f001 fc8a 	bl	8003520 <HAL_RCC_OscConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c12:	f000 f81b 	bl	8001c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c16:	230f      	movs	r3, #15
 8001c18:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 ffa6 	bl	8003b80 <HAL_RCC_ClockConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c3a:	f000 f807 	bl	8001c4c <Error_Handler>
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3748      	adds	r7, #72	; 0x48
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40007000 	.word	0x40007000

08001c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <Error_Handler+0x8>
	...

08001c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_MspInit+0x5c>)
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <HAL_MspInit+0x5c>)
 8001c64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c68:	6253      	str	r3, [r2, #36]	; 0x24
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_MspInit+0x5c>)
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <HAL_MspInit+0x5c>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <HAL_MspInit+0x5c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6213      	str	r3, [r2, #32]
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_MspInit+0x5c>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_MspInit+0x5c>)
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <HAL_MspInit+0x5c>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c98:	6253      	str	r3, [r2, #36]	; 0x24
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_MspInit+0x5c>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ca6:	2007      	movs	r0, #7
 8001ca8:	f000 fb94 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <NMI_Handler+0x4>

08001cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <MemManage_Handler+0x4>

08001cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cce:	e7fe      	b.n	8001cce <BusFault_Handler+0x4>

08001cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <UsageFault_Handler+0x4>

08001cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfe:	f000 fa5f 	bl	80021c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <DMA1_Channel6_IRQHandler+0x10>)
 8001d0e:	f000 fc20 	bl	8002552 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200004fc 	.word	0x200004fc

08001d1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	  uint32_t isrflags   = READ_REG(huart1.Instance->SR);
 8001d22:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
	  uint32_t cr1its     = READ_REG(huart1.Instance->CR1);
 8001d2a:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	60bb      	str	r3, [r7, #8]
	  uint32_t cr3its     = READ_REG(huart1.Instance->CR3);
 8001d32:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	607b      	str	r3, [r7, #4]
	  uint32_t errorflags = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	603b      	str	r3, [r7, #0]

	  /* If no error occurs */
      errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	603b      	str	r3, [r7, #0]
	  if (errorflags == RESET)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <USART1_IRQHandler+0x36>
	  {
   	       USART1_SendIT(&huart1);
 8001d4c:	4837      	ldr	r0, [pc, #220]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001d4e:	f7ff fb89 	bl	8001464 <USART1_SendIT>
	  }

	  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d062      	beq.n	8001e1e <USART1_IRQHandler+0x102>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d104      	bne.n	8001d6c <USART1_IRQHandler+0x50>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d058      	beq.n	8001e1e <USART1_IRQHandler+0x102>
	   {
	     /* UART parity error interrupt occurred ----------------------------------*/
	     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00a      	beq.n	8001d8c <USART1_IRQHandler+0x70>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <USART1_IRQHandler+0x70>
	     {
	       huart1.ErrorCode |= HAL_UART_ERROR_PE;
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	4a28      	ldr	r2, [pc, #160]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001d8a:	6413      	str	r3, [r2, #64]	; 0x40
	     }

	     /* UART noise error interrupt occurred -----------------------------------*/
	     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <USART1_IRQHandler+0x90>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <USART1_IRQHandler+0x90>
	     {
	       huart1.ErrorCode |= HAL_UART_ERROR_NE;
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001daa:	6413      	str	r3, [r2, #64]	; 0x40
	     }

	     /* UART frame error interrupt occurred -----------------------------------*/
	     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <USART1_IRQHandler+0xb0>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <USART1_IRQHandler+0xb0>
	     {
	       huart1.ErrorCode |= HAL_UART_ERROR_FE;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001dca:	6413      	str	r3, [r2, #64]	; 0x40
	     }

	     /* UART Over-Run interrupt occurred --------------------------------------*/
	     if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00f      	beq.n	8001df6 <USART1_IRQHandler+0xda>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d104      	bne.n	8001dea <USART1_IRQHandler+0xce>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <USART1_IRQHandler+0xda>
	     {
	       huart1.ErrorCode |= HAL_UART_ERROR_ORE;
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
	     }

	     /* Call UART Error Call back function if need be --------------------------*/
	     if (huart1.ErrorCode != HAL_UART_ERROR_NONE)
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00f      	beq.n	8001e1e <USART1_IRQHandler+0x102>
	     {
	       /* UART in mode Receiver -----------------------------------------------*/
	       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <USART1_IRQHandler+0xfc>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <USART1_IRQHandler+0xfc>
	       {
	    	   USART1_SendIT(&huart1);
 8001e12:	4806      	ldr	r0, [pc, #24]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001e14:	f7ff fb26 	bl	8001464 <USART1_SendIT>
	       }
	       huart1.ErrorCode = HAL_UART_ERROR_NONE;
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
	     }
	   } /* End if some error occurs */

	  USART1_Enable_IT(&huart1);
 8001e1e:	4803      	ldr	r0, [pc, #12]	; (8001e2c <USART1_IRQHandler+0x110>)
 8001e20:	f7ff fb48 	bl	80014b4 <USART1_Enable_IT>
  /* USER CODE END USART1_IRQn 0 */
 // HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000540 	.word	0x20000540

08001e30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <USART2_IRQHandler+0x10>)
 8001e36:	f002 fd09 	bl	800484c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000584 	.word	0x20000584

08001e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
	return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <_kill>:

int _kill(int pid, int sig)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e5c:	f003 f858 	bl	8004f10 <__errno>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2216      	movs	r2, #22
 8001e64:	601a      	str	r2, [r3, #0]
	return -1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_exit>:

void _exit (int status)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ffe7 	bl	8001e52 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e84:	e7fe      	b.n	8001e84 <_exit+0x12>

08001e86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e00a      	b.n	8001eae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e98:	f3af 8000 	nop.w
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	60ba      	str	r2, [r7, #8]
 8001ea4:	b2ca      	uxtb	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dbf0      	blt.n	8001e98 <_read+0x12>
	}

return len;
 8001eb6:	687b      	ldr	r3, [r7, #4]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e009      	b.n	8001ee6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	60ba      	str	r2, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dbf1      	blt.n	8001ed2 <_write+0x12>
	}
	return len;
 8001eee:	687b      	ldr	r3, [r7, #4]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_close>:

int _close(int file)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	return -1;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <_isatty>:

int _isatty(int file)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	return 1;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f002 ffc2 	bl	8004f10 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20014000 	.word	0x20014000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	20000414 	.word	0x20000414
 8001fc0:	200005e0 	.word	0x200005e0

08001fc4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <MX_TIM2_Init+0x94>)
 8001fee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ff2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <MX_TIM2_Init+0x94>)
 8001ff6:	221f      	movs	r2, #31
 8001ff8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MX_TIM2_Init+0x94>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <MX_TIM2_Init+0x94>)
 8002002:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002006:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_TIM2_Init+0x94>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <MX_TIM2_Init+0x94>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002014:	4813      	ldr	r0, [pc, #76]	; (8002064 <MX_TIM2_Init+0x94>)
 8002016:	f002 f833 	bl	8004080 <HAL_TIM_Base_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002020:	f7ff fe14 	bl	8001c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	4619      	mov	r1, r3
 8002030:	480c      	ldr	r0, [pc, #48]	; (8002064 <MX_TIM2_Init+0x94>)
 8002032:	f002 f8af 	bl	8004194 <HAL_TIM_ConfigClockSource>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800203c:	f7ff fe06 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002048:	463b      	mov	r3, r7
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_TIM2_Init+0x94>)
 800204e:	f002 fa6b 	bl	8004528 <HAL_TIMEx_MasterConfigSynchronization>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002058:	f7ff fdf8 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200004bc 	.word	0x200004bc

08002068 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002078:	d10b      	bne.n	8002092 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_TIM_Base_MspInit+0x34>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	4a07      	ldr	r2, [pc, #28]	; (800209c <HAL_TIM_Base_MspInit+0x34>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6253      	str	r3, [r2, #36]	; 0x24
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_TIM_Base_MspInit+0x34>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	40023800 	.word	0x40023800

080020a0 <delay_us>:
  }
}

/* USER CODE BEGIN 1 */
void delay_us(uint16_t us)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <delay_us+0x2c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us); // wait for the counter to reach the us input in the parameter
 80020b2:	bf00      	nop
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <delay_us+0x2c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3f9      	bcc.n	80020b4 <delay_us+0x14>
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	200004bc 	.word	0x200004bc

080020d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d0:	480c      	ldr	r0, [pc, #48]	; (8002104 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020d2:	490d      	ldr	r1, [pc, #52]	; (8002108 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020e8:	4c0a      	ldr	r4, [pc, #40]	; (8002114 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020f6:	f7ff ff65 	bl	8001fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020fa:	f002 ff0f 	bl	8004f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020fe:	f7ff fb63 	bl	80017c8 <main>
  bx lr
 8002102:	4770      	bx	lr
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800210c:	0800815c 	.word	0x0800815c
  ldr r2, =_sbss
 8002110:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002114:	200005dc 	.word	0x200005dc

08002118 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC1_IRQHandler>

0800211a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002124:	2003      	movs	r0, #3
 8002126:	f000 f955 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800212a:	2000      	movs	r0, #0
 800212c:	f000 f80e 	bl	800214c <HAL_InitTick>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	e001      	b.n	8002140 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800213c:	f7ff fd8c 	bl	8001c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002140:	79fb      	ldrb	r3, [r7, #7]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_InitTick+0x68>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d022      	beq.n	80021a6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_InitTick+0x6c>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_InitTick+0x68>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800216c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f962 	bl	800243e <HAL_SYSTICK_Config>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10f      	bne.n	80021a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b0f      	cmp	r3, #15
 8002184:	d809      	bhi.n	800219a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002186:	2200      	movs	r2, #0
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	f04f 30ff 	mov.w	r0, #4294967295
 800218e:	f000 f92c 	bl	80023ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_InitTick+0x70>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	e007      	b.n	80021aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e004      	b.n	80021aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e001      	b.n	80021aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000000c 	.word	0x2000000c
 80021b8:	20000004 	.word	0x20000004
 80021bc:	20000008 	.word	0x20000008

080021c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_IncTick+0x1c>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_IncTick+0x20>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	4a03      	ldr	r2, [pc, #12]	; (80021dc <HAL_IncTick+0x1c>)
 80021d0:	6013      	str	r3, [r2, #0]
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	200005c8 	.word	0x200005c8
 80021e0:	2000000c 	.word	0x2000000c

080021e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return uwTick;
 80021e8:	4b02      	ldr	r3, [pc, #8]	; (80021f4 <HAL_GetTick+0x10>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	200005c8 	.word	0x200005c8

080021f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff fff0 	bl	80021e4 <HAL_GetTick>
 8002204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002210:	d004      	beq.n	800221c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_Delay+0x40>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800221c:	bf00      	nop
 800221e:	f7ff ffe1 	bl	80021e4 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	429a      	cmp	r2, r3
 800222c:	d8f7      	bhi.n	800221e <HAL_Delay+0x26>
  {
  }
}
 800222e:	bf00      	nop
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2000000c 	.word	0x2000000c

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4906      	ldr	r1, [pc, #24]	; (80022d4 <__NVIC_EnableIRQ+0x34>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf28      	it	cs
 800234a:	2304      	movcs	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3304      	adds	r3, #4
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b03      	subs	r3, #3
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43d9      	mvns	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	4313      	orrs	r3, r2
         );
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a0:	d301      	bcc.n	80023a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00f      	b.n	80023c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <SysTick_Config+0x40>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ae:	210f      	movs	r1, #15
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f7ff ff90 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <SysTick_Config+0x40>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <SysTick_Config+0x40>)
 80023c0:	2207      	movs	r2, #7
 80023c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	e000e010 	.word	0xe000e010

080023d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff2d 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023fc:	f7ff ff42 	bl	8002284 <__NVIC_GetPriorityGrouping>
 8002400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	6978      	ldr	r0, [r7, #20]
 8002408:	f7ff ff90 	bl	800232c <NVIC_EncodePriority>
 800240c:	4602      	mov	r2, r0
 800240e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff5f 	bl	80022d8 <__NVIC_SetPriority>
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff35 	bl	80022a0 <__NVIC_EnableIRQ>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ffa2 	bl	8002390 <SysTick_Config>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d008      	beq.n	8002480 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2204      	movs	r2, #4
 8002472:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e022      	b.n	80024c6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 020e 	bic.w	r2, r2, #14
 800248e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f003 021c 	and.w	r2, r3, #28
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f202 	lsl.w	r2, r1, r2
 80024b2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d005      	beq.n	80024f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2204      	movs	r2, #4
 80024ec:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e029      	b.n	8002548 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 020e 	bic.w	r2, r2, #14
 8002502:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f003 021c 	and.w	r2, r3, #28
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
    }
  }
  return status;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 031c 	and.w	r3, r3, #28
 8002572:	2204      	movs	r2, #4
 8002574:	409a      	lsls	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d026      	beq.n	80025cc <HAL_DMA_IRQHandler+0x7a>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d021      	beq.n	80025cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b00      	cmp	r3, #0
 8002594:	d107      	bne.n	80025a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0204 	bic.w	r2, r2, #4
 80025a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 021c 	and.w	r2, r3, #28
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	2104      	movs	r1, #4
 80025b4:	fa01 f202 	lsl.w	r2, r1, r2
 80025b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d071      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025ca:	e06c      	b.n	80026a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f003 031c 	and.w	r3, r3, #28
 80025d4:	2202      	movs	r2, #2
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d02e      	beq.n	800263e <HAL_DMA_IRQHandler+0xec>
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d029      	beq.n	800263e <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 020a 	bic.w	r2, r2, #10
 8002606:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f003 021c 	and.w	r2, r3, #28
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	2102      	movs	r1, #2
 800261e:	fa01 f202 	lsl.w	r2, r1, r2
 8002622:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	d038      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800263c:	e033      	b.n	80026a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f003 031c 	and.w	r3, r3, #28
 8002646:	2208      	movs	r2, #8
 8002648:	409a      	lsls	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d02a      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x156>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d025      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 020e 	bic.w	r2, r2, #14
 800266a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f003 021c 	and.w	r2, r3, #28
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002678:	2101      	movs	r1, #1
 800267a:	fa01 f202 	lsl.w	r2, r1, r2
 800267e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
}
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80026c6:	e160      	b.n	800298a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	4013      	ands	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8152 	beq.w	8002984 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d005      	beq.n	80026f8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d130      	bne.n	800275a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800272e:	2201      	movs	r2, #1
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0201 	and.w	r2, r3, #1
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b03      	cmp	r3, #3
 8002764:	d017      	beq.n	8002796 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4013      	ands	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d123      	bne.n	80027ea <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	08da      	lsrs	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3208      	adds	r2, #8
 80027e4:	6939      	ldr	r1, [r7, #16]
 80027e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0203 	and.w	r2, r3, #3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80ac 	beq.w	8002984 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282c:	4b5e      	ldr	r3, [pc, #376]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4a5d      	ldr	r2, [pc, #372]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6213      	str	r3, [r2, #32]
 8002838:	4b5b      	ldr	r3, [pc, #364]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002844:	4a59      	ldr	r2, [pc, #356]	; (80029ac <HAL_GPIO_Init+0x2fc>)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	3302      	adds	r3, #2
 800284c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002850:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a51      	ldr	r2, [pc, #324]	; (80029b0 <HAL_GPIO_Init+0x300>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d025      	beq.n	80028bc <HAL_GPIO_Init+0x20c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a50      	ldr	r2, [pc, #320]	; (80029b4 <HAL_GPIO_Init+0x304>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d01f      	beq.n	80028b8 <HAL_GPIO_Init+0x208>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a4f      	ldr	r2, [pc, #316]	; (80029b8 <HAL_GPIO_Init+0x308>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d019      	beq.n	80028b4 <HAL_GPIO_Init+0x204>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a4e      	ldr	r2, [pc, #312]	; (80029bc <HAL_GPIO_Init+0x30c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d013      	beq.n	80028b0 <HAL_GPIO_Init+0x200>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a4d      	ldr	r2, [pc, #308]	; (80029c0 <HAL_GPIO_Init+0x310>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00d      	beq.n	80028ac <HAL_GPIO_Init+0x1fc>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a4c      	ldr	r2, [pc, #304]	; (80029c4 <HAL_GPIO_Init+0x314>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d007      	beq.n	80028a8 <HAL_GPIO_Init+0x1f8>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a4b      	ldr	r2, [pc, #300]	; (80029c8 <HAL_GPIO_Init+0x318>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_GPIO_Init+0x1f4>
 80028a0:	2306      	movs	r3, #6
 80028a2:	e00c      	b.n	80028be <HAL_GPIO_Init+0x20e>
 80028a4:	2307      	movs	r3, #7
 80028a6:	e00a      	b.n	80028be <HAL_GPIO_Init+0x20e>
 80028a8:	2305      	movs	r3, #5
 80028aa:	e008      	b.n	80028be <HAL_GPIO_Init+0x20e>
 80028ac:	2304      	movs	r3, #4
 80028ae:	e006      	b.n	80028be <HAL_GPIO_Init+0x20e>
 80028b0:	2303      	movs	r3, #3
 80028b2:	e004      	b.n	80028be <HAL_GPIO_Init+0x20e>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e002      	b.n	80028be <HAL_GPIO_Init+0x20e>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_GPIO_Init+0x20e>
 80028bc:	2300      	movs	r3, #0
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	f002 0203 	and.w	r2, r2, #3
 80028c4:	0092      	lsls	r2, r2, #2
 80028c6:	4093      	lsls	r3, r2
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028ce:	4937      	ldr	r1, [pc, #220]	; (80029ac <HAL_GPIO_Init+0x2fc>)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028dc:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <HAL_GPIO_Init+0x31c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002900:	4a32      	ldr	r2, [pc, #200]	; (80029cc <HAL_GPIO_Init+0x31c>)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002906:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_GPIO_Init+0x31c>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800292a:	4a28      	ldr	r2, [pc, #160]	; (80029cc <HAL_GPIO_Init+0x31c>)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002930:	4b26      	ldr	r3, [pc, #152]	; (80029cc <HAL_GPIO_Init+0x31c>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002954:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_GPIO_Init+0x31c>)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800295a:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <HAL_GPIO_Init+0x31c>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800297e:	4a13      	ldr	r2, [pc, #76]	; (80029cc <HAL_GPIO_Init+0x31c>)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3301      	adds	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	f47f ae97 	bne.w	80026c8 <HAL_GPIO_Init+0x18>
  }
}
 800299a:	bf00      	nop
 800299c:	bf00      	nop
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40010000 	.word	0x40010000
 80029b0:	40020000 	.word	0x40020000
 80029b4:	40020400 	.word	0x40020400
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020c00 	.word	0x40020c00
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40021400 	.word	0x40021400
 80029c8:	40021800 	.word	0x40021800
 80029cc:	40010400 	.word	0x40010400

080029d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e001      	b.n	80029f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	807b      	strh	r3, [r7, #2]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a0e:	787b      	ldrb	r3, [r7, #1]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a14:	887a      	ldrh	r2, [r7, #2]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002a1a:	e003      	b.n	8002a24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	041a      	lsls	r2, r3, #16
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	619a      	str	r2, [r3, #24]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e12b      	b.n	8002c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe fc88 	bl	800136c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	; 0x24
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a94:	f001 fa80 	bl	8003f98 <HAL_RCC_GetPCLK1Freq>
 8002a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4a81      	ldr	r2, [pc, #516]	; (8002ca4 <HAL_I2C_Init+0x274>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d807      	bhi.n	8002ab4 <HAL_I2C_Init+0x84>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a80      	ldr	r2, [pc, #512]	; (8002ca8 <HAL_I2C_Init+0x278>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	bf94      	ite	ls
 8002aac:	2301      	movls	r3, #1
 8002aae:	2300      	movhi	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e006      	b.n	8002ac2 <HAL_I2C_Init+0x92>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a7d      	ldr	r2, [pc, #500]	; (8002cac <HAL_I2C_Init+0x27c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	bf94      	ite	ls
 8002abc:	2301      	movls	r3, #1
 8002abe:	2300      	movhi	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0e7      	b.n	8002c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a78      	ldr	r2, [pc, #480]	; (8002cb0 <HAL_I2C_Init+0x280>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0c9b      	lsrs	r3, r3, #18
 8002ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a6a      	ldr	r2, [pc, #424]	; (8002ca4 <HAL_I2C_Init+0x274>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d802      	bhi.n	8002b04 <HAL_I2C_Init+0xd4>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3301      	adds	r3, #1
 8002b02:	e009      	b.n	8002b18 <HAL_I2C_Init+0xe8>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	4a69      	ldr	r2, [pc, #420]	; (8002cb4 <HAL_I2C_Init+0x284>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	3301      	adds	r3, #1
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	495c      	ldr	r1, [pc, #368]	; (8002ca4 <HAL_I2C_Init+0x274>)
 8002b34:	428b      	cmp	r3, r1
 8002b36:	d819      	bhi.n	8002b6c <HAL_I2C_Init+0x13c>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e59      	subs	r1, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b46:	1c59      	adds	r1, r3, #1
 8002b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b4c:	400b      	ands	r3, r1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_I2C_Init+0x138>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1e59      	subs	r1, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b66:	e051      	b.n	8002c0c <HAL_I2C_Init+0x1dc>
 8002b68:	2304      	movs	r3, #4
 8002b6a:	e04f      	b.n	8002c0c <HAL_I2C_Init+0x1dc>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d111      	bne.n	8002b98 <HAL_I2C_Init+0x168>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1e58      	subs	r0, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	440b      	add	r3, r1
 8002b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e012      	b.n	8002bbe <HAL_I2C_Init+0x18e>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1e58      	subs	r0, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	0099      	lsls	r1, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Init+0x196>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e022      	b.n	8002c0c <HAL_I2C_Init+0x1dc>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10e      	bne.n	8002bec <HAL_I2C_Init+0x1bc>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1e58      	subs	r0, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	440b      	add	r3, r1
 8002bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be0:	3301      	adds	r3, #1
 8002be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bea:	e00f      	b.n	8002c0c <HAL_I2C_Init+0x1dc>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e58      	subs	r0, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	0099      	lsls	r1, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	6809      	ldr	r1, [r1, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6911      	ldr	r1, [r2, #16]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68d2      	ldr	r2, [r2, #12]
 8002c46:	4311      	orrs	r1, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	000186a0 	.word	0x000186a0
 8002ca8:	001e847f 	.word	0x001e847f
 8002cac:	003d08ff 	.word	0x003d08ff
 8002cb0:	431bde83 	.word	0x431bde83
 8002cb4:	10624dd3 	.word	0x10624dd3

08002cb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	817b      	strh	r3, [r7, #10]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff fa8a 	bl	80021e4 <HAL_GetTick>
 8002cd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	f040 80e0 	bne.w	8002ea0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2319      	movs	r3, #25
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4970      	ldr	r1, [pc, #448]	; (8002eac <HAL_I2C_Master_Transmit+0x1f4>)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fa92 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e0d3      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2C_Master_Transmit+0x50>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0cc      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d007      	beq.n	8002d2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2210      	movs	r2, #16
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	893a      	ldrh	r2, [r7, #8]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a50      	ldr	r2, [pc, #320]	; (8002eb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f9ca 	bl	8003110 <I2C_MasterRequestWrite>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e08d      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d9c:	e066      	b.n	8002e6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	6a39      	ldr	r1, [r7, #32]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fb0c 	bl	80033c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d107      	bne.n	8002dc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e06b      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	781a      	ldrb	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d11b      	bne.n	8002e40 <HAL_I2C_Master_Transmit+0x188>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d017      	beq.n	8002e40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	781a      	ldrb	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	6a39      	ldr	r1, [r7, #32]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fafc 	bl	8003442 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d107      	bne.n	8002e68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e01a      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d194      	bne.n	8002d9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e000      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
  }
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	00100002 	.word	0x00100002
 8002eb0:	ffff0000 	.word	0xffff0000

08002eb4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff f98e 	bl	80021e4 <HAL_GetTick>
 8002ec8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	f040 8111 	bne.w	80030fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2319      	movs	r3, #25
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	4988      	ldr	r1, [pc, #544]	; (8003108 <HAL_I2C_IsDeviceReady+0x254>)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f994 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e104      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_I2C_IsDeviceReady+0x50>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e0fd      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d007      	beq.n	8002f2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2224      	movs	r2, #36	; 0x24
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a70      	ldr	r2, [pc, #448]	; (800310c <HAL_I2C_IsDeviceReady+0x258>)
 8002f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f952 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f84:	d103      	bne.n	8002f8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0b6      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fa0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002fa2:	f7ff f91f 	bl	80021e4 <HAL_GetTick>
 8002fa6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fd6:	e025      	b.n	8003024 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fd8:	f7ff f904 	bl	80021e4 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d302      	bcc.n	8002fee <HAL_I2C_IsDeviceReady+0x13a>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	22a0      	movs	r2, #160	; 0xa0
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2ba0      	cmp	r3, #160	; 0xa0
 800302e:	d005      	beq.n	800303c <HAL_I2C_IsDeviceReady+0x188>
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <HAL_I2C_IsDeviceReady+0x188>
 8003036:	7dbb      	ldrb	r3, [r7, #22]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0cd      	beq.n	8002fd8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b02      	cmp	r3, #2
 8003050:	d129      	bne.n	80030a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003060:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	2319      	movs	r3, #25
 800307e:	2201      	movs	r2, #1
 8003080:	4921      	ldr	r1, [pc, #132]	; (8003108 <HAL_I2C_IsDeviceReady+0x254>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f8c6 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e036      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e02c      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2319      	movs	r3, #25
 80030c6:	2201      	movs	r2, #1
 80030c8:	490f      	ldr	r1, [pc, #60]	; (8003108 <HAL_I2C_IsDeviceReady+0x254>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f8a2 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e012      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	3301      	adds	r3, #1
 80030de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f4ff af32 	bcc.w	8002f4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	00100002 	.word	0x00100002
 800310c:	ffff0000 	.word	0xffff0000

08003110 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	460b      	mov	r3, r1
 800311e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d006      	beq.n	800313a <I2C_MasterRequestWrite+0x2a>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d003      	beq.n	800313a <I2C_MasterRequestWrite+0x2a>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003138:	d108      	bne.n	800314c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e00b      	b.n	8003164 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	2b12      	cmp	r3, #18
 8003152:	d107      	bne.n	8003164 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003162:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f84f 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00d      	beq.n	8003198 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800318a:	d103      	bne.n	8003194 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e035      	b.n	8003204 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a0:	d108      	bne.n	80031b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031a2:	897b      	ldrh	r3, [r7, #10]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031b0:	611a      	str	r2, [r3, #16]
 80031b2:	e01b      	b.n	80031ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031b4:	897b      	ldrh	r3, [r7, #10]
 80031b6:	11db      	asrs	r3, r3, #7
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f003 0306 	and.w	r3, r3, #6
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f063 030f 	orn	r3, r3, #15
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	490e      	ldr	r1, [pc, #56]	; (800320c <I2C_MasterRequestWrite+0xfc>)
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f875 	bl	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e010      	b.n	8003204 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031e2:	897b      	ldrh	r3, [r7, #10]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4907      	ldr	r1, [pc, #28]	; (8003210 <I2C_MasterRequestWrite+0x100>)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f865 	bl	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	00010008 	.word	0x00010008
 8003210:	00010002 	.word	0x00010002

08003214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003224:	e025      	b.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d021      	beq.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322e:	f7fe ffd9 	bl	80021e4 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d302      	bcc.n	8003244 <I2C_WaitOnFlagUntilTimeout+0x30>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d116      	bne.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e023      	b.n	80032ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10d      	bne.n	8003298 <I2C_WaitOnFlagUntilTimeout+0x84>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	43da      	mvns	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4013      	ands	r3, r2
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	e00c      	b.n	80032b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4013      	ands	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf0c      	ite	eq
 80032aa:	2301      	moveq	r3, #1
 80032ac:	2300      	movne	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d0b6      	beq.n	8003226 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032d0:	e051      	b.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e0:	d123      	bne.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f043 0204 	orr.w	r2, r3, #4
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e046      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d021      	beq.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003332:	f7fe ff57 	bl	80021e4 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	429a      	cmp	r2, r3
 8003340:	d302      	bcc.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d116      	bne.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e020      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	0c1b      	lsrs	r3, r3, #16
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10c      	bne.n	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	43da      	mvns	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4013      	ands	r3, r2
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	bf14      	ite	ne
 8003392:	2301      	movne	r3, #1
 8003394:	2300      	moveq	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	e00b      	b.n	80033b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	43da      	mvns	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4013      	ands	r3, r2
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d18d      	bne.n	80032d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033cc:	e02d      	b.n	800342a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f878 	bl	80034c4 <I2C_IsAcknowledgeFailed>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e02d      	b.n	800343a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d021      	beq.n	800342a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7fe fefd 	bl	80021e4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d116      	bne.n	800342a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f043 0220 	orr.w	r2, r3, #32
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e007      	b.n	800343a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b80      	cmp	r3, #128	; 0x80
 8003436:	d1ca      	bne.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800344e:	e02d      	b.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f837 	bl	80034c4 <I2C_IsAcknowledgeFailed>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e02d      	b.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d021      	beq.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003468:	f7fe febc 	bl	80021e4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	429a      	cmp	r2, r3
 8003476:	d302      	bcc.n	800347e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d116      	bne.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e007      	b.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d1ca      	bne.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034da:	d11b      	bne.n	8003514 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f043 0204 	orr.w	r2, r3, #4
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e31d      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003532:	4b94      	ldr	r3, [pc, #592]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800353c:	4b91      	ldr	r3, [pc, #580]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003544:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d07b      	beq.n	800364a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d006      	beq.n	8003566 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d10f      	bne.n	800357e <HAL_RCC_OscConfig+0x5e>
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d10b      	bne.n	800357e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003566:	4b87      	ldr	r3, [pc, #540]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d06a      	beq.n	8003648 <HAL_RCC_OscConfig+0x128>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d166      	bne.n	8003648 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e2f7      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d106      	bne.n	8003594 <HAL_RCC_OscConfig+0x74>
 8003586:	4b7f      	ldr	r3, [pc, #508]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a7e      	ldr	r2, [pc, #504]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 800358c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e02d      	b.n	80035f0 <HAL_RCC_OscConfig+0xd0>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10c      	bne.n	80035b6 <HAL_RCC_OscConfig+0x96>
 800359c:	4b79      	ldr	r3, [pc, #484]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a78      	ldr	r2, [pc, #480]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b76      	ldr	r3, [pc, #472]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a75      	ldr	r2, [pc, #468]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	e01c      	b.n	80035f0 <HAL_RCC_OscConfig+0xd0>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b05      	cmp	r3, #5
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0xb8>
 80035be:	4b71      	ldr	r3, [pc, #452]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a70      	ldr	r2, [pc, #448]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80035c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b6e      	ldr	r3, [pc, #440]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6d      	ldr	r2, [pc, #436]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e00b      	b.n	80035f0 <HAL_RCC_OscConfig+0xd0>
 80035d8:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a69      	ldr	r2, [pc, #420]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b67      	ldr	r3, [pc, #412]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a66      	ldr	r2, [pc, #408]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80035ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe fdf4 	bl	80021e4 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003600:	f7fe fdf0 	bl	80021e4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e2ad      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003612:	4b5c      	ldr	r3, [pc, #368]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0xe0>
 800361e:	e014      	b.n	800364a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe fde0 	bl	80021e4 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe fddc 	bl	80021e4 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e299      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800363a:	4b52      	ldr	r3, [pc, #328]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x108>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d05a      	beq.n	800370c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d005      	beq.n	8003668 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d119      	bne.n	8003696 <HAL_RCC_OscConfig+0x176>
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d116      	bne.n	8003696 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003668:	4b46      	ldr	r3, [pc, #280]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_OscConfig+0x160>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d001      	beq.n	8003680 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e276      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b40      	ldr	r3, [pc, #256]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	493d      	ldr	r1, [pc, #244]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003694:	e03a      	b.n	800370c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d020      	beq.n	80036e0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369e:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <HAL_RCC_OscConfig+0x268>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fe fd9e 	bl	80021e4 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ac:	f7fe fd9a 	bl	80021e4 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e257      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036be:	4b31      	ldr	r3, [pc, #196]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ca:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	492a      	ldr	r1, [pc, #168]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
 80036de:	e015      	b.n	800370c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e0:	4b29      	ldr	r3, [pc, #164]	; (8003788 <HAL_RCC_OscConfig+0x268>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fe fd7d 	bl	80021e4 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fe fd79 	bl	80021e4 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e236      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003700:	4b20      	ldr	r3, [pc, #128]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f0      	bne.n	80036ee <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80b8 	beq.w	800388a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d170      	bne.n	8003802 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003720:	4b18      	ldr	r3, [pc, #96]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_OscConfig+0x218>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e21a      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003744:	429a      	cmp	r2, r3
 8003746:	d921      	bls.n	800378c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fc37 	bl	8003fc0 <RCC_SetFlashLatencyFromMSIRange>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e208      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4906      	ldr	r1, [pc, #24]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	061b      	lsls	r3, r3, #24
 800377c:	4901      	ldr	r1, [pc, #4]	; (8003784 <HAL_RCC_OscConfig+0x264>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
 8003782:	e020      	b.n	80037c6 <HAL_RCC_OscConfig+0x2a6>
 8003784:	40023800 	.word	0x40023800
 8003788:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800378c:	4ba4      	ldr	r3, [pc, #656]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	49a1      	ldr	r1, [pc, #644]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800379e:	4ba0      	ldr	r3, [pc, #640]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	061b      	lsls	r3, r3, #24
 80037ac:	499c      	ldr	r1, [pc, #624]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fc02 	bl	8003fc0 <RCC_SetFlashLatencyFromMSIRange>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e1d3      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	0b5b      	lsrs	r3, r3, #13
 80037cc:	3301      	adds	r3, #1
 80037ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037d6:	4a92      	ldr	r2, [pc, #584]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80037d8:	6892      	ldr	r2, [r2, #8]
 80037da:	0912      	lsrs	r2, r2, #4
 80037dc:	f002 020f 	and.w	r2, r2, #15
 80037e0:	4990      	ldr	r1, [pc, #576]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80037e2:	5c8a      	ldrb	r2, [r1, r2]
 80037e4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037e6:	4a90      	ldr	r2, [pc, #576]	; (8003a28 <HAL_RCC_OscConfig+0x508>)
 80037e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037ea:	4b90      	ldr	r3, [pc, #576]	; (8003a2c <HAL_RCC_OscConfig+0x50c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fcac 	bl	800214c <HAL_InitTick>
 80037f4:	4603      	mov	r3, r0
 80037f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d045      	beq.n	800388a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	e1b5      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d029      	beq.n	800385e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800380a:	4b89      	ldr	r3, [pc, #548]	; (8003a30 <HAL_RCC_OscConfig+0x510>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7fe fce8 	bl	80021e4 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003818:	f7fe fce4 	bl	80021e4 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e1a1      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800382a:	4b7d      	ldr	r3, [pc, #500]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003836:	4b7a      	ldr	r3, [pc, #488]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4977      	ldr	r1, [pc, #476]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003848:	4b75      	ldr	r3, [pc, #468]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	061b      	lsls	r3, r3, #24
 8003856:	4972      	ldr	r1, [pc, #456]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
 800385c:	e015      	b.n	800388a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800385e:	4b74      	ldr	r3, [pc, #464]	; (8003a30 <HAL_RCC_OscConfig+0x510>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7fe fcbe 	bl	80021e4 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800386c:	f7fe fcba 	bl	80021e4 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e177      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800387e:	4b68      	ldr	r3, [pc, #416]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d030      	beq.n	80038f8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <HAL_RCC_OscConfig+0x514>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a4:	f7fe fc9e 	bl	80021e4 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ac:	f7fe fc9a 	bl	80021e4 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e157      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038be:	4b58      	ldr	r3, [pc, #352]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80038c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x38c>
 80038ca:	e015      	b.n	80038f8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038cc:	4b59      	ldr	r3, [pc, #356]	; (8003a34 <HAL_RCC_OscConfig+0x514>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d2:	f7fe fc87 	bl	80021e4 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038da:	f7fe fc83 	bl	80021e4 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e140      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038ec:	4b4c      	ldr	r3, [pc, #304]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80038ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f0      	bne.n	80038da <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80b5 	beq.w	8003a70 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390a:	4b45      	ldr	r3, [pc, #276]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10d      	bne.n	8003932 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003916:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	4a41      	ldr	r2, [pc, #260]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 800391c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003920:	6253      	str	r3, [r2, #36]	; 0x24
 8003922:	4b3f      	ldr	r3, [pc, #252]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800392e:	2301      	movs	r3, #1
 8003930:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003932:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <HAL_RCC_OscConfig+0x518>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393a:	2b00      	cmp	r3, #0
 800393c:	d118      	bne.n	8003970 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800393e:	4b3e      	ldr	r3, [pc, #248]	; (8003a38 <HAL_RCC_OscConfig+0x518>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a3d      	ldr	r2, [pc, #244]	; (8003a38 <HAL_RCC_OscConfig+0x518>)
 8003944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394a:	f7fe fc4b 	bl	80021e4 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003952:	f7fe fc47 	bl	80021e4 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b64      	cmp	r3, #100	; 0x64
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e104      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003964:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <HAL_RCC_OscConfig+0x518>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d106      	bne.n	8003986 <HAL_RCC_OscConfig+0x466>
 8003978:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 800397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397c:	4a28      	ldr	r2, [pc, #160]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 800397e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003982:	6353      	str	r3, [r2, #52]	; 0x34
 8003984:	e02d      	b.n	80039e2 <HAL_RCC_OscConfig+0x4c2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x488>
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 8003990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003992:	4a23      	ldr	r2, [pc, #140]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 8003994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003998:	6353      	str	r3, [r2, #52]	; 0x34
 800399a:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 800399c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399e:	4a20      	ldr	r2, [pc, #128]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80039a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039a4:	6353      	str	r3, [r2, #52]	; 0x34
 80039a6:	e01c      	b.n	80039e2 <HAL_RCC_OscConfig+0x4c2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	d10c      	bne.n	80039ca <HAL_RCC_OscConfig+0x4aa>
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80039b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ba:	6353      	str	r3, [r2, #52]	; 0x34
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80039be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c0:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80039c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c6:	6353      	str	r3, [r2, #52]	; 0x34
 80039c8:	e00b      	b.n	80039e2 <HAL_RCC_OscConfig+0x4c2>
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ce:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80039d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d4:	6353      	str	r3, [r2, #52]	; 0x34
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 80039dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d015      	beq.n	8003a16 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ea:	f7fe fbfb 	bl	80021e4 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039f0:	e00a      	b.n	8003a08 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fe fbf7 	bl	80021e4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e0b2      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_RCC_OscConfig+0x500>)
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0ee      	beq.n	80039f2 <HAL_RCC_OscConfig+0x4d2>
 8003a14:	e023      	b.n	8003a5e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7fe fbe5 	bl	80021e4 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a1c:	e019      	b.n	8003a52 <HAL_RCC_OscConfig+0x532>
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800
 8003a24:	08007d50 	.word	0x08007d50
 8003a28:	20000004 	.word	0x20000004
 8003a2c:	20000008 	.word	0x20000008
 8003a30:	42470020 	.word	0x42470020
 8003a34:	42470680 	.word	0x42470680
 8003a38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f7fe fbd2 	bl	80021e4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e08d      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a52:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <HAL_RCC_OscConfig+0x658>)
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ee      	bne.n	8003a3c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a5e:	7ffb      	ldrb	r3, [r7, #31]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d105      	bne.n	8003a70 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a64:	4b44      	ldr	r3, [pc, #272]	; (8003b78 <HAL_RCC_OscConfig+0x658>)
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	4a43      	ldr	r2, [pc, #268]	; (8003b78 <HAL_RCC_OscConfig+0x658>)
 8003a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d079      	beq.n	8003b6c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d056      	beq.n	8003b2c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d13b      	bne.n	8003afe <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a86:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <HAL_RCC_OscConfig+0x65c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fbaa 	bl	80021e4 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a94:	f7fe fba6 	bl	80021e4 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e063      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aa6:	4b34      	ldr	r3, [pc, #208]	; (8003b78 <HAL_RCC_OscConfig+0x658>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ab2:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <HAL_RCC_OscConfig+0x658>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	4319      	orrs	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	492b      	ldr	r1, [pc, #172]	; (8003b78 <HAL_RCC_OscConfig+0x658>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad0:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <HAL_RCC_OscConfig+0x65c>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad6:	f7fe fb85 	bl	80021e4 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ade:	f7fe fb81 	bl	80021e4 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e03e      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003af0:	4b21      	ldr	r3, [pc, #132]	; (8003b78 <HAL_RCC_OscConfig+0x658>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x5be>
 8003afc:	e036      	b.n	8003b6c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afe:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <HAL_RCC_OscConfig+0x65c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fe fb6e 	bl	80021e4 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fe fb6a 	bl	80021e4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e027      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b1e:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <HAL_RCC_OscConfig+0x658>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x5ec>
 8003b2a:	e01f      	b.n	8003b6c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e01a      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_RCC_OscConfig+0x658>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d10d      	bne.n	8003b68 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d106      	bne.n	8003b68 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	42470060 	.word	0x42470060

08003b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e11a      	b.n	8003dca <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b94:	4b8f      	ldr	r3, [pc, #572]	; (8003dd4 <HAL_RCC_ClockConfig+0x254>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d919      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x34>
 8003ba8:	4b8a      	ldr	r3, [pc, #552]	; (8003dd4 <HAL_RCC_ClockConfig+0x254>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a89      	ldr	r2, [pc, #548]	; (8003dd4 <HAL_RCC_ClockConfig+0x254>)
 8003bae:	f043 0304 	orr.w	r3, r3, #4
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	4b87      	ldr	r3, [pc, #540]	; (8003dd4 <HAL_RCC_ClockConfig+0x254>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 0201 	bic.w	r2, r3, #1
 8003bbc:	4985      	ldr	r1, [pc, #532]	; (8003dd4 <HAL_RCC_ClockConfig+0x254>)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc4:	4b83      	ldr	r3, [pc, #524]	; (8003dd4 <HAL_RCC_ClockConfig+0x254>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e0f9      	b.n	8003dca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d008      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be2:	4b7d      	ldr	r3, [pc, #500]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	497a      	ldr	r1, [pc, #488]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 808e 	beq.w	8003d1e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c0a:	4b73      	ldr	r3, [pc, #460]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d121      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0d7      	b.n	8003dca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c22:	4b6d      	ldr	r3, [pc, #436]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d115      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e0cb      	b.n	8003dca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c3a:	4b67      	ldr	r3, [pc, #412]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e0bf      	b.n	8003dca <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c4a:	4b63      	ldr	r3, [pc, #396]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e0b7      	b.n	8003dca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5a:	4b5f      	ldr	r3, [pc, #380]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 0203 	bic.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	495c      	ldr	r1, [pc, #368]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c6c:	f7fe faba 	bl	80021e4 <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d112      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7c:	f7fe fab2 	bl	80021e4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e09b      	b.n	8003dca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c92:	4b51      	ldr	r3, [pc, #324]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d1ee      	bne.n	8003c7c <HAL_RCC_ClockConfig+0xfc>
 8003c9e:	e03e      	b.n	8003d1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d112      	bne.n	8003cce <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003caa:	f7fe fa9b 	bl	80021e4 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e084      	b.n	8003dca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc0:	4b45      	ldr	r3, [pc, #276]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d1ee      	bne.n	8003caa <HAL_RCC_ClockConfig+0x12a>
 8003ccc:	e027      	b.n	8003d1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d11d      	bne.n	8003d12 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd8:	f7fe fa84 	bl	80021e4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e06d      	b.n	8003dca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cee:	4b3a      	ldr	r3, [pc, #232]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d1ee      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x158>
 8003cfa:	e010      	b.n	8003d1e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfc:	f7fe fa72 	bl	80021e4 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e05b      	b.n	8003dca <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d12:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ee      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1e:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <HAL_RCC_ClockConfig+0x254>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d219      	bcs.n	8003d60 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d105      	bne.n	8003d3e <HAL_RCC_ClockConfig+0x1be>
 8003d32:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_RCC_ClockConfig+0x254>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <HAL_RCC_ClockConfig+0x254>)
 8003d38:	f043 0304 	orr.w	r3, r3, #4
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <HAL_RCC_ClockConfig+0x254>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	4923      	ldr	r1, [pc, #140]	; (8003dd4 <HAL_RCC_ClockConfig+0x254>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <HAL_RCC_ClockConfig+0x254>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e034      	b.n	8003dca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4917      	ldr	r1, [pc, #92]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	490f      	ldr	r1, [pc, #60]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d9e:	f000 f823 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003da2:	4602      	mov	r2, r0
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <HAL_RCC_ClockConfig+0x258>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	490b      	ldr	r1, [pc, #44]	; (8003ddc <HAL_RCC_ClockConfig+0x25c>)
 8003db0:	5ccb      	ldrb	r3, [r1, r3]
 8003db2:	fa22 f303 	lsr.w	r3, r2, r3
 8003db6:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <HAL_RCC_ClockConfig+0x260>)
 8003db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <HAL_RCC_ClockConfig+0x264>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe f9c4 	bl	800214c <HAL_InitTick>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dc8:	7afb      	ldrb	r3, [r7, #11]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023c00 	.word	0x40023c00
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	08007d50 	.word	0x08007d50
 8003de0:	20000004 	.word	0x20000004
 8003de4:	20000008 	.word	0x20000008

08003de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	b5b0      	push	{r4, r5, r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003dee:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	d00d      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0x32>
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	f200 80a4 	bhi.w	8003f4c <HAL_RCC_GetSysClockFreq+0x164>
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d002      	beq.n	8003e0e <HAL_RCC_GetSysClockFreq+0x26>
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d003      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x2c>
 8003e0c:	e09e      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e0e:	4b5a      	ldr	r3, [pc, #360]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x190>)
 8003e10:	613b      	str	r3, [r7, #16]
      break;
 8003e12:	e0a9      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e14:	4b59      	ldr	r3, [pc, #356]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x194>)
 8003e16:	613b      	str	r3, [r7, #16]
      break;
 8003e18:	e0a6      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	0c9b      	lsrs	r3, r3, #18
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	4a57      	ldr	r2, [pc, #348]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x198>)
 8003e24:	5cd3      	ldrb	r3, [r2, r3]
 8003e26:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	0d9b      	lsrs	r3, r3, #22
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	3301      	adds	r3, #1
 8003e32:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e34:	4b4f      	ldr	r3, [pc, #316]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d041      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	461c      	mov	r4, r3
 8003e44:	f04f 0500 	mov.w	r5, #0
 8003e48:	4620      	mov	r0, r4
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	014b      	lsls	r3, r1, #5
 8003e56:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e5a:	0142      	lsls	r2, r0, #5
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	1b00      	subs	r0, r0, r4
 8003e62:	eb61 0105 	sbc.w	r1, r1, r5
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	018b      	lsls	r3, r1, #6
 8003e70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e74:	0182      	lsls	r2, r0, #6
 8003e76:	1a12      	subs	r2, r2, r0
 8003e78:	eb63 0301 	sbc.w	r3, r3, r1
 8003e7c:	f04f 0000 	mov.w	r0, #0
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	00d9      	lsls	r1, r3, #3
 8003e86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e8a:	00d0      	lsls	r0, r2, #3
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	1912      	adds	r2, r2, r4
 8003e92:	eb45 0303 	adc.w	r3, r5, r3
 8003e96:	f04f 0000 	mov.w	r0, #0
 8003e9a:	f04f 0100 	mov.w	r1, #0
 8003e9e:	0259      	lsls	r1, r3, #9
 8003ea0:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003ea4:	0250      	lsls	r0, r2, #9
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	f7fc fe4f 	bl	8000b58 <__aeabi_uldivmod>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e040      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	461c      	mov	r4, r3
 8003ec8:	f04f 0500 	mov.w	r5, #0
 8003ecc:	4620      	mov	r0, r4
 8003ece:	4629      	mov	r1, r5
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	014b      	lsls	r3, r1, #5
 8003eda:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ede:	0142      	lsls	r2, r0, #5
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	1b00      	subs	r0, r0, r4
 8003ee6:	eb61 0105 	sbc.w	r1, r1, r5
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	018b      	lsls	r3, r1, #6
 8003ef4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ef8:	0182      	lsls	r2, r0, #6
 8003efa:	1a12      	subs	r2, r2, r0
 8003efc:	eb63 0301 	sbc.w	r3, r3, r1
 8003f00:	f04f 0000 	mov.w	r0, #0
 8003f04:	f04f 0100 	mov.w	r1, #0
 8003f08:	00d9      	lsls	r1, r3, #3
 8003f0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f0e:	00d0      	lsls	r0, r2, #3
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	1912      	adds	r2, r2, r4
 8003f16:	eb45 0303 	adc.w	r3, r5, r3
 8003f1a:	f04f 0000 	mov.w	r0, #0
 8003f1e:	f04f 0100 	mov.w	r1, #0
 8003f22:	0299      	lsls	r1, r3, #10
 8003f24:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f28:	0290      	lsls	r0, r2, #10
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4610      	mov	r0, r2
 8003f30:	4619      	mov	r1, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	461a      	mov	r2, r3
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	f7fc fe0d 	bl	8000b58 <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4613      	mov	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	613b      	str	r3, [r7, #16]
      break;
 8003f4a:	e00d      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	0b5b      	lsrs	r3, r3, #13
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	613b      	str	r3, [r7, #16]
      break;
 8003f66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f68:	693b      	ldr	r3, [r7, #16]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bdb0      	pop	{r4, r5, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800
 8003f78:	00f42400 	.word	0x00f42400
 8003f7c:	007a1200 	.word	0x007a1200
 8003f80:	08007d44 	.word	0x08007d44

08003f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f88:	4b02      	ldr	r3, [pc, #8]	; (8003f94 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	20000004 	.word	0x20000004

08003f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f9c:	f7ff fff2 	bl	8003f84 <HAL_RCC_GetHCLKFreq>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	4903      	ldr	r1, [pc, #12]	; (8003fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fae:	5ccb      	ldrb	r3, [r1, r3]
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	08007d60 	.word	0x08007d60

08003fc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003fcc:	4b29      	ldr	r3, [pc, #164]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d12c      	bne.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fd8:	4b26      	ldr	r3, [pc, #152]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003fe4:	4b24      	ldr	r3, [pc, #144]	; (8004078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e016      	b.n	800401e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff0:	4b20      	ldr	r3, [pc, #128]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	4a1f      	ldr	r2, [pc, #124]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	6253      	str	r3, [r2, #36]	; 0x24
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004008:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004010:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004012:	4b18      	ldr	r3, [pc, #96]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	4a17      	ldr	r2, [pc, #92]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004024:	d105      	bne.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800402c:	d101      	bne.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800402e:	2301      	movs	r3, #1
 8004030:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d105      	bne.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0f      	ldr	r2, [pc, #60]	; (800407c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800403e:	f043 0304 	orr.w	r3, r3, #4
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f023 0201 	bic.w	r2, r3, #1
 800404c:	490b      	ldr	r1, [pc, #44]	; (800407c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004054:	4b09      	ldr	r3, [pc, #36]	; (800407c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	429a      	cmp	r2, r3
 8004060:	d001      	beq.n	8004066 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800
 8004078:	40007000 	.word	0x40007000
 800407c:	40023c00 	.word	0x40023c00

08004080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e031      	b.n	80040f6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fd ffde 	bl	8002068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3304      	adds	r3, #4
 80040bc:	4619      	mov	r1, r3
 80040be:	4610      	mov	r0, r2
 80040c0:	f000 f92c 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d001      	beq.n	8004118 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e032      	b.n	800417e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004128:	d00e      	beq.n	8004148 <HAL_TIM_Base_Start+0x48>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_TIM_Base_Start+0x88>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d009      	beq.n	8004148 <HAL_TIM_Base_Start+0x48>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a14      	ldr	r2, [pc, #80]	; (800418c <HAL_TIM_Base_Start+0x8c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_TIM_Base_Start+0x48>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a13      	ldr	r2, [pc, #76]	; (8004190 <HAL_TIM_Base_Start+0x90>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d111      	bne.n	800416c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b06      	cmp	r3, #6
 8004158:	d010      	beq.n	800417c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416a:	e007      	b.n	800417c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40010800 	.word	0x40010800

08004194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_TIM_ConfigClockSource+0x18>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e0b3      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x180>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e4:	d03e      	beq.n	8004264 <HAL_TIM_ConfigClockSource+0xd0>
 80041e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ea:	f200 8087 	bhi.w	80042fc <HAL_TIM_ConfigClockSource+0x168>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f2:	f000 8085 	beq.w	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fa:	d87f      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x168>
 80041fc:	2b70      	cmp	r3, #112	; 0x70
 80041fe:	d01a      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0xa2>
 8004200:	2b70      	cmp	r3, #112	; 0x70
 8004202:	d87b      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x168>
 8004204:	2b60      	cmp	r3, #96	; 0x60
 8004206:	d050      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0x116>
 8004208:	2b60      	cmp	r3, #96	; 0x60
 800420a:	d877      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x168>
 800420c:	2b50      	cmp	r3, #80	; 0x50
 800420e:	d03c      	beq.n	800428a <HAL_TIM_ConfigClockSource+0xf6>
 8004210:	2b50      	cmp	r3, #80	; 0x50
 8004212:	d873      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x168>
 8004214:	2b40      	cmp	r3, #64	; 0x40
 8004216:	d058      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x136>
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	d86f      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x168>
 800421c:	2b30      	cmp	r3, #48	; 0x30
 800421e:	d064      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x156>
 8004220:	2b30      	cmp	r3, #48	; 0x30
 8004222:	d86b      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x168>
 8004224:	2b20      	cmp	r3, #32
 8004226:	d060      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x156>
 8004228:	2b20      	cmp	r3, #32
 800422a:	d867      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x168>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d05c      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x156>
 8004230:	2b10      	cmp	r3, #16
 8004232:	d05a      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004234:	e062      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6899      	ldr	r1, [r3, #8]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f000 f950 	bl	80044ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004258:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	609a      	str	r2, [r3, #8]
      break;
 8004262:	e04e      	b.n	8004302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f000 f939 	bl	80044ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004286:	609a      	str	r2, [r3, #8]
      break;
 8004288:	e03b      	b.n	8004302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6859      	ldr	r1, [r3, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	461a      	mov	r2, r3
 8004298:	f000 f8b0 	bl	80043fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2150      	movs	r1, #80	; 0x50
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f907 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 80042a8:	e02b      	b.n	8004302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f000 f8ce 	bl	8004458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2160      	movs	r1, #96	; 0x60
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f8f7 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 80042c8:	e01b      	b.n	8004302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f000 f890 	bl	80043fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2140      	movs	r1, #64	; 0x40
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f8e7 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 80042e8:	e00b      	b.n	8004302 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f000 f8de 	bl	80044b6 <TIM_ITRx_SetConfig>
        break;
 80042fa:	e002      	b.n	8004302 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042fc:	bf00      	nop
 80042fe:	e000      	b.n	8004302 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004300:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004332:	d00f      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a2b      	ldr	r2, [pc, #172]	; (80043e4 <TIM_Base_SetConfig+0xc8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00b      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a2a      	ldr	r2, [pc, #168]	; (80043e8 <TIM_Base_SetConfig+0xcc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a29      	ldr	r2, [pc, #164]	; (80043ec <TIM_Base_SetConfig+0xd0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a28      	ldr	r2, [pc, #160]	; (80043f0 <TIM_Base_SetConfig+0xd4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d108      	bne.n	8004366 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436c:	d017      	beq.n	800439e <TIM_Base_SetConfig+0x82>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a1c      	ldr	r2, [pc, #112]	; (80043e4 <TIM_Base_SetConfig+0xc8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <TIM_Base_SetConfig+0x82>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <TIM_Base_SetConfig+0xcc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00f      	beq.n	800439e <TIM_Base_SetConfig+0x82>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a1a      	ldr	r2, [pc, #104]	; (80043ec <TIM_Base_SetConfig+0xd0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00b      	beq.n	800439e <TIM_Base_SetConfig+0x82>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <TIM_Base_SetConfig+0xd4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d007      	beq.n	800439e <TIM_Base_SetConfig+0x82>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a18      	ldr	r2, [pc, #96]	; (80043f4 <TIM_Base_SetConfig+0xd8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d003      	beq.n	800439e <TIM_Base_SetConfig+0x82>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a17      	ldr	r2, [pc, #92]	; (80043f8 <TIM_Base_SetConfig+0xdc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d108      	bne.n	80043b0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	615a      	str	r2, [r3, #20]
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800
 80043ec:	40000c00 	.word	0x40000c00
 80043f0:	40010800 	.word	0x40010800
 80043f4:	40010c00 	.word	0x40010c00
 80043f8:	40011000 	.word	0x40011000

080043fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 030a 	bic.w	r3, r3, #10
 8004438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	621a      	str	r2, [r3, #32]
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f023 0210 	bic.w	r2, r3, #16
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004482:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	031b      	lsls	r3, r3, #12
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f043 0307 	orr.w	r3, r3, #7
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr

080044ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b087      	sub	sp, #28
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004504:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	021a      	lsls	r2, r3, #8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	431a      	orrs	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4313      	orrs	r3, r2
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	609a      	str	r2, [r3, #8]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800453c:	2302      	movs	r3, #2
 800453e:	e046      	b.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004582:	d00e      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d009      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a12      	ldr	r2, [pc, #72]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a10      	ldr	r2, [pc, #64]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10c      	bne.n	80045bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40000800 	.word	0x40000800
 80045e0:	40010800 	.word	0x40010800

080045e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b20      	cmp	r3, #32
 8004602:	d17c      	bne.n	80046fe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_UART_Transmit+0x2c>
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e075      	b.n	8004700 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_UART_Transmit+0x3e>
 800461e:	2302      	movs	r3, #2
 8004620:	e06e      	b.n	8004700 <HAL_UART_Transmit+0x11c>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2221      	movs	r2, #33	; 0x21
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004638:	f7fd fdd4 	bl	80021e4 <HAL_GetTick>
 800463c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	88fa      	ldrh	r2, [r7, #6]
 8004648:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	d108      	bne.n	8004666 <HAL_UART_Transmit+0x82>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	e003      	b.n	800466e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004676:	e02a      	b.n	80046ce <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2200      	movs	r2, #0
 8004680:	2180      	movs	r1, #128	; 0x80
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 faa9 	bl	8004bda <UART_WaitOnFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e036      	b.n	8004700 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10b      	bne.n	80046b0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	3302      	adds	r3, #2
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	e007      	b.n	80046c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3301      	adds	r3, #1
 80046be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1cf      	bne.n	8004678 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2200      	movs	r2, #0
 80046e0:	2140      	movs	r1, #64	; 0x40
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 fa79 	bl	8004bda <UART_WaitOnFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e006      	b.n	8004700 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	e000      	b.n	8004700 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046fe:	2302      	movs	r3, #2
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3720      	adds	r7, #32
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b20      	cmp	r3, #32
 8004726:	f040 808c 	bne.w	8004842 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_UART_Receive+0x2e>
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e084      	b.n	8004844 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_UART_Receive+0x40>
 8004744:	2302      	movs	r3, #2
 8004746:	e07d      	b.n	8004844 <HAL_UART_Receive+0x13c>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2222      	movs	r2, #34	; 0x22
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004764:	f7fd fd3e 	bl	80021e4 <HAL_GetTick>
 8004768:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	d108      	bne.n	8004792 <HAL_UART_Receive+0x8a>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	e003      	b.n	800479a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80047a2:	e043      	b.n	800482c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2200      	movs	r2, #0
 80047ac:	2120      	movs	r1, #32
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fa13 	bl	8004bda <UART_WaitOnFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e042      	b.n	8004844 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10c      	bne.n	80047de <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	3302      	adds	r3, #2
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	e01f      	b.n	800481e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e6:	d007      	beq.n	80047f8 <HAL_UART_Receive+0xf0>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <HAL_UART_Receive+0xfe>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d106      	bne.n	8004806 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	e008      	b.n	8004818 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004812:	b2da      	uxtb	r2, r3
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	3301      	adds	r3, #1
 800481c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1b6      	bne.n	80047a4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800486c:	2300      	movs	r3, #0
 800486e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10d      	bne.n	800489e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_UART_IRQHandler+0x52>
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa90 	bl	8004dbc <UART_Receive_IT>
      return;
 800489c:	e17b      	b.n	8004b96 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80b1 	beq.w	8004a08 <HAL_UART_IRQHandler+0x1bc>
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <HAL_UART_IRQHandler+0x70>
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80a6 	beq.w	8004a08 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_UART_IRQHandler+0x90>
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	f043 0201 	orr.w	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_UART_IRQHandler+0xb0>
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f043 0202 	orr.w	r2, r3, #2
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_UART_IRQHandler+0xd0>
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	f043 0204 	orr.w	r2, r3, #4
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00f      	beq.n	8004946 <HAL_UART_IRQHandler+0xfa>
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <HAL_UART_IRQHandler+0xee>
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0208 	orr.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 811e 	beq.w	8004b8c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <HAL_UART_IRQHandler+0x11e>
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fa29 	bl	8004dbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <HAL_UART_IRQHandler+0x146>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d031      	beq.n	80049f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f96b 	bl	8004c6e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b40      	cmp	r3, #64	; 0x40
 80049a4:	d123      	bne.n	80049ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d013      	beq.n	80049e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	4a76      	ldr	r2, [pc, #472]	; (8004b9c <HAL_UART_IRQHandler+0x350>)
 80049c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fd fd80 	bl	80024d0 <HAL_DMA_Abort_IT>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049e0:	4610      	mov	r0, r2
 80049e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	e00e      	b.n	8004a04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8e3 	bl	8004bb2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ec:	e00a      	b.n	8004a04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f8df 	bl	8004bb2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f4:	e006      	b.n	8004a04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f8db 	bl	8004bb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a02:	e0c3      	b.n	8004b8c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	bf00      	nop
    return;
 8004a06:	e0c1      	b.n	8004b8c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	f040 80a1 	bne.w	8004b54 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 809b 	beq.w	8004b54 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8095 	beq.w	8004b54 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b40      	cmp	r3, #64	; 0x40
 8004a4c:	d14e      	bne.n	8004aec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004a58:	8a3b      	ldrh	r3, [r7, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8098 	beq.w	8004b90 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a64:	8a3a      	ldrh	r2, [r7, #16]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	f080 8092 	bcs.w	8004b90 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8a3a      	ldrh	r2, [r7, #16]
 8004a70:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d02b      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a8a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aaa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0210 	bic.w	r2, r2, #16
 8004ac8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fd fcc1 	bl	8002456 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f86d 	bl	8004bc4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004aea:	e051      	b.n	8004b90 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d047      	beq.n	8004b94 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004b04:	8a7b      	ldrh	r3, [r7, #18]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d044      	beq.n	8004b94 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b18:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0210 	bic.w	r2, r2, #16
 8004b46:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b48:	8a7b      	ldrh	r3, [r7, #18]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f839 	bl	8004bc4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b52:	e01f      	b.n	8004b94 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <HAL_UART_IRQHandler+0x324>
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f8c0 	bl	8004cee <UART_Transmit_IT>
    return;
 8004b6e:	e012      	b.n	8004b96 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <HAL_UART_IRQHandler+0x34a>
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f901 	bl	8004d8c <UART_EndTransmit_IT>
    return;
 8004b8a:	e004      	b.n	8004b96 <HAL_UART_IRQHandler+0x34a>
    return;
 8004b8c:	bf00      	nop
 8004b8e:	e002      	b.n	8004b96 <HAL_UART_IRQHandler+0x34a>
      return;
 8004b90:	bf00      	nop
 8004b92:	e000      	b.n	8004b96 <HAL_UART_IRQHandler+0x34a>
      return;
 8004b94:	bf00      	nop
  }
}
 8004b96:	3728      	adds	r7, #40	; 0x28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	08004cc7 	.word	0x08004cc7

08004ba0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	4613      	mov	r3, r2
 8004be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bea:	e02c      	b.n	8004c46 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d028      	beq.n	8004c46 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8004bfa:	f7fd faf3 	bl	80021e4 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d21d      	bcs.n	8004c46 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c18:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e00f      	b.n	8004c66 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	bf0c      	ite	eq
 8004c56:	2301      	moveq	r3, #1
 8004c58:	2300      	movne	r3, #0
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d0c3      	beq.n	8004bec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c84:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d107      	bne.n	8004cae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0210 	bic.w	r2, r2, #16
 8004cac:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr

08004cc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff ff66 	bl	8004bb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b21      	cmp	r3, #33	; 0x21
 8004d00:	d13e      	bne.n	8004d80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0a:	d114      	bne.n	8004d36 <UART_Transmit_IT+0x48>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d110      	bne.n	8004d36 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	621a      	str	r2, [r3, #32]
 8004d34:	e008      	b.n	8004d48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	1c59      	adds	r1, r3, #1
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6211      	str	r1, [r2, #32]
 8004d40:	781a      	ldrb	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	4619      	mov	r1, r3
 8004d56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10f      	bne.n	8004d7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr

08004d8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff fef7 	bl	8004ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b22      	cmp	r3, #34	; 0x22
 8004dce:	f040 8099 	bne.w	8004f04 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dda:	d117      	bne.n	8004e0c <UART_Receive_IT+0x50>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d113      	bne.n	8004e0c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	1c9a      	adds	r2, r3, #2
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	629a      	str	r2, [r3, #40]	; 0x28
 8004e0a:	e026      	b.n	8004e5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1e:	d007      	beq.n	8004e30 <UART_Receive_IT+0x74>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <UART_Receive_IT+0x82>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d106      	bne.n	8004e3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e008      	b.n	8004e50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4619      	mov	r1, r3
 8004e68:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d148      	bne.n	8004f00 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0220 	bic.w	r2, r2, #32
 8004e7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d123      	bne.n	8004ef6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0210 	bic.w	r2, r2, #16
 8004ec2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	d10a      	bne.n	8004ee8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff fe68 	bl	8004bc4 <HAL_UARTEx_RxEventCallback>
 8004ef4:	e002      	b.n	8004efc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fc fc53 	bl	80017a2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e002      	b.n	8004f06 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <__errno>:
 8004f10:	4b01      	ldr	r3, [pc, #4]	; (8004f18 <__errno+0x8>)
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20000010 	.word	0x20000010

08004f1c <__libc_init_array>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	2600      	movs	r6, #0
 8004f20:	4d0c      	ldr	r5, [pc, #48]	; (8004f54 <__libc_init_array+0x38>)
 8004f22:	4c0d      	ldr	r4, [pc, #52]	; (8004f58 <__libc_init_array+0x3c>)
 8004f24:	1b64      	subs	r4, r4, r5
 8004f26:	10a4      	asrs	r4, r4, #2
 8004f28:	42a6      	cmp	r6, r4
 8004f2a:	d109      	bne.n	8004f40 <__libc_init_array+0x24>
 8004f2c:	f002 feca 	bl	8007cc4 <_init>
 8004f30:	2600      	movs	r6, #0
 8004f32:	4d0a      	ldr	r5, [pc, #40]	; (8004f5c <__libc_init_array+0x40>)
 8004f34:	4c0a      	ldr	r4, [pc, #40]	; (8004f60 <__libc_init_array+0x44>)
 8004f36:	1b64      	subs	r4, r4, r5
 8004f38:	10a4      	asrs	r4, r4, #2
 8004f3a:	42a6      	cmp	r6, r4
 8004f3c:	d105      	bne.n	8004f4a <__libc_init_array+0x2e>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f44:	4798      	blx	r3
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7ee      	b.n	8004f28 <__libc_init_array+0xc>
 8004f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4e:	4798      	blx	r3
 8004f50:	3601      	adds	r6, #1
 8004f52:	e7f2      	b.n	8004f3a <__libc_init_array+0x1e>
 8004f54:	08008154 	.word	0x08008154
 8004f58:	08008154 	.word	0x08008154
 8004f5c:	08008154 	.word	0x08008154
 8004f60:	08008158 	.word	0x08008158

08004f64 <memset>:
 8004f64:	4603      	mov	r3, r0
 8004f66:	4402      	add	r2, r0
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d100      	bne.n	8004f6e <memset+0xa>
 8004f6c:	4770      	bx	lr
 8004f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f72:	e7f9      	b.n	8004f68 <memset+0x4>

08004f74 <__cvt>:
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f7a:	461f      	mov	r7, r3
 8004f7c:	bfbb      	ittet	lt
 8004f7e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004f82:	461f      	movlt	r7, r3
 8004f84:	2300      	movge	r3, #0
 8004f86:	232d      	movlt	r3, #45	; 0x2d
 8004f88:	b088      	sub	sp, #32
 8004f8a:	4614      	mov	r4, r2
 8004f8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004f90:	7013      	strb	r3, [r2, #0]
 8004f92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f94:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004f98:	f023 0820 	bic.w	r8, r3, #32
 8004f9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fa0:	d005      	beq.n	8004fae <__cvt+0x3a>
 8004fa2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fa6:	d100      	bne.n	8004faa <__cvt+0x36>
 8004fa8:	3501      	adds	r5, #1
 8004faa:	2302      	movs	r3, #2
 8004fac:	e000      	b.n	8004fb0 <__cvt+0x3c>
 8004fae:	2303      	movs	r3, #3
 8004fb0:	aa07      	add	r2, sp, #28
 8004fb2:	9204      	str	r2, [sp, #16]
 8004fb4:	aa06      	add	r2, sp, #24
 8004fb6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004fba:	e9cd 3500 	strd	r3, r5, [sp]
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	f000 fcf5 	bl	80059b0 <_dtoa_r>
 8004fc6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004fca:	4606      	mov	r6, r0
 8004fcc:	d102      	bne.n	8004fd4 <__cvt+0x60>
 8004fce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fd0:	07db      	lsls	r3, r3, #31
 8004fd2:	d522      	bpl.n	800501a <__cvt+0xa6>
 8004fd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fd8:	eb06 0905 	add.w	r9, r6, r5
 8004fdc:	d110      	bne.n	8005000 <__cvt+0x8c>
 8004fde:	7833      	ldrb	r3, [r6, #0]
 8004fe0:	2b30      	cmp	r3, #48	; 0x30
 8004fe2:	d10a      	bne.n	8004ffa <__cvt+0x86>
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	4620      	mov	r0, r4
 8004fea:	4639      	mov	r1, r7
 8004fec:	f7fb fcf4 	bl	80009d8 <__aeabi_dcmpeq>
 8004ff0:	b918      	cbnz	r0, 8004ffa <__cvt+0x86>
 8004ff2:	f1c5 0501 	rsb	r5, r5, #1
 8004ff6:	f8ca 5000 	str.w	r5, [sl]
 8004ffa:	f8da 3000 	ldr.w	r3, [sl]
 8004ffe:	4499      	add	r9, r3
 8005000:	2200      	movs	r2, #0
 8005002:	2300      	movs	r3, #0
 8005004:	4620      	mov	r0, r4
 8005006:	4639      	mov	r1, r7
 8005008:	f7fb fce6 	bl	80009d8 <__aeabi_dcmpeq>
 800500c:	b108      	cbz	r0, 8005012 <__cvt+0x9e>
 800500e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005012:	2230      	movs	r2, #48	; 0x30
 8005014:	9b07      	ldr	r3, [sp, #28]
 8005016:	454b      	cmp	r3, r9
 8005018:	d307      	bcc.n	800502a <__cvt+0xb6>
 800501a:	4630      	mov	r0, r6
 800501c:	9b07      	ldr	r3, [sp, #28]
 800501e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005020:	1b9b      	subs	r3, r3, r6
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	b008      	add	sp, #32
 8005026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502a:	1c59      	adds	r1, r3, #1
 800502c:	9107      	str	r1, [sp, #28]
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e7f0      	b.n	8005014 <__cvt+0xa0>

08005032 <__exponent>:
 8005032:	4603      	mov	r3, r0
 8005034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005036:	2900      	cmp	r1, #0
 8005038:	f803 2b02 	strb.w	r2, [r3], #2
 800503c:	bfb6      	itet	lt
 800503e:	222d      	movlt	r2, #45	; 0x2d
 8005040:	222b      	movge	r2, #43	; 0x2b
 8005042:	4249      	neglt	r1, r1
 8005044:	2909      	cmp	r1, #9
 8005046:	7042      	strb	r2, [r0, #1]
 8005048:	dd2b      	ble.n	80050a2 <__exponent+0x70>
 800504a:	f10d 0407 	add.w	r4, sp, #7
 800504e:	46a4      	mov	ip, r4
 8005050:	270a      	movs	r7, #10
 8005052:	fb91 f6f7 	sdiv	r6, r1, r7
 8005056:	460a      	mov	r2, r1
 8005058:	46a6      	mov	lr, r4
 800505a:	fb07 1516 	mls	r5, r7, r6, r1
 800505e:	2a63      	cmp	r2, #99	; 0x63
 8005060:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005064:	4631      	mov	r1, r6
 8005066:	f104 34ff 	add.w	r4, r4, #4294967295
 800506a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800506e:	dcf0      	bgt.n	8005052 <__exponent+0x20>
 8005070:	3130      	adds	r1, #48	; 0x30
 8005072:	f1ae 0502 	sub.w	r5, lr, #2
 8005076:	f804 1c01 	strb.w	r1, [r4, #-1]
 800507a:	4629      	mov	r1, r5
 800507c:	1c44      	adds	r4, r0, #1
 800507e:	4561      	cmp	r1, ip
 8005080:	d30a      	bcc.n	8005098 <__exponent+0x66>
 8005082:	f10d 0209 	add.w	r2, sp, #9
 8005086:	eba2 020e 	sub.w	r2, r2, lr
 800508a:	4565      	cmp	r5, ip
 800508c:	bf88      	it	hi
 800508e:	2200      	movhi	r2, #0
 8005090:	4413      	add	r3, r2
 8005092:	1a18      	subs	r0, r3, r0
 8005094:	b003      	add	sp, #12
 8005096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005098:	f811 2b01 	ldrb.w	r2, [r1], #1
 800509c:	f804 2f01 	strb.w	r2, [r4, #1]!
 80050a0:	e7ed      	b.n	800507e <__exponent+0x4c>
 80050a2:	2330      	movs	r3, #48	; 0x30
 80050a4:	3130      	adds	r1, #48	; 0x30
 80050a6:	7083      	strb	r3, [r0, #2]
 80050a8:	70c1      	strb	r1, [r0, #3]
 80050aa:	1d03      	adds	r3, r0, #4
 80050ac:	e7f1      	b.n	8005092 <__exponent+0x60>
	...

080050b0 <_printf_float>:
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	b091      	sub	sp, #68	; 0x44
 80050b6:	460c      	mov	r4, r1
 80050b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80050bc:	4616      	mov	r6, r2
 80050be:	461f      	mov	r7, r3
 80050c0:	4605      	mov	r5, r0
 80050c2:	f001 fa63 	bl	800658c <_localeconv_r>
 80050c6:	6803      	ldr	r3, [r0, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	9309      	str	r3, [sp, #36]	; 0x24
 80050cc:	f7fb f858 	bl	8000180 <strlen>
 80050d0:	2300      	movs	r3, #0
 80050d2:	930e      	str	r3, [sp, #56]	; 0x38
 80050d4:	f8d8 3000 	ldr.w	r3, [r8]
 80050d8:	900a      	str	r0, [sp, #40]	; 0x28
 80050da:	3307      	adds	r3, #7
 80050dc:	f023 0307 	bic.w	r3, r3, #7
 80050e0:	f103 0208 	add.w	r2, r3, #8
 80050e4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80050e8:	f8d4 b000 	ldr.w	fp, [r4]
 80050ec:	f8c8 2000 	str.w	r2, [r8]
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050f8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80050fc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005100:	930b      	str	r3, [sp, #44]	; 0x2c
 8005102:	f04f 32ff 	mov.w	r2, #4294967295
 8005106:	4640      	mov	r0, r8
 8005108:	4b9c      	ldr	r3, [pc, #624]	; (800537c <_printf_float+0x2cc>)
 800510a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800510c:	f7fb fc96 	bl	8000a3c <__aeabi_dcmpun>
 8005110:	bb70      	cbnz	r0, 8005170 <_printf_float+0xc0>
 8005112:	f04f 32ff 	mov.w	r2, #4294967295
 8005116:	4640      	mov	r0, r8
 8005118:	4b98      	ldr	r3, [pc, #608]	; (800537c <_printf_float+0x2cc>)
 800511a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800511c:	f7fb fc70 	bl	8000a00 <__aeabi_dcmple>
 8005120:	bb30      	cbnz	r0, 8005170 <_printf_float+0xc0>
 8005122:	2200      	movs	r2, #0
 8005124:	2300      	movs	r3, #0
 8005126:	4640      	mov	r0, r8
 8005128:	4651      	mov	r1, sl
 800512a:	f7fb fc5f 	bl	80009ec <__aeabi_dcmplt>
 800512e:	b110      	cbz	r0, 8005136 <_printf_float+0x86>
 8005130:	232d      	movs	r3, #45	; 0x2d
 8005132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005136:	4b92      	ldr	r3, [pc, #584]	; (8005380 <_printf_float+0x2d0>)
 8005138:	4892      	ldr	r0, [pc, #584]	; (8005384 <_printf_float+0x2d4>)
 800513a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800513e:	bf94      	ite	ls
 8005140:	4698      	movls	r8, r3
 8005142:	4680      	movhi	r8, r0
 8005144:	2303      	movs	r3, #3
 8005146:	f04f 0a00 	mov.w	sl, #0
 800514a:	6123      	str	r3, [r4, #16]
 800514c:	f02b 0304 	bic.w	r3, fp, #4
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	4633      	mov	r3, r6
 8005154:	4621      	mov	r1, r4
 8005156:	4628      	mov	r0, r5
 8005158:	9700      	str	r7, [sp, #0]
 800515a:	aa0f      	add	r2, sp, #60	; 0x3c
 800515c:	f000 f9d4 	bl	8005508 <_printf_common>
 8005160:	3001      	adds	r0, #1
 8005162:	f040 8090 	bne.w	8005286 <_printf_float+0x1d6>
 8005166:	f04f 30ff 	mov.w	r0, #4294967295
 800516a:	b011      	add	sp, #68	; 0x44
 800516c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005170:	4642      	mov	r2, r8
 8005172:	4653      	mov	r3, sl
 8005174:	4640      	mov	r0, r8
 8005176:	4651      	mov	r1, sl
 8005178:	f7fb fc60 	bl	8000a3c <__aeabi_dcmpun>
 800517c:	b148      	cbz	r0, 8005192 <_printf_float+0xe2>
 800517e:	f1ba 0f00 	cmp.w	sl, #0
 8005182:	bfb8      	it	lt
 8005184:	232d      	movlt	r3, #45	; 0x2d
 8005186:	4880      	ldr	r0, [pc, #512]	; (8005388 <_printf_float+0x2d8>)
 8005188:	bfb8      	it	lt
 800518a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800518e:	4b7f      	ldr	r3, [pc, #508]	; (800538c <_printf_float+0x2dc>)
 8005190:	e7d3      	b.n	800513a <_printf_float+0x8a>
 8005192:	6863      	ldr	r3, [r4, #4]
 8005194:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	d142      	bne.n	8005222 <_printf_float+0x172>
 800519c:	2306      	movs	r3, #6
 800519e:	6063      	str	r3, [r4, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	9206      	str	r2, [sp, #24]
 80051a4:	aa0e      	add	r2, sp, #56	; 0x38
 80051a6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80051aa:	aa0d      	add	r2, sp, #52	; 0x34
 80051ac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80051b0:	9203      	str	r2, [sp, #12]
 80051b2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80051b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80051ba:	6023      	str	r3, [r4, #0]
 80051bc:	6863      	ldr	r3, [r4, #4]
 80051be:	4642      	mov	r2, r8
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	4628      	mov	r0, r5
 80051c4:	4653      	mov	r3, sl
 80051c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80051c8:	f7ff fed4 	bl	8004f74 <__cvt>
 80051cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051ce:	4680      	mov	r8, r0
 80051d0:	2947      	cmp	r1, #71	; 0x47
 80051d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051d4:	d108      	bne.n	80051e8 <_printf_float+0x138>
 80051d6:	1cc8      	adds	r0, r1, #3
 80051d8:	db02      	blt.n	80051e0 <_printf_float+0x130>
 80051da:	6863      	ldr	r3, [r4, #4]
 80051dc:	4299      	cmp	r1, r3
 80051de:	dd40      	ble.n	8005262 <_printf_float+0x1b2>
 80051e0:	f1a9 0902 	sub.w	r9, r9, #2
 80051e4:	fa5f f989 	uxtb.w	r9, r9
 80051e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80051ec:	d81f      	bhi.n	800522e <_printf_float+0x17e>
 80051ee:	464a      	mov	r2, r9
 80051f0:	3901      	subs	r1, #1
 80051f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051f6:	910d      	str	r1, [sp, #52]	; 0x34
 80051f8:	f7ff ff1b 	bl	8005032 <__exponent>
 80051fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051fe:	4682      	mov	sl, r0
 8005200:	1813      	adds	r3, r2, r0
 8005202:	2a01      	cmp	r2, #1
 8005204:	6123      	str	r3, [r4, #16]
 8005206:	dc02      	bgt.n	800520e <_printf_float+0x15e>
 8005208:	6822      	ldr	r2, [r4, #0]
 800520a:	07d2      	lsls	r2, r2, #31
 800520c:	d501      	bpl.n	8005212 <_printf_float+0x162>
 800520e:	3301      	adds	r3, #1
 8005210:	6123      	str	r3, [r4, #16]
 8005212:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005216:	2b00      	cmp	r3, #0
 8005218:	d09b      	beq.n	8005152 <_printf_float+0xa2>
 800521a:	232d      	movs	r3, #45	; 0x2d
 800521c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005220:	e797      	b.n	8005152 <_printf_float+0xa2>
 8005222:	2947      	cmp	r1, #71	; 0x47
 8005224:	d1bc      	bne.n	80051a0 <_printf_float+0xf0>
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ba      	bne.n	80051a0 <_printf_float+0xf0>
 800522a:	2301      	movs	r3, #1
 800522c:	e7b7      	b.n	800519e <_printf_float+0xee>
 800522e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005232:	d118      	bne.n	8005266 <_printf_float+0x1b6>
 8005234:	2900      	cmp	r1, #0
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	dd0b      	ble.n	8005252 <_printf_float+0x1a2>
 800523a:	6121      	str	r1, [r4, #16]
 800523c:	b913      	cbnz	r3, 8005244 <_printf_float+0x194>
 800523e:	6822      	ldr	r2, [r4, #0]
 8005240:	07d0      	lsls	r0, r2, #31
 8005242:	d502      	bpl.n	800524a <_printf_float+0x19a>
 8005244:	3301      	adds	r3, #1
 8005246:	440b      	add	r3, r1
 8005248:	6123      	str	r3, [r4, #16]
 800524a:	f04f 0a00 	mov.w	sl, #0
 800524e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005250:	e7df      	b.n	8005212 <_printf_float+0x162>
 8005252:	b913      	cbnz	r3, 800525a <_printf_float+0x1aa>
 8005254:	6822      	ldr	r2, [r4, #0]
 8005256:	07d2      	lsls	r2, r2, #31
 8005258:	d501      	bpl.n	800525e <_printf_float+0x1ae>
 800525a:	3302      	adds	r3, #2
 800525c:	e7f4      	b.n	8005248 <_printf_float+0x198>
 800525e:	2301      	movs	r3, #1
 8005260:	e7f2      	b.n	8005248 <_printf_float+0x198>
 8005262:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005268:	4299      	cmp	r1, r3
 800526a:	db05      	blt.n	8005278 <_printf_float+0x1c8>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	6121      	str	r1, [r4, #16]
 8005270:	07d8      	lsls	r0, r3, #31
 8005272:	d5ea      	bpl.n	800524a <_printf_float+0x19a>
 8005274:	1c4b      	adds	r3, r1, #1
 8005276:	e7e7      	b.n	8005248 <_printf_float+0x198>
 8005278:	2900      	cmp	r1, #0
 800527a:	bfcc      	ite	gt
 800527c:	2201      	movgt	r2, #1
 800527e:	f1c1 0202 	rsble	r2, r1, #2
 8005282:	4413      	add	r3, r2
 8005284:	e7e0      	b.n	8005248 <_printf_float+0x198>
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	055a      	lsls	r2, r3, #21
 800528a:	d407      	bmi.n	800529c <_printf_float+0x1ec>
 800528c:	6923      	ldr	r3, [r4, #16]
 800528e:	4642      	mov	r2, r8
 8005290:	4631      	mov	r1, r6
 8005292:	4628      	mov	r0, r5
 8005294:	47b8      	blx	r7
 8005296:	3001      	adds	r0, #1
 8005298:	d12b      	bne.n	80052f2 <_printf_float+0x242>
 800529a:	e764      	b.n	8005166 <_printf_float+0xb6>
 800529c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052a0:	f240 80dd 	bls.w	800545e <_printf_float+0x3ae>
 80052a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052a8:	2200      	movs	r2, #0
 80052aa:	2300      	movs	r3, #0
 80052ac:	f7fb fb94 	bl	80009d8 <__aeabi_dcmpeq>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d033      	beq.n	800531c <_printf_float+0x26c>
 80052b4:	2301      	movs	r3, #1
 80052b6:	4631      	mov	r1, r6
 80052b8:	4628      	mov	r0, r5
 80052ba:	4a35      	ldr	r2, [pc, #212]	; (8005390 <_printf_float+0x2e0>)
 80052bc:	47b8      	blx	r7
 80052be:	3001      	adds	r0, #1
 80052c0:	f43f af51 	beq.w	8005166 <_printf_float+0xb6>
 80052c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052c8:	429a      	cmp	r2, r3
 80052ca:	db02      	blt.n	80052d2 <_printf_float+0x222>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	07d8      	lsls	r0, r3, #31
 80052d0:	d50f      	bpl.n	80052f2 <_printf_float+0x242>
 80052d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052d6:	4631      	mov	r1, r6
 80052d8:	4628      	mov	r0, r5
 80052da:	47b8      	blx	r7
 80052dc:	3001      	adds	r0, #1
 80052de:	f43f af42 	beq.w	8005166 <_printf_float+0xb6>
 80052e2:	f04f 0800 	mov.w	r8, #0
 80052e6:	f104 091a 	add.w	r9, r4, #26
 80052ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052ec:	3b01      	subs	r3, #1
 80052ee:	4543      	cmp	r3, r8
 80052f0:	dc09      	bgt.n	8005306 <_printf_float+0x256>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	079b      	lsls	r3, r3, #30
 80052f6:	f100 8102 	bmi.w	80054fe <_printf_float+0x44e>
 80052fa:	68e0      	ldr	r0, [r4, #12]
 80052fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052fe:	4298      	cmp	r0, r3
 8005300:	bfb8      	it	lt
 8005302:	4618      	movlt	r0, r3
 8005304:	e731      	b.n	800516a <_printf_float+0xba>
 8005306:	2301      	movs	r3, #1
 8005308:	464a      	mov	r2, r9
 800530a:	4631      	mov	r1, r6
 800530c:	4628      	mov	r0, r5
 800530e:	47b8      	blx	r7
 8005310:	3001      	adds	r0, #1
 8005312:	f43f af28 	beq.w	8005166 <_printf_float+0xb6>
 8005316:	f108 0801 	add.w	r8, r8, #1
 800531a:	e7e6      	b.n	80052ea <_printf_float+0x23a>
 800531c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800531e:	2b00      	cmp	r3, #0
 8005320:	dc38      	bgt.n	8005394 <_printf_float+0x2e4>
 8005322:	2301      	movs	r3, #1
 8005324:	4631      	mov	r1, r6
 8005326:	4628      	mov	r0, r5
 8005328:	4a19      	ldr	r2, [pc, #100]	; (8005390 <_printf_float+0x2e0>)
 800532a:	47b8      	blx	r7
 800532c:	3001      	adds	r0, #1
 800532e:	f43f af1a 	beq.w	8005166 <_printf_float+0xb6>
 8005332:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005336:	4313      	orrs	r3, r2
 8005338:	d102      	bne.n	8005340 <_printf_float+0x290>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	07d9      	lsls	r1, r3, #31
 800533e:	d5d8      	bpl.n	80052f2 <_printf_float+0x242>
 8005340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005344:	4631      	mov	r1, r6
 8005346:	4628      	mov	r0, r5
 8005348:	47b8      	blx	r7
 800534a:	3001      	adds	r0, #1
 800534c:	f43f af0b 	beq.w	8005166 <_printf_float+0xb6>
 8005350:	f04f 0900 	mov.w	r9, #0
 8005354:	f104 0a1a 	add.w	sl, r4, #26
 8005358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800535a:	425b      	negs	r3, r3
 800535c:	454b      	cmp	r3, r9
 800535e:	dc01      	bgt.n	8005364 <_printf_float+0x2b4>
 8005360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005362:	e794      	b.n	800528e <_printf_float+0x1de>
 8005364:	2301      	movs	r3, #1
 8005366:	4652      	mov	r2, sl
 8005368:	4631      	mov	r1, r6
 800536a:	4628      	mov	r0, r5
 800536c:	47b8      	blx	r7
 800536e:	3001      	adds	r0, #1
 8005370:	f43f aef9 	beq.w	8005166 <_printf_float+0xb6>
 8005374:	f109 0901 	add.w	r9, r9, #1
 8005378:	e7ee      	b.n	8005358 <_printf_float+0x2a8>
 800537a:	bf00      	nop
 800537c:	7fefffff 	.word	0x7fefffff
 8005380:	08007d6c 	.word	0x08007d6c
 8005384:	08007d70 	.word	0x08007d70
 8005388:	08007d78 	.word	0x08007d78
 800538c:	08007d74 	.word	0x08007d74
 8005390:	08007d7c 	.word	0x08007d7c
 8005394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005396:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005398:	429a      	cmp	r2, r3
 800539a:	bfa8      	it	ge
 800539c:	461a      	movge	r2, r3
 800539e:	2a00      	cmp	r2, #0
 80053a0:	4691      	mov	r9, r2
 80053a2:	dc37      	bgt.n	8005414 <_printf_float+0x364>
 80053a4:	f04f 0b00 	mov.w	fp, #0
 80053a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053ac:	f104 021a 	add.w	r2, r4, #26
 80053b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80053b4:	ebaa 0309 	sub.w	r3, sl, r9
 80053b8:	455b      	cmp	r3, fp
 80053ba:	dc33      	bgt.n	8005424 <_printf_float+0x374>
 80053bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053c0:	429a      	cmp	r2, r3
 80053c2:	db3b      	blt.n	800543c <_printf_float+0x38c>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	07da      	lsls	r2, r3, #31
 80053c8:	d438      	bmi.n	800543c <_printf_float+0x38c>
 80053ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80053ce:	eba2 030a 	sub.w	r3, r2, sl
 80053d2:	eba2 0901 	sub.w	r9, r2, r1
 80053d6:	4599      	cmp	r9, r3
 80053d8:	bfa8      	it	ge
 80053da:	4699      	movge	r9, r3
 80053dc:	f1b9 0f00 	cmp.w	r9, #0
 80053e0:	dc34      	bgt.n	800544c <_printf_float+0x39c>
 80053e2:	f04f 0800 	mov.w	r8, #0
 80053e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053ea:	f104 0a1a 	add.w	sl, r4, #26
 80053ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	eba3 0309 	sub.w	r3, r3, r9
 80053f8:	4543      	cmp	r3, r8
 80053fa:	f77f af7a 	ble.w	80052f2 <_printf_float+0x242>
 80053fe:	2301      	movs	r3, #1
 8005400:	4652      	mov	r2, sl
 8005402:	4631      	mov	r1, r6
 8005404:	4628      	mov	r0, r5
 8005406:	47b8      	blx	r7
 8005408:	3001      	adds	r0, #1
 800540a:	f43f aeac 	beq.w	8005166 <_printf_float+0xb6>
 800540e:	f108 0801 	add.w	r8, r8, #1
 8005412:	e7ec      	b.n	80053ee <_printf_float+0x33e>
 8005414:	4613      	mov	r3, r2
 8005416:	4631      	mov	r1, r6
 8005418:	4642      	mov	r2, r8
 800541a:	4628      	mov	r0, r5
 800541c:	47b8      	blx	r7
 800541e:	3001      	adds	r0, #1
 8005420:	d1c0      	bne.n	80053a4 <_printf_float+0x2f4>
 8005422:	e6a0      	b.n	8005166 <_printf_float+0xb6>
 8005424:	2301      	movs	r3, #1
 8005426:	4631      	mov	r1, r6
 8005428:	4628      	mov	r0, r5
 800542a:	920b      	str	r2, [sp, #44]	; 0x2c
 800542c:	47b8      	blx	r7
 800542e:	3001      	adds	r0, #1
 8005430:	f43f ae99 	beq.w	8005166 <_printf_float+0xb6>
 8005434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005436:	f10b 0b01 	add.w	fp, fp, #1
 800543a:	e7b9      	b.n	80053b0 <_printf_float+0x300>
 800543c:	4631      	mov	r1, r6
 800543e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005442:	4628      	mov	r0, r5
 8005444:	47b8      	blx	r7
 8005446:	3001      	adds	r0, #1
 8005448:	d1bf      	bne.n	80053ca <_printf_float+0x31a>
 800544a:	e68c      	b.n	8005166 <_printf_float+0xb6>
 800544c:	464b      	mov	r3, r9
 800544e:	4631      	mov	r1, r6
 8005450:	4628      	mov	r0, r5
 8005452:	eb08 020a 	add.w	r2, r8, sl
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	d1c2      	bne.n	80053e2 <_printf_float+0x332>
 800545c:	e683      	b.n	8005166 <_printf_float+0xb6>
 800545e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005460:	2a01      	cmp	r2, #1
 8005462:	dc01      	bgt.n	8005468 <_printf_float+0x3b8>
 8005464:	07db      	lsls	r3, r3, #31
 8005466:	d537      	bpl.n	80054d8 <_printf_float+0x428>
 8005468:	2301      	movs	r3, #1
 800546a:	4642      	mov	r2, r8
 800546c:	4631      	mov	r1, r6
 800546e:	4628      	mov	r0, r5
 8005470:	47b8      	blx	r7
 8005472:	3001      	adds	r0, #1
 8005474:	f43f ae77 	beq.w	8005166 <_printf_float+0xb6>
 8005478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	f43f ae6f 	beq.w	8005166 <_printf_float+0xb6>
 8005488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800548c:	2200      	movs	r2, #0
 800548e:	2300      	movs	r3, #0
 8005490:	f7fb faa2 	bl	80009d8 <__aeabi_dcmpeq>
 8005494:	b9d8      	cbnz	r0, 80054ce <_printf_float+0x41e>
 8005496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005498:	f108 0201 	add.w	r2, r8, #1
 800549c:	3b01      	subs	r3, #1
 800549e:	4631      	mov	r1, r6
 80054a0:	4628      	mov	r0, r5
 80054a2:	47b8      	blx	r7
 80054a4:	3001      	adds	r0, #1
 80054a6:	d10e      	bne.n	80054c6 <_printf_float+0x416>
 80054a8:	e65d      	b.n	8005166 <_printf_float+0xb6>
 80054aa:	2301      	movs	r3, #1
 80054ac:	464a      	mov	r2, r9
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	f43f ae56 	beq.w	8005166 <_printf_float+0xb6>
 80054ba:	f108 0801 	add.w	r8, r8, #1
 80054be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054c0:	3b01      	subs	r3, #1
 80054c2:	4543      	cmp	r3, r8
 80054c4:	dcf1      	bgt.n	80054aa <_printf_float+0x3fa>
 80054c6:	4653      	mov	r3, sl
 80054c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054cc:	e6e0      	b.n	8005290 <_printf_float+0x1e0>
 80054ce:	f04f 0800 	mov.w	r8, #0
 80054d2:	f104 091a 	add.w	r9, r4, #26
 80054d6:	e7f2      	b.n	80054be <_printf_float+0x40e>
 80054d8:	2301      	movs	r3, #1
 80054da:	4642      	mov	r2, r8
 80054dc:	e7df      	b.n	800549e <_printf_float+0x3ee>
 80054de:	2301      	movs	r3, #1
 80054e0:	464a      	mov	r2, r9
 80054e2:	4631      	mov	r1, r6
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	f43f ae3c 	beq.w	8005166 <_printf_float+0xb6>
 80054ee:	f108 0801 	add.w	r8, r8, #1
 80054f2:	68e3      	ldr	r3, [r4, #12]
 80054f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80054f6:	1a5b      	subs	r3, r3, r1
 80054f8:	4543      	cmp	r3, r8
 80054fa:	dcf0      	bgt.n	80054de <_printf_float+0x42e>
 80054fc:	e6fd      	b.n	80052fa <_printf_float+0x24a>
 80054fe:	f04f 0800 	mov.w	r8, #0
 8005502:	f104 0919 	add.w	r9, r4, #25
 8005506:	e7f4      	b.n	80054f2 <_printf_float+0x442>

08005508 <_printf_common>:
 8005508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800550c:	4616      	mov	r6, r2
 800550e:	4699      	mov	r9, r3
 8005510:	688a      	ldr	r2, [r1, #8]
 8005512:	690b      	ldr	r3, [r1, #16]
 8005514:	4607      	mov	r7, r0
 8005516:	4293      	cmp	r3, r2
 8005518:	bfb8      	it	lt
 800551a:	4613      	movlt	r3, r2
 800551c:	6033      	str	r3, [r6, #0]
 800551e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005522:	460c      	mov	r4, r1
 8005524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005528:	b10a      	cbz	r2, 800552e <_printf_common+0x26>
 800552a:	3301      	adds	r3, #1
 800552c:	6033      	str	r3, [r6, #0]
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	0699      	lsls	r1, r3, #26
 8005532:	bf42      	ittt	mi
 8005534:	6833      	ldrmi	r3, [r6, #0]
 8005536:	3302      	addmi	r3, #2
 8005538:	6033      	strmi	r3, [r6, #0]
 800553a:	6825      	ldr	r5, [r4, #0]
 800553c:	f015 0506 	ands.w	r5, r5, #6
 8005540:	d106      	bne.n	8005550 <_printf_common+0x48>
 8005542:	f104 0a19 	add.w	sl, r4, #25
 8005546:	68e3      	ldr	r3, [r4, #12]
 8005548:	6832      	ldr	r2, [r6, #0]
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	42ab      	cmp	r3, r5
 800554e:	dc28      	bgt.n	80055a2 <_printf_common+0x9a>
 8005550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005554:	1e13      	subs	r3, r2, #0
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	bf18      	it	ne
 800555a:	2301      	movne	r3, #1
 800555c:	0692      	lsls	r2, r2, #26
 800555e:	d42d      	bmi.n	80055bc <_printf_common+0xb4>
 8005560:	4649      	mov	r1, r9
 8005562:	4638      	mov	r0, r7
 8005564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005568:	47c0      	blx	r8
 800556a:	3001      	adds	r0, #1
 800556c:	d020      	beq.n	80055b0 <_printf_common+0xa8>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	68e5      	ldr	r5, [r4, #12]
 8005572:	f003 0306 	and.w	r3, r3, #6
 8005576:	2b04      	cmp	r3, #4
 8005578:	bf18      	it	ne
 800557a:	2500      	movne	r5, #0
 800557c:	6832      	ldr	r2, [r6, #0]
 800557e:	f04f 0600 	mov.w	r6, #0
 8005582:	68a3      	ldr	r3, [r4, #8]
 8005584:	bf08      	it	eq
 8005586:	1aad      	subeq	r5, r5, r2
 8005588:	6922      	ldr	r2, [r4, #16]
 800558a:	bf08      	it	eq
 800558c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005590:	4293      	cmp	r3, r2
 8005592:	bfc4      	itt	gt
 8005594:	1a9b      	subgt	r3, r3, r2
 8005596:	18ed      	addgt	r5, r5, r3
 8005598:	341a      	adds	r4, #26
 800559a:	42b5      	cmp	r5, r6
 800559c:	d11a      	bne.n	80055d4 <_printf_common+0xcc>
 800559e:	2000      	movs	r0, #0
 80055a0:	e008      	b.n	80055b4 <_printf_common+0xac>
 80055a2:	2301      	movs	r3, #1
 80055a4:	4652      	mov	r2, sl
 80055a6:	4649      	mov	r1, r9
 80055a8:	4638      	mov	r0, r7
 80055aa:	47c0      	blx	r8
 80055ac:	3001      	adds	r0, #1
 80055ae:	d103      	bne.n	80055b8 <_printf_common+0xb0>
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b8:	3501      	adds	r5, #1
 80055ba:	e7c4      	b.n	8005546 <_printf_common+0x3e>
 80055bc:	2030      	movs	r0, #48	; 0x30
 80055be:	18e1      	adds	r1, r4, r3
 80055c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055ca:	4422      	add	r2, r4
 80055cc:	3302      	adds	r3, #2
 80055ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055d2:	e7c5      	b.n	8005560 <_printf_common+0x58>
 80055d4:	2301      	movs	r3, #1
 80055d6:	4622      	mov	r2, r4
 80055d8:	4649      	mov	r1, r9
 80055da:	4638      	mov	r0, r7
 80055dc:	47c0      	blx	r8
 80055de:	3001      	adds	r0, #1
 80055e0:	d0e6      	beq.n	80055b0 <_printf_common+0xa8>
 80055e2:	3601      	adds	r6, #1
 80055e4:	e7d9      	b.n	800559a <_printf_common+0x92>
	...

080055e8 <_printf_i>:
 80055e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ec:	460c      	mov	r4, r1
 80055ee:	7e27      	ldrb	r7, [r4, #24]
 80055f0:	4691      	mov	r9, r2
 80055f2:	2f78      	cmp	r7, #120	; 0x78
 80055f4:	4680      	mov	r8, r0
 80055f6:	469a      	mov	sl, r3
 80055f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80055fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055fe:	d807      	bhi.n	8005610 <_printf_i+0x28>
 8005600:	2f62      	cmp	r7, #98	; 0x62
 8005602:	d80a      	bhi.n	800561a <_printf_i+0x32>
 8005604:	2f00      	cmp	r7, #0
 8005606:	f000 80d9 	beq.w	80057bc <_printf_i+0x1d4>
 800560a:	2f58      	cmp	r7, #88	; 0x58
 800560c:	f000 80a4 	beq.w	8005758 <_printf_i+0x170>
 8005610:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005618:	e03a      	b.n	8005690 <_printf_i+0xa8>
 800561a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800561e:	2b15      	cmp	r3, #21
 8005620:	d8f6      	bhi.n	8005610 <_printf_i+0x28>
 8005622:	a001      	add	r0, pc, #4	; (adr r0, 8005628 <_printf_i+0x40>)
 8005624:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005628:	08005681 	.word	0x08005681
 800562c:	08005695 	.word	0x08005695
 8005630:	08005611 	.word	0x08005611
 8005634:	08005611 	.word	0x08005611
 8005638:	08005611 	.word	0x08005611
 800563c:	08005611 	.word	0x08005611
 8005640:	08005695 	.word	0x08005695
 8005644:	08005611 	.word	0x08005611
 8005648:	08005611 	.word	0x08005611
 800564c:	08005611 	.word	0x08005611
 8005650:	08005611 	.word	0x08005611
 8005654:	080057a3 	.word	0x080057a3
 8005658:	080056c5 	.word	0x080056c5
 800565c:	08005785 	.word	0x08005785
 8005660:	08005611 	.word	0x08005611
 8005664:	08005611 	.word	0x08005611
 8005668:	080057c5 	.word	0x080057c5
 800566c:	08005611 	.word	0x08005611
 8005670:	080056c5 	.word	0x080056c5
 8005674:	08005611 	.word	0x08005611
 8005678:	08005611 	.word	0x08005611
 800567c:	0800578d 	.word	0x0800578d
 8005680:	680b      	ldr	r3, [r1, #0]
 8005682:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005686:	1d1a      	adds	r2, r3, #4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	600a      	str	r2, [r1, #0]
 800568c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005690:	2301      	movs	r3, #1
 8005692:	e0a4      	b.n	80057de <_printf_i+0x1f6>
 8005694:	6825      	ldr	r5, [r4, #0]
 8005696:	6808      	ldr	r0, [r1, #0]
 8005698:	062e      	lsls	r6, r5, #24
 800569a:	f100 0304 	add.w	r3, r0, #4
 800569e:	d50a      	bpl.n	80056b6 <_printf_i+0xce>
 80056a0:	6805      	ldr	r5, [r0, #0]
 80056a2:	600b      	str	r3, [r1, #0]
 80056a4:	2d00      	cmp	r5, #0
 80056a6:	da03      	bge.n	80056b0 <_printf_i+0xc8>
 80056a8:	232d      	movs	r3, #45	; 0x2d
 80056aa:	426d      	negs	r5, r5
 80056ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b0:	230a      	movs	r3, #10
 80056b2:	485e      	ldr	r0, [pc, #376]	; (800582c <_printf_i+0x244>)
 80056b4:	e019      	b.n	80056ea <_printf_i+0x102>
 80056b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056ba:	6805      	ldr	r5, [r0, #0]
 80056bc:	600b      	str	r3, [r1, #0]
 80056be:	bf18      	it	ne
 80056c0:	b22d      	sxthne	r5, r5
 80056c2:	e7ef      	b.n	80056a4 <_printf_i+0xbc>
 80056c4:	680b      	ldr	r3, [r1, #0]
 80056c6:	6825      	ldr	r5, [r4, #0]
 80056c8:	1d18      	adds	r0, r3, #4
 80056ca:	6008      	str	r0, [r1, #0]
 80056cc:	0628      	lsls	r0, r5, #24
 80056ce:	d501      	bpl.n	80056d4 <_printf_i+0xec>
 80056d0:	681d      	ldr	r5, [r3, #0]
 80056d2:	e002      	b.n	80056da <_printf_i+0xf2>
 80056d4:	0669      	lsls	r1, r5, #25
 80056d6:	d5fb      	bpl.n	80056d0 <_printf_i+0xe8>
 80056d8:	881d      	ldrh	r5, [r3, #0]
 80056da:	2f6f      	cmp	r7, #111	; 0x6f
 80056dc:	bf0c      	ite	eq
 80056de:	2308      	moveq	r3, #8
 80056e0:	230a      	movne	r3, #10
 80056e2:	4852      	ldr	r0, [pc, #328]	; (800582c <_printf_i+0x244>)
 80056e4:	2100      	movs	r1, #0
 80056e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056ea:	6866      	ldr	r6, [r4, #4]
 80056ec:	2e00      	cmp	r6, #0
 80056ee:	bfa8      	it	ge
 80056f0:	6821      	ldrge	r1, [r4, #0]
 80056f2:	60a6      	str	r6, [r4, #8]
 80056f4:	bfa4      	itt	ge
 80056f6:	f021 0104 	bicge.w	r1, r1, #4
 80056fa:	6021      	strge	r1, [r4, #0]
 80056fc:	b90d      	cbnz	r5, 8005702 <_printf_i+0x11a>
 80056fe:	2e00      	cmp	r6, #0
 8005700:	d04d      	beq.n	800579e <_printf_i+0x1b6>
 8005702:	4616      	mov	r6, r2
 8005704:	fbb5 f1f3 	udiv	r1, r5, r3
 8005708:	fb03 5711 	mls	r7, r3, r1, r5
 800570c:	5dc7      	ldrb	r7, [r0, r7]
 800570e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005712:	462f      	mov	r7, r5
 8005714:	42bb      	cmp	r3, r7
 8005716:	460d      	mov	r5, r1
 8005718:	d9f4      	bls.n	8005704 <_printf_i+0x11c>
 800571a:	2b08      	cmp	r3, #8
 800571c:	d10b      	bne.n	8005736 <_printf_i+0x14e>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	07df      	lsls	r7, r3, #31
 8005722:	d508      	bpl.n	8005736 <_printf_i+0x14e>
 8005724:	6923      	ldr	r3, [r4, #16]
 8005726:	6861      	ldr	r1, [r4, #4]
 8005728:	4299      	cmp	r1, r3
 800572a:	bfde      	ittt	le
 800572c:	2330      	movle	r3, #48	; 0x30
 800572e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005732:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005736:	1b92      	subs	r2, r2, r6
 8005738:	6122      	str	r2, [r4, #16]
 800573a:	464b      	mov	r3, r9
 800573c:	4621      	mov	r1, r4
 800573e:	4640      	mov	r0, r8
 8005740:	f8cd a000 	str.w	sl, [sp]
 8005744:	aa03      	add	r2, sp, #12
 8005746:	f7ff fedf 	bl	8005508 <_printf_common>
 800574a:	3001      	adds	r0, #1
 800574c:	d14c      	bne.n	80057e8 <_printf_i+0x200>
 800574e:	f04f 30ff 	mov.w	r0, #4294967295
 8005752:	b004      	add	sp, #16
 8005754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005758:	4834      	ldr	r0, [pc, #208]	; (800582c <_printf_i+0x244>)
 800575a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800575e:	680e      	ldr	r6, [r1, #0]
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	f856 5b04 	ldr.w	r5, [r6], #4
 8005766:	061f      	lsls	r7, r3, #24
 8005768:	600e      	str	r6, [r1, #0]
 800576a:	d514      	bpl.n	8005796 <_printf_i+0x1ae>
 800576c:	07d9      	lsls	r1, r3, #31
 800576e:	bf44      	itt	mi
 8005770:	f043 0320 	orrmi.w	r3, r3, #32
 8005774:	6023      	strmi	r3, [r4, #0]
 8005776:	b91d      	cbnz	r5, 8005780 <_printf_i+0x198>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	f023 0320 	bic.w	r3, r3, #32
 800577e:	6023      	str	r3, [r4, #0]
 8005780:	2310      	movs	r3, #16
 8005782:	e7af      	b.n	80056e4 <_printf_i+0xfc>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	f043 0320 	orr.w	r3, r3, #32
 800578a:	6023      	str	r3, [r4, #0]
 800578c:	2378      	movs	r3, #120	; 0x78
 800578e:	4828      	ldr	r0, [pc, #160]	; (8005830 <_printf_i+0x248>)
 8005790:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005794:	e7e3      	b.n	800575e <_printf_i+0x176>
 8005796:	065e      	lsls	r6, r3, #25
 8005798:	bf48      	it	mi
 800579a:	b2ad      	uxthmi	r5, r5
 800579c:	e7e6      	b.n	800576c <_printf_i+0x184>
 800579e:	4616      	mov	r6, r2
 80057a0:	e7bb      	b.n	800571a <_printf_i+0x132>
 80057a2:	680b      	ldr	r3, [r1, #0]
 80057a4:	6826      	ldr	r6, [r4, #0]
 80057a6:	1d1d      	adds	r5, r3, #4
 80057a8:	6960      	ldr	r0, [r4, #20]
 80057aa:	600d      	str	r5, [r1, #0]
 80057ac:	0635      	lsls	r5, r6, #24
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	d501      	bpl.n	80057b6 <_printf_i+0x1ce>
 80057b2:	6018      	str	r0, [r3, #0]
 80057b4:	e002      	b.n	80057bc <_printf_i+0x1d4>
 80057b6:	0671      	lsls	r1, r6, #25
 80057b8:	d5fb      	bpl.n	80057b2 <_printf_i+0x1ca>
 80057ba:	8018      	strh	r0, [r3, #0]
 80057bc:	2300      	movs	r3, #0
 80057be:	4616      	mov	r6, r2
 80057c0:	6123      	str	r3, [r4, #16]
 80057c2:	e7ba      	b.n	800573a <_printf_i+0x152>
 80057c4:	680b      	ldr	r3, [r1, #0]
 80057c6:	1d1a      	adds	r2, r3, #4
 80057c8:	600a      	str	r2, [r1, #0]
 80057ca:	681e      	ldr	r6, [r3, #0]
 80057cc:	2100      	movs	r1, #0
 80057ce:	4630      	mov	r0, r6
 80057d0:	6862      	ldr	r2, [r4, #4]
 80057d2:	f000 fee7 	bl	80065a4 <memchr>
 80057d6:	b108      	cbz	r0, 80057dc <_printf_i+0x1f4>
 80057d8:	1b80      	subs	r0, r0, r6
 80057da:	6060      	str	r0, [r4, #4]
 80057dc:	6863      	ldr	r3, [r4, #4]
 80057de:	6123      	str	r3, [r4, #16]
 80057e0:	2300      	movs	r3, #0
 80057e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e6:	e7a8      	b.n	800573a <_printf_i+0x152>
 80057e8:	4632      	mov	r2, r6
 80057ea:	4649      	mov	r1, r9
 80057ec:	4640      	mov	r0, r8
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	47d0      	blx	sl
 80057f2:	3001      	adds	r0, #1
 80057f4:	d0ab      	beq.n	800574e <_printf_i+0x166>
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	079b      	lsls	r3, r3, #30
 80057fa:	d413      	bmi.n	8005824 <_printf_i+0x23c>
 80057fc:	68e0      	ldr	r0, [r4, #12]
 80057fe:	9b03      	ldr	r3, [sp, #12]
 8005800:	4298      	cmp	r0, r3
 8005802:	bfb8      	it	lt
 8005804:	4618      	movlt	r0, r3
 8005806:	e7a4      	b.n	8005752 <_printf_i+0x16a>
 8005808:	2301      	movs	r3, #1
 800580a:	4632      	mov	r2, r6
 800580c:	4649      	mov	r1, r9
 800580e:	4640      	mov	r0, r8
 8005810:	47d0      	blx	sl
 8005812:	3001      	adds	r0, #1
 8005814:	d09b      	beq.n	800574e <_printf_i+0x166>
 8005816:	3501      	adds	r5, #1
 8005818:	68e3      	ldr	r3, [r4, #12]
 800581a:	9903      	ldr	r1, [sp, #12]
 800581c:	1a5b      	subs	r3, r3, r1
 800581e:	42ab      	cmp	r3, r5
 8005820:	dcf2      	bgt.n	8005808 <_printf_i+0x220>
 8005822:	e7eb      	b.n	80057fc <_printf_i+0x214>
 8005824:	2500      	movs	r5, #0
 8005826:	f104 0619 	add.w	r6, r4, #25
 800582a:	e7f5      	b.n	8005818 <_printf_i+0x230>
 800582c:	08007d7e 	.word	0x08007d7e
 8005830:	08007d8f 	.word	0x08007d8f

08005834 <siprintf>:
 8005834:	b40e      	push	{r1, r2, r3}
 8005836:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800583a:	b500      	push	{lr}
 800583c:	b09c      	sub	sp, #112	; 0x70
 800583e:	ab1d      	add	r3, sp, #116	; 0x74
 8005840:	9002      	str	r0, [sp, #8]
 8005842:	9006      	str	r0, [sp, #24]
 8005844:	9107      	str	r1, [sp, #28]
 8005846:	9104      	str	r1, [sp, #16]
 8005848:	4808      	ldr	r0, [pc, #32]	; (800586c <siprintf+0x38>)
 800584a:	4909      	ldr	r1, [pc, #36]	; (8005870 <siprintf+0x3c>)
 800584c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005850:	9105      	str	r1, [sp, #20]
 8005852:	6800      	ldr	r0, [r0, #0]
 8005854:	a902      	add	r1, sp, #8
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	f001 fb52 	bl	8006f00 <_svfiprintf_r>
 800585c:	2200      	movs	r2, #0
 800585e:	9b02      	ldr	r3, [sp, #8]
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	b01c      	add	sp, #112	; 0x70
 8005864:	f85d eb04 	ldr.w	lr, [sp], #4
 8005868:	b003      	add	sp, #12
 800586a:	4770      	bx	lr
 800586c:	20000010 	.word	0x20000010
 8005870:	ffff0208 	.word	0xffff0208

08005874 <strcat>:
 8005874:	4602      	mov	r2, r0
 8005876:	b510      	push	{r4, lr}
 8005878:	7814      	ldrb	r4, [r2, #0]
 800587a:	4613      	mov	r3, r2
 800587c:	3201      	adds	r2, #1
 800587e:	2c00      	cmp	r4, #0
 8005880:	d1fa      	bne.n	8005878 <strcat+0x4>
 8005882:	3b01      	subs	r3, #1
 8005884:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005888:	f803 2f01 	strb.w	r2, [r3, #1]!
 800588c:	2a00      	cmp	r2, #0
 800588e:	d1f9      	bne.n	8005884 <strcat+0x10>
 8005890:	bd10      	pop	{r4, pc}

08005892 <quorem>:
 8005892:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005896:	6903      	ldr	r3, [r0, #16]
 8005898:	690c      	ldr	r4, [r1, #16]
 800589a:	4607      	mov	r7, r0
 800589c:	42a3      	cmp	r3, r4
 800589e:	f2c0 8083 	blt.w	80059a8 <quorem+0x116>
 80058a2:	3c01      	subs	r4, #1
 80058a4:	f100 0514 	add.w	r5, r0, #20
 80058a8:	f101 0814 	add.w	r8, r1, #20
 80058ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058ba:	3301      	adds	r3, #1
 80058bc:	429a      	cmp	r2, r3
 80058be:	fbb2 f6f3 	udiv	r6, r2, r3
 80058c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80058c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80058ca:	d332      	bcc.n	8005932 <quorem+0xa0>
 80058cc:	f04f 0e00 	mov.w	lr, #0
 80058d0:	4640      	mov	r0, r8
 80058d2:	46ac      	mov	ip, r5
 80058d4:	46f2      	mov	sl, lr
 80058d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80058da:	b293      	uxth	r3, r2
 80058dc:	fb06 e303 	mla	r3, r6, r3, lr
 80058e0:	0c12      	lsrs	r2, r2, #16
 80058e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80058e6:	fb06 e202 	mla	r2, r6, r2, lr
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	ebaa 0303 	sub.w	r3, sl, r3
 80058f0:	f8dc a000 	ldr.w	sl, [ip]
 80058f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058f8:	fa1f fa8a 	uxth.w	sl, sl
 80058fc:	4453      	add	r3, sl
 80058fe:	fa1f fa82 	uxth.w	sl, r2
 8005902:	f8dc 2000 	ldr.w	r2, [ip]
 8005906:	4581      	cmp	r9, r0
 8005908:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800590c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005910:	b29b      	uxth	r3, r3
 8005912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005916:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800591a:	f84c 3b04 	str.w	r3, [ip], #4
 800591e:	d2da      	bcs.n	80058d6 <quorem+0x44>
 8005920:	f855 300b 	ldr.w	r3, [r5, fp]
 8005924:	b92b      	cbnz	r3, 8005932 <quorem+0xa0>
 8005926:	9b01      	ldr	r3, [sp, #4]
 8005928:	3b04      	subs	r3, #4
 800592a:	429d      	cmp	r5, r3
 800592c:	461a      	mov	r2, r3
 800592e:	d32f      	bcc.n	8005990 <quorem+0xfe>
 8005930:	613c      	str	r4, [r7, #16]
 8005932:	4638      	mov	r0, r7
 8005934:	f001 f8cc 	bl	8006ad0 <__mcmp>
 8005938:	2800      	cmp	r0, #0
 800593a:	db25      	blt.n	8005988 <quorem+0xf6>
 800593c:	4628      	mov	r0, r5
 800593e:	f04f 0c00 	mov.w	ip, #0
 8005942:	3601      	adds	r6, #1
 8005944:	f858 1b04 	ldr.w	r1, [r8], #4
 8005948:	f8d0 e000 	ldr.w	lr, [r0]
 800594c:	b28b      	uxth	r3, r1
 800594e:	ebac 0303 	sub.w	r3, ip, r3
 8005952:	fa1f f28e 	uxth.w	r2, lr
 8005956:	4413      	add	r3, r2
 8005958:	0c0a      	lsrs	r2, r1, #16
 800595a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800595e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005962:	b29b      	uxth	r3, r3
 8005964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005968:	45c1      	cmp	r9, r8
 800596a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800596e:	f840 3b04 	str.w	r3, [r0], #4
 8005972:	d2e7      	bcs.n	8005944 <quorem+0xb2>
 8005974:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005978:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800597c:	b922      	cbnz	r2, 8005988 <quorem+0xf6>
 800597e:	3b04      	subs	r3, #4
 8005980:	429d      	cmp	r5, r3
 8005982:	461a      	mov	r2, r3
 8005984:	d30a      	bcc.n	800599c <quorem+0x10a>
 8005986:	613c      	str	r4, [r7, #16]
 8005988:	4630      	mov	r0, r6
 800598a:	b003      	add	sp, #12
 800598c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	3b04      	subs	r3, #4
 8005994:	2a00      	cmp	r2, #0
 8005996:	d1cb      	bne.n	8005930 <quorem+0x9e>
 8005998:	3c01      	subs	r4, #1
 800599a:	e7c6      	b.n	800592a <quorem+0x98>
 800599c:	6812      	ldr	r2, [r2, #0]
 800599e:	3b04      	subs	r3, #4
 80059a0:	2a00      	cmp	r2, #0
 80059a2:	d1f0      	bne.n	8005986 <quorem+0xf4>
 80059a4:	3c01      	subs	r4, #1
 80059a6:	e7eb      	b.n	8005980 <quorem+0xee>
 80059a8:	2000      	movs	r0, #0
 80059aa:	e7ee      	b.n	800598a <quorem+0xf8>
 80059ac:	0000      	movs	r0, r0
	...

080059b0 <_dtoa_r>:
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	4616      	mov	r6, r2
 80059b6:	461f      	mov	r7, r3
 80059b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80059ba:	b099      	sub	sp, #100	; 0x64
 80059bc:	4605      	mov	r5, r0
 80059be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80059c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80059c6:	b974      	cbnz	r4, 80059e6 <_dtoa_r+0x36>
 80059c8:	2010      	movs	r0, #16
 80059ca:	f000 fde3 	bl	8006594 <malloc>
 80059ce:	4602      	mov	r2, r0
 80059d0:	6268      	str	r0, [r5, #36]	; 0x24
 80059d2:	b920      	cbnz	r0, 80059de <_dtoa_r+0x2e>
 80059d4:	21ea      	movs	r1, #234	; 0xea
 80059d6:	4bae      	ldr	r3, [pc, #696]	; (8005c90 <_dtoa_r+0x2e0>)
 80059d8:	48ae      	ldr	r0, [pc, #696]	; (8005c94 <_dtoa_r+0x2e4>)
 80059da:	f001 fba1 	bl	8007120 <__assert_func>
 80059de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059e2:	6004      	str	r4, [r0, #0]
 80059e4:	60c4      	str	r4, [r0, #12]
 80059e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059e8:	6819      	ldr	r1, [r3, #0]
 80059ea:	b151      	cbz	r1, 8005a02 <_dtoa_r+0x52>
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	2301      	movs	r3, #1
 80059f0:	4093      	lsls	r3, r2
 80059f2:	604a      	str	r2, [r1, #4]
 80059f4:	608b      	str	r3, [r1, #8]
 80059f6:	4628      	mov	r0, r5
 80059f8:	f000 fe30 	bl	800665c <_Bfree>
 80059fc:	2200      	movs	r2, #0
 80059fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	1e3b      	subs	r3, r7, #0
 8005a04:	bfaf      	iteee	ge
 8005a06:	2300      	movge	r3, #0
 8005a08:	2201      	movlt	r2, #1
 8005a0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a0e:	9305      	strlt	r3, [sp, #20]
 8005a10:	bfa8      	it	ge
 8005a12:	f8c8 3000 	strge.w	r3, [r8]
 8005a16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005a1a:	4b9f      	ldr	r3, [pc, #636]	; (8005c98 <_dtoa_r+0x2e8>)
 8005a1c:	bfb8      	it	lt
 8005a1e:	f8c8 2000 	strlt.w	r2, [r8]
 8005a22:	ea33 0309 	bics.w	r3, r3, r9
 8005a26:	d119      	bne.n	8005a5c <_dtoa_r+0xac>
 8005a28:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a34:	4333      	orrs	r3, r6
 8005a36:	f000 8580 	beq.w	800653a <_dtoa_r+0xb8a>
 8005a3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a3c:	b953      	cbnz	r3, 8005a54 <_dtoa_r+0xa4>
 8005a3e:	4b97      	ldr	r3, [pc, #604]	; (8005c9c <_dtoa_r+0x2ec>)
 8005a40:	e022      	b.n	8005a88 <_dtoa_r+0xd8>
 8005a42:	4b97      	ldr	r3, [pc, #604]	; (8005ca0 <_dtoa_r+0x2f0>)
 8005a44:	9308      	str	r3, [sp, #32]
 8005a46:	3308      	adds	r3, #8
 8005a48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	9808      	ldr	r0, [sp, #32]
 8005a4e:	b019      	add	sp, #100	; 0x64
 8005a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a54:	4b91      	ldr	r3, [pc, #580]	; (8005c9c <_dtoa_r+0x2ec>)
 8005a56:	9308      	str	r3, [sp, #32]
 8005a58:	3303      	adds	r3, #3
 8005a5a:	e7f5      	b.n	8005a48 <_dtoa_r+0x98>
 8005a5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005a64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f7fa ffb4 	bl	80009d8 <__aeabi_dcmpeq>
 8005a70:	4680      	mov	r8, r0
 8005a72:	b158      	cbz	r0, 8005a8c <_dtoa_r+0xdc>
 8005a74:	2301      	movs	r3, #1
 8005a76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 8559 	beq.w	8006534 <_dtoa_r+0xb84>
 8005a82:	4888      	ldr	r0, [pc, #544]	; (8005ca4 <_dtoa_r+0x2f4>)
 8005a84:	6018      	str	r0, [r3, #0]
 8005a86:	1e43      	subs	r3, r0, #1
 8005a88:	9308      	str	r3, [sp, #32]
 8005a8a:	e7df      	b.n	8005a4c <_dtoa_r+0x9c>
 8005a8c:	ab16      	add	r3, sp, #88	; 0x58
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	ab17      	add	r3, sp, #92	; 0x5c
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	4628      	mov	r0, r5
 8005a96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a9a:	f001 f8c5 	bl	8006c28 <__d2b>
 8005a9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005aa2:	4682      	mov	sl, r0
 8005aa4:	2c00      	cmp	r4, #0
 8005aa6:	d07e      	beq.n	8005ba6 <_dtoa_r+0x1f6>
 8005aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005ab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ab6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005aba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005abe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	4b78      	ldr	r3, [pc, #480]	; (8005ca8 <_dtoa_r+0x2f8>)
 8005ac6:	f7fa fb67 	bl	8000198 <__aeabi_dsub>
 8005aca:	a36b      	add	r3, pc, #428	; (adr r3, 8005c78 <_dtoa_r+0x2c8>)
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	f7fa fd1a 	bl	8000508 <__aeabi_dmul>
 8005ad4:	a36a      	add	r3, pc, #424	; (adr r3, 8005c80 <_dtoa_r+0x2d0>)
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	f7fa fb5f 	bl	800019c <__adddf3>
 8005ade:	4606      	mov	r6, r0
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	460f      	mov	r7, r1
 8005ae4:	f7fa fca6 	bl	8000434 <__aeabi_i2d>
 8005ae8:	a367      	add	r3, pc, #412	; (adr r3, 8005c88 <_dtoa_r+0x2d8>)
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f7fa fd0b 	bl	8000508 <__aeabi_dmul>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4630      	mov	r0, r6
 8005af8:	4639      	mov	r1, r7
 8005afa:	f7fa fb4f 	bl	800019c <__adddf3>
 8005afe:	4606      	mov	r6, r0
 8005b00:	460f      	mov	r7, r1
 8005b02:	f7fa ffb1 	bl	8000a68 <__aeabi_d2iz>
 8005b06:	2200      	movs	r2, #0
 8005b08:	4681      	mov	r9, r0
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	4639      	mov	r1, r7
 8005b10:	f7fa ff6c 	bl	80009ec <__aeabi_dcmplt>
 8005b14:	b148      	cbz	r0, 8005b2a <_dtoa_r+0x17a>
 8005b16:	4648      	mov	r0, r9
 8005b18:	f7fa fc8c 	bl	8000434 <__aeabi_i2d>
 8005b1c:	4632      	mov	r2, r6
 8005b1e:	463b      	mov	r3, r7
 8005b20:	f7fa ff5a 	bl	80009d8 <__aeabi_dcmpeq>
 8005b24:	b908      	cbnz	r0, 8005b2a <_dtoa_r+0x17a>
 8005b26:	f109 39ff 	add.w	r9, r9, #4294967295
 8005b2a:	f1b9 0f16 	cmp.w	r9, #22
 8005b2e:	d857      	bhi.n	8005be0 <_dtoa_r+0x230>
 8005b30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b34:	4b5d      	ldr	r3, [pc, #372]	; (8005cac <_dtoa_r+0x2fc>)
 8005b36:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa ff55 	bl	80009ec <__aeabi_dcmplt>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d04e      	beq.n	8005be4 <_dtoa_r+0x234>
 8005b46:	2300      	movs	r3, #0
 8005b48:	f109 39ff 	add.w	r9, r9, #4294967295
 8005b4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b50:	1b1c      	subs	r4, r3, r4
 8005b52:	1e63      	subs	r3, r4, #1
 8005b54:	9309      	str	r3, [sp, #36]	; 0x24
 8005b56:	bf49      	itett	mi
 8005b58:	f1c4 0301 	rsbmi	r3, r4, #1
 8005b5c:	2300      	movpl	r3, #0
 8005b5e:	9306      	strmi	r3, [sp, #24]
 8005b60:	2300      	movmi	r3, #0
 8005b62:	bf54      	ite	pl
 8005b64:	9306      	strpl	r3, [sp, #24]
 8005b66:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005b68:	f1b9 0f00 	cmp.w	r9, #0
 8005b6c:	db3c      	blt.n	8005be8 <_dtoa_r+0x238>
 8005b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b70:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005b74:	444b      	add	r3, r9
 8005b76:	9309      	str	r3, [sp, #36]	; 0x24
 8005b78:	2300      	movs	r3, #0
 8005b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8005b7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b7e:	2b09      	cmp	r3, #9
 8005b80:	d86c      	bhi.n	8005c5c <_dtoa_r+0x2ac>
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	bfc4      	itt	gt
 8005b86:	3b04      	subgt	r3, #4
 8005b88:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005b8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b8c:	bfc8      	it	gt
 8005b8e:	2400      	movgt	r4, #0
 8005b90:	f1a3 0302 	sub.w	r3, r3, #2
 8005b94:	bfd8      	it	le
 8005b96:	2401      	movle	r4, #1
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	f200 808b 	bhi.w	8005cb4 <_dtoa_r+0x304>
 8005b9e:	e8df f003 	tbb	[pc, r3]
 8005ba2:	4f2d      	.short	0x4f2d
 8005ba4:	5b4d      	.short	0x5b4d
 8005ba6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005baa:	441c      	add	r4, r3
 8005bac:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	bfc3      	ittte	gt
 8005bb4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005bb8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005bbc:	fa09 f303 	lslgt.w	r3, r9, r3
 8005bc0:	f1c3 0320 	rsble	r3, r3, #32
 8005bc4:	bfc6      	itte	gt
 8005bc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005bca:	4318      	orrgt	r0, r3
 8005bcc:	fa06 f003 	lslle.w	r0, r6, r3
 8005bd0:	f7fa fc20 	bl	8000414 <__aeabi_ui2d>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005bda:	3c01      	subs	r4, #1
 8005bdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8005bde:	e770      	b.n	8005ac2 <_dtoa_r+0x112>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e7b3      	b.n	8005b4c <_dtoa_r+0x19c>
 8005be4:	900f      	str	r0, [sp, #60]	; 0x3c
 8005be6:	e7b2      	b.n	8005b4e <_dtoa_r+0x19e>
 8005be8:	9b06      	ldr	r3, [sp, #24]
 8005bea:	eba3 0309 	sub.w	r3, r3, r9
 8005bee:	9306      	str	r3, [sp, #24]
 8005bf0:	f1c9 0300 	rsb	r3, r9, #0
 8005bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	930e      	str	r3, [sp, #56]	; 0x38
 8005bfa:	e7bf      	b.n	8005b7c <_dtoa_r+0x1cc>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	dc59      	bgt.n	8005cba <_dtoa_r+0x30a>
 8005c06:	f04f 0b01 	mov.w	fp, #1
 8005c0a:	465b      	mov	r3, fp
 8005c0c:	f8cd b008 	str.w	fp, [sp, #8]
 8005c10:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005c14:	2200      	movs	r2, #0
 8005c16:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005c18:	6042      	str	r2, [r0, #4]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	f102 0614 	add.w	r6, r2, #20
 8005c20:	429e      	cmp	r6, r3
 8005c22:	6841      	ldr	r1, [r0, #4]
 8005c24:	d94f      	bls.n	8005cc6 <_dtoa_r+0x316>
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 fcd8 	bl	80065dc <_Balloc>
 8005c2c:	9008      	str	r0, [sp, #32]
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d14d      	bne.n	8005cce <_dtoa_r+0x31e>
 8005c32:	4602      	mov	r2, r0
 8005c34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c38:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <_dtoa_r+0x300>)
 8005c3a:	e6cd      	b.n	80059d8 <_dtoa_r+0x28>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e7de      	b.n	8005bfe <_dtoa_r+0x24e>
 8005c40:	2300      	movs	r3, #0
 8005c42:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c46:	eb09 0b03 	add.w	fp, r9, r3
 8005c4a:	f10b 0301 	add.w	r3, fp, #1
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	9302      	str	r3, [sp, #8]
 8005c52:	bfb8      	it	lt
 8005c54:	2301      	movlt	r3, #1
 8005c56:	e7dd      	b.n	8005c14 <_dtoa_r+0x264>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e7f2      	b.n	8005c42 <_dtoa_r+0x292>
 8005c5c:	2401      	movs	r4, #1
 8005c5e:	2300      	movs	r3, #0
 8005c60:	940b      	str	r4, [sp, #44]	; 0x2c
 8005c62:	9322      	str	r3, [sp, #136]	; 0x88
 8005c64:	f04f 3bff 	mov.w	fp, #4294967295
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2312      	movs	r3, #18
 8005c6c:	f8cd b008 	str.w	fp, [sp, #8]
 8005c70:	9223      	str	r2, [sp, #140]	; 0x8c
 8005c72:	e7cf      	b.n	8005c14 <_dtoa_r+0x264>
 8005c74:	f3af 8000 	nop.w
 8005c78:	636f4361 	.word	0x636f4361
 8005c7c:	3fd287a7 	.word	0x3fd287a7
 8005c80:	8b60c8b3 	.word	0x8b60c8b3
 8005c84:	3fc68a28 	.word	0x3fc68a28
 8005c88:	509f79fb 	.word	0x509f79fb
 8005c8c:	3fd34413 	.word	0x3fd34413
 8005c90:	08007dad 	.word	0x08007dad
 8005c94:	08007dc4 	.word	0x08007dc4
 8005c98:	7ff00000 	.word	0x7ff00000
 8005c9c:	08007da9 	.word	0x08007da9
 8005ca0:	08007da0 	.word	0x08007da0
 8005ca4:	08007d7d 	.word	0x08007d7d
 8005ca8:	3ff80000 	.word	0x3ff80000
 8005cac:	08007ec0 	.word	0x08007ec0
 8005cb0:	08007e23 	.word	0x08007e23
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cb8:	e7d4      	b.n	8005c64 <_dtoa_r+0x2b4>
 8005cba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005cbe:	465b      	mov	r3, fp
 8005cc0:	f8cd b008 	str.w	fp, [sp, #8]
 8005cc4:	e7a6      	b.n	8005c14 <_dtoa_r+0x264>
 8005cc6:	3101      	adds	r1, #1
 8005cc8:	6041      	str	r1, [r0, #4]
 8005cca:	0052      	lsls	r2, r2, #1
 8005ccc:	e7a6      	b.n	8005c1c <_dtoa_r+0x26c>
 8005cce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cd0:	9a08      	ldr	r2, [sp, #32]
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	9b02      	ldr	r3, [sp, #8]
 8005cd6:	2b0e      	cmp	r3, #14
 8005cd8:	f200 80a8 	bhi.w	8005e2c <_dtoa_r+0x47c>
 8005cdc:	2c00      	cmp	r4, #0
 8005cde:	f000 80a5 	beq.w	8005e2c <_dtoa_r+0x47c>
 8005ce2:	f1b9 0f00 	cmp.w	r9, #0
 8005ce6:	dd34      	ble.n	8005d52 <_dtoa_r+0x3a2>
 8005ce8:	4a9a      	ldr	r2, [pc, #616]	; (8005f54 <_dtoa_r+0x5a4>)
 8005cea:	f009 030f 	and.w	r3, r9, #15
 8005cee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005cf2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005cf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cfa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005cfe:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005d02:	d016      	beq.n	8005d32 <_dtoa_r+0x382>
 8005d04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d08:	4b93      	ldr	r3, [pc, #588]	; (8005f58 <_dtoa_r+0x5a8>)
 8005d0a:	2703      	movs	r7, #3
 8005d0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d10:	f7fa fd24 	bl	800075c <__aeabi_ddiv>
 8005d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d18:	f004 040f 	and.w	r4, r4, #15
 8005d1c:	4e8e      	ldr	r6, [pc, #568]	; (8005f58 <_dtoa_r+0x5a8>)
 8005d1e:	b954      	cbnz	r4, 8005d36 <_dtoa_r+0x386>
 8005d20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d28:	f7fa fd18 	bl	800075c <__aeabi_ddiv>
 8005d2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d30:	e029      	b.n	8005d86 <_dtoa_r+0x3d6>
 8005d32:	2702      	movs	r7, #2
 8005d34:	e7f2      	b.n	8005d1c <_dtoa_r+0x36c>
 8005d36:	07e1      	lsls	r1, r4, #31
 8005d38:	d508      	bpl.n	8005d4c <_dtoa_r+0x39c>
 8005d3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d42:	f7fa fbe1 	bl	8000508 <__aeabi_dmul>
 8005d46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d4a:	3701      	adds	r7, #1
 8005d4c:	1064      	asrs	r4, r4, #1
 8005d4e:	3608      	adds	r6, #8
 8005d50:	e7e5      	b.n	8005d1e <_dtoa_r+0x36e>
 8005d52:	f000 80a5 	beq.w	8005ea0 <_dtoa_r+0x4f0>
 8005d56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d5a:	f1c9 0400 	rsb	r4, r9, #0
 8005d5e:	4b7d      	ldr	r3, [pc, #500]	; (8005f54 <_dtoa_r+0x5a4>)
 8005d60:	f004 020f 	and.w	r2, r4, #15
 8005d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f7fa fbcc 	bl	8000508 <__aeabi_dmul>
 8005d70:	2702      	movs	r7, #2
 8005d72:	2300      	movs	r3, #0
 8005d74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d78:	4e77      	ldr	r6, [pc, #476]	; (8005f58 <_dtoa_r+0x5a8>)
 8005d7a:	1124      	asrs	r4, r4, #4
 8005d7c:	2c00      	cmp	r4, #0
 8005d7e:	f040 8084 	bne.w	8005e8a <_dtoa_r+0x4da>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1d2      	bne.n	8005d2c <_dtoa_r+0x37c>
 8005d86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 808b 	beq.w	8005ea4 <_dtoa_r+0x4f4>
 8005d8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	4b6f      	ldr	r3, [pc, #444]	; (8005f5c <_dtoa_r+0x5ac>)
 8005d9e:	f7fa fe25 	bl	80009ec <__aeabi_dcmplt>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	d07e      	beq.n	8005ea4 <_dtoa_r+0x4f4>
 8005da6:	9b02      	ldr	r3, [sp, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d07b      	beq.n	8005ea4 <_dtoa_r+0x4f4>
 8005dac:	f1bb 0f00 	cmp.w	fp, #0
 8005db0:	dd38      	ble.n	8005e24 <_dtoa_r+0x474>
 8005db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005db6:	2200      	movs	r2, #0
 8005db8:	4b69      	ldr	r3, [pc, #420]	; (8005f60 <_dtoa_r+0x5b0>)
 8005dba:	f7fa fba5 	bl	8000508 <__aeabi_dmul>
 8005dbe:	465c      	mov	r4, fp
 8005dc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dc4:	f109 38ff 	add.w	r8, r9, #4294967295
 8005dc8:	3701      	adds	r7, #1
 8005dca:	4638      	mov	r0, r7
 8005dcc:	f7fa fb32 	bl	8000434 <__aeabi_i2d>
 8005dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dd4:	f7fa fb98 	bl	8000508 <__aeabi_dmul>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4b62      	ldr	r3, [pc, #392]	; (8005f64 <_dtoa_r+0x5b4>)
 8005ddc:	f7fa f9de 	bl	800019c <__adddf3>
 8005de0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005de4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005de8:	9611      	str	r6, [sp, #68]	; 0x44
 8005dea:	2c00      	cmp	r4, #0
 8005dec:	d15d      	bne.n	8005eaa <_dtoa_r+0x4fa>
 8005dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005df2:	2200      	movs	r2, #0
 8005df4:	4b5c      	ldr	r3, [pc, #368]	; (8005f68 <_dtoa_r+0x5b8>)
 8005df6:	f7fa f9cf 	bl	8000198 <__aeabi_dsub>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e02:	4633      	mov	r3, r6
 8005e04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e06:	f7fa fe0f 	bl	8000a28 <__aeabi_dcmpgt>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	f040 829e 	bne.w	800634c <_dtoa_r+0x99c>
 8005e10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e16:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005e1a:	f7fa fde7 	bl	80009ec <__aeabi_dcmplt>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	f040 8292 	bne.w	8006348 <_dtoa_r+0x998>
 8005e24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005e28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f2c0 8153 	blt.w	80060da <_dtoa_r+0x72a>
 8005e34:	f1b9 0f0e 	cmp.w	r9, #14
 8005e38:	f300 814f 	bgt.w	80060da <_dtoa_r+0x72a>
 8005e3c:	4b45      	ldr	r3, [pc, #276]	; (8005f54 <_dtoa_r+0x5a4>)
 8005e3e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005e42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e46:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005e4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f280 80db 	bge.w	8006008 <_dtoa_r+0x658>
 8005e52:	9b02      	ldr	r3, [sp, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f300 80d7 	bgt.w	8006008 <_dtoa_r+0x658>
 8005e5a:	f040 8274 	bne.w	8006346 <_dtoa_r+0x996>
 8005e5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e62:	2200      	movs	r2, #0
 8005e64:	4b40      	ldr	r3, [pc, #256]	; (8005f68 <_dtoa_r+0x5b8>)
 8005e66:	f7fa fb4f 	bl	8000508 <__aeabi_dmul>
 8005e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e6e:	f7fa fdd1 	bl	8000a14 <__aeabi_dcmpge>
 8005e72:	9c02      	ldr	r4, [sp, #8]
 8005e74:	4626      	mov	r6, r4
 8005e76:	2800      	cmp	r0, #0
 8005e78:	f040 824a 	bne.w	8006310 <_dtoa_r+0x960>
 8005e7c:	2331      	movs	r3, #49	; 0x31
 8005e7e:	9f08      	ldr	r7, [sp, #32]
 8005e80:	f109 0901 	add.w	r9, r9, #1
 8005e84:	f807 3b01 	strb.w	r3, [r7], #1
 8005e88:	e246      	b.n	8006318 <_dtoa_r+0x968>
 8005e8a:	07e2      	lsls	r2, r4, #31
 8005e8c:	d505      	bpl.n	8005e9a <_dtoa_r+0x4ea>
 8005e8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e92:	f7fa fb39 	bl	8000508 <__aeabi_dmul>
 8005e96:	2301      	movs	r3, #1
 8005e98:	3701      	adds	r7, #1
 8005e9a:	1064      	asrs	r4, r4, #1
 8005e9c:	3608      	adds	r6, #8
 8005e9e:	e76d      	b.n	8005d7c <_dtoa_r+0x3cc>
 8005ea0:	2702      	movs	r7, #2
 8005ea2:	e770      	b.n	8005d86 <_dtoa_r+0x3d6>
 8005ea4:	46c8      	mov	r8, r9
 8005ea6:	9c02      	ldr	r4, [sp, #8]
 8005ea8:	e78f      	b.n	8005dca <_dtoa_r+0x41a>
 8005eaa:	9908      	ldr	r1, [sp, #32]
 8005eac:	4b29      	ldr	r3, [pc, #164]	; (8005f54 <_dtoa_r+0x5a4>)
 8005eae:	4421      	add	r1, r4
 8005eb0:	9112      	str	r1, [sp, #72]	; 0x48
 8005eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005eb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005eb8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005ebc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ec0:	2900      	cmp	r1, #0
 8005ec2:	d055      	beq.n	8005f70 <_dtoa_r+0x5c0>
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	4929      	ldr	r1, [pc, #164]	; (8005f6c <_dtoa_r+0x5bc>)
 8005ec8:	f7fa fc48 	bl	800075c <__aeabi_ddiv>
 8005ecc:	463b      	mov	r3, r7
 8005ece:	4632      	mov	r2, r6
 8005ed0:	f7fa f962 	bl	8000198 <__aeabi_dsub>
 8005ed4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ed8:	9f08      	ldr	r7, [sp, #32]
 8005eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ede:	f7fa fdc3 	bl	8000a68 <__aeabi_d2iz>
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	f7fa faa6 	bl	8000434 <__aeabi_i2d>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ef0:	f7fa f952 	bl	8000198 <__aeabi_dsub>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	3430      	adds	r4, #48	; 0x30
 8005efa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005efe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f02:	f807 4b01 	strb.w	r4, [r7], #1
 8005f06:	f7fa fd71 	bl	80009ec <__aeabi_dcmplt>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d174      	bne.n	8005ff8 <_dtoa_r+0x648>
 8005f0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f12:	2000      	movs	r0, #0
 8005f14:	4911      	ldr	r1, [pc, #68]	; (8005f5c <_dtoa_r+0x5ac>)
 8005f16:	f7fa f93f 	bl	8000198 <__aeabi_dsub>
 8005f1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f1e:	f7fa fd65 	bl	80009ec <__aeabi_dcmplt>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	f040 80b6 	bne.w	8006094 <_dtoa_r+0x6e4>
 8005f28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f2a:	429f      	cmp	r7, r3
 8005f2c:	f43f af7a 	beq.w	8005e24 <_dtoa_r+0x474>
 8005f30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f34:	2200      	movs	r2, #0
 8005f36:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <_dtoa_r+0x5b0>)
 8005f38:	f7fa fae6 	bl	8000508 <__aeabi_dmul>
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f46:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <_dtoa_r+0x5b0>)
 8005f48:	f7fa fade 	bl	8000508 <__aeabi_dmul>
 8005f4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f50:	e7c3      	b.n	8005eda <_dtoa_r+0x52a>
 8005f52:	bf00      	nop
 8005f54:	08007ec0 	.word	0x08007ec0
 8005f58:	08007e98 	.word	0x08007e98
 8005f5c:	3ff00000 	.word	0x3ff00000
 8005f60:	40240000 	.word	0x40240000
 8005f64:	401c0000 	.word	0x401c0000
 8005f68:	40140000 	.word	0x40140000
 8005f6c:	3fe00000 	.word	0x3fe00000
 8005f70:	4630      	mov	r0, r6
 8005f72:	4639      	mov	r1, r7
 8005f74:	f7fa fac8 	bl	8000508 <__aeabi_dmul>
 8005f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f7e:	9c08      	ldr	r4, [sp, #32]
 8005f80:	9314      	str	r3, [sp, #80]	; 0x50
 8005f82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f86:	f7fa fd6f 	bl	8000a68 <__aeabi_d2iz>
 8005f8a:	9015      	str	r0, [sp, #84]	; 0x54
 8005f8c:	f7fa fa52 	bl	8000434 <__aeabi_i2d>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f98:	f7fa f8fe 	bl	8000198 <__aeabi_dsub>
 8005f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	3330      	adds	r3, #48	; 0x30
 8005fa2:	f804 3b01 	strb.w	r3, [r4], #1
 8005fa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fa8:	460f      	mov	r7, r1
 8005faa:	429c      	cmp	r4, r3
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	d124      	bne.n	8005ffc <_dtoa_r+0x64c>
 8005fb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fb6:	4bb3      	ldr	r3, [pc, #716]	; (8006284 <_dtoa_r+0x8d4>)
 8005fb8:	f7fa f8f0 	bl	800019c <__adddf3>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa fd30 	bl	8000a28 <__aeabi_dcmpgt>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d162      	bne.n	8006092 <_dtoa_r+0x6e2>
 8005fcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	49ac      	ldr	r1, [pc, #688]	; (8006284 <_dtoa_r+0x8d4>)
 8005fd4:	f7fa f8e0 	bl	8000198 <__aeabi_dsub>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4630      	mov	r0, r6
 8005fde:	4639      	mov	r1, r7
 8005fe0:	f7fa fd04 	bl	80009ec <__aeabi_dcmplt>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	f43f af1d 	beq.w	8005e24 <_dtoa_r+0x474>
 8005fea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005fec:	1e7b      	subs	r3, r7, #1
 8005fee:	9314      	str	r3, [sp, #80]	; 0x50
 8005ff0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005ff4:	2b30      	cmp	r3, #48	; 0x30
 8005ff6:	d0f8      	beq.n	8005fea <_dtoa_r+0x63a>
 8005ff8:	46c1      	mov	r9, r8
 8005ffa:	e03a      	b.n	8006072 <_dtoa_r+0x6c2>
 8005ffc:	4ba2      	ldr	r3, [pc, #648]	; (8006288 <_dtoa_r+0x8d8>)
 8005ffe:	f7fa fa83 	bl	8000508 <__aeabi_dmul>
 8006002:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006006:	e7bc      	b.n	8005f82 <_dtoa_r+0x5d2>
 8006008:	9f08      	ldr	r7, [sp, #32]
 800600a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800600e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006012:	f7fa fba3 	bl	800075c <__aeabi_ddiv>
 8006016:	f7fa fd27 	bl	8000a68 <__aeabi_d2iz>
 800601a:	4604      	mov	r4, r0
 800601c:	f7fa fa0a 	bl	8000434 <__aeabi_i2d>
 8006020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006024:	f7fa fa70 	bl	8000508 <__aeabi_dmul>
 8006028:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800602c:	460b      	mov	r3, r1
 800602e:	4602      	mov	r2, r0
 8006030:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006034:	f7fa f8b0 	bl	8000198 <__aeabi_dsub>
 8006038:	f807 6b01 	strb.w	r6, [r7], #1
 800603c:	9e08      	ldr	r6, [sp, #32]
 800603e:	9b02      	ldr	r3, [sp, #8]
 8006040:	1bbe      	subs	r6, r7, r6
 8006042:	42b3      	cmp	r3, r6
 8006044:	d13a      	bne.n	80060bc <_dtoa_r+0x70c>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	f7fa f8a7 	bl	800019c <__adddf3>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006056:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800605a:	f7fa fce5 	bl	8000a28 <__aeabi_dcmpgt>
 800605e:	bb58      	cbnz	r0, 80060b8 <_dtoa_r+0x708>
 8006060:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006068:	f7fa fcb6 	bl	80009d8 <__aeabi_dcmpeq>
 800606c:	b108      	cbz	r0, 8006072 <_dtoa_r+0x6c2>
 800606e:	07e1      	lsls	r1, r4, #31
 8006070:	d422      	bmi.n	80060b8 <_dtoa_r+0x708>
 8006072:	4628      	mov	r0, r5
 8006074:	4651      	mov	r1, sl
 8006076:	f000 faf1 	bl	800665c <_Bfree>
 800607a:	2300      	movs	r3, #0
 800607c:	703b      	strb	r3, [r7, #0]
 800607e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006080:	f109 0001 	add.w	r0, r9, #1
 8006084:	6018      	str	r0, [r3, #0]
 8006086:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006088:	2b00      	cmp	r3, #0
 800608a:	f43f acdf 	beq.w	8005a4c <_dtoa_r+0x9c>
 800608e:	601f      	str	r7, [r3, #0]
 8006090:	e4dc      	b.n	8005a4c <_dtoa_r+0x9c>
 8006092:	4627      	mov	r7, r4
 8006094:	463b      	mov	r3, r7
 8006096:	461f      	mov	r7, r3
 8006098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800609c:	2a39      	cmp	r2, #57	; 0x39
 800609e:	d107      	bne.n	80060b0 <_dtoa_r+0x700>
 80060a0:	9a08      	ldr	r2, [sp, #32]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d1f7      	bne.n	8006096 <_dtoa_r+0x6e6>
 80060a6:	2230      	movs	r2, #48	; 0x30
 80060a8:	9908      	ldr	r1, [sp, #32]
 80060aa:	f108 0801 	add.w	r8, r8, #1
 80060ae:	700a      	strb	r2, [r1, #0]
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	3201      	adds	r2, #1
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	e79f      	b.n	8005ff8 <_dtoa_r+0x648>
 80060b8:	46c8      	mov	r8, r9
 80060ba:	e7eb      	b.n	8006094 <_dtoa_r+0x6e4>
 80060bc:	2200      	movs	r2, #0
 80060be:	4b72      	ldr	r3, [pc, #456]	; (8006288 <_dtoa_r+0x8d8>)
 80060c0:	f7fa fa22 	bl	8000508 <__aeabi_dmul>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060cc:	2200      	movs	r2, #0
 80060ce:	2300      	movs	r3, #0
 80060d0:	f7fa fc82 	bl	80009d8 <__aeabi_dcmpeq>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d098      	beq.n	800600a <_dtoa_r+0x65a>
 80060d8:	e7cb      	b.n	8006072 <_dtoa_r+0x6c2>
 80060da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060dc:	2a00      	cmp	r2, #0
 80060de:	f000 80cd 	beq.w	800627c <_dtoa_r+0x8cc>
 80060e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80060e4:	2a01      	cmp	r2, #1
 80060e6:	f300 80af 	bgt.w	8006248 <_dtoa_r+0x898>
 80060ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80060ec:	2a00      	cmp	r2, #0
 80060ee:	f000 80a7 	beq.w	8006240 <_dtoa_r+0x890>
 80060f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80060f8:	9f06      	ldr	r7, [sp, #24]
 80060fa:	9a06      	ldr	r2, [sp, #24]
 80060fc:	2101      	movs	r1, #1
 80060fe:	441a      	add	r2, r3
 8006100:	9206      	str	r2, [sp, #24]
 8006102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006104:	4628      	mov	r0, r5
 8006106:	441a      	add	r2, r3
 8006108:	9209      	str	r2, [sp, #36]	; 0x24
 800610a:	f000 fb61 	bl	80067d0 <__i2b>
 800610e:	4606      	mov	r6, r0
 8006110:	2f00      	cmp	r7, #0
 8006112:	dd0c      	ble.n	800612e <_dtoa_r+0x77e>
 8006114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	dd09      	ble.n	800612e <_dtoa_r+0x77e>
 800611a:	42bb      	cmp	r3, r7
 800611c:	bfa8      	it	ge
 800611e:	463b      	movge	r3, r7
 8006120:	9a06      	ldr	r2, [sp, #24]
 8006122:	1aff      	subs	r7, r7, r3
 8006124:	1ad2      	subs	r2, r2, r3
 8006126:	9206      	str	r2, [sp, #24]
 8006128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	9309      	str	r3, [sp, #36]	; 0x24
 800612e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006130:	b1f3      	cbz	r3, 8006170 <_dtoa_r+0x7c0>
 8006132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 80a9 	beq.w	800628c <_dtoa_r+0x8dc>
 800613a:	2c00      	cmp	r4, #0
 800613c:	dd10      	ble.n	8006160 <_dtoa_r+0x7b0>
 800613e:	4631      	mov	r1, r6
 8006140:	4622      	mov	r2, r4
 8006142:	4628      	mov	r0, r5
 8006144:	f000 fbfe 	bl	8006944 <__pow5mult>
 8006148:	4652      	mov	r2, sl
 800614a:	4601      	mov	r1, r0
 800614c:	4606      	mov	r6, r0
 800614e:	4628      	mov	r0, r5
 8006150:	f000 fb54 	bl	80067fc <__multiply>
 8006154:	4680      	mov	r8, r0
 8006156:	4651      	mov	r1, sl
 8006158:	4628      	mov	r0, r5
 800615a:	f000 fa7f 	bl	800665c <_Bfree>
 800615e:	46c2      	mov	sl, r8
 8006160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006162:	1b1a      	subs	r2, r3, r4
 8006164:	d004      	beq.n	8006170 <_dtoa_r+0x7c0>
 8006166:	4651      	mov	r1, sl
 8006168:	4628      	mov	r0, r5
 800616a:	f000 fbeb 	bl	8006944 <__pow5mult>
 800616e:	4682      	mov	sl, r0
 8006170:	2101      	movs	r1, #1
 8006172:	4628      	mov	r0, r5
 8006174:	f000 fb2c 	bl	80067d0 <__i2b>
 8006178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800617a:	4604      	mov	r4, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	f340 8087 	ble.w	8006290 <_dtoa_r+0x8e0>
 8006182:	461a      	mov	r2, r3
 8006184:	4601      	mov	r1, r0
 8006186:	4628      	mov	r0, r5
 8006188:	f000 fbdc 	bl	8006944 <__pow5mult>
 800618c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800618e:	4604      	mov	r4, r0
 8006190:	2b01      	cmp	r3, #1
 8006192:	f340 8080 	ble.w	8006296 <_dtoa_r+0x8e6>
 8006196:	f04f 0800 	mov.w	r8, #0
 800619a:	6923      	ldr	r3, [r4, #16]
 800619c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061a0:	6918      	ldr	r0, [r3, #16]
 80061a2:	f000 fac7 	bl	8006734 <__hi0bits>
 80061a6:	f1c0 0020 	rsb	r0, r0, #32
 80061aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ac:	4418      	add	r0, r3
 80061ae:	f010 001f 	ands.w	r0, r0, #31
 80061b2:	f000 8092 	beq.w	80062da <_dtoa_r+0x92a>
 80061b6:	f1c0 0320 	rsb	r3, r0, #32
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	f340 808a 	ble.w	80062d4 <_dtoa_r+0x924>
 80061c0:	f1c0 001c 	rsb	r0, r0, #28
 80061c4:	9b06      	ldr	r3, [sp, #24]
 80061c6:	4407      	add	r7, r0
 80061c8:	4403      	add	r3, r0
 80061ca:	9306      	str	r3, [sp, #24]
 80061cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ce:	4403      	add	r3, r0
 80061d0:	9309      	str	r3, [sp, #36]	; 0x24
 80061d2:	9b06      	ldr	r3, [sp, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	dd05      	ble.n	80061e4 <_dtoa_r+0x834>
 80061d8:	4651      	mov	r1, sl
 80061da:	461a      	mov	r2, r3
 80061dc:	4628      	mov	r0, r5
 80061de:	f000 fc0b 	bl	80069f8 <__lshift>
 80061e2:	4682      	mov	sl, r0
 80061e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	dd05      	ble.n	80061f6 <_dtoa_r+0x846>
 80061ea:	4621      	mov	r1, r4
 80061ec:	461a      	mov	r2, r3
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 fc02 	bl	80069f8 <__lshift>
 80061f4:	4604      	mov	r4, r0
 80061f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d070      	beq.n	80062de <_dtoa_r+0x92e>
 80061fc:	4621      	mov	r1, r4
 80061fe:	4650      	mov	r0, sl
 8006200:	f000 fc66 	bl	8006ad0 <__mcmp>
 8006204:	2800      	cmp	r0, #0
 8006206:	da6a      	bge.n	80062de <_dtoa_r+0x92e>
 8006208:	2300      	movs	r3, #0
 800620a:	4651      	mov	r1, sl
 800620c:	220a      	movs	r2, #10
 800620e:	4628      	mov	r0, r5
 8006210:	f000 fa46 	bl	80066a0 <__multadd>
 8006214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006216:	4682      	mov	sl, r0
 8006218:	f109 39ff 	add.w	r9, r9, #4294967295
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8193 	beq.w	8006548 <_dtoa_r+0xb98>
 8006222:	4631      	mov	r1, r6
 8006224:	2300      	movs	r3, #0
 8006226:	220a      	movs	r2, #10
 8006228:	4628      	mov	r0, r5
 800622a:	f000 fa39 	bl	80066a0 <__multadd>
 800622e:	f1bb 0f00 	cmp.w	fp, #0
 8006232:	4606      	mov	r6, r0
 8006234:	f300 8093 	bgt.w	800635e <_dtoa_r+0x9ae>
 8006238:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800623a:	2b02      	cmp	r3, #2
 800623c:	dc57      	bgt.n	80062ee <_dtoa_r+0x93e>
 800623e:	e08e      	b.n	800635e <_dtoa_r+0x9ae>
 8006240:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006242:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006246:	e756      	b.n	80060f6 <_dtoa_r+0x746>
 8006248:	9b02      	ldr	r3, [sp, #8]
 800624a:	1e5c      	subs	r4, r3, #1
 800624c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800624e:	42a3      	cmp	r3, r4
 8006250:	bfb7      	itett	lt
 8006252:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006254:	1b1c      	subge	r4, r3, r4
 8006256:	1ae2      	sublt	r2, r4, r3
 8006258:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800625a:	bfbe      	ittt	lt
 800625c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800625e:	189b      	addlt	r3, r3, r2
 8006260:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006262:	9b02      	ldr	r3, [sp, #8]
 8006264:	bfb8      	it	lt
 8006266:	2400      	movlt	r4, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	bfbb      	ittet	lt
 800626c:	9b06      	ldrlt	r3, [sp, #24]
 800626e:	9a02      	ldrlt	r2, [sp, #8]
 8006270:	9f06      	ldrge	r7, [sp, #24]
 8006272:	1a9f      	sublt	r7, r3, r2
 8006274:	bfac      	ite	ge
 8006276:	9b02      	ldrge	r3, [sp, #8]
 8006278:	2300      	movlt	r3, #0
 800627a:	e73e      	b.n	80060fa <_dtoa_r+0x74a>
 800627c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800627e:	9f06      	ldr	r7, [sp, #24]
 8006280:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006282:	e745      	b.n	8006110 <_dtoa_r+0x760>
 8006284:	3fe00000 	.word	0x3fe00000
 8006288:	40240000 	.word	0x40240000
 800628c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800628e:	e76a      	b.n	8006166 <_dtoa_r+0x7b6>
 8006290:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006292:	2b01      	cmp	r3, #1
 8006294:	dc19      	bgt.n	80062ca <_dtoa_r+0x91a>
 8006296:	9b04      	ldr	r3, [sp, #16]
 8006298:	b9bb      	cbnz	r3, 80062ca <_dtoa_r+0x91a>
 800629a:	9b05      	ldr	r3, [sp, #20]
 800629c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062a0:	b99b      	cbnz	r3, 80062ca <_dtoa_r+0x91a>
 80062a2:	9b05      	ldr	r3, [sp, #20]
 80062a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062a8:	0d1b      	lsrs	r3, r3, #20
 80062aa:	051b      	lsls	r3, r3, #20
 80062ac:	b183      	cbz	r3, 80062d0 <_dtoa_r+0x920>
 80062ae:	f04f 0801 	mov.w	r8, #1
 80062b2:	9b06      	ldr	r3, [sp, #24]
 80062b4:	3301      	adds	r3, #1
 80062b6:	9306      	str	r3, [sp, #24]
 80062b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ba:	3301      	adds	r3, #1
 80062bc:	9309      	str	r3, [sp, #36]	; 0x24
 80062be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f47f af6a 	bne.w	800619a <_dtoa_r+0x7ea>
 80062c6:	2001      	movs	r0, #1
 80062c8:	e76f      	b.n	80061aa <_dtoa_r+0x7fa>
 80062ca:	f04f 0800 	mov.w	r8, #0
 80062ce:	e7f6      	b.n	80062be <_dtoa_r+0x90e>
 80062d0:	4698      	mov	r8, r3
 80062d2:	e7f4      	b.n	80062be <_dtoa_r+0x90e>
 80062d4:	f43f af7d 	beq.w	80061d2 <_dtoa_r+0x822>
 80062d8:	4618      	mov	r0, r3
 80062da:	301c      	adds	r0, #28
 80062dc:	e772      	b.n	80061c4 <_dtoa_r+0x814>
 80062de:	9b02      	ldr	r3, [sp, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	dc36      	bgt.n	8006352 <_dtoa_r+0x9a2>
 80062e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	dd33      	ble.n	8006352 <_dtoa_r+0x9a2>
 80062ea:	f8dd b008 	ldr.w	fp, [sp, #8]
 80062ee:	f1bb 0f00 	cmp.w	fp, #0
 80062f2:	d10d      	bne.n	8006310 <_dtoa_r+0x960>
 80062f4:	4621      	mov	r1, r4
 80062f6:	465b      	mov	r3, fp
 80062f8:	2205      	movs	r2, #5
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 f9d0 	bl	80066a0 <__multadd>
 8006300:	4601      	mov	r1, r0
 8006302:	4604      	mov	r4, r0
 8006304:	4650      	mov	r0, sl
 8006306:	f000 fbe3 	bl	8006ad0 <__mcmp>
 800630a:	2800      	cmp	r0, #0
 800630c:	f73f adb6 	bgt.w	8005e7c <_dtoa_r+0x4cc>
 8006310:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006312:	9f08      	ldr	r7, [sp, #32]
 8006314:	ea6f 0903 	mvn.w	r9, r3
 8006318:	f04f 0800 	mov.w	r8, #0
 800631c:	4621      	mov	r1, r4
 800631e:	4628      	mov	r0, r5
 8006320:	f000 f99c 	bl	800665c <_Bfree>
 8006324:	2e00      	cmp	r6, #0
 8006326:	f43f aea4 	beq.w	8006072 <_dtoa_r+0x6c2>
 800632a:	f1b8 0f00 	cmp.w	r8, #0
 800632e:	d005      	beq.n	800633c <_dtoa_r+0x98c>
 8006330:	45b0      	cmp	r8, r6
 8006332:	d003      	beq.n	800633c <_dtoa_r+0x98c>
 8006334:	4641      	mov	r1, r8
 8006336:	4628      	mov	r0, r5
 8006338:	f000 f990 	bl	800665c <_Bfree>
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	f000 f98c 	bl	800665c <_Bfree>
 8006344:	e695      	b.n	8006072 <_dtoa_r+0x6c2>
 8006346:	2400      	movs	r4, #0
 8006348:	4626      	mov	r6, r4
 800634a:	e7e1      	b.n	8006310 <_dtoa_r+0x960>
 800634c:	46c1      	mov	r9, r8
 800634e:	4626      	mov	r6, r4
 8006350:	e594      	b.n	8005e7c <_dtoa_r+0x4cc>
 8006352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006354:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80fc 	beq.w	8006556 <_dtoa_r+0xba6>
 800635e:	2f00      	cmp	r7, #0
 8006360:	dd05      	ble.n	800636e <_dtoa_r+0x9be>
 8006362:	4631      	mov	r1, r6
 8006364:	463a      	mov	r2, r7
 8006366:	4628      	mov	r0, r5
 8006368:	f000 fb46 	bl	80069f8 <__lshift>
 800636c:	4606      	mov	r6, r0
 800636e:	f1b8 0f00 	cmp.w	r8, #0
 8006372:	d05c      	beq.n	800642e <_dtoa_r+0xa7e>
 8006374:	4628      	mov	r0, r5
 8006376:	6871      	ldr	r1, [r6, #4]
 8006378:	f000 f930 	bl	80065dc <_Balloc>
 800637c:	4607      	mov	r7, r0
 800637e:	b928      	cbnz	r0, 800638c <_dtoa_r+0x9dc>
 8006380:	4602      	mov	r2, r0
 8006382:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006386:	4b7e      	ldr	r3, [pc, #504]	; (8006580 <_dtoa_r+0xbd0>)
 8006388:	f7ff bb26 	b.w	80059d8 <_dtoa_r+0x28>
 800638c:	6932      	ldr	r2, [r6, #16]
 800638e:	f106 010c 	add.w	r1, r6, #12
 8006392:	3202      	adds	r2, #2
 8006394:	0092      	lsls	r2, r2, #2
 8006396:	300c      	adds	r0, #12
 8006398:	f000 f912 	bl	80065c0 <memcpy>
 800639c:	2201      	movs	r2, #1
 800639e:	4639      	mov	r1, r7
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 fb29 	bl	80069f8 <__lshift>
 80063a6:	46b0      	mov	r8, r6
 80063a8:	4606      	mov	r6, r0
 80063aa:	9b08      	ldr	r3, [sp, #32]
 80063ac:	3301      	adds	r3, #1
 80063ae:	9302      	str	r3, [sp, #8]
 80063b0:	9b08      	ldr	r3, [sp, #32]
 80063b2:	445b      	add	r3, fp
 80063b4:	930a      	str	r3, [sp, #40]	; 0x28
 80063b6:	9b04      	ldr	r3, [sp, #16]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	9309      	str	r3, [sp, #36]	; 0x24
 80063be:	9b02      	ldr	r3, [sp, #8]
 80063c0:	4621      	mov	r1, r4
 80063c2:	4650      	mov	r0, sl
 80063c4:	f103 3bff 	add.w	fp, r3, #4294967295
 80063c8:	f7ff fa63 	bl	8005892 <quorem>
 80063cc:	4603      	mov	r3, r0
 80063ce:	4641      	mov	r1, r8
 80063d0:	3330      	adds	r3, #48	; 0x30
 80063d2:	9004      	str	r0, [sp, #16]
 80063d4:	4650      	mov	r0, sl
 80063d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80063d8:	f000 fb7a 	bl	8006ad0 <__mcmp>
 80063dc:	4632      	mov	r2, r6
 80063de:	9006      	str	r0, [sp, #24]
 80063e0:	4621      	mov	r1, r4
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 fb90 	bl	8006b08 <__mdiff>
 80063e8:	68c2      	ldr	r2, [r0, #12]
 80063ea:	4607      	mov	r7, r0
 80063ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063ee:	bb02      	cbnz	r2, 8006432 <_dtoa_r+0xa82>
 80063f0:	4601      	mov	r1, r0
 80063f2:	4650      	mov	r0, sl
 80063f4:	f000 fb6c 	bl	8006ad0 <__mcmp>
 80063f8:	4602      	mov	r2, r0
 80063fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063fc:	4639      	mov	r1, r7
 80063fe:	4628      	mov	r0, r5
 8006400:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006404:	f000 f92a 	bl	800665c <_Bfree>
 8006408:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800640a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800640c:	9f02      	ldr	r7, [sp, #8]
 800640e:	ea43 0102 	orr.w	r1, r3, r2
 8006412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006414:	430b      	orrs	r3, r1
 8006416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006418:	d10d      	bne.n	8006436 <_dtoa_r+0xa86>
 800641a:	2b39      	cmp	r3, #57	; 0x39
 800641c:	d027      	beq.n	800646e <_dtoa_r+0xabe>
 800641e:	9a06      	ldr	r2, [sp, #24]
 8006420:	2a00      	cmp	r2, #0
 8006422:	dd01      	ble.n	8006428 <_dtoa_r+0xa78>
 8006424:	9b04      	ldr	r3, [sp, #16]
 8006426:	3331      	adds	r3, #49	; 0x31
 8006428:	f88b 3000 	strb.w	r3, [fp]
 800642c:	e776      	b.n	800631c <_dtoa_r+0x96c>
 800642e:	4630      	mov	r0, r6
 8006430:	e7b9      	b.n	80063a6 <_dtoa_r+0x9f6>
 8006432:	2201      	movs	r2, #1
 8006434:	e7e2      	b.n	80063fc <_dtoa_r+0xa4c>
 8006436:	9906      	ldr	r1, [sp, #24]
 8006438:	2900      	cmp	r1, #0
 800643a:	db04      	blt.n	8006446 <_dtoa_r+0xa96>
 800643c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800643e:	4301      	orrs	r1, r0
 8006440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006442:	4301      	orrs	r1, r0
 8006444:	d120      	bne.n	8006488 <_dtoa_r+0xad8>
 8006446:	2a00      	cmp	r2, #0
 8006448:	ddee      	ble.n	8006428 <_dtoa_r+0xa78>
 800644a:	4651      	mov	r1, sl
 800644c:	2201      	movs	r2, #1
 800644e:	4628      	mov	r0, r5
 8006450:	9302      	str	r3, [sp, #8]
 8006452:	f000 fad1 	bl	80069f8 <__lshift>
 8006456:	4621      	mov	r1, r4
 8006458:	4682      	mov	sl, r0
 800645a:	f000 fb39 	bl	8006ad0 <__mcmp>
 800645e:	2800      	cmp	r0, #0
 8006460:	9b02      	ldr	r3, [sp, #8]
 8006462:	dc02      	bgt.n	800646a <_dtoa_r+0xaba>
 8006464:	d1e0      	bne.n	8006428 <_dtoa_r+0xa78>
 8006466:	07da      	lsls	r2, r3, #31
 8006468:	d5de      	bpl.n	8006428 <_dtoa_r+0xa78>
 800646a:	2b39      	cmp	r3, #57	; 0x39
 800646c:	d1da      	bne.n	8006424 <_dtoa_r+0xa74>
 800646e:	2339      	movs	r3, #57	; 0x39
 8006470:	f88b 3000 	strb.w	r3, [fp]
 8006474:	463b      	mov	r3, r7
 8006476:	461f      	mov	r7, r3
 8006478:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800647c:	3b01      	subs	r3, #1
 800647e:	2a39      	cmp	r2, #57	; 0x39
 8006480:	d050      	beq.n	8006524 <_dtoa_r+0xb74>
 8006482:	3201      	adds	r2, #1
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	e749      	b.n	800631c <_dtoa_r+0x96c>
 8006488:	2a00      	cmp	r2, #0
 800648a:	dd03      	ble.n	8006494 <_dtoa_r+0xae4>
 800648c:	2b39      	cmp	r3, #57	; 0x39
 800648e:	d0ee      	beq.n	800646e <_dtoa_r+0xabe>
 8006490:	3301      	adds	r3, #1
 8006492:	e7c9      	b.n	8006428 <_dtoa_r+0xa78>
 8006494:	9a02      	ldr	r2, [sp, #8]
 8006496:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006498:	f802 3c01 	strb.w	r3, [r2, #-1]
 800649c:	428a      	cmp	r2, r1
 800649e:	d02a      	beq.n	80064f6 <_dtoa_r+0xb46>
 80064a0:	4651      	mov	r1, sl
 80064a2:	2300      	movs	r3, #0
 80064a4:	220a      	movs	r2, #10
 80064a6:	4628      	mov	r0, r5
 80064a8:	f000 f8fa 	bl	80066a0 <__multadd>
 80064ac:	45b0      	cmp	r8, r6
 80064ae:	4682      	mov	sl, r0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	f04f 020a 	mov.w	r2, #10
 80064b8:	4641      	mov	r1, r8
 80064ba:	4628      	mov	r0, r5
 80064bc:	d107      	bne.n	80064ce <_dtoa_r+0xb1e>
 80064be:	f000 f8ef 	bl	80066a0 <__multadd>
 80064c2:	4680      	mov	r8, r0
 80064c4:	4606      	mov	r6, r0
 80064c6:	9b02      	ldr	r3, [sp, #8]
 80064c8:	3301      	adds	r3, #1
 80064ca:	9302      	str	r3, [sp, #8]
 80064cc:	e777      	b.n	80063be <_dtoa_r+0xa0e>
 80064ce:	f000 f8e7 	bl	80066a0 <__multadd>
 80064d2:	4631      	mov	r1, r6
 80064d4:	4680      	mov	r8, r0
 80064d6:	2300      	movs	r3, #0
 80064d8:	220a      	movs	r2, #10
 80064da:	4628      	mov	r0, r5
 80064dc:	f000 f8e0 	bl	80066a0 <__multadd>
 80064e0:	4606      	mov	r6, r0
 80064e2:	e7f0      	b.n	80064c6 <_dtoa_r+0xb16>
 80064e4:	f1bb 0f00 	cmp.w	fp, #0
 80064e8:	bfcc      	ite	gt
 80064ea:	465f      	movgt	r7, fp
 80064ec:	2701      	movle	r7, #1
 80064ee:	f04f 0800 	mov.w	r8, #0
 80064f2:	9a08      	ldr	r2, [sp, #32]
 80064f4:	4417      	add	r7, r2
 80064f6:	4651      	mov	r1, sl
 80064f8:	2201      	movs	r2, #1
 80064fa:	4628      	mov	r0, r5
 80064fc:	9302      	str	r3, [sp, #8]
 80064fe:	f000 fa7b 	bl	80069f8 <__lshift>
 8006502:	4621      	mov	r1, r4
 8006504:	4682      	mov	sl, r0
 8006506:	f000 fae3 	bl	8006ad0 <__mcmp>
 800650a:	2800      	cmp	r0, #0
 800650c:	dcb2      	bgt.n	8006474 <_dtoa_r+0xac4>
 800650e:	d102      	bne.n	8006516 <_dtoa_r+0xb66>
 8006510:	9b02      	ldr	r3, [sp, #8]
 8006512:	07db      	lsls	r3, r3, #31
 8006514:	d4ae      	bmi.n	8006474 <_dtoa_r+0xac4>
 8006516:	463b      	mov	r3, r7
 8006518:	461f      	mov	r7, r3
 800651a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800651e:	2a30      	cmp	r2, #48	; 0x30
 8006520:	d0fa      	beq.n	8006518 <_dtoa_r+0xb68>
 8006522:	e6fb      	b.n	800631c <_dtoa_r+0x96c>
 8006524:	9a08      	ldr	r2, [sp, #32]
 8006526:	429a      	cmp	r2, r3
 8006528:	d1a5      	bne.n	8006476 <_dtoa_r+0xac6>
 800652a:	2331      	movs	r3, #49	; 0x31
 800652c:	f109 0901 	add.w	r9, r9, #1
 8006530:	7013      	strb	r3, [r2, #0]
 8006532:	e6f3      	b.n	800631c <_dtoa_r+0x96c>
 8006534:	4b13      	ldr	r3, [pc, #76]	; (8006584 <_dtoa_r+0xbd4>)
 8006536:	f7ff baa7 	b.w	8005a88 <_dtoa_r+0xd8>
 800653a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800653c:	2b00      	cmp	r3, #0
 800653e:	f47f aa80 	bne.w	8005a42 <_dtoa_r+0x92>
 8006542:	4b11      	ldr	r3, [pc, #68]	; (8006588 <_dtoa_r+0xbd8>)
 8006544:	f7ff baa0 	b.w	8005a88 <_dtoa_r+0xd8>
 8006548:	f1bb 0f00 	cmp.w	fp, #0
 800654c:	dc03      	bgt.n	8006556 <_dtoa_r+0xba6>
 800654e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006550:	2b02      	cmp	r3, #2
 8006552:	f73f aecc 	bgt.w	80062ee <_dtoa_r+0x93e>
 8006556:	9f08      	ldr	r7, [sp, #32]
 8006558:	4621      	mov	r1, r4
 800655a:	4650      	mov	r0, sl
 800655c:	f7ff f999 	bl	8005892 <quorem>
 8006560:	9a08      	ldr	r2, [sp, #32]
 8006562:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006566:	f807 3b01 	strb.w	r3, [r7], #1
 800656a:	1aba      	subs	r2, r7, r2
 800656c:	4593      	cmp	fp, r2
 800656e:	ddb9      	ble.n	80064e4 <_dtoa_r+0xb34>
 8006570:	4651      	mov	r1, sl
 8006572:	2300      	movs	r3, #0
 8006574:	220a      	movs	r2, #10
 8006576:	4628      	mov	r0, r5
 8006578:	f000 f892 	bl	80066a0 <__multadd>
 800657c:	4682      	mov	sl, r0
 800657e:	e7eb      	b.n	8006558 <_dtoa_r+0xba8>
 8006580:	08007e23 	.word	0x08007e23
 8006584:	08007d7c 	.word	0x08007d7c
 8006588:	08007da0 	.word	0x08007da0

0800658c <_localeconv_r>:
 800658c:	4800      	ldr	r0, [pc, #0]	; (8006590 <_localeconv_r+0x4>)
 800658e:	4770      	bx	lr
 8006590:	20000164 	.word	0x20000164

08006594 <malloc>:
 8006594:	4b02      	ldr	r3, [pc, #8]	; (80065a0 <malloc+0xc>)
 8006596:	4601      	mov	r1, r0
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	f000 bbfb 	b.w	8006d94 <_malloc_r>
 800659e:	bf00      	nop
 80065a0:	20000010 	.word	0x20000010

080065a4 <memchr>:
 80065a4:	4603      	mov	r3, r0
 80065a6:	b510      	push	{r4, lr}
 80065a8:	b2c9      	uxtb	r1, r1
 80065aa:	4402      	add	r2, r0
 80065ac:	4293      	cmp	r3, r2
 80065ae:	4618      	mov	r0, r3
 80065b0:	d101      	bne.n	80065b6 <memchr+0x12>
 80065b2:	2000      	movs	r0, #0
 80065b4:	e003      	b.n	80065be <memchr+0x1a>
 80065b6:	7804      	ldrb	r4, [r0, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	428c      	cmp	r4, r1
 80065bc:	d1f6      	bne.n	80065ac <memchr+0x8>
 80065be:	bd10      	pop	{r4, pc}

080065c0 <memcpy>:
 80065c0:	440a      	add	r2, r1
 80065c2:	4291      	cmp	r1, r2
 80065c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065c8:	d100      	bne.n	80065cc <memcpy+0xc>
 80065ca:	4770      	bx	lr
 80065cc:	b510      	push	{r4, lr}
 80065ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065d2:	4291      	cmp	r1, r2
 80065d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065d8:	d1f9      	bne.n	80065ce <memcpy+0xe>
 80065da:	bd10      	pop	{r4, pc}

080065dc <_Balloc>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065e0:	4604      	mov	r4, r0
 80065e2:	460d      	mov	r5, r1
 80065e4:	b976      	cbnz	r6, 8006604 <_Balloc+0x28>
 80065e6:	2010      	movs	r0, #16
 80065e8:	f7ff ffd4 	bl	8006594 <malloc>
 80065ec:	4602      	mov	r2, r0
 80065ee:	6260      	str	r0, [r4, #36]	; 0x24
 80065f0:	b920      	cbnz	r0, 80065fc <_Balloc+0x20>
 80065f2:	2166      	movs	r1, #102	; 0x66
 80065f4:	4b17      	ldr	r3, [pc, #92]	; (8006654 <_Balloc+0x78>)
 80065f6:	4818      	ldr	r0, [pc, #96]	; (8006658 <_Balloc+0x7c>)
 80065f8:	f000 fd92 	bl	8007120 <__assert_func>
 80065fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006600:	6006      	str	r6, [r0, #0]
 8006602:	60c6      	str	r6, [r0, #12]
 8006604:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006606:	68f3      	ldr	r3, [r6, #12]
 8006608:	b183      	cbz	r3, 800662c <_Balloc+0x50>
 800660a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006612:	b9b8      	cbnz	r0, 8006644 <_Balloc+0x68>
 8006614:	2101      	movs	r1, #1
 8006616:	fa01 f605 	lsl.w	r6, r1, r5
 800661a:	1d72      	adds	r2, r6, #5
 800661c:	4620      	mov	r0, r4
 800661e:	0092      	lsls	r2, r2, #2
 8006620:	f000 fb5e 	bl	8006ce0 <_calloc_r>
 8006624:	b160      	cbz	r0, 8006640 <_Balloc+0x64>
 8006626:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800662a:	e00e      	b.n	800664a <_Balloc+0x6e>
 800662c:	2221      	movs	r2, #33	; 0x21
 800662e:	2104      	movs	r1, #4
 8006630:	4620      	mov	r0, r4
 8006632:	f000 fb55 	bl	8006ce0 <_calloc_r>
 8006636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006638:	60f0      	str	r0, [r6, #12]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e4      	bne.n	800660a <_Balloc+0x2e>
 8006640:	2000      	movs	r0, #0
 8006642:	bd70      	pop	{r4, r5, r6, pc}
 8006644:	6802      	ldr	r2, [r0, #0]
 8006646:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800664a:	2300      	movs	r3, #0
 800664c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006650:	e7f7      	b.n	8006642 <_Balloc+0x66>
 8006652:	bf00      	nop
 8006654:	08007dad 	.word	0x08007dad
 8006658:	08007e34 	.word	0x08007e34

0800665c <_Bfree>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006660:	4605      	mov	r5, r0
 8006662:	460c      	mov	r4, r1
 8006664:	b976      	cbnz	r6, 8006684 <_Bfree+0x28>
 8006666:	2010      	movs	r0, #16
 8006668:	f7ff ff94 	bl	8006594 <malloc>
 800666c:	4602      	mov	r2, r0
 800666e:	6268      	str	r0, [r5, #36]	; 0x24
 8006670:	b920      	cbnz	r0, 800667c <_Bfree+0x20>
 8006672:	218a      	movs	r1, #138	; 0x8a
 8006674:	4b08      	ldr	r3, [pc, #32]	; (8006698 <_Bfree+0x3c>)
 8006676:	4809      	ldr	r0, [pc, #36]	; (800669c <_Bfree+0x40>)
 8006678:	f000 fd52 	bl	8007120 <__assert_func>
 800667c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006680:	6006      	str	r6, [r0, #0]
 8006682:	60c6      	str	r6, [r0, #12]
 8006684:	b13c      	cbz	r4, 8006696 <_Bfree+0x3a>
 8006686:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006688:	6862      	ldr	r2, [r4, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006690:	6021      	str	r1, [r4, #0]
 8006692:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	08007dad 	.word	0x08007dad
 800669c:	08007e34 	.word	0x08007e34

080066a0 <__multadd>:
 80066a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a4:	4698      	mov	r8, r3
 80066a6:	460c      	mov	r4, r1
 80066a8:	2300      	movs	r3, #0
 80066aa:	690e      	ldr	r6, [r1, #16]
 80066ac:	4607      	mov	r7, r0
 80066ae:	f101 0014 	add.w	r0, r1, #20
 80066b2:	6805      	ldr	r5, [r0, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	b2a9      	uxth	r1, r5
 80066b8:	fb02 8101 	mla	r1, r2, r1, r8
 80066bc:	0c2d      	lsrs	r5, r5, #16
 80066be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80066c2:	fb02 c505 	mla	r5, r2, r5, ip
 80066c6:	b289      	uxth	r1, r1
 80066c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80066cc:	429e      	cmp	r6, r3
 80066ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80066d2:	f840 1b04 	str.w	r1, [r0], #4
 80066d6:	dcec      	bgt.n	80066b2 <__multadd+0x12>
 80066d8:	f1b8 0f00 	cmp.w	r8, #0
 80066dc:	d022      	beq.n	8006724 <__multadd+0x84>
 80066de:	68a3      	ldr	r3, [r4, #8]
 80066e0:	42b3      	cmp	r3, r6
 80066e2:	dc19      	bgt.n	8006718 <__multadd+0x78>
 80066e4:	6861      	ldr	r1, [r4, #4]
 80066e6:	4638      	mov	r0, r7
 80066e8:	3101      	adds	r1, #1
 80066ea:	f7ff ff77 	bl	80065dc <_Balloc>
 80066ee:	4605      	mov	r5, r0
 80066f0:	b928      	cbnz	r0, 80066fe <__multadd+0x5e>
 80066f2:	4602      	mov	r2, r0
 80066f4:	21b5      	movs	r1, #181	; 0xb5
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <__multadd+0x8c>)
 80066f8:	480d      	ldr	r0, [pc, #52]	; (8006730 <__multadd+0x90>)
 80066fa:	f000 fd11 	bl	8007120 <__assert_func>
 80066fe:	6922      	ldr	r2, [r4, #16]
 8006700:	f104 010c 	add.w	r1, r4, #12
 8006704:	3202      	adds	r2, #2
 8006706:	0092      	lsls	r2, r2, #2
 8006708:	300c      	adds	r0, #12
 800670a:	f7ff ff59 	bl	80065c0 <memcpy>
 800670e:	4621      	mov	r1, r4
 8006710:	4638      	mov	r0, r7
 8006712:	f7ff ffa3 	bl	800665c <_Bfree>
 8006716:	462c      	mov	r4, r5
 8006718:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800671c:	3601      	adds	r6, #1
 800671e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006722:	6126      	str	r6, [r4, #16]
 8006724:	4620      	mov	r0, r4
 8006726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800672a:	bf00      	nop
 800672c:	08007e23 	.word	0x08007e23
 8006730:	08007e34 	.word	0x08007e34

08006734 <__hi0bits>:
 8006734:	0c02      	lsrs	r2, r0, #16
 8006736:	0412      	lsls	r2, r2, #16
 8006738:	4603      	mov	r3, r0
 800673a:	b9ca      	cbnz	r2, 8006770 <__hi0bits+0x3c>
 800673c:	0403      	lsls	r3, r0, #16
 800673e:	2010      	movs	r0, #16
 8006740:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006744:	bf04      	itt	eq
 8006746:	021b      	lsleq	r3, r3, #8
 8006748:	3008      	addeq	r0, #8
 800674a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800674e:	bf04      	itt	eq
 8006750:	011b      	lsleq	r3, r3, #4
 8006752:	3004      	addeq	r0, #4
 8006754:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006758:	bf04      	itt	eq
 800675a:	009b      	lsleq	r3, r3, #2
 800675c:	3002      	addeq	r0, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	db05      	blt.n	800676e <__hi0bits+0x3a>
 8006762:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006766:	f100 0001 	add.w	r0, r0, #1
 800676a:	bf08      	it	eq
 800676c:	2020      	moveq	r0, #32
 800676e:	4770      	bx	lr
 8006770:	2000      	movs	r0, #0
 8006772:	e7e5      	b.n	8006740 <__hi0bits+0xc>

08006774 <__lo0bits>:
 8006774:	6803      	ldr	r3, [r0, #0]
 8006776:	4602      	mov	r2, r0
 8006778:	f013 0007 	ands.w	r0, r3, #7
 800677c:	d00b      	beq.n	8006796 <__lo0bits+0x22>
 800677e:	07d9      	lsls	r1, r3, #31
 8006780:	d422      	bmi.n	80067c8 <__lo0bits+0x54>
 8006782:	0798      	lsls	r0, r3, #30
 8006784:	bf49      	itett	mi
 8006786:	085b      	lsrmi	r3, r3, #1
 8006788:	089b      	lsrpl	r3, r3, #2
 800678a:	2001      	movmi	r0, #1
 800678c:	6013      	strmi	r3, [r2, #0]
 800678e:	bf5c      	itt	pl
 8006790:	2002      	movpl	r0, #2
 8006792:	6013      	strpl	r3, [r2, #0]
 8006794:	4770      	bx	lr
 8006796:	b299      	uxth	r1, r3
 8006798:	b909      	cbnz	r1, 800679e <__lo0bits+0x2a>
 800679a:	2010      	movs	r0, #16
 800679c:	0c1b      	lsrs	r3, r3, #16
 800679e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80067a2:	bf04      	itt	eq
 80067a4:	0a1b      	lsreq	r3, r3, #8
 80067a6:	3008      	addeq	r0, #8
 80067a8:	0719      	lsls	r1, r3, #28
 80067aa:	bf04      	itt	eq
 80067ac:	091b      	lsreq	r3, r3, #4
 80067ae:	3004      	addeq	r0, #4
 80067b0:	0799      	lsls	r1, r3, #30
 80067b2:	bf04      	itt	eq
 80067b4:	089b      	lsreq	r3, r3, #2
 80067b6:	3002      	addeq	r0, #2
 80067b8:	07d9      	lsls	r1, r3, #31
 80067ba:	d403      	bmi.n	80067c4 <__lo0bits+0x50>
 80067bc:	085b      	lsrs	r3, r3, #1
 80067be:	f100 0001 	add.w	r0, r0, #1
 80067c2:	d003      	beq.n	80067cc <__lo0bits+0x58>
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	4770      	bx	lr
 80067c8:	2000      	movs	r0, #0
 80067ca:	4770      	bx	lr
 80067cc:	2020      	movs	r0, #32
 80067ce:	4770      	bx	lr

080067d0 <__i2b>:
 80067d0:	b510      	push	{r4, lr}
 80067d2:	460c      	mov	r4, r1
 80067d4:	2101      	movs	r1, #1
 80067d6:	f7ff ff01 	bl	80065dc <_Balloc>
 80067da:	4602      	mov	r2, r0
 80067dc:	b928      	cbnz	r0, 80067ea <__i2b+0x1a>
 80067de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80067e2:	4b04      	ldr	r3, [pc, #16]	; (80067f4 <__i2b+0x24>)
 80067e4:	4804      	ldr	r0, [pc, #16]	; (80067f8 <__i2b+0x28>)
 80067e6:	f000 fc9b 	bl	8007120 <__assert_func>
 80067ea:	2301      	movs	r3, #1
 80067ec:	6144      	str	r4, [r0, #20]
 80067ee:	6103      	str	r3, [r0, #16]
 80067f0:	bd10      	pop	{r4, pc}
 80067f2:	bf00      	nop
 80067f4:	08007e23 	.word	0x08007e23
 80067f8:	08007e34 	.word	0x08007e34

080067fc <__multiply>:
 80067fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	4614      	mov	r4, r2
 8006802:	690a      	ldr	r2, [r1, #16]
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	460d      	mov	r5, r1
 8006808:	429a      	cmp	r2, r3
 800680a:	bfbe      	ittt	lt
 800680c:	460b      	movlt	r3, r1
 800680e:	4625      	movlt	r5, r4
 8006810:	461c      	movlt	r4, r3
 8006812:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006816:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800681a:	68ab      	ldr	r3, [r5, #8]
 800681c:	6869      	ldr	r1, [r5, #4]
 800681e:	eb0a 0709 	add.w	r7, sl, r9
 8006822:	42bb      	cmp	r3, r7
 8006824:	b085      	sub	sp, #20
 8006826:	bfb8      	it	lt
 8006828:	3101      	addlt	r1, #1
 800682a:	f7ff fed7 	bl	80065dc <_Balloc>
 800682e:	b930      	cbnz	r0, 800683e <__multiply+0x42>
 8006830:	4602      	mov	r2, r0
 8006832:	f240 115d 	movw	r1, #349	; 0x15d
 8006836:	4b41      	ldr	r3, [pc, #260]	; (800693c <__multiply+0x140>)
 8006838:	4841      	ldr	r0, [pc, #260]	; (8006940 <__multiply+0x144>)
 800683a:	f000 fc71 	bl	8007120 <__assert_func>
 800683e:	f100 0614 	add.w	r6, r0, #20
 8006842:	4633      	mov	r3, r6
 8006844:	2200      	movs	r2, #0
 8006846:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800684a:	4543      	cmp	r3, r8
 800684c:	d31e      	bcc.n	800688c <__multiply+0x90>
 800684e:	f105 0c14 	add.w	ip, r5, #20
 8006852:	f104 0314 	add.w	r3, r4, #20
 8006856:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800685a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800685e:	9202      	str	r2, [sp, #8]
 8006860:	ebac 0205 	sub.w	r2, ip, r5
 8006864:	3a15      	subs	r2, #21
 8006866:	f022 0203 	bic.w	r2, r2, #3
 800686a:	3204      	adds	r2, #4
 800686c:	f105 0115 	add.w	r1, r5, #21
 8006870:	458c      	cmp	ip, r1
 8006872:	bf38      	it	cc
 8006874:	2204      	movcc	r2, #4
 8006876:	9201      	str	r2, [sp, #4]
 8006878:	9a02      	ldr	r2, [sp, #8]
 800687a:	9303      	str	r3, [sp, #12]
 800687c:	429a      	cmp	r2, r3
 800687e:	d808      	bhi.n	8006892 <__multiply+0x96>
 8006880:	2f00      	cmp	r7, #0
 8006882:	dc55      	bgt.n	8006930 <__multiply+0x134>
 8006884:	6107      	str	r7, [r0, #16]
 8006886:	b005      	add	sp, #20
 8006888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688c:	f843 2b04 	str.w	r2, [r3], #4
 8006890:	e7db      	b.n	800684a <__multiply+0x4e>
 8006892:	f8b3 a000 	ldrh.w	sl, [r3]
 8006896:	f1ba 0f00 	cmp.w	sl, #0
 800689a:	d020      	beq.n	80068de <__multiply+0xe2>
 800689c:	46b1      	mov	r9, r6
 800689e:	2200      	movs	r2, #0
 80068a0:	f105 0e14 	add.w	lr, r5, #20
 80068a4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80068a8:	f8d9 b000 	ldr.w	fp, [r9]
 80068ac:	b2a1      	uxth	r1, r4
 80068ae:	fa1f fb8b 	uxth.w	fp, fp
 80068b2:	fb0a b101 	mla	r1, sl, r1, fp
 80068b6:	4411      	add	r1, r2
 80068b8:	f8d9 2000 	ldr.w	r2, [r9]
 80068bc:	0c24      	lsrs	r4, r4, #16
 80068be:	0c12      	lsrs	r2, r2, #16
 80068c0:	fb0a 2404 	mla	r4, sl, r4, r2
 80068c4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80068c8:	b289      	uxth	r1, r1
 80068ca:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80068ce:	45f4      	cmp	ip, lr
 80068d0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80068d4:	f849 1b04 	str.w	r1, [r9], #4
 80068d8:	d8e4      	bhi.n	80068a4 <__multiply+0xa8>
 80068da:	9901      	ldr	r1, [sp, #4]
 80068dc:	5072      	str	r2, [r6, r1]
 80068de:	9a03      	ldr	r2, [sp, #12]
 80068e0:	3304      	adds	r3, #4
 80068e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068e6:	f1b9 0f00 	cmp.w	r9, #0
 80068ea:	d01f      	beq.n	800692c <__multiply+0x130>
 80068ec:	46b6      	mov	lr, r6
 80068ee:	f04f 0a00 	mov.w	sl, #0
 80068f2:	6834      	ldr	r4, [r6, #0]
 80068f4:	f105 0114 	add.w	r1, r5, #20
 80068f8:	880a      	ldrh	r2, [r1, #0]
 80068fa:	f8be b002 	ldrh.w	fp, [lr, #2]
 80068fe:	b2a4      	uxth	r4, r4
 8006900:	fb09 b202 	mla	r2, r9, r2, fp
 8006904:	4492      	add	sl, r2
 8006906:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800690a:	f84e 4b04 	str.w	r4, [lr], #4
 800690e:	f851 4b04 	ldr.w	r4, [r1], #4
 8006912:	f8be 2000 	ldrh.w	r2, [lr]
 8006916:	0c24      	lsrs	r4, r4, #16
 8006918:	fb09 2404 	mla	r4, r9, r4, r2
 800691c:	458c      	cmp	ip, r1
 800691e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006922:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006926:	d8e7      	bhi.n	80068f8 <__multiply+0xfc>
 8006928:	9a01      	ldr	r2, [sp, #4]
 800692a:	50b4      	str	r4, [r6, r2]
 800692c:	3604      	adds	r6, #4
 800692e:	e7a3      	b.n	8006878 <__multiply+0x7c>
 8006930:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1a5      	bne.n	8006884 <__multiply+0x88>
 8006938:	3f01      	subs	r7, #1
 800693a:	e7a1      	b.n	8006880 <__multiply+0x84>
 800693c:	08007e23 	.word	0x08007e23
 8006940:	08007e34 	.word	0x08007e34

08006944 <__pow5mult>:
 8006944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006948:	4615      	mov	r5, r2
 800694a:	f012 0203 	ands.w	r2, r2, #3
 800694e:	4606      	mov	r6, r0
 8006950:	460f      	mov	r7, r1
 8006952:	d007      	beq.n	8006964 <__pow5mult+0x20>
 8006954:	4c25      	ldr	r4, [pc, #148]	; (80069ec <__pow5mult+0xa8>)
 8006956:	3a01      	subs	r2, #1
 8006958:	2300      	movs	r3, #0
 800695a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800695e:	f7ff fe9f 	bl	80066a0 <__multadd>
 8006962:	4607      	mov	r7, r0
 8006964:	10ad      	asrs	r5, r5, #2
 8006966:	d03d      	beq.n	80069e4 <__pow5mult+0xa0>
 8006968:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800696a:	b97c      	cbnz	r4, 800698c <__pow5mult+0x48>
 800696c:	2010      	movs	r0, #16
 800696e:	f7ff fe11 	bl	8006594 <malloc>
 8006972:	4602      	mov	r2, r0
 8006974:	6270      	str	r0, [r6, #36]	; 0x24
 8006976:	b928      	cbnz	r0, 8006984 <__pow5mult+0x40>
 8006978:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800697c:	4b1c      	ldr	r3, [pc, #112]	; (80069f0 <__pow5mult+0xac>)
 800697e:	481d      	ldr	r0, [pc, #116]	; (80069f4 <__pow5mult+0xb0>)
 8006980:	f000 fbce 	bl	8007120 <__assert_func>
 8006984:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006988:	6004      	str	r4, [r0, #0]
 800698a:	60c4      	str	r4, [r0, #12]
 800698c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006990:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006994:	b94c      	cbnz	r4, 80069aa <__pow5mult+0x66>
 8006996:	f240 2171 	movw	r1, #625	; 0x271
 800699a:	4630      	mov	r0, r6
 800699c:	f7ff ff18 	bl	80067d0 <__i2b>
 80069a0:	2300      	movs	r3, #0
 80069a2:	4604      	mov	r4, r0
 80069a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80069a8:	6003      	str	r3, [r0, #0]
 80069aa:	f04f 0900 	mov.w	r9, #0
 80069ae:	07eb      	lsls	r3, r5, #31
 80069b0:	d50a      	bpl.n	80069c8 <__pow5mult+0x84>
 80069b2:	4639      	mov	r1, r7
 80069b4:	4622      	mov	r2, r4
 80069b6:	4630      	mov	r0, r6
 80069b8:	f7ff ff20 	bl	80067fc <__multiply>
 80069bc:	4680      	mov	r8, r0
 80069be:	4639      	mov	r1, r7
 80069c0:	4630      	mov	r0, r6
 80069c2:	f7ff fe4b 	bl	800665c <_Bfree>
 80069c6:	4647      	mov	r7, r8
 80069c8:	106d      	asrs	r5, r5, #1
 80069ca:	d00b      	beq.n	80069e4 <__pow5mult+0xa0>
 80069cc:	6820      	ldr	r0, [r4, #0]
 80069ce:	b938      	cbnz	r0, 80069e0 <__pow5mult+0x9c>
 80069d0:	4622      	mov	r2, r4
 80069d2:	4621      	mov	r1, r4
 80069d4:	4630      	mov	r0, r6
 80069d6:	f7ff ff11 	bl	80067fc <__multiply>
 80069da:	6020      	str	r0, [r4, #0]
 80069dc:	f8c0 9000 	str.w	r9, [r0]
 80069e0:	4604      	mov	r4, r0
 80069e2:	e7e4      	b.n	80069ae <__pow5mult+0x6a>
 80069e4:	4638      	mov	r0, r7
 80069e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ea:	bf00      	nop
 80069ec:	08007f88 	.word	0x08007f88
 80069f0:	08007dad 	.word	0x08007dad
 80069f4:	08007e34 	.word	0x08007e34

080069f8 <__lshift>:
 80069f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069fc:	460c      	mov	r4, r1
 80069fe:	4607      	mov	r7, r0
 8006a00:	4691      	mov	r9, r2
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	6849      	ldr	r1, [r1, #4]
 8006a06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a0a:	68a3      	ldr	r3, [r4, #8]
 8006a0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a10:	f108 0601 	add.w	r6, r8, #1
 8006a14:	42b3      	cmp	r3, r6
 8006a16:	db0b      	blt.n	8006a30 <__lshift+0x38>
 8006a18:	4638      	mov	r0, r7
 8006a1a:	f7ff fddf 	bl	80065dc <_Balloc>
 8006a1e:	4605      	mov	r5, r0
 8006a20:	b948      	cbnz	r0, 8006a36 <__lshift+0x3e>
 8006a22:	4602      	mov	r2, r0
 8006a24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a28:	4b27      	ldr	r3, [pc, #156]	; (8006ac8 <__lshift+0xd0>)
 8006a2a:	4828      	ldr	r0, [pc, #160]	; (8006acc <__lshift+0xd4>)
 8006a2c:	f000 fb78 	bl	8007120 <__assert_func>
 8006a30:	3101      	adds	r1, #1
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	e7ee      	b.n	8006a14 <__lshift+0x1c>
 8006a36:	2300      	movs	r3, #0
 8006a38:	f100 0114 	add.w	r1, r0, #20
 8006a3c:	f100 0210 	add.w	r2, r0, #16
 8006a40:	4618      	mov	r0, r3
 8006a42:	4553      	cmp	r3, sl
 8006a44:	db33      	blt.n	8006aae <__lshift+0xb6>
 8006a46:	6920      	ldr	r0, [r4, #16]
 8006a48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a4c:	f104 0314 	add.w	r3, r4, #20
 8006a50:	f019 091f 	ands.w	r9, r9, #31
 8006a54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a5c:	d02b      	beq.n	8006ab6 <__lshift+0xbe>
 8006a5e:	468a      	mov	sl, r1
 8006a60:	2200      	movs	r2, #0
 8006a62:	f1c9 0e20 	rsb	lr, r9, #32
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	fa00 f009 	lsl.w	r0, r0, r9
 8006a6c:	4302      	orrs	r2, r0
 8006a6e:	f84a 2b04 	str.w	r2, [sl], #4
 8006a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a76:	459c      	cmp	ip, r3
 8006a78:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a7c:	d8f3      	bhi.n	8006a66 <__lshift+0x6e>
 8006a7e:	ebac 0304 	sub.w	r3, ip, r4
 8006a82:	3b15      	subs	r3, #21
 8006a84:	f023 0303 	bic.w	r3, r3, #3
 8006a88:	3304      	adds	r3, #4
 8006a8a:	f104 0015 	add.w	r0, r4, #21
 8006a8e:	4584      	cmp	ip, r0
 8006a90:	bf38      	it	cc
 8006a92:	2304      	movcc	r3, #4
 8006a94:	50ca      	str	r2, [r1, r3]
 8006a96:	b10a      	cbz	r2, 8006a9c <__lshift+0xa4>
 8006a98:	f108 0602 	add.w	r6, r8, #2
 8006a9c:	3e01      	subs	r6, #1
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	612e      	str	r6, [r5, #16]
 8006aa4:	f7ff fdda 	bl	800665c <_Bfree>
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aae:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	e7c5      	b.n	8006a42 <__lshift+0x4a>
 8006ab6:	3904      	subs	r1, #4
 8006ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006abc:	459c      	cmp	ip, r3
 8006abe:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ac2:	d8f9      	bhi.n	8006ab8 <__lshift+0xc0>
 8006ac4:	e7ea      	b.n	8006a9c <__lshift+0xa4>
 8006ac6:	bf00      	nop
 8006ac8:	08007e23 	.word	0x08007e23
 8006acc:	08007e34 	.word	0x08007e34

08006ad0 <__mcmp>:
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	690a      	ldr	r2, [r1, #16]
 8006ad4:	6900      	ldr	r0, [r0, #16]
 8006ad6:	b530      	push	{r4, r5, lr}
 8006ad8:	1a80      	subs	r0, r0, r2
 8006ada:	d10d      	bne.n	8006af8 <__mcmp+0x28>
 8006adc:	3314      	adds	r3, #20
 8006ade:	3114      	adds	r1, #20
 8006ae0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ae4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ae8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006aec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006af0:	4295      	cmp	r5, r2
 8006af2:	d002      	beq.n	8006afa <__mcmp+0x2a>
 8006af4:	d304      	bcc.n	8006b00 <__mcmp+0x30>
 8006af6:	2001      	movs	r0, #1
 8006af8:	bd30      	pop	{r4, r5, pc}
 8006afa:	42a3      	cmp	r3, r4
 8006afc:	d3f4      	bcc.n	8006ae8 <__mcmp+0x18>
 8006afe:	e7fb      	b.n	8006af8 <__mcmp+0x28>
 8006b00:	f04f 30ff 	mov.w	r0, #4294967295
 8006b04:	e7f8      	b.n	8006af8 <__mcmp+0x28>
	...

08006b08 <__mdiff>:
 8006b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	4606      	mov	r6, r0
 8006b10:	4611      	mov	r1, r2
 8006b12:	4620      	mov	r0, r4
 8006b14:	4692      	mov	sl, r2
 8006b16:	f7ff ffdb 	bl	8006ad0 <__mcmp>
 8006b1a:	1e05      	subs	r5, r0, #0
 8006b1c:	d111      	bne.n	8006b42 <__mdiff+0x3a>
 8006b1e:	4629      	mov	r1, r5
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7ff fd5b 	bl	80065dc <_Balloc>
 8006b26:	4602      	mov	r2, r0
 8006b28:	b928      	cbnz	r0, 8006b36 <__mdiff+0x2e>
 8006b2a:	f240 2132 	movw	r1, #562	; 0x232
 8006b2e:	4b3c      	ldr	r3, [pc, #240]	; (8006c20 <__mdiff+0x118>)
 8006b30:	483c      	ldr	r0, [pc, #240]	; (8006c24 <__mdiff+0x11c>)
 8006b32:	f000 faf5 	bl	8007120 <__assert_func>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b42:	bfa4      	itt	ge
 8006b44:	4653      	movge	r3, sl
 8006b46:	46a2      	movge	sl, r4
 8006b48:	4630      	mov	r0, r6
 8006b4a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006b4e:	bfa6      	itte	ge
 8006b50:	461c      	movge	r4, r3
 8006b52:	2500      	movge	r5, #0
 8006b54:	2501      	movlt	r5, #1
 8006b56:	f7ff fd41 	bl	80065dc <_Balloc>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	b918      	cbnz	r0, 8006b66 <__mdiff+0x5e>
 8006b5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b62:	4b2f      	ldr	r3, [pc, #188]	; (8006c20 <__mdiff+0x118>)
 8006b64:	e7e4      	b.n	8006b30 <__mdiff+0x28>
 8006b66:	f100 0814 	add.w	r8, r0, #20
 8006b6a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006b6e:	60c5      	str	r5, [r0, #12]
 8006b70:	f04f 0c00 	mov.w	ip, #0
 8006b74:	f10a 0514 	add.w	r5, sl, #20
 8006b78:	f10a 0010 	add.w	r0, sl, #16
 8006b7c:	46c2      	mov	sl, r8
 8006b7e:	6926      	ldr	r6, [r4, #16]
 8006b80:	f104 0914 	add.w	r9, r4, #20
 8006b84:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006b88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b8c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006b90:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b94:	fa1f f18b 	uxth.w	r1, fp
 8006b98:	4461      	add	r1, ip
 8006b9a:	fa1f fc83 	uxth.w	ip, r3
 8006b9e:	0c1b      	lsrs	r3, r3, #16
 8006ba0:	eba1 010c 	sub.w	r1, r1, ip
 8006ba4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ba8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006bac:	b289      	uxth	r1, r1
 8006bae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006bb2:	454e      	cmp	r6, r9
 8006bb4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006bb8:	f84a 3b04 	str.w	r3, [sl], #4
 8006bbc:	d8e6      	bhi.n	8006b8c <__mdiff+0x84>
 8006bbe:	1b33      	subs	r3, r6, r4
 8006bc0:	3b15      	subs	r3, #21
 8006bc2:	f023 0303 	bic.w	r3, r3, #3
 8006bc6:	3415      	adds	r4, #21
 8006bc8:	3304      	adds	r3, #4
 8006bca:	42a6      	cmp	r6, r4
 8006bcc:	bf38      	it	cc
 8006bce:	2304      	movcc	r3, #4
 8006bd0:	441d      	add	r5, r3
 8006bd2:	4443      	add	r3, r8
 8006bd4:	461e      	mov	r6, r3
 8006bd6:	462c      	mov	r4, r5
 8006bd8:	4574      	cmp	r4, lr
 8006bda:	d30e      	bcc.n	8006bfa <__mdiff+0xf2>
 8006bdc:	f10e 0103 	add.w	r1, lr, #3
 8006be0:	1b49      	subs	r1, r1, r5
 8006be2:	f021 0103 	bic.w	r1, r1, #3
 8006be6:	3d03      	subs	r5, #3
 8006be8:	45ae      	cmp	lr, r5
 8006bea:	bf38      	it	cc
 8006bec:	2100      	movcc	r1, #0
 8006bee:	4419      	add	r1, r3
 8006bf0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006bf4:	b18b      	cbz	r3, 8006c1a <__mdiff+0x112>
 8006bf6:	6117      	str	r7, [r2, #16]
 8006bf8:	e7a0      	b.n	8006b3c <__mdiff+0x34>
 8006bfa:	f854 8b04 	ldr.w	r8, [r4], #4
 8006bfe:	fa1f f188 	uxth.w	r1, r8
 8006c02:	4461      	add	r1, ip
 8006c04:	1408      	asrs	r0, r1, #16
 8006c06:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006c0a:	b289      	uxth	r1, r1
 8006c0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c14:	f846 1b04 	str.w	r1, [r6], #4
 8006c18:	e7de      	b.n	8006bd8 <__mdiff+0xd0>
 8006c1a:	3f01      	subs	r7, #1
 8006c1c:	e7e8      	b.n	8006bf0 <__mdiff+0xe8>
 8006c1e:	bf00      	nop
 8006c20:	08007e23 	.word	0x08007e23
 8006c24:	08007e34 	.word	0x08007e34

08006c28 <__d2b>:
 8006c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006c32:	4690      	mov	r8, r2
 8006c34:	461d      	mov	r5, r3
 8006c36:	f7ff fcd1 	bl	80065dc <_Balloc>
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	b930      	cbnz	r0, 8006c4c <__d2b+0x24>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	f240 310a 	movw	r1, #778	; 0x30a
 8006c44:	4b24      	ldr	r3, [pc, #144]	; (8006cd8 <__d2b+0xb0>)
 8006c46:	4825      	ldr	r0, [pc, #148]	; (8006cdc <__d2b+0xb4>)
 8006c48:	f000 fa6a 	bl	8007120 <__assert_func>
 8006c4c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006c50:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006c54:	bb2d      	cbnz	r5, 8006ca2 <__d2b+0x7a>
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	f1b8 0300 	subs.w	r3, r8, #0
 8006c5c:	d026      	beq.n	8006cac <__d2b+0x84>
 8006c5e:	4668      	mov	r0, sp
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	f7ff fd87 	bl	8006774 <__lo0bits>
 8006c66:	9900      	ldr	r1, [sp, #0]
 8006c68:	b1f0      	cbz	r0, 8006ca8 <__d2b+0x80>
 8006c6a:	9a01      	ldr	r2, [sp, #4]
 8006c6c:	f1c0 0320 	rsb	r3, r0, #32
 8006c70:	fa02 f303 	lsl.w	r3, r2, r3
 8006c74:	430b      	orrs	r3, r1
 8006c76:	40c2      	lsrs	r2, r0
 8006c78:	6163      	str	r3, [r4, #20]
 8006c7a:	9201      	str	r2, [sp, #4]
 8006c7c:	9b01      	ldr	r3, [sp, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	bf14      	ite	ne
 8006c82:	2102      	movne	r1, #2
 8006c84:	2101      	moveq	r1, #1
 8006c86:	61a3      	str	r3, [r4, #24]
 8006c88:	6121      	str	r1, [r4, #16]
 8006c8a:	b1c5      	cbz	r5, 8006cbe <__d2b+0x96>
 8006c8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c90:	4405      	add	r5, r0
 8006c92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c96:	603d      	str	r5, [r7, #0]
 8006c98:	6030      	str	r0, [r6, #0]
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	b002      	add	sp, #8
 8006c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ca6:	e7d6      	b.n	8006c56 <__d2b+0x2e>
 8006ca8:	6161      	str	r1, [r4, #20]
 8006caa:	e7e7      	b.n	8006c7c <__d2b+0x54>
 8006cac:	a801      	add	r0, sp, #4
 8006cae:	f7ff fd61 	bl	8006774 <__lo0bits>
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	9b01      	ldr	r3, [sp, #4]
 8006cb6:	6121      	str	r1, [r4, #16]
 8006cb8:	6163      	str	r3, [r4, #20]
 8006cba:	3020      	adds	r0, #32
 8006cbc:	e7e5      	b.n	8006c8a <__d2b+0x62>
 8006cbe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006cc2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cc6:	6038      	str	r0, [r7, #0]
 8006cc8:	6918      	ldr	r0, [r3, #16]
 8006cca:	f7ff fd33 	bl	8006734 <__hi0bits>
 8006cce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006cd2:	6031      	str	r1, [r6, #0]
 8006cd4:	e7e1      	b.n	8006c9a <__d2b+0x72>
 8006cd6:	bf00      	nop
 8006cd8:	08007e23 	.word	0x08007e23
 8006cdc:	08007e34 	.word	0x08007e34

08006ce0 <_calloc_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	fb02 f501 	mul.w	r5, r2, r1
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	f000 f854 	bl	8006d94 <_malloc_r>
 8006cec:	4604      	mov	r4, r0
 8006cee:	b118      	cbz	r0, 8006cf8 <_calloc_r+0x18>
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	f7fe f936 	bl	8004f64 <memset>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	bd38      	pop	{r3, r4, r5, pc}

08006cfc <_free_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4605      	mov	r5, r0
 8006d00:	2900      	cmp	r1, #0
 8006d02:	d043      	beq.n	8006d8c <_free_r+0x90>
 8006d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d08:	1f0c      	subs	r4, r1, #4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bfb8      	it	lt
 8006d0e:	18e4      	addlt	r4, r4, r3
 8006d10:	f000 fa62 	bl	80071d8 <__malloc_lock>
 8006d14:	4a1e      	ldr	r2, [pc, #120]	; (8006d90 <_free_r+0x94>)
 8006d16:	6813      	ldr	r3, [r2, #0]
 8006d18:	4610      	mov	r0, r2
 8006d1a:	b933      	cbnz	r3, 8006d2a <_free_r+0x2e>
 8006d1c:	6063      	str	r3, [r4, #4]
 8006d1e:	6014      	str	r4, [r2, #0]
 8006d20:	4628      	mov	r0, r5
 8006d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d26:	f000 ba5d 	b.w	80071e4 <__malloc_unlock>
 8006d2a:	42a3      	cmp	r3, r4
 8006d2c:	d90a      	bls.n	8006d44 <_free_r+0x48>
 8006d2e:	6821      	ldr	r1, [r4, #0]
 8006d30:	1862      	adds	r2, r4, r1
 8006d32:	4293      	cmp	r3, r2
 8006d34:	bf01      	itttt	eq
 8006d36:	681a      	ldreq	r2, [r3, #0]
 8006d38:	685b      	ldreq	r3, [r3, #4]
 8006d3a:	1852      	addeq	r2, r2, r1
 8006d3c:	6022      	streq	r2, [r4, #0]
 8006d3e:	6063      	str	r3, [r4, #4]
 8006d40:	6004      	str	r4, [r0, #0]
 8006d42:	e7ed      	b.n	8006d20 <_free_r+0x24>
 8006d44:	461a      	mov	r2, r3
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	b10b      	cbz	r3, 8006d4e <_free_r+0x52>
 8006d4a:	42a3      	cmp	r3, r4
 8006d4c:	d9fa      	bls.n	8006d44 <_free_r+0x48>
 8006d4e:	6811      	ldr	r1, [r2, #0]
 8006d50:	1850      	adds	r0, r2, r1
 8006d52:	42a0      	cmp	r0, r4
 8006d54:	d10b      	bne.n	8006d6e <_free_r+0x72>
 8006d56:	6820      	ldr	r0, [r4, #0]
 8006d58:	4401      	add	r1, r0
 8006d5a:	1850      	adds	r0, r2, r1
 8006d5c:	4283      	cmp	r3, r0
 8006d5e:	6011      	str	r1, [r2, #0]
 8006d60:	d1de      	bne.n	8006d20 <_free_r+0x24>
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4401      	add	r1, r0
 8006d68:	6011      	str	r1, [r2, #0]
 8006d6a:	6053      	str	r3, [r2, #4]
 8006d6c:	e7d8      	b.n	8006d20 <_free_r+0x24>
 8006d6e:	d902      	bls.n	8006d76 <_free_r+0x7a>
 8006d70:	230c      	movs	r3, #12
 8006d72:	602b      	str	r3, [r5, #0]
 8006d74:	e7d4      	b.n	8006d20 <_free_r+0x24>
 8006d76:	6820      	ldr	r0, [r4, #0]
 8006d78:	1821      	adds	r1, r4, r0
 8006d7a:	428b      	cmp	r3, r1
 8006d7c:	bf01      	itttt	eq
 8006d7e:	6819      	ldreq	r1, [r3, #0]
 8006d80:	685b      	ldreq	r3, [r3, #4]
 8006d82:	1809      	addeq	r1, r1, r0
 8006d84:	6021      	streq	r1, [r4, #0]
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	6054      	str	r4, [r2, #4]
 8006d8a:	e7c9      	b.n	8006d20 <_free_r+0x24>
 8006d8c:	bd38      	pop	{r3, r4, r5, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000418 	.word	0x20000418

08006d94 <_malloc_r>:
 8006d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d96:	1ccd      	adds	r5, r1, #3
 8006d98:	f025 0503 	bic.w	r5, r5, #3
 8006d9c:	3508      	adds	r5, #8
 8006d9e:	2d0c      	cmp	r5, #12
 8006da0:	bf38      	it	cc
 8006da2:	250c      	movcc	r5, #12
 8006da4:	2d00      	cmp	r5, #0
 8006da6:	4606      	mov	r6, r0
 8006da8:	db01      	blt.n	8006dae <_malloc_r+0x1a>
 8006daa:	42a9      	cmp	r1, r5
 8006dac:	d903      	bls.n	8006db6 <_malloc_r+0x22>
 8006dae:	230c      	movs	r3, #12
 8006db0:	6033      	str	r3, [r6, #0]
 8006db2:	2000      	movs	r0, #0
 8006db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006db6:	f000 fa0f 	bl	80071d8 <__malloc_lock>
 8006dba:	4921      	ldr	r1, [pc, #132]	; (8006e40 <_malloc_r+0xac>)
 8006dbc:	680a      	ldr	r2, [r1, #0]
 8006dbe:	4614      	mov	r4, r2
 8006dc0:	b99c      	cbnz	r4, 8006dea <_malloc_r+0x56>
 8006dc2:	4f20      	ldr	r7, [pc, #128]	; (8006e44 <_malloc_r+0xb0>)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	b923      	cbnz	r3, 8006dd2 <_malloc_r+0x3e>
 8006dc8:	4621      	mov	r1, r4
 8006dca:	4630      	mov	r0, r6
 8006dcc:	f000 f998 	bl	8007100 <_sbrk_r>
 8006dd0:	6038      	str	r0, [r7, #0]
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f000 f993 	bl	8007100 <_sbrk_r>
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	d123      	bne.n	8006e26 <_malloc_r+0x92>
 8006dde:	230c      	movs	r3, #12
 8006de0:	4630      	mov	r0, r6
 8006de2:	6033      	str	r3, [r6, #0]
 8006de4:	f000 f9fe 	bl	80071e4 <__malloc_unlock>
 8006de8:	e7e3      	b.n	8006db2 <_malloc_r+0x1e>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	1b5b      	subs	r3, r3, r5
 8006dee:	d417      	bmi.n	8006e20 <_malloc_r+0x8c>
 8006df0:	2b0b      	cmp	r3, #11
 8006df2:	d903      	bls.n	8006dfc <_malloc_r+0x68>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	441c      	add	r4, r3
 8006df8:	6025      	str	r5, [r4, #0]
 8006dfa:	e004      	b.n	8006e06 <_malloc_r+0x72>
 8006dfc:	6863      	ldr	r3, [r4, #4]
 8006dfe:	42a2      	cmp	r2, r4
 8006e00:	bf0c      	ite	eq
 8006e02:	600b      	streq	r3, [r1, #0]
 8006e04:	6053      	strne	r3, [r2, #4]
 8006e06:	4630      	mov	r0, r6
 8006e08:	f000 f9ec 	bl	80071e4 <__malloc_unlock>
 8006e0c:	f104 000b 	add.w	r0, r4, #11
 8006e10:	1d23      	adds	r3, r4, #4
 8006e12:	f020 0007 	bic.w	r0, r0, #7
 8006e16:	1ac2      	subs	r2, r0, r3
 8006e18:	d0cc      	beq.n	8006db4 <_malloc_r+0x20>
 8006e1a:	1a1b      	subs	r3, r3, r0
 8006e1c:	50a3      	str	r3, [r4, r2]
 8006e1e:	e7c9      	b.n	8006db4 <_malloc_r+0x20>
 8006e20:	4622      	mov	r2, r4
 8006e22:	6864      	ldr	r4, [r4, #4]
 8006e24:	e7cc      	b.n	8006dc0 <_malloc_r+0x2c>
 8006e26:	1cc4      	adds	r4, r0, #3
 8006e28:	f024 0403 	bic.w	r4, r4, #3
 8006e2c:	42a0      	cmp	r0, r4
 8006e2e:	d0e3      	beq.n	8006df8 <_malloc_r+0x64>
 8006e30:	1a21      	subs	r1, r4, r0
 8006e32:	4630      	mov	r0, r6
 8006e34:	f000 f964 	bl	8007100 <_sbrk_r>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d1dd      	bne.n	8006df8 <_malloc_r+0x64>
 8006e3c:	e7cf      	b.n	8006dde <_malloc_r+0x4a>
 8006e3e:	bf00      	nop
 8006e40:	20000418 	.word	0x20000418
 8006e44:	2000041c 	.word	0x2000041c

08006e48 <__ssputs_r>:
 8006e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e4c:	688e      	ldr	r6, [r1, #8]
 8006e4e:	4682      	mov	sl, r0
 8006e50:	429e      	cmp	r6, r3
 8006e52:	460c      	mov	r4, r1
 8006e54:	4690      	mov	r8, r2
 8006e56:	461f      	mov	r7, r3
 8006e58:	d838      	bhi.n	8006ecc <__ssputs_r+0x84>
 8006e5a:	898a      	ldrh	r2, [r1, #12]
 8006e5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e60:	d032      	beq.n	8006ec8 <__ssputs_r+0x80>
 8006e62:	6825      	ldr	r5, [r4, #0]
 8006e64:	6909      	ldr	r1, [r1, #16]
 8006e66:	3301      	adds	r3, #1
 8006e68:	eba5 0901 	sub.w	r9, r5, r1
 8006e6c:	6965      	ldr	r5, [r4, #20]
 8006e6e:	444b      	add	r3, r9
 8006e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e78:	106d      	asrs	r5, r5, #1
 8006e7a:	429d      	cmp	r5, r3
 8006e7c:	bf38      	it	cc
 8006e7e:	461d      	movcc	r5, r3
 8006e80:	0553      	lsls	r3, r2, #21
 8006e82:	d531      	bpl.n	8006ee8 <__ssputs_r+0xa0>
 8006e84:	4629      	mov	r1, r5
 8006e86:	f7ff ff85 	bl	8006d94 <_malloc_r>
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	b950      	cbnz	r0, 8006ea4 <__ssputs_r+0x5c>
 8006e8e:	230c      	movs	r3, #12
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	f8ca 3000 	str.w	r3, [sl]
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e9e:	81a3      	strh	r3, [r4, #12]
 8006ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea4:	464a      	mov	r2, r9
 8006ea6:	6921      	ldr	r1, [r4, #16]
 8006ea8:	f7ff fb8a 	bl	80065c0 <memcpy>
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	6126      	str	r6, [r4, #16]
 8006eba:	444e      	add	r6, r9
 8006ebc:	6026      	str	r6, [r4, #0]
 8006ebe:	463e      	mov	r6, r7
 8006ec0:	6165      	str	r5, [r4, #20]
 8006ec2:	eba5 0509 	sub.w	r5, r5, r9
 8006ec6:	60a5      	str	r5, [r4, #8]
 8006ec8:	42be      	cmp	r6, r7
 8006eca:	d900      	bls.n	8006ece <__ssputs_r+0x86>
 8006ecc:	463e      	mov	r6, r7
 8006ece:	4632      	mov	r2, r6
 8006ed0:	4641      	mov	r1, r8
 8006ed2:	6820      	ldr	r0, [r4, #0]
 8006ed4:	f000 f966 	bl	80071a4 <memmove>
 8006ed8:	68a3      	ldr	r3, [r4, #8]
 8006eda:	6822      	ldr	r2, [r4, #0]
 8006edc:	1b9b      	subs	r3, r3, r6
 8006ede:	4432      	add	r2, r6
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	60a3      	str	r3, [r4, #8]
 8006ee4:	6022      	str	r2, [r4, #0]
 8006ee6:	e7db      	b.n	8006ea0 <__ssputs_r+0x58>
 8006ee8:	462a      	mov	r2, r5
 8006eea:	f000 f981 	bl	80071f0 <_realloc_r>
 8006eee:	4606      	mov	r6, r0
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d1e1      	bne.n	8006eb8 <__ssputs_r+0x70>
 8006ef4:	4650      	mov	r0, sl
 8006ef6:	6921      	ldr	r1, [r4, #16]
 8006ef8:	f7ff ff00 	bl	8006cfc <_free_r>
 8006efc:	e7c7      	b.n	8006e8e <__ssputs_r+0x46>
	...

08006f00 <_svfiprintf_r>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	4698      	mov	r8, r3
 8006f06:	898b      	ldrh	r3, [r1, #12]
 8006f08:	4607      	mov	r7, r0
 8006f0a:	061b      	lsls	r3, r3, #24
 8006f0c:	460d      	mov	r5, r1
 8006f0e:	4614      	mov	r4, r2
 8006f10:	b09d      	sub	sp, #116	; 0x74
 8006f12:	d50e      	bpl.n	8006f32 <_svfiprintf_r+0x32>
 8006f14:	690b      	ldr	r3, [r1, #16]
 8006f16:	b963      	cbnz	r3, 8006f32 <_svfiprintf_r+0x32>
 8006f18:	2140      	movs	r1, #64	; 0x40
 8006f1a:	f7ff ff3b 	bl	8006d94 <_malloc_r>
 8006f1e:	6028      	str	r0, [r5, #0]
 8006f20:	6128      	str	r0, [r5, #16]
 8006f22:	b920      	cbnz	r0, 8006f2e <_svfiprintf_r+0x2e>
 8006f24:	230c      	movs	r3, #12
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	e0d1      	b.n	80070d2 <_svfiprintf_r+0x1d2>
 8006f2e:	2340      	movs	r3, #64	; 0x40
 8006f30:	616b      	str	r3, [r5, #20]
 8006f32:	2300      	movs	r3, #0
 8006f34:	9309      	str	r3, [sp, #36]	; 0x24
 8006f36:	2320      	movs	r3, #32
 8006f38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f3c:	2330      	movs	r3, #48	; 0x30
 8006f3e:	f04f 0901 	mov.w	r9, #1
 8006f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80070ec <_svfiprintf_r+0x1ec>
 8006f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f4e:	4623      	mov	r3, r4
 8006f50:	469a      	mov	sl, r3
 8006f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f56:	b10a      	cbz	r2, 8006f5c <_svfiprintf_r+0x5c>
 8006f58:	2a25      	cmp	r2, #37	; 0x25
 8006f5a:	d1f9      	bne.n	8006f50 <_svfiprintf_r+0x50>
 8006f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8006f60:	d00b      	beq.n	8006f7a <_svfiprintf_r+0x7a>
 8006f62:	465b      	mov	r3, fp
 8006f64:	4622      	mov	r2, r4
 8006f66:	4629      	mov	r1, r5
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f7ff ff6d 	bl	8006e48 <__ssputs_r>
 8006f6e:	3001      	adds	r0, #1
 8006f70:	f000 80aa 	beq.w	80070c8 <_svfiprintf_r+0x1c8>
 8006f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f76:	445a      	add	r2, fp
 8006f78:	9209      	str	r2, [sp, #36]	; 0x24
 8006f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 80a2 	beq.w	80070c8 <_svfiprintf_r+0x1c8>
 8006f84:	2300      	movs	r3, #0
 8006f86:	f04f 32ff 	mov.w	r2, #4294967295
 8006f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f8e:	f10a 0a01 	add.w	sl, sl, #1
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	9307      	str	r3, [sp, #28]
 8006f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8006f9c:	4654      	mov	r4, sl
 8006f9e:	2205      	movs	r2, #5
 8006fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa4:	4851      	ldr	r0, [pc, #324]	; (80070ec <_svfiprintf_r+0x1ec>)
 8006fa6:	f7ff fafd 	bl	80065a4 <memchr>
 8006faa:	9a04      	ldr	r2, [sp, #16]
 8006fac:	b9d8      	cbnz	r0, 8006fe6 <_svfiprintf_r+0xe6>
 8006fae:	06d0      	lsls	r0, r2, #27
 8006fb0:	bf44      	itt	mi
 8006fb2:	2320      	movmi	r3, #32
 8006fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fb8:	0711      	lsls	r1, r2, #28
 8006fba:	bf44      	itt	mi
 8006fbc:	232b      	movmi	r3, #43	; 0x2b
 8006fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8006fc8:	d015      	beq.n	8006ff6 <_svfiprintf_r+0xf6>
 8006fca:	4654      	mov	r4, sl
 8006fcc:	2000      	movs	r0, #0
 8006fce:	f04f 0c0a 	mov.w	ip, #10
 8006fd2:	9a07      	ldr	r2, [sp, #28]
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fda:	3b30      	subs	r3, #48	; 0x30
 8006fdc:	2b09      	cmp	r3, #9
 8006fde:	d94e      	bls.n	800707e <_svfiprintf_r+0x17e>
 8006fe0:	b1b0      	cbz	r0, 8007010 <_svfiprintf_r+0x110>
 8006fe2:	9207      	str	r2, [sp, #28]
 8006fe4:	e014      	b.n	8007010 <_svfiprintf_r+0x110>
 8006fe6:	eba0 0308 	sub.w	r3, r0, r8
 8006fea:	fa09 f303 	lsl.w	r3, r9, r3
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	46a2      	mov	sl, r4
 8006ff2:	9304      	str	r3, [sp, #16]
 8006ff4:	e7d2      	b.n	8006f9c <_svfiprintf_r+0x9c>
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	1d19      	adds	r1, r3, #4
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	9103      	str	r1, [sp, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bfbb      	ittet	lt
 8007002:	425b      	neglt	r3, r3
 8007004:	f042 0202 	orrlt.w	r2, r2, #2
 8007008:	9307      	strge	r3, [sp, #28]
 800700a:	9307      	strlt	r3, [sp, #28]
 800700c:	bfb8      	it	lt
 800700e:	9204      	strlt	r2, [sp, #16]
 8007010:	7823      	ldrb	r3, [r4, #0]
 8007012:	2b2e      	cmp	r3, #46	; 0x2e
 8007014:	d10c      	bne.n	8007030 <_svfiprintf_r+0x130>
 8007016:	7863      	ldrb	r3, [r4, #1]
 8007018:	2b2a      	cmp	r3, #42	; 0x2a
 800701a:	d135      	bne.n	8007088 <_svfiprintf_r+0x188>
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	3402      	adds	r4, #2
 8007020:	1d1a      	adds	r2, r3, #4
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	9203      	str	r2, [sp, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	bfb8      	it	lt
 800702a:	f04f 33ff 	movlt.w	r3, #4294967295
 800702e:	9305      	str	r3, [sp, #20]
 8007030:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070fc <_svfiprintf_r+0x1fc>
 8007034:	2203      	movs	r2, #3
 8007036:	4650      	mov	r0, sl
 8007038:	7821      	ldrb	r1, [r4, #0]
 800703a:	f7ff fab3 	bl	80065a4 <memchr>
 800703e:	b140      	cbz	r0, 8007052 <_svfiprintf_r+0x152>
 8007040:	2340      	movs	r3, #64	; 0x40
 8007042:	eba0 000a 	sub.w	r0, r0, sl
 8007046:	fa03 f000 	lsl.w	r0, r3, r0
 800704a:	9b04      	ldr	r3, [sp, #16]
 800704c:	3401      	adds	r4, #1
 800704e:	4303      	orrs	r3, r0
 8007050:	9304      	str	r3, [sp, #16]
 8007052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007056:	2206      	movs	r2, #6
 8007058:	4825      	ldr	r0, [pc, #148]	; (80070f0 <_svfiprintf_r+0x1f0>)
 800705a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800705e:	f7ff faa1 	bl	80065a4 <memchr>
 8007062:	2800      	cmp	r0, #0
 8007064:	d038      	beq.n	80070d8 <_svfiprintf_r+0x1d8>
 8007066:	4b23      	ldr	r3, [pc, #140]	; (80070f4 <_svfiprintf_r+0x1f4>)
 8007068:	bb1b      	cbnz	r3, 80070b2 <_svfiprintf_r+0x1b2>
 800706a:	9b03      	ldr	r3, [sp, #12]
 800706c:	3307      	adds	r3, #7
 800706e:	f023 0307 	bic.w	r3, r3, #7
 8007072:	3308      	adds	r3, #8
 8007074:	9303      	str	r3, [sp, #12]
 8007076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007078:	4433      	add	r3, r6
 800707a:	9309      	str	r3, [sp, #36]	; 0x24
 800707c:	e767      	b.n	8006f4e <_svfiprintf_r+0x4e>
 800707e:	460c      	mov	r4, r1
 8007080:	2001      	movs	r0, #1
 8007082:	fb0c 3202 	mla	r2, ip, r2, r3
 8007086:	e7a5      	b.n	8006fd4 <_svfiprintf_r+0xd4>
 8007088:	2300      	movs	r3, #0
 800708a:	f04f 0c0a 	mov.w	ip, #10
 800708e:	4619      	mov	r1, r3
 8007090:	3401      	adds	r4, #1
 8007092:	9305      	str	r3, [sp, #20]
 8007094:	4620      	mov	r0, r4
 8007096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800709a:	3a30      	subs	r2, #48	; 0x30
 800709c:	2a09      	cmp	r2, #9
 800709e:	d903      	bls.n	80070a8 <_svfiprintf_r+0x1a8>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0c5      	beq.n	8007030 <_svfiprintf_r+0x130>
 80070a4:	9105      	str	r1, [sp, #20]
 80070a6:	e7c3      	b.n	8007030 <_svfiprintf_r+0x130>
 80070a8:	4604      	mov	r4, r0
 80070aa:	2301      	movs	r3, #1
 80070ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80070b0:	e7f0      	b.n	8007094 <_svfiprintf_r+0x194>
 80070b2:	ab03      	add	r3, sp, #12
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	462a      	mov	r2, r5
 80070b8:	4638      	mov	r0, r7
 80070ba:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <_svfiprintf_r+0x1f8>)
 80070bc:	a904      	add	r1, sp, #16
 80070be:	f7fd fff7 	bl	80050b0 <_printf_float>
 80070c2:	1c42      	adds	r2, r0, #1
 80070c4:	4606      	mov	r6, r0
 80070c6:	d1d6      	bne.n	8007076 <_svfiprintf_r+0x176>
 80070c8:	89ab      	ldrh	r3, [r5, #12]
 80070ca:	065b      	lsls	r3, r3, #25
 80070cc:	f53f af2c 	bmi.w	8006f28 <_svfiprintf_r+0x28>
 80070d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070d2:	b01d      	add	sp, #116	; 0x74
 80070d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d8:	ab03      	add	r3, sp, #12
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	462a      	mov	r2, r5
 80070de:	4638      	mov	r0, r7
 80070e0:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <_svfiprintf_r+0x1f8>)
 80070e2:	a904      	add	r1, sp, #16
 80070e4:	f7fe fa80 	bl	80055e8 <_printf_i>
 80070e8:	e7eb      	b.n	80070c2 <_svfiprintf_r+0x1c2>
 80070ea:	bf00      	nop
 80070ec:	08007f94 	.word	0x08007f94
 80070f0:	08007f9e 	.word	0x08007f9e
 80070f4:	080050b1 	.word	0x080050b1
 80070f8:	08006e49 	.word	0x08006e49
 80070fc:	08007f9a 	.word	0x08007f9a

08007100 <_sbrk_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	2300      	movs	r3, #0
 8007104:	4d05      	ldr	r5, [pc, #20]	; (800711c <_sbrk_r+0x1c>)
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	602b      	str	r3, [r5, #0]
 800710c:	f7fa ff24 	bl	8001f58 <_sbrk>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_sbrk_r+0x1a>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b103      	cbz	r3, 800711a <_sbrk_r+0x1a>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	200005cc 	.word	0x200005cc

08007120 <__assert_func>:
 8007120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007122:	4614      	mov	r4, r2
 8007124:	461a      	mov	r2, r3
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <__assert_func+0x2c>)
 8007128:	4605      	mov	r5, r0
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68d8      	ldr	r0, [r3, #12]
 800712e:	b14c      	cbz	r4, 8007144 <__assert_func+0x24>
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <__assert_func+0x30>)
 8007132:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007136:	9100      	str	r1, [sp, #0]
 8007138:	462b      	mov	r3, r5
 800713a:	4906      	ldr	r1, [pc, #24]	; (8007154 <__assert_func+0x34>)
 800713c:	f000 f80e 	bl	800715c <fiprintf>
 8007140:	f000 faa2 	bl	8007688 <abort>
 8007144:	4b04      	ldr	r3, [pc, #16]	; (8007158 <__assert_func+0x38>)
 8007146:	461c      	mov	r4, r3
 8007148:	e7f3      	b.n	8007132 <__assert_func+0x12>
 800714a:	bf00      	nop
 800714c:	20000010 	.word	0x20000010
 8007150:	08007fa5 	.word	0x08007fa5
 8007154:	08007fb2 	.word	0x08007fb2
 8007158:	08007fe0 	.word	0x08007fe0

0800715c <fiprintf>:
 800715c:	b40e      	push	{r1, r2, r3}
 800715e:	b503      	push	{r0, r1, lr}
 8007160:	4601      	mov	r1, r0
 8007162:	ab03      	add	r3, sp, #12
 8007164:	4805      	ldr	r0, [pc, #20]	; (800717c <fiprintf+0x20>)
 8007166:	f853 2b04 	ldr.w	r2, [r3], #4
 800716a:	6800      	ldr	r0, [r0, #0]
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	f000 f88d 	bl	800728c <_vfiprintf_r>
 8007172:	b002      	add	sp, #8
 8007174:	f85d eb04 	ldr.w	lr, [sp], #4
 8007178:	b003      	add	sp, #12
 800717a:	4770      	bx	lr
 800717c:	20000010 	.word	0x20000010

08007180 <__ascii_mbtowc>:
 8007180:	b082      	sub	sp, #8
 8007182:	b901      	cbnz	r1, 8007186 <__ascii_mbtowc+0x6>
 8007184:	a901      	add	r1, sp, #4
 8007186:	b142      	cbz	r2, 800719a <__ascii_mbtowc+0x1a>
 8007188:	b14b      	cbz	r3, 800719e <__ascii_mbtowc+0x1e>
 800718a:	7813      	ldrb	r3, [r2, #0]
 800718c:	600b      	str	r3, [r1, #0]
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	1e10      	subs	r0, r2, #0
 8007192:	bf18      	it	ne
 8007194:	2001      	movne	r0, #1
 8007196:	b002      	add	sp, #8
 8007198:	4770      	bx	lr
 800719a:	4610      	mov	r0, r2
 800719c:	e7fb      	b.n	8007196 <__ascii_mbtowc+0x16>
 800719e:	f06f 0001 	mvn.w	r0, #1
 80071a2:	e7f8      	b.n	8007196 <__ascii_mbtowc+0x16>

080071a4 <memmove>:
 80071a4:	4288      	cmp	r0, r1
 80071a6:	b510      	push	{r4, lr}
 80071a8:	eb01 0402 	add.w	r4, r1, r2
 80071ac:	d902      	bls.n	80071b4 <memmove+0x10>
 80071ae:	4284      	cmp	r4, r0
 80071b0:	4623      	mov	r3, r4
 80071b2:	d807      	bhi.n	80071c4 <memmove+0x20>
 80071b4:	1e43      	subs	r3, r0, #1
 80071b6:	42a1      	cmp	r1, r4
 80071b8:	d008      	beq.n	80071cc <memmove+0x28>
 80071ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071c2:	e7f8      	b.n	80071b6 <memmove+0x12>
 80071c4:	4601      	mov	r1, r0
 80071c6:	4402      	add	r2, r0
 80071c8:	428a      	cmp	r2, r1
 80071ca:	d100      	bne.n	80071ce <memmove+0x2a>
 80071cc:	bd10      	pop	{r4, pc}
 80071ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071d6:	e7f7      	b.n	80071c8 <memmove+0x24>

080071d8 <__malloc_lock>:
 80071d8:	4801      	ldr	r0, [pc, #4]	; (80071e0 <__malloc_lock+0x8>)
 80071da:	f000 bc15 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 80071de:	bf00      	nop
 80071e0:	200005d4 	.word	0x200005d4

080071e4 <__malloc_unlock>:
 80071e4:	4801      	ldr	r0, [pc, #4]	; (80071ec <__malloc_unlock+0x8>)
 80071e6:	f000 bc10 	b.w	8007a0a <__retarget_lock_release_recursive>
 80071ea:	bf00      	nop
 80071ec:	200005d4 	.word	0x200005d4

080071f0 <_realloc_r>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	4607      	mov	r7, r0
 80071f4:	4614      	mov	r4, r2
 80071f6:	460e      	mov	r6, r1
 80071f8:	b921      	cbnz	r1, 8007204 <_realloc_r+0x14>
 80071fa:	4611      	mov	r1, r2
 80071fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007200:	f7ff bdc8 	b.w	8006d94 <_malloc_r>
 8007204:	b922      	cbnz	r2, 8007210 <_realloc_r+0x20>
 8007206:	f7ff fd79 	bl	8006cfc <_free_r>
 800720a:	4625      	mov	r5, r4
 800720c:	4628      	mov	r0, r5
 800720e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007210:	f000 fc60 	bl	8007ad4 <_malloc_usable_size_r>
 8007214:	42a0      	cmp	r0, r4
 8007216:	d20f      	bcs.n	8007238 <_realloc_r+0x48>
 8007218:	4621      	mov	r1, r4
 800721a:	4638      	mov	r0, r7
 800721c:	f7ff fdba 	bl	8006d94 <_malloc_r>
 8007220:	4605      	mov	r5, r0
 8007222:	2800      	cmp	r0, #0
 8007224:	d0f2      	beq.n	800720c <_realloc_r+0x1c>
 8007226:	4631      	mov	r1, r6
 8007228:	4622      	mov	r2, r4
 800722a:	f7ff f9c9 	bl	80065c0 <memcpy>
 800722e:	4631      	mov	r1, r6
 8007230:	4638      	mov	r0, r7
 8007232:	f7ff fd63 	bl	8006cfc <_free_r>
 8007236:	e7e9      	b.n	800720c <_realloc_r+0x1c>
 8007238:	4635      	mov	r5, r6
 800723a:	e7e7      	b.n	800720c <_realloc_r+0x1c>

0800723c <__sfputc_r>:
 800723c:	6893      	ldr	r3, [r2, #8]
 800723e:	b410      	push	{r4}
 8007240:	3b01      	subs	r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	6093      	str	r3, [r2, #8]
 8007246:	da07      	bge.n	8007258 <__sfputc_r+0x1c>
 8007248:	6994      	ldr	r4, [r2, #24]
 800724a:	42a3      	cmp	r3, r4
 800724c:	db01      	blt.n	8007252 <__sfputc_r+0x16>
 800724e:	290a      	cmp	r1, #10
 8007250:	d102      	bne.n	8007258 <__sfputc_r+0x1c>
 8007252:	bc10      	pop	{r4}
 8007254:	f000 b94a 	b.w	80074ec <__swbuf_r>
 8007258:	6813      	ldr	r3, [r2, #0]
 800725a:	1c58      	adds	r0, r3, #1
 800725c:	6010      	str	r0, [r2, #0]
 800725e:	7019      	strb	r1, [r3, #0]
 8007260:	4608      	mov	r0, r1
 8007262:	bc10      	pop	{r4}
 8007264:	4770      	bx	lr

08007266 <__sfputs_r>:
 8007266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007268:	4606      	mov	r6, r0
 800726a:	460f      	mov	r7, r1
 800726c:	4614      	mov	r4, r2
 800726e:	18d5      	adds	r5, r2, r3
 8007270:	42ac      	cmp	r4, r5
 8007272:	d101      	bne.n	8007278 <__sfputs_r+0x12>
 8007274:	2000      	movs	r0, #0
 8007276:	e007      	b.n	8007288 <__sfputs_r+0x22>
 8007278:	463a      	mov	r2, r7
 800727a:	4630      	mov	r0, r6
 800727c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007280:	f7ff ffdc 	bl	800723c <__sfputc_r>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d1f3      	bne.n	8007270 <__sfputs_r+0xa>
 8007288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800728c <_vfiprintf_r>:
 800728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	460d      	mov	r5, r1
 8007292:	4614      	mov	r4, r2
 8007294:	4698      	mov	r8, r3
 8007296:	4606      	mov	r6, r0
 8007298:	b09d      	sub	sp, #116	; 0x74
 800729a:	b118      	cbz	r0, 80072a4 <_vfiprintf_r+0x18>
 800729c:	6983      	ldr	r3, [r0, #24]
 800729e:	b90b      	cbnz	r3, 80072a4 <_vfiprintf_r+0x18>
 80072a0:	f000 fb14 	bl	80078cc <__sinit>
 80072a4:	4b89      	ldr	r3, [pc, #548]	; (80074cc <_vfiprintf_r+0x240>)
 80072a6:	429d      	cmp	r5, r3
 80072a8:	d11b      	bne.n	80072e2 <_vfiprintf_r+0x56>
 80072aa:	6875      	ldr	r5, [r6, #4]
 80072ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ae:	07d9      	lsls	r1, r3, #31
 80072b0:	d405      	bmi.n	80072be <_vfiprintf_r+0x32>
 80072b2:	89ab      	ldrh	r3, [r5, #12]
 80072b4:	059a      	lsls	r2, r3, #22
 80072b6:	d402      	bmi.n	80072be <_vfiprintf_r+0x32>
 80072b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ba:	f000 fba5 	bl	8007a08 <__retarget_lock_acquire_recursive>
 80072be:	89ab      	ldrh	r3, [r5, #12]
 80072c0:	071b      	lsls	r3, r3, #28
 80072c2:	d501      	bpl.n	80072c8 <_vfiprintf_r+0x3c>
 80072c4:	692b      	ldr	r3, [r5, #16]
 80072c6:	b9eb      	cbnz	r3, 8007304 <_vfiprintf_r+0x78>
 80072c8:	4629      	mov	r1, r5
 80072ca:	4630      	mov	r0, r6
 80072cc:	f000 f96e 	bl	80075ac <__swsetup_r>
 80072d0:	b1c0      	cbz	r0, 8007304 <_vfiprintf_r+0x78>
 80072d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072d4:	07dc      	lsls	r4, r3, #31
 80072d6:	d50e      	bpl.n	80072f6 <_vfiprintf_r+0x6a>
 80072d8:	f04f 30ff 	mov.w	r0, #4294967295
 80072dc:	b01d      	add	sp, #116	; 0x74
 80072de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e2:	4b7b      	ldr	r3, [pc, #492]	; (80074d0 <_vfiprintf_r+0x244>)
 80072e4:	429d      	cmp	r5, r3
 80072e6:	d101      	bne.n	80072ec <_vfiprintf_r+0x60>
 80072e8:	68b5      	ldr	r5, [r6, #8]
 80072ea:	e7df      	b.n	80072ac <_vfiprintf_r+0x20>
 80072ec:	4b79      	ldr	r3, [pc, #484]	; (80074d4 <_vfiprintf_r+0x248>)
 80072ee:	429d      	cmp	r5, r3
 80072f0:	bf08      	it	eq
 80072f2:	68f5      	ldreq	r5, [r6, #12]
 80072f4:	e7da      	b.n	80072ac <_vfiprintf_r+0x20>
 80072f6:	89ab      	ldrh	r3, [r5, #12]
 80072f8:	0598      	lsls	r0, r3, #22
 80072fa:	d4ed      	bmi.n	80072d8 <_vfiprintf_r+0x4c>
 80072fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072fe:	f000 fb84 	bl	8007a0a <__retarget_lock_release_recursive>
 8007302:	e7e9      	b.n	80072d8 <_vfiprintf_r+0x4c>
 8007304:	2300      	movs	r3, #0
 8007306:	9309      	str	r3, [sp, #36]	; 0x24
 8007308:	2320      	movs	r3, #32
 800730a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800730e:	2330      	movs	r3, #48	; 0x30
 8007310:	f04f 0901 	mov.w	r9, #1
 8007314:	f8cd 800c 	str.w	r8, [sp, #12]
 8007318:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80074d8 <_vfiprintf_r+0x24c>
 800731c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007320:	4623      	mov	r3, r4
 8007322:	469a      	mov	sl, r3
 8007324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007328:	b10a      	cbz	r2, 800732e <_vfiprintf_r+0xa2>
 800732a:	2a25      	cmp	r2, #37	; 0x25
 800732c:	d1f9      	bne.n	8007322 <_vfiprintf_r+0x96>
 800732e:	ebba 0b04 	subs.w	fp, sl, r4
 8007332:	d00b      	beq.n	800734c <_vfiprintf_r+0xc0>
 8007334:	465b      	mov	r3, fp
 8007336:	4622      	mov	r2, r4
 8007338:	4629      	mov	r1, r5
 800733a:	4630      	mov	r0, r6
 800733c:	f7ff ff93 	bl	8007266 <__sfputs_r>
 8007340:	3001      	adds	r0, #1
 8007342:	f000 80aa 	beq.w	800749a <_vfiprintf_r+0x20e>
 8007346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007348:	445a      	add	r2, fp
 800734a:	9209      	str	r2, [sp, #36]	; 0x24
 800734c:	f89a 3000 	ldrb.w	r3, [sl]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 80a2 	beq.w	800749a <_vfiprintf_r+0x20e>
 8007356:	2300      	movs	r3, #0
 8007358:	f04f 32ff 	mov.w	r2, #4294967295
 800735c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007360:	f10a 0a01 	add.w	sl, sl, #1
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	9307      	str	r3, [sp, #28]
 8007368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800736c:	931a      	str	r3, [sp, #104]	; 0x68
 800736e:	4654      	mov	r4, sl
 8007370:	2205      	movs	r2, #5
 8007372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007376:	4858      	ldr	r0, [pc, #352]	; (80074d8 <_vfiprintf_r+0x24c>)
 8007378:	f7ff f914 	bl	80065a4 <memchr>
 800737c:	9a04      	ldr	r2, [sp, #16]
 800737e:	b9d8      	cbnz	r0, 80073b8 <_vfiprintf_r+0x12c>
 8007380:	06d1      	lsls	r1, r2, #27
 8007382:	bf44      	itt	mi
 8007384:	2320      	movmi	r3, #32
 8007386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738a:	0713      	lsls	r3, r2, #28
 800738c:	bf44      	itt	mi
 800738e:	232b      	movmi	r3, #43	; 0x2b
 8007390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007394:	f89a 3000 	ldrb.w	r3, [sl]
 8007398:	2b2a      	cmp	r3, #42	; 0x2a
 800739a:	d015      	beq.n	80073c8 <_vfiprintf_r+0x13c>
 800739c:	4654      	mov	r4, sl
 800739e:	2000      	movs	r0, #0
 80073a0:	f04f 0c0a 	mov.w	ip, #10
 80073a4:	9a07      	ldr	r2, [sp, #28]
 80073a6:	4621      	mov	r1, r4
 80073a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ac:	3b30      	subs	r3, #48	; 0x30
 80073ae:	2b09      	cmp	r3, #9
 80073b0:	d94e      	bls.n	8007450 <_vfiprintf_r+0x1c4>
 80073b2:	b1b0      	cbz	r0, 80073e2 <_vfiprintf_r+0x156>
 80073b4:	9207      	str	r2, [sp, #28]
 80073b6:	e014      	b.n	80073e2 <_vfiprintf_r+0x156>
 80073b8:	eba0 0308 	sub.w	r3, r0, r8
 80073bc:	fa09 f303 	lsl.w	r3, r9, r3
 80073c0:	4313      	orrs	r3, r2
 80073c2:	46a2      	mov	sl, r4
 80073c4:	9304      	str	r3, [sp, #16]
 80073c6:	e7d2      	b.n	800736e <_vfiprintf_r+0xe2>
 80073c8:	9b03      	ldr	r3, [sp, #12]
 80073ca:	1d19      	adds	r1, r3, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	9103      	str	r1, [sp, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bfbb      	ittet	lt
 80073d4:	425b      	neglt	r3, r3
 80073d6:	f042 0202 	orrlt.w	r2, r2, #2
 80073da:	9307      	strge	r3, [sp, #28]
 80073dc:	9307      	strlt	r3, [sp, #28]
 80073de:	bfb8      	it	lt
 80073e0:	9204      	strlt	r2, [sp, #16]
 80073e2:	7823      	ldrb	r3, [r4, #0]
 80073e4:	2b2e      	cmp	r3, #46	; 0x2e
 80073e6:	d10c      	bne.n	8007402 <_vfiprintf_r+0x176>
 80073e8:	7863      	ldrb	r3, [r4, #1]
 80073ea:	2b2a      	cmp	r3, #42	; 0x2a
 80073ec:	d135      	bne.n	800745a <_vfiprintf_r+0x1ce>
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	3402      	adds	r4, #2
 80073f2:	1d1a      	adds	r2, r3, #4
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	9203      	str	r2, [sp, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bfb8      	it	lt
 80073fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007400:	9305      	str	r3, [sp, #20]
 8007402:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80074e8 <_vfiprintf_r+0x25c>
 8007406:	2203      	movs	r2, #3
 8007408:	4650      	mov	r0, sl
 800740a:	7821      	ldrb	r1, [r4, #0]
 800740c:	f7ff f8ca 	bl	80065a4 <memchr>
 8007410:	b140      	cbz	r0, 8007424 <_vfiprintf_r+0x198>
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	eba0 000a 	sub.w	r0, r0, sl
 8007418:	fa03 f000 	lsl.w	r0, r3, r0
 800741c:	9b04      	ldr	r3, [sp, #16]
 800741e:	3401      	adds	r4, #1
 8007420:	4303      	orrs	r3, r0
 8007422:	9304      	str	r3, [sp, #16]
 8007424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007428:	2206      	movs	r2, #6
 800742a:	482c      	ldr	r0, [pc, #176]	; (80074dc <_vfiprintf_r+0x250>)
 800742c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007430:	f7ff f8b8 	bl	80065a4 <memchr>
 8007434:	2800      	cmp	r0, #0
 8007436:	d03f      	beq.n	80074b8 <_vfiprintf_r+0x22c>
 8007438:	4b29      	ldr	r3, [pc, #164]	; (80074e0 <_vfiprintf_r+0x254>)
 800743a:	bb1b      	cbnz	r3, 8007484 <_vfiprintf_r+0x1f8>
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	3307      	adds	r3, #7
 8007440:	f023 0307 	bic.w	r3, r3, #7
 8007444:	3308      	adds	r3, #8
 8007446:	9303      	str	r3, [sp, #12]
 8007448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744a:	443b      	add	r3, r7
 800744c:	9309      	str	r3, [sp, #36]	; 0x24
 800744e:	e767      	b.n	8007320 <_vfiprintf_r+0x94>
 8007450:	460c      	mov	r4, r1
 8007452:	2001      	movs	r0, #1
 8007454:	fb0c 3202 	mla	r2, ip, r2, r3
 8007458:	e7a5      	b.n	80073a6 <_vfiprintf_r+0x11a>
 800745a:	2300      	movs	r3, #0
 800745c:	f04f 0c0a 	mov.w	ip, #10
 8007460:	4619      	mov	r1, r3
 8007462:	3401      	adds	r4, #1
 8007464:	9305      	str	r3, [sp, #20]
 8007466:	4620      	mov	r0, r4
 8007468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800746c:	3a30      	subs	r2, #48	; 0x30
 800746e:	2a09      	cmp	r2, #9
 8007470:	d903      	bls.n	800747a <_vfiprintf_r+0x1ee>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0c5      	beq.n	8007402 <_vfiprintf_r+0x176>
 8007476:	9105      	str	r1, [sp, #20]
 8007478:	e7c3      	b.n	8007402 <_vfiprintf_r+0x176>
 800747a:	4604      	mov	r4, r0
 800747c:	2301      	movs	r3, #1
 800747e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007482:	e7f0      	b.n	8007466 <_vfiprintf_r+0x1da>
 8007484:	ab03      	add	r3, sp, #12
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	462a      	mov	r2, r5
 800748a:	4630      	mov	r0, r6
 800748c:	4b15      	ldr	r3, [pc, #84]	; (80074e4 <_vfiprintf_r+0x258>)
 800748e:	a904      	add	r1, sp, #16
 8007490:	f7fd fe0e 	bl	80050b0 <_printf_float>
 8007494:	4607      	mov	r7, r0
 8007496:	1c78      	adds	r0, r7, #1
 8007498:	d1d6      	bne.n	8007448 <_vfiprintf_r+0x1bc>
 800749a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800749c:	07d9      	lsls	r1, r3, #31
 800749e:	d405      	bmi.n	80074ac <_vfiprintf_r+0x220>
 80074a0:	89ab      	ldrh	r3, [r5, #12]
 80074a2:	059a      	lsls	r2, r3, #22
 80074a4:	d402      	bmi.n	80074ac <_vfiprintf_r+0x220>
 80074a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074a8:	f000 faaf 	bl	8007a0a <__retarget_lock_release_recursive>
 80074ac:	89ab      	ldrh	r3, [r5, #12]
 80074ae:	065b      	lsls	r3, r3, #25
 80074b0:	f53f af12 	bmi.w	80072d8 <_vfiprintf_r+0x4c>
 80074b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074b6:	e711      	b.n	80072dc <_vfiprintf_r+0x50>
 80074b8:	ab03      	add	r3, sp, #12
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	462a      	mov	r2, r5
 80074be:	4630      	mov	r0, r6
 80074c0:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <_vfiprintf_r+0x258>)
 80074c2:	a904      	add	r1, sp, #16
 80074c4:	f7fe f890 	bl	80055e8 <_printf_i>
 80074c8:	e7e4      	b.n	8007494 <_vfiprintf_r+0x208>
 80074ca:	bf00      	nop
 80074cc:	0800810c 	.word	0x0800810c
 80074d0:	0800812c 	.word	0x0800812c
 80074d4:	080080ec 	.word	0x080080ec
 80074d8:	08007f94 	.word	0x08007f94
 80074dc:	08007f9e 	.word	0x08007f9e
 80074e0:	080050b1 	.word	0x080050b1
 80074e4:	08007267 	.word	0x08007267
 80074e8:	08007f9a 	.word	0x08007f9a

080074ec <__swbuf_r>:
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ee:	460e      	mov	r6, r1
 80074f0:	4614      	mov	r4, r2
 80074f2:	4605      	mov	r5, r0
 80074f4:	b118      	cbz	r0, 80074fe <__swbuf_r+0x12>
 80074f6:	6983      	ldr	r3, [r0, #24]
 80074f8:	b90b      	cbnz	r3, 80074fe <__swbuf_r+0x12>
 80074fa:	f000 f9e7 	bl	80078cc <__sinit>
 80074fe:	4b21      	ldr	r3, [pc, #132]	; (8007584 <__swbuf_r+0x98>)
 8007500:	429c      	cmp	r4, r3
 8007502:	d12b      	bne.n	800755c <__swbuf_r+0x70>
 8007504:	686c      	ldr	r4, [r5, #4]
 8007506:	69a3      	ldr	r3, [r4, #24]
 8007508:	60a3      	str	r3, [r4, #8]
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	071a      	lsls	r2, r3, #28
 800750e:	d52f      	bpl.n	8007570 <__swbuf_r+0x84>
 8007510:	6923      	ldr	r3, [r4, #16]
 8007512:	b36b      	cbz	r3, 8007570 <__swbuf_r+0x84>
 8007514:	6923      	ldr	r3, [r4, #16]
 8007516:	6820      	ldr	r0, [r4, #0]
 8007518:	b2f6      	uxtb	r6, r6
 800751a:	1ac0      	subs	r0, r0, r3
 800751c:	6963      	ldr	r3, [r4, #20]
 800751e:	4637      	mov	r7, r6
 8007520:	4283      	cmp	r3, r0
 8007522:	dc04      	bgt.n	800752e <__swbuf_r+0x42>
 8007524:	4621      	mov	r1, r4
 8007526:	4628      	mov	r0, r5
 8007528:	f000 f93c 	bl	80077a4 <_fflush_r>
 800752c:	bb30      	cbnz	r0, 800757c <__swbuf_r+0x90>
 800752e:	68a3      	ldr	r3, [r4, #8]
 8007530:	3001      	adds	r0, #1
 8007532:	3b01      	subs	r3, #1
 8007534:	60a3      	str	r3, [r4, #8]
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	6022      	str	r2, [r4, #0]
 800753c:	701e      	strb	r6, [r3, #0]
 800753e:	6963      	ldr	r3, [r4, #20]
 8007540:	4283      	cmp	r3, r0
 8007542:	d004      	beq.n	800754e <__swbuf_r+0x62>
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	07db      	lsls	r3, r3, #31
 8007548:	d506      	bpl.n	8007558 <__swbuf_r+0x6c>
 800754a:	2e0a      	cmp	r6, #10
 800754c:	d104      	bne.n	8007558 <__swbuf_r+0x6c>
 800754e:	4621      	mov	r1, r4
 8007550:	4628      	mov	r0, r5
 8007552:	f000 f927 	bl	80077a4 <_fflush_r>
 8007556:	b988      	cbnz	r0, 800757c <__swbuf_r+0x90>
 8007558:	4638      	mov	r0, r7
 800755a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <__swbuf_r+0x9c>)
 800755e:	429c      	cmp	r4, r3
 8007560:	d101      	bne.n	8007566 <__swbuf_r+0x7a>
 8007562:	68ac      	ldr	r4, [r5, #8]
 8007564:	e7cf      	b.n	8007506 <__swbuf_r+0x1a>
 8007566:	4b09      	ldr	r3, [pc, #36]	; (800758c <__swbuf_r+0xa0>)
 8007568:	429c      	cmp	r4, r3
 800756a:	bf08      	it	eq
 800756c:	68ec      	ldreq	r4, [r5, #12]
 800756e:	e7ca      	b.n	8007506 <__swbuf_r+0x1a>
 8007570:	4621      	mov	r1, r4
 8007572:	4628      	mov	r0, r5
 8007574:	f000 f81a 	bl	80075ac <__swsetup_r>
 8007578:	2800      	cmp	r0, #0
 800757a:	d0cb      	beq.n	8007514 <__swbuf_r+0x28>
 800757c:	f04f 37ff 	mov.w	r7, #4294967295
 8007580:	e7ea      	b.n	8007558 <__swbuf_r+0x6c>
 8007582:	bf00      	nop
 8007584:	0800810c 	.word	0x0800810c
 8007588:	0800812c 	.word	0x0800812c
 800758c:	080080ec 	.word	0x080080ec

08007590 <__ascii_wctomb>:
 8007590:	4603      	mov	r3, r0
 8007592:	4608      	mov	r0, r1
 8007594:	b141      	cbz	r1, 80075a8 <__ascii_wctomb+0x18>
 8007596:	2aff      	cmp	r2, #255	; 0xff
 8007598:	d904      	bls.n	80075a4 <__ascii_wctomb+0x14>
 800759a:	228a      	movs	r2, #138	; 0x8a
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	4770      	bx	lr
 80075a4:	2001      	movs	r0, #1
 80075a6:	700a      	strb	r2, [r1, #0]
 80075a8:	4770      	bx	lr
	...

080075ac <__swsetup_r>:
 80075ac:	4b32      	ldr	r3, [pc, #200]	; (8007678 <__swsetup_r+0xcc>)
 80075ae:	b570      	push	{r4, r5, r6, lr}
 80075b0:	681d      	ldr	r5, [r3, #0]
 80075b2:	4606      	mov	r6, r0
 80075b4:	460c      	mov	r4, r1
 80075b6:	b125      	cbz	r5, 80075c2 <__swsetup_r+0x16>
 80075b8:	69ab      	ldr	r3, [r5, #24]
 80075ba:	b913      	cbnz	r3, 80075c2 <__swsetup_r+0x16>
 80075bc:	4628      	mov	r0, r5
 80075be:	f000 f985 	bl	80078cc <__sinit>
 80075c2:	4b2e      	ldr	r3, [pc, #184]	; (800767c <__swsetup_r+0xd0>)
 80075c4:	429c      	cmp	r4, r3
 80075c6:	d10f      	bne.n	80075e8 <__swsetup_r+0x3c>
 80075c8:	686c      	ldr	r4, [r5, #4]
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075d0:	0719      	lsls	r1, r3, #28
 80075d2:	d42c      	bmi.n	800762e <__swsetup_r+0x82>
 80075d4:	06dd      	lsls	r5, r3, #27
 80075d6:	d411      	bmi.n	80075fc <__swsetup_r+0x50>
 80075d8:	2309      	movs	r3, #9
 80075da:	6033      	str	r3, [r6, #0]
 80075dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295
 80075e4:	81a3      	strh	r3, [r4, #12]
 80075e6:	e03e      	b.n	8007666 <__swsetup_r+0xba>
 80075e8:	4b25      	ldr	r3, [pc, #148]	; (8007680 <__swsetup_r+0xd4>)
 80075ea:	429c      	cmp	r4, r3
 80075ec:	d101      	bne.n	80075f2 <__swsetup_r+0x46>
 80075ee:	68ac      	ldr	r4, [r5, #8]
 80075f0:	e7eb      	b.n	80075ca <__swsetup_r+0x1e>
 80075f2:	4b24      	ldr	r3, [pc, #144]	; (8007684 <__swsetup_r+0xd8>)
 80075f4:	429c      	cmp	r4, r3
 80075f6:	bf08      	it	eq
 80075f8:	68ec      	ldreq	r4, [r5, #12]
 80075fa:	e7e6      	b.n	80075ca <__swsetup_r+0x1e>
 80075fc:	0758      	lsls	r0, r3, #29
 80075fe:	d512      	bpl.n	8007626 <__swsetup_r+0x7a>
 8007600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007602:	b141      	cbz	r1, 8007616 <__swsetup_r+0x6a>
 8007604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007608:	4299      	cmp	r1, r3
 800760a:	d002      	beq.n	8007612 <__swsetup_r+0x66>
 800760c:	4630      	mov	r0, r6
 800760e:	f7ff fb75 	bl	8006cfc <_free_r>
 8007612:	2300      	movs	r3, #0
 8007614:	6363      	str	r3, [r4, #52]	; 0x34
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800761c:	81a3      	strh	r3, [r4, #12]
 800761e:	2300      	movs	r3, #0
 8007620:	6063      	str	r3, [r4, #4]
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	89a3      	ldrh	r3, [r4, #12]
 8007628:	f043 0308 	orr.w	r3, r3, #8
 800762c:	81a3      	strh	r3, [r4, #12]
 800762e:	6923      	ldr	r3, [r4, #16]
 8007630:	b94b      	cbnz	r3, 8007646 <__swsetup_r+0x9a>
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800763c:	d003      	beq.n	8007646 <__swsetup_r+0x9a>
 800763e:	4621      	mov	r1, r4
 8007640:	4630      	mov	r0, r6
 8007642:	f000 fa07 	bl	8007a54 <__smakebuf_r>
 8007646:	89a0      	ldrh	r0, [r4, #12]
 8007648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800764c:	f010 0301 	ands.w	r3, r0, #1
 8007650:	d00a      	beq.n	8007668 <__swsetup_r+0xbc>
 8007652:	2300      	movs	r3, #0
 8007654:	60a3      	str	r3, [r4, #8]
 8007656:	6963      	ldr	r3, [r4, #20]
 8007658:	425b      	negs	r3, r3
 800765a:	61a3      	str	r3, [r4, #24]
 800765c:	6923      	ldr	r3, [r4, #16]
 800765e:	b943      	cbnz	r3, 8007672 <__swsetup_r+0xc6>
 8007660:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007664:	d1ba      	bne.n	80075dc <__swsetup_r+0x30>
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	0781      	lsls	r1, r0, #30
 800766a:	bf58      	it	pl
 800766c:	6963      	ldrpl	r3, [r4, #20]
 800766e:	60a3      	str	r3, [r4, #8]
 8007670:	e7f4      	b.n	800765c <__swsetup_r+0xb0>
 8007672:	2000      	movs	r0, #0
 8007674:	e7f7      	b.n	8007666 <__swsetup_r+0xba>
 8007676:	bf00      	nop
 8007678:	20000010 	.word	0x20000010
 800767c:	0800810c 	.word	0x0800810c
 8007680:	0800812c 	.word	0x0800812c
 8007684:	080080ec 	.word	0x080080ec

08007688 <abort>:
 8007688:	2006      	movs	r0, #6
 800768a:	b508      	push	{r3, lr}
 800768c:	f000 fa52 	bl	8007b34 <raise>
 8007690:	2001      	movs	r0, #1
 8007692:	f7fa fbee 	bl	8001e72 <_exit>
	...

08007698 <__sflush_r>:
 8007698:	898a      	ldrh	r2, [r1, #12]
 800769a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800769e:	4605      	mov	r5, r0
 80076a0:	0710      	lsls	r0, r2, #28
 80076a2:	460c      	mov	r4, r1
 80076a4:	d458      	bmi.n	8007758 <__sflush_r+0xc0>
 80076a6:	684b      	ldr	r3, [r1, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	dc05      	bgt.n	80076b8 <__sflush_r+0x20>
 80076ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	dc02      	bgt.n	80076b8 <__sflush_r+0x20>
 80076b2:	2000      	movs	r0, #0
 80076b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ba:	2e00      	cmp	r6, #0
 80076bc:	d0f9      	beq.n	80076b2 <__sflush_r+0x1a>
 80076be:	2300      	movs	r3, #0
 80076c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076c4:	682f      	ldr	r7, [r5, #0]
 80076c6:	602b      	str	r3, [r5, #0]
 80076c8:	d032      	beq.n	8007730 <__sflush_r+0x98>
 80076ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	075a      	lsls	r2, r3, #29
 80076d0:	d505      	bpl.n	80076de <__sflush_r+0x46>
 80076d2:	6863      	ldr	r3, [r4, #4]
 80076d4:	1ac0      	subs	r0, r0, r3
 80076d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076d8:	b10b      	cbz	r3, 80076de <__sflush_r+0x46>
 80076da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076dc:	1ac0      	subs	r0, r0, r3
 80076de:	2300      	movs	r3, #0
 80076e0:	4602      	mov	r2, r0
 80076e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076e4:	4628      	mov	r0, r5
 80076e6:	6a21      	ldr	r1, [r4, #32]
 80076e8:	47b0      	blx	r6
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	d106      	bne.n	80076fe <__sflush_r+0x66>
 80076f0:	6829      	ldr	r1, [r5, #0]
 80076f2:	291d      	cmp	r1, #29
 80076f4:	d82c      	bhi.n	8007750 <__sflush_r+0xb8>
 80076f6:	4a2a      	ldr	r2, [pc, #168]	; (80077a0 <__sflush_r+0x108>)
 80076f8:	40ca      	lsrs	r2, r1
 80076fa:	07d6      	lsls	r6, r2, #31
 80076fc:	d528      	bpl.n	8007750 <__sflush_r+0xb8>
 80076fe:	2200      	movs	r2, #0
 8007700:	6062      	str	r2, [r4, #4]
 8007702:	6922      	ldr	r2, [r4, #16]
 8007704:	04d9      	lsls	r1, r3, #19
 8007706:	6022      	str	r2, [r4, #0]
 8007708:	d504      	bpl.n	8007714 <__sflush_r+0x7c>
 800770a:	1c42      	adds	r2, r0, #1
 800770c:	d101      	bne.n	8007712 <__sflush_r+0x7a>
 800770e:	682b      	ldr	r3, [r5, #0]
 8007710:	b903      	cbnz	r3, 8007714 <__sflush_r+0x7c>
 8007712:	6560      	str	r0, [r4, #84]	; 0x54
 8007714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007716:	602f      	str	r7, [r5, #0]
 8007718:	2900      	cmp	r1, #0
 800771a:	d0ca      	beq.n	80076b2 <__sflush_r+0x1a>
 800771c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007720:	4299      	cmp	r1, r3
 8007722:	d002      	beq.n	800772a <__sflush_r+0x92>
 8007724:	4628      	mov	r0, r5
 8007726:	f7ff fae9 	bl	8006cfc <_free_r>
 800772a:	2000      	movs	r0, #0
 800772c:	6360      	str	r0, [r4, #52]	; 0x34
 800772e:	e7c1      	b.n	80076b4 <__sflush_r+0x1c>
 8007730:	6a21      	ldr	r1, [r4, #32]
 8007732:	2301      	movs	r3, #1
 8007734:	4628      	mov	r0, r5
 8007736:	47b0      	blx	r6
 8007738:	1c41      	adds	r1, r0, #1
 800773a:	d1c7      	bne.n	80076cc <__sflush_r+0x34>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d0c4      	beq.n	80076cc <__sflush_r+0x34>
 8007742:	2b1d      	cmp	r3, #29
 8007744:	d001      	beq.n	800774a <__sflush_r+0xb2>
 8007746:	2b16      	cmp	r3, #22
 8007748:	d101      	bne.n	800774e <__sflush_r+0xb6>
 800774a:	602f      	str	r7, [r5, #0]
 800774c:	e7b1      	b.n	80076b2 <__sflush_r+0x1a>
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007754:	81a3      	strh	r3, [r4, #12]
 8007756:	e7ad      	b.n	80076b4 <__sflush_r+0x1c>
 8007758:	690f      	ldr	r7, [r1, #16]
 800775a:	2f00      	cmp	r7, #0
 800775c:	d0a9      	beq.n	80076b2 <__sflush_r+0x1a>
 800775e:	0793      	lsls	r3, r2, #30
 8007760:	bf18      	it	ne
 8007762:	2300      	movne	r3, #0
 8007764:	680e      	ldr	r6, [r1, #0]
 8007766:	bf08      	it	eq
 8007768:	694b      	ldreq	r3, [r1, #20]
 800776a:	eba6 0807 	sub.w	r8, r6, r7
 800776e:	600f      	str	r7, [r1, #0]
 8007770:	608b      	str	r3, [r1, #8]
 8007772:	f1b8 0f00 	cmp.w	r8, #0
 8007776:	dd9c      	ble.n	80076b2 <__sflush_r+0x1a>
 8007778:	4643      	mov	r3, r8
 800777a:	463a      	mov	r2, r7
 800777c:	4628      	mov	r0, r5
 800777e:	6a21      	ldr	r1, [r4, #32]
 8007780:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007782:	47b0      	blx	r6
 8007784:	2800      	cmp	r0, #0
 8007786:	dc06      	bgt.n	8007796 <__sflush_r+0xfe>
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	f04f 30ff 	mov.w	r0, #4294967295
 800778e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007792:	81a3      	strh	r3, [r4, #12]
 8007794:	e78e      	b.n	80076b4 <__sflush_r+0x1c>
 8007796:	4407      	add	r7, r0
 8007798:	eba8 0800 	sub.w	r8, r8, r0
 800779c:	e7e9      	b.n	8007772 <__sflush_r+0xda>
 800779e:	bf00      	nop
 80077a0:	20400001 	.word	0x20400001

080077a4 <_fflush_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	690b      	ldr	r3, [r1, #16]
 80077a8:	4605      	mov	r5, r0
 80077aa:	460c      	mov	r4, r1
 80077ac:	b913      	cbnz	r3, 80077b4 <_fflush_r+0x10>
 80077ae:	2500      	movs	r5, #0
 80077b0:	4628      	mov	r0, r5
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
 80077b4:	b118      	cbz	r0, 80077be <_fflush_r+0x1a>
 80077b6:	6983      	ldr	r3, [r0, #24]
 80077b8:	b90b      	cbnz	r3, 80077be <_fflush_r+0x1a>
 80077ba:	f000 f887 	bl	80078cc <__sinit>
 80077be:	4b14      	ldr	r3, [pc, #80]	; (8007810 <_fflush_r+0x6c>)
 80077c0:	429c      	cmp	r4, r3
 80077c2:	d11b      	bne.n	80077fc <_fflush_r+0x58>
 80077c4:	686c      	ldr	r4, [r5, #4]
 80077c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0ef      	beq.n	80077ae <_fflush_r+0xa>
 80077ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077d0:	07d0      	lsls	r0, r2, #31
 80077d2:	d404      	bmi.n	80077de <_fflush_r+0x3a>
 80077d4:	0599      	lsls	r1, r3, #22
 80077d6:	d402      	bmi.n	80077de <_fflush_r+0x3a>
 80077d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077da:	f000 f915 	bl	8007a08 <__retarget_lock_acquire_recursive>
 80077de:	4628      	mov	r0, r5
 80077e0:	4621      	mov	r1, r4
 80077e2:	f7ff ff59 	bl	8007698 <__sflush_r>
 80077e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077e8:	4605      	mov	r5, r0
 80077ea:	07da      	lsls	r2, r3, #31
 80077ec:	d4e0      	bmi.n	80077b0 <_fflush_r+0xc>
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	059b      	lsls	r3, r3, #22
 80077f2:	d4dd      	bmi.n	80077b0 <_fflush_r+0xc>
 80077f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077f6:	f000 f908 	bl	8007a0a <__retarget_lock_release_recursive>
 80077fa:	e7d9      	b.n	80077b0 <_fflush_r+0xc>
 80077fc:	4b05      	ldr	r3, [pc, #20]	; (8007814 <_fflush_r+0x70>)
 80077fe:	429c      	cmp	r4, r3
 8007800:	d101      	bne.n	8007806 <_fflush_r+0x62>
 8007802:	68ac      	ldr	r4, [r5, #8]
 8007804:	e7df      	b.n	80077c6 <_fflush_r+0x22>
 8007806:	4b04      	ldr	r3, [pc, #16]	; (8007818 <_fflush_r+0x74>)
 8007808:	429c      	cmp	r4, r3
 800780a:	bf08      	it	eq
 800780c:	68ec      	ldreq	r4, [r5, #12]
 800780e:	e7da      	b.n	80077c6 <_fflush_r+0x22>
 8007810:	0800810c 	.word	0x0800810c
 8007814:	0800812c 	.word	0x0800812c
 8007818:	080080ec 	.word	0x080080ec

0800781c <std>:
 800781c:	2300      	movs	r3, #0
 800781e:	b510      	push	{r4, lr}
 8007820:	4604      	mov	r4, r0
 8007822:	e9c0 3300 	strd	r3, r3, [r0]
 8007826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800782a:	6083      	str	r3, [r0, #8]
 800782c:	8181      	strh	r1, [r0, #12]
 800782e:	6643      	str	r3, [r0, #100]	; 0x64
 8007830:	81c2      	strh	r2, [r0, #14]
 8007832:	6183      	str	r3, [r0, #24]
 8007834:	4619      	mov	r1, r3
 8007836:	2208      	movs	r2, #8
 8007838:	305c      	adds	r0, #92	; 0x5c
 800783a:	f7fd fb93 	bl	8004f64 <memset>
 800783e:	4b05      	ldr	r3, [pc, #20]	; (8007854 <std+0x38>)
 8007840:	6224      	str	r4, [r4, #32]
 8007842:	6263      	str	r3, [r4, #36]	; 0x24
 8007844:	4b04      	ldr	r3, [pc, #16]	; (8007858 <std+0x3c>)
 8007846:	62a3      	str	r3, [r4, #40]	; 0x28
 8007848:	4b04      	ldr	r3, [pc, #16]	; (800785c <std+0x40>)
 800784a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800784c:	4b04      	ldr	r3, [pc, #16]	; (8007860 <std+0x44>)
 800784e:	6323      	str	r3, [r4, #48]	; 0x30
 8007850:	bd10      	pop	{r4, pc}
 8007852:	bf00      	nop
 8007854:	08007b6d 	.word	0x08007b6d
 8007858:	08007b8f 	.word	0x08007b8f
 800785c:	08007bc7 	.word	0x08007bc7
 8007860:	08007beb 	.word	0x08007beb

08007864 <_cleanup_r>:
 8007864:	4901      	ldr	r1, [pc, #4]	; (800786c <_cleanup_r+0x8>)
 8007866:	f000 b8af 	b.w	80079c8 <_fwalk_reent>
 800786a:	bf00      	nop
 800786c:	080077a5 	.word	0x080077a5

08007870 <__sfmoreglue>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	2568      	movs	r5, #104	; 0x68
 8007874:	1e4a      	subs	r2, r1, #1
 8007876:	4355      	muls	r5, r2
 8007878:	460e      	mov	r6, r1
 800787a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800787e:	f7ff fa89 	bl	8006d94 <_malloc_r>
 8007882:	4604      	mov	r4, r0
 8007884:	b140      	cbz	r0, 8007898 <__sfmoreglue+0x28>
 8007886:	2100      	movs	r1, #0
 8007888:	e9c0 1600 	strd	r1, r6, [r0]
 800788c:	300c      	adds	r0, #12
 800788e:	60a0      	str	r0, [r4, #8]
 8007890:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007894:	f7fd fb66 	bl	8004f64 <memset>
 8007898:	4620      	mov	r0, r4
 800789a:	bd70      	pop	{r4, r5, r6, pc}

0800789c <__sfp_lock_acquire>:
 800789c:	4801      	ldr	r0, [pc, #4]	; (80078a4 <__sfp_lock_acquire+0x8>)
 800789e:	f000 b8b3 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 80078a2:	bf00      	nop
 80078a4:	200005d8 	.word	0x200005d8

080078a8 <__sfp_lock_release>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__sfp_lock_release+0x8>)
 80078aa:	f000 b8ae 	b.w	8007a0a <__retarget_lock_release_recursive>
 80078ae:	bf00      	nop
 80078b0:	200005d8 	.word	0x200005d8

080078b4 <__sinit_lock_acquire>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__sinit_lock_acquire+0x8>)
 80078b6:	f000 b8a7 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 80078ba:	bf00      	nop
 80078bc:	200005d3 	.word	0x200005d3

080078c0 <__sinit_lock_release>:
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <__sinit_lock_release+0x8>)
 80078c2:	f000 b8a2 	b.w	8007a0a <__retarget_lock_release_recursive>
 80078c6:	bf00      	nop
 80078c8:	200005d3 	.word	0x200005d3

080078cc <__sinit>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	4604      	mov	r4, r0
 80078d0:	f7ff fff0 	bl	80078b4 <__sinit_lock_acquire>
 80078d4:	69a3      	ldr	r3, [r4, #24]
 80078d6:	b11b      	cbz	r3, 80078e0 <__sinit+0x14>
 80078d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078dc:	f7ff bff0 	b.w	80078c0 <__sinit_lock_release>
 80078e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078e4:	6523      	str	r3, [r4, #80]	; 0x50
 80078e6:	4b13      	ldr	r3, [pc, #76]	; (8007934 <__sinit+0x68>)
 80078e8:	4a13      	ldr	r2, [pc, #76]	; (8007938 <__sinit+0x6c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80078ee:	42a3      	cmp	r3, r4
 80078f0:	bf08      	it	eq
 80078f2:	2301      	moveq	r3, #1
 80078f4:	4620      	mov	r0, r4
 80078f6:	bf08      	it	eq
 80078f8:	61a3      	streq	r3, [r4, #24]
 80078fa:	f000 f81f 	bl	800793c <__sfp>
 80078fe:	6060      	str	r0, [r4, #4]
 8007900:	4620      	mov	r0, r4
 8007902:	f000 f81b 	bl	800793c <__sfp>
 8007906:	60a0      	str	r0, [r4, #8]
 8007908:	4620      	mov	r0, r4
 800790a:	f000 f817 	bl	800793c <__sfp>
 800790e:	2200      	movs	r2, #0
 8007910:	2104      	movs	r1, #4
 8007912:	60e0      	str	r0, [r4, #12]
 8007914:	6860      	ldr	r0, [r4, #4]
 8007916:	f7ff ff81 	bl	800781c <std>
 800791a:	2201      	movs	r2, #1
 800791c:	2109      	movs	r1, #9
 800791e:	68a0      	ldr	r0, [r4, #8]
 8007920:	f7ff ff7c 	bl	800781c <std>
 8007924:	2202      	movs	r2, #2
 8007926:	2112      	movs	r1, #18
 8007928:	68e0      	ldr	r0, [r4, #12]
 800792a:	f7ff ff77 	bl	800781c <std>
 800792e:	2301      	movs	r3, #1
 8007930:	61a3      	str	r3, [r4, #24]
 8007932:	e7d1      	b.n	80078d8 <__sinit+0xc>
 8007934:	08007d68 	.word	0x08007d68
 8007938:	08007865 	.word	0x08007865

0800793c <__sfp>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	4607      	mov	r7, r0
 8007940:	f7ff ffac 	bl	800789c <__sfp_lock_acquire>
 8007944:	4b1e      	ldr	r3, [pc, #120]	; (80079c0 <__sfp+0x84>)
 8007946:	681e      	ldr	r6, [r3, #0]
 8007948:	69b3      	ldr	r3, [r6, #24]
 800794a:	b913      	cbnz	r3, 8007952 <__sfp+0x16>
 800794c:	4630      	mov	r0, r6
 800794e:	f7ff ffbd 	bl	80078cc <__sinit>
 8007952:	3648      	adds	r6, #72	; 0x48
 8007954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007958:	3b01      	subs	r3, #1
 800795a:	d503      	bpl.n	8007964 <__sfp+0x28>
 800795c:	6833      	ldr	r3, [r6, #0]
 800795e:	b30b      	cbz	r3, 80079a4 <__sfp+0x68>
 8007960:	6836      	ldr	r6, [r6, #0]
 8007962:	e7f7      	b.n	8007954 <__sfp+0x18>
 8007964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007968:	b9d5      	cbnz	r5, 80079a0 <__sfp+0x64>
 800796a:	4b16      	ldr	r3, [pc, #88]	; (80079c4 <__sfp+0x88>)
 800796c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007970:	60e3      	str	r3, [r4, #12]
 8007972:	6665      	str	r5, [r4, #100]	; 0x64
 8007974:	f000 f847 	bl	8007a06 <__retarget_lock_init_recursive>
 8007978:	f7ff ff96 	bl	80078a8 <__sfp_lock_release>
 800797c:	2208      	movs	r2, #8
 800797e:	4629      	mov	r1, r5
 8007980:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007984:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007988:	6025      	str	r5, [r4, #0]
 800798a:	61a5      	str	r5, [r4, #24]
 800798c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007990:	f7fd fae8 	bl	8004f64 <memset>
 8007994:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007998:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800799c:	4620      	mov	r0, r4
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a0:	3468      	adds	r4, #104	; 0x68
 80079a2:	e7d9      	b.n	8007958 <__sfp+0x1c>
 80079a4:	2104      	movs	r1, #4
 80079a6:	4638      	mov	r0, r7
 80079a8:	f7ff ff62 	bl	8007870 <__sfmoreglue>
 80079ac:	4604      	mov	r4, r0
 80079ae:	6030      	str	r0, [r6, #0]
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1d5      	bne.n	8007960 <__sfp+0x24>
 80079b4:	f7ff ff78 	bl	80078a8 <__sfp_lock_release>
 80079b8:	230c      	movs	r3, #12
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	e7ee      	b.n	800799c <__sfp+0x60>
 80079be:	bf00      	nop
 80079c0:	08007d68 	.word	0x08007d68
 80079c4:	ffff0001 	.word	0xffff0001

080079c8 <_fwalk_reent>:
 80079c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	4606      	mov	r6, r0
 80079ce:	4688      	mov	r8, r1
 80079d0:	2700      	movs	r7, #0
 80079d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079da:	f1b9 0901 	subs.w	r9, r9, #1
 80079de:	d505      	bpl.n	80079ec <_fwalk_reent+0x24>
 80079e0:	6824      	ldr	r4, [r4, #0]
 80079e2:	2c00      	cmp	r4, #0
 80079e4:	d1f7      	bne.n	80079d6 <_fwalk_reent+0xe>
 80079e6:	4638      	mov	r0, r7
 80079e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ec:	89ab      	ldrh	r3, [r5, #12]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d907      	bls.n	8007a02 <_fwalk_reent+0x3a>
 80079f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079f6:	3301      	adds	r3, #1
 80079f8:	d003      	beq.n	8007a02 <_fwalk_reent+0x3a>
 80079fa:	4629      	mov	r1, r5
 80079fc:	4630      	mov	r0, r6
 80079fe:	47c0      	blx	r8
 8007a00:	4307      	orrs	r7, r0
 8007a02:	3568      	adds	r5, #104	; 0x68
 8007a04:	e7e9      	b.n	80079da <_fwalk_reent+0x12>

08007a06 <__retarget_lock_init_recursive>:
 8007a06:	4770      	bx	lr

08007a08 <__retarget_lock_acquire_recursive>:
 8007a08:	4770      	bx	lr

08007a0a <__retarget_lock_release_recursive>:
 8007a0a:	4770      	bx	lr

08007a0c <__swhatbuf_r>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	460e      	mov	r6, r1
 8007a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a14:	4614      	mov	r4, r2
 8007a16:	2900      	cmp	r1, #0
 8007a18:	461d      	mov	r5, r3
 8007a1a:	b096      	sub	sp, #88	; 0x58
 8007a1c:	da07      	bge.n	8007a2e <__swhatbuf_r+0x22>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	602b      	str	r3, [r5, #0]
 8007a22:	89b3      	ldrh	r3, [r6, #12]
 8007a24:	061a      	lsls	r2, r3, #24
 8007a26:	d410      	bmi.n	8007a4a <__swhatbuf_r+0x3e>
 8007a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a2c:	e00e      	b.n	8007a4c <__swhatbuf_r+0x40>
 8007a2e:	466a      	mov	r2, sp
 8007a30:	f000 f902 	bl	8007c38 <_fstat_r>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	dbf2      	blt.n	8007a1e <__swhatbuf_r+0x12>
 8007a38:	9a01      	ldr	r2, [sp, #4]
 8007a3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a42:	425a      	negs	r2, r3
 8007a44:	415a      	adcs	r2, r3
 8007a46:	602a      	str	r2, [r5, #0]
 8007a48:	e7ee      	b.n	8007a28 <__swhatbuf_r+0x1c>
 8007a4a:	2340      	movs	r3, #64	; 0x40
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	b016      	add	sp, #88	; 0x58
 8007a52:	bd70      	pop	{r4, r5, r6, pc}

08007a54 <__smakebuf_r>:
 8007a54:	898b      	ldrh	r3, [r1, #12]
 8007a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a58:	079d      	lsls	r5, r3, #30
 8007a5a:	4606      	mov	r6, r0
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	d507      	bpl.n	8007a70 <__smakebuf_r+0x1c>
 8007a60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	6123      	str	r3, [r4, #16]
 8007a68:	2301      	movs	r3, #1
 8007a6a:	6163      	str	r3, [r4, #20]
 8007a6c:	b002      	add	sp, #8
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	466a      	mov	r2, sp
 8007a72:	ab01      	add	r3, sp, #4
 8007a74:	f7ff ffca 	bl	8007a0c <__swhatbuf_r>
 8007a78:	9900      	ldr	r1, [sp, #0]
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	f7ff f989 	bl	8006d94 <_malloc_r>
 8007a82:	b948      	cbnz	r0, 8007a98 <__smakebuf_r+0x44>
 8007a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a88:	059a      	lsls	r2, r3, #22
 8007a8a:	d4ef      	bmi.n	8007a6c <__smakebuf_r+0x18>
 8007a8c:	f023 0303 	bic.w	r3, r3, #3
 8007a90:	f043 0302 	orr.w	r3, r3, #2
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	e7e3      	b.n	8007a60 <__smakebuf_r+0xc>
 8007a98:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <__smakebuf_r+0x7c>)
 8007a9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	6020      	str	r0, [r4, #0]
 8007aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	9b00      	ldr	r3, [sp, #0]
 8007aa8:	6120      	str	r0, [r4, #16]
 8007aaa:	6163      	str	r3, [r4, #20]
 8007aac:	9b01      	ldr	r3, [sp, #4]
 8007aae:	b15b      	cbz	r3, 8007ac8 <__smakebuf_r+0x74>
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ab6:	f000 f8d1 	bl	8007c5c <_isatty_r>
 8007aba:	b128      	cbz	r0, 8007ac8 <__smakebuf_r+0x74>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	f023 0303 	bic.w	r3, r3, #3
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	89a0      	ldrh	r0, [r4, #12]
 8007aca:	4305      	orrs	r5, r0
 8007acc:	81a5      	strh	r5, [r4, #12]
 8007ace:	e7cd      	b.n	8007a6c <__smakebuf_r+0x18>
 8007ad0:	08007865 	.word	0x08007865

08007ad4 <_malloc_usable_size_r>:
 8007ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad8:	1f18      	subs	r0, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bfbc      	itt	lt
 8007ade:	580b      	ldrlt	r3, [r1, r0]
 8007ae0:	18c0      	addlt	r0, r0, r3
 8007ae2:	4770      	bx	lr

08007ae4 <_raise_r>:
 8007ae4:	291f      	cmp	r1, #31
 8007ae6:	b538      	push	{r3, r4, r5, lr}
 8007ae8:	4604      	mov	r4, r0
 8007aea:	460d      	mov	r5, r1
 8007aec:	d904      	bls.n	8007af8 <_raise_r+0x14>
 8007aee:	2316      	movs	r3, #22
 8007af0:	6003      	str	r3, [r0, #0]
 8007af2:	f04f 30ff 	mov.w	r0, #4294967295
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007afa:	b112      	cbz	r2, 8007b02 <_raise_r+0x1e>
 8007afc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b00:	b94b      	cbnz	r3, 8007b16 <_raise_r+0x32>
 8007b02:	4620      	mov	r0, r4
 8007b04:	f000 f830 	bl	8007b68 <_getpid_r>
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b12:	f000 b817 	b.w	8007b44 <_kill_r>
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d00a      	beq.n	8007b30 <_raise_r+0x4c>
 8007b1a:	1c59      	adds	r1, r3, #1
 8007b1c:	d103      	bne.n	8007b26 <_raise_r+0x42>
 8007b1e:	2316      	movs	r3, #22
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	2001      	movs	r0, #1
 8007b24:	e7e7      	b.n	8007af6 <_raise_r+0x12>
 8007b26:	2400      	movs	r4, #0
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b2e:	4798      	blx	r3
 8007b30:	2000      	movs	r0, #0
 8007b32:	e7e0      	b.n	8007af6 <_raise_r+0x12>

08007b34 <raise>:
 8007b34:	4b02      	ldr	r3, [pc, #8]	; (8007b40 <raise+0xc>)
 8007b36:	4601      	mov	r1, r0
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	f7ff bfd3 	b.w	8007ae4 <_raise_r>
 8007b3e:	bf00      	nop
 8007b40:	20000010 	.word	0x20000010

08007b44 <_kill_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	2300      	movs	r3, #0
 8007b48:	4d06      	ldr	r5, [pc, #24]	; (8007b64 <_kill_r+0x20>)
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	f7fa f97e 	bl	8001e52 <_kill>
 8007b56:	1c43      	adds	r3, r0, #1
 8007b58:	d102      	bne.n	8007b60 <_kill_r+0x1c>
 8007b5a:	682b      	ldr	r3, [r5, #0]
 8007b5c:	b103      	cbz	r3, 8007b60 <_kill_r+0x1c>
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	bd38      	pop	{r3, r4, r5, pc}
 8007b62:	bf00      	nop
 8007b64:	200005cc 	.word	0x200005cc

08007b68 <_getpid_r>:
 8007b68:	f7fa b96c 	b.w	8001e44 <_getpid>

08007b6c <__sread>:
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	460c      	mov	r4, r1
 8007b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b74:	f000 f894 	bl	8007ca0 <_read_r>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	bfab      	itete	ge
 8007b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b80:	181b      	addge	r3, r3, r0
 8007b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b86:	bfac      	ite	ge
 8007b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b8a:	81a3      	strhlt	r3, [r4, #12]
 8007b8c:	bd10      	pop	{r4, pc}

08007b8e <__swrite>:
 8007b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b92:	461f      	mov	r7, r3
 8007b94:	898b      	ldrh	r3, [r1, #12]
 8007b96:	4605      	mov	r5, r0
 8007b98:	05db      	lsls	r3, r3, #23
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	4616      	mov	r6, r2
 8007b9e:	d505      	bpl.n	8007bac <__swrite+0x1e>
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba8:	f000 f868 	bl	8007c7c <_lseek_r>
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	4632      	mov	r2, r6
 8007bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bb4:	81a3      	strh	r3, [r4, #12]
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	463b      	mov	r3, r7
 8007bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc2:	f000 b817 	b.w	8007bf4 <_write_r>

08007bc6 <__sseek>:
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	460c      	mov	r4, r1
 8007bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bce:	f000 f855 	bl	8007c7c <_lseek_r>
 8007bd2:	1c43      	adds	r3, r0, #1
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	bf15      	itete	ne
 8007bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007be2:	81a3      	strheq	r3, [r4, #12]
 8007be4:	bf18      	it	ne
 8007be6:	81a3      	strhne	r3, [r4, #12]
 8007be8:	bd10      	pop	{r4, pc}

08007bea <__sclose>:
 8007bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bee:	f000 b813 	b.w	8007c18 <_close_r>
	...

08007bf4 <_write_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	4608      	mov	r0, r1
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4d05      	ldr	r5, [pc, #20]	; (8007c14 <_write_r+0x20>)
 8007c00:	602a      	str	r2, [r5, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f7fa f95c 	bl	8001ec0 <_write>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_write_r+0x1e>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_write_r+0x1e>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	200005cc 	.word	0x200005cc

08007c18 <_close_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	4d05      	ldr	r5, [pc, #20]	; (8007c34 <_close_r+0x1c>)
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	602b      	str	r3, [r5, #0]
 8007c24:	f7fa f968 	bl	8001ef8 <_close>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_close_r+0x1a>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_close_r+0x1a>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	200005cc 	.word	0x200005cc

08007c38 <_fstat_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	4d06      	ldr	r5, [pc, #24]	; (8007c58 <_fstat_r+0x20>)
 8007c3e:	4604      	mov	r4, r0
 8007c40:	4608      	mov	r0, r1
 8007c42:	4611      	mov	r1, r2
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	f7fa f962 	bl	8001f0e <_fstat>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	d102      	bne.n	8007c54 <_fstat_r+0x1c>
 8007c4e:	682b      	ldr	r3, [r5, #0]
 8007c50:	b103      	cbz	r3, 8007c54 <_fstat_r+0x1c>
 8007c52:	6023      	str	r3, [r4, #0]
 8007c54:	bd38      	pop	{r3, r4, r5, pc}
 8007c56:	bf00      	nop
 8007c58:	200005cc 	.word	0x200005cc

08007c5c <_isatty_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4d05      	ldr	r5, [pc, #20]	; (8007c78 <_isatty_r+0x1c>)
 8007c62:	4604      	mov	r4, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	602b      	str	r3, [r5, #0]
 8007c68:	f7fa f960 	bl	8001f2c <_isatty>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_isatty_r+0x1a>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_isatty_r+0x1a>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	200005cc 	.word	0x200005cc

08007c7c <_lseek_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4604      	mov	r4, r0
 8007c80:	4608      	mov	r0, r1
 8007c82:	4611      	mov	r1, r2
 8007c84:	2200      	movs	r2, #0
 8007c86:	4d05      	ldr	r5, [pc, #20]	; (8007c9c <_lseek_r+0x20>)
 8007c88:	602a      	str	r2, [r5, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f7fa f958 	bl	8001f40 <_lseek>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_lseek_r+0x1e>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_lseek_r+0x1e>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	200005cc 	.word	0x200005cc

08007ca0 <_read_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	2200      	movs	r2, #0
 8007caa:	4d05      	ldr	r5, [pc, #20]	; (8007cc0 <_read_r+0x20>)
 8007cac:	602a      	str	r2, [r5, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f7fa f8e9 	bl	8001e86 <_read>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_read_r+0x1e>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_read_r+0x1e>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	200005cc 	.word	0x200005cc

08007cc4 <_init>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	bf00      	nop
 8007cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cca:	bc08      	pop	{r3}
 8007ccc:	469e      	mov	lr, r3
 8007cce:	4770      	bx	lr

08007cd0 <_fini>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	bf00      	nop
 8007cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd6:	bc08      	pop	{r3}
 8007cd8:	469e      	mov	lr, r3
 8007cda:	4770      	bx	lr
