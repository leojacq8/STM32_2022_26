
lcd3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000880c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08008950  08008950  00018950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e28  08008e28  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e30  08008e30  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001e4  0800901c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0800901c  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e43b  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258c  00000000  00000000  0002e648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  00030bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  00031698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d5f  00000000  00000000  00032078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3b0  00000000  00000000  00049dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008930b  00000000  00000000  00058187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1492  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e80  00000000  00000000  000e14e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08008934 	.word	0x08008934

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08008934 	.word	0x08008934

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_fmul>:
 8000190:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000194:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000198:	bf1e      	ittt	ne
 800019a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800019e:	ea92 0f0c 	teqne	r2, ip
 80001a2:	ea93 0f0c 	teqne	r3, ip
 80001a6:	d06f      	beq.n	8000288 <__aeabi_fmul+0xf8>
 80001a8:	441a      	add	r2, r3
 80001aa:	ea80 0c01 	eor.w	ip, r0, r1
 80001ae:	0240      	lsls	r0, r0, #9
 80001b0:	bf18      	it	ne
 80001b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001b6:	d01e      	beq.n	80001f6 <__aeabi_fmul+0x66>
 80001b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001c4:	fba0 3101 	umull	r3, r1, r0, r1
 80001c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001d0:	bf3e      	ittt	cc
 80001d2:	0049      	lslcc	r1, r1, #1
 80001d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001d8:	005b      	lslcc	r3, r3, #1
 80001da:	ea40 0001 	orr.w	r0, r0, r1
 80001de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001e2:	2afd      	cmp	r2, #253	; 0xfd
 80001e4:	d81d      	bhi.n	8000222 <__aeabi_fmul+0x92>
 80001e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ee:	bf08      	it	eq
 80001f0:	f020 0001 	biceq.w	r0, r0, #1
 80001f4:	4770      	bx	lr
 80001f6:	f090 0f00 	teq	r0, #0
 80001fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001fe:	bf08      	it	eq
 8000200:	0249      	lsleq	r1, r1, #9
 8000202:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000206:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800020a:	3a7f      	subs	r2, #127	; 0x7f
 800020c:	bfc2      	ittt	gt
 800020e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000212:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000216:	4770      	bxgt	lr
 8000218:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021c:	f04f 0300 	mov.w	r3, #0
 8000220:	3a01      	subs	r2, #1
 8000222:	dc5d      	bgt.n	80002e0 <__aeabi_fmul+0x150>
 8000224:	f112 0f19 	cmn.w	r2, #25
 8000228:	bfdc      	itt	le
 800022a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800022e:	4770      	bxle	lr
 8000230:	f1c2 0200 	rsb	r2, r2, #0
 8000234:	0041      	lsls	r1, r0, #1
 8000236:	fa21 f102 	lsr.w	r1, r1, r2
 800023a:	f1c2 0220 	rsb	r2, r2, #32
 800023e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000242:	ea5f 0031 	movs.w	r0, r1, rrx
 8000246:	f140 0000 	adc.w	r0, r0, #0
 800024a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800024e:	bf08      	it	eq
 8000250:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000254:	4770      	bx	lr
 8000256:	f092 0f00 	teq	r2, #0
 800025a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800025e:	bf02      	ittt	eq
 8000260:	0040      	lsleq	r0, r0, #1
 8000262:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000266:	3a01      	subeq	r2, #1
 8000268:	d0f9      	beq.n	800025e <__aeabi_fmul+0xce>
 800026a:	ea40 000c 	orr.w	r0, r0, ip
 800026e:	f093 0f00 	teq	r3, #0
 8000272:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000276:	bf02      	ittt	eq
 8000278:	0049      	lsleq	r1, r1, #1
 800027a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800027e:	3b01      	subeq	r3, #1
 8000280:	d0f9      	beq.n	8000276 <__aeabi_fmul+0xe6>
 8000282:	ea41 010c 	orr.w	r1, r1, ip
 8000286:	e78f      	b.n	80001a8 <__aeabi_fmul+0x18>
 8000288:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800028c:	ea92 0f0c 	teq	r2, ip
 8000290:	bf18      	it	ne
 8000292:	ea93 0f0c 	teqne	r3, ip
 8000296:	d00a      	beq.n	80002ae <__aeabi_fmul+0x11e>
 8000298:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800029c:	bf18      	it	ne
 800029e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80002a2:	d1d8      	bne.n	8000256 <__aeabi_fmul+0xc6>
 80002a4:	ea80 0001 	eor.w	r0, r0, r1
 80002a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f090 0f00 	teq	r0, #0
 80002b2:	bf17      	itett	ne
 80002b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002b8:	4608      	moveq	r0, r1
 80002ba:	f091 0f00 	teqne	r1, #0
 80002be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002c2:	d014      	beq.n	80002ee <__aeabi_fmul+0x15e>
 80002c4:	ea92 0f0c 	teq	r2, ip
 80002c8:	d101      	bne.n	80002ce <__aeabi_fmul+0x13e>
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	d10f      	bne.n	80002ee <__aeabi_fmul+0x15e>
 80002ce:	ea93 0f0c 	teq	r3, ip
 80002d2:	d103      	bne.n	80002dc <__aeabi_fmul+0x14c>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	bf18      	it	ne
 80002d8:	4608      	movne	r0, r1
 80002da:	d108      	bne.n	80002ee <__aeabi_fmul+0x15e>
 80002dc:	ea80 0001 	eor.w	r0, r0, r1
 80002e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ec:	4770      	bx	lr
 80002ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_drsub>:
 80002f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	e002      	b.n	8000304 <__adddf3>
 80002fe:	bf00      	nop

08000300 <__aeabi_dsub>:
 8000300:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000304 <__adddf3>:
 8000304:	b530      	push	{r4, r5, lr}
 8000306:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800030a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800030e:	ea94 0f05 	teq	r4, r5
 8000312:	bf08      	it	eq
 8000314:	ea90 0f02 	teqeq	r0, r2
 8000318:	bf1f      	itttt	ne
 800031a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800031e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000322:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000326:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800032a:	f000 80e2 	beq.w	80004f2 <__adddf3+0x1ee>
 800032e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000332:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000336:	bfb8      	it	lt
 8000338:	426d      	neglt	r5, r5
 800033a:	dd0c      	ble.n	8000356 <__adddf3+0x52>
 800033c:	442c      	add	r4, r5
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	ea82 0000 	eor.w	r0, r2, r0
 800034a:	ea83 0101 	eor.w	r1, r3, r1
 800034e:	ea80 0202 	eor.w	r2, r0, r2
 8000352:	ea81 0303 	eor.w	r3, r1, r3
 8000356:	2d36      	cmp	r5, #54	; 0x36
 8000358:	bf88      	it	hi
 800035a:	bd30      	pophi	{r4, r5, pc}
 800035c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000360:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000364:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000368:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x70>
 800036e:	4240      	negs	r0, r0
 8000370:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000374:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000378:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800037c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000380:	d002      	beq.n	8000388 <__adddf3+0x84>
 8000382:	4252      	negs	r2, r2
 8000384:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000388:	ea94 0f05 	teq	r4, r5
 800038c:	f000 80a7 	beq.w	80004de <__adddf3+0x1da>
 8000390:	f1a4 0401 	sub.w	r4, r4, #1
 8000394:	f1d5 0e20 	rsbs	lr, r5, #32
 8000398:	db0d      	blt.n	80003b6 <__adddf3+0xb2>
 800039a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800039e:	fa22 f205 	lsr.w	r2, r2, r5
 80003a2:	1880      	adds	r0, r0, r2
 80003a4:	f141 0100 	adc.w	r1, r1, #0
 80003a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80003ac:	1880      	adds	r0, r0, r2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	4159      	adcs	r1, r3
 80003b4:	e00e      	b.n	80003d4 <__adddf3+0xd0>
 80003b6:	f1a5 0520 	sub.w	r5, r5, #32
 80003ba:	f10e 0e20 	add.w	lr, lr, #32
 80003be:	2a01      	cmp	r2, #1
 80003c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003c4:	bf28      	it	cs
 80003c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ca:	fa43 f305 	asr.w	r3, r3, r5
 80003ce:	18c0      	adds	r0, r0, r3
 80003d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d8:	d507      	bpl.n	80003ea <__adddf3+0xe6>
 80003da:	f04f 0e00 	mov.w	lr, #0
 80003de:	f1dc 0c00 	rsbs	ip, ip, #0
 80003e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ee:	d31b      	bcc.n	8000428 <__adddf3+0x124>
 80003f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003f4:	d30c      	bcc.n	8000410 <__adddf3+0x10c>
 80003f6:	0849      	lsrs	r1, r1, #1
 80003f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000400:	f104 0401 	add.w	r4, r4, #1
 8000404:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000408:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800040c:	f080 809a 	bcs.w	8000544 <__adddf3+0x240>
 8000410:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000414:	bf08      	it	eq
 8000416:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800041a:	f150 0000 	adcs.w	r0, r0, #0
 800041e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000422:	ea41 0105 	orr.w	r1, r1, r5
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800042c:	4140      	adcs	r0, r0
 800042e:	eb41 0101 	adc.w	r1, r1, r1
 8000432:	3c01      	subs	r4, #1
 8000434:	bf28      	it	cs
 8000436:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800043a:	d2e9      	bcs.n	8000410 <__adddf3+0x10c>
 800043c:	f091 0f00 	teq	r1, #0
 8000440:	bf04      	itt	eq
 8000442:	4601      	moveq	r1, r0
 8000444:	2000      	moveq	r0, #0
 8000446:	fab1 f381 	clz	r3, r1
 800044a:	bf08      	it	eq
 800044c:	3320      	addeq	r3, #32
 800044e:	f1a3 030b 	sub.w	r3, r3, #11
 8000452:	f1b3 0220 	subs.w	r2, r3, #32
 8000456:	da0c      	bge.n	8000472 <__adddf3+0x16e>
 8000458:	320c      	adds	r2, #12
 800045a:	dd08      	ble.n	800046e <__adddf3+0x16a>
 800045c:	f102 0c14 	add.w	ip, r2, #20
 8000460:	f1c2 020c 	rsb	r2, r2, #12
 8000464:	fa01 f00c 	lsl.w	r0, r1, ip
 8000468:	fa21 f102 	lsr.w	r1, r1, r2
 800046c:	e00c      	b.n	8000488 <__adddf3+0x184>
 800046e:	f102 0214 	add.w	r2, r2, #20
 8000472:	bfd8      	it	le
 8000474:	f1c2 0c20 	rsble	ip, r2, #32
 8000478:	fa01 f102 	lsl.w	r1, r1, r2
 800047c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000480:	bfdc      	itt	le
 8000482:	ea41 010c 	orrle.w	r1, r1, ip
 8000486:	4090      	lslle	r0, r2
 8000488:	1ae4      	subs	r4, r4, r3
 800048a:	bfa2      	ittt	ge
 800048c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000490:	4329      	orrge	r1, r5
 8000492:	bd30      	popge	{r4, r5, pc}
 8000494:	ea6f 0404 	mvn.w	r4, r4
 8000498:	3c1f      	subs	r4, #31
 800049a:	da1c      	bge.n	80004d6 <__adddf3+0x1d2>
 800049c:	340c      	adds	r4, #12
 800049e:	dc0e      	bgt.n	80004be <__adddf3+0x1ba>
 80004a0:	f104 0414 	add.w	r4, r4, #20
 80004a4:	f1c4 0220 	rsb	r2, r4, #32
 80004a8:	fa20 f004 	lsr.w	r0, r0, r4
 80004ac:	fa01 f302 	lsl.w	r3, r1, r2
 80004b0:	ea40 0003 	orr.w	r0, r0, r3
 80004b4:	fa21 f304 	lsr.w	r3, r1, r4
 80004b8:	ea45 0103 	orr.w	r1, r5, r3
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f1c4 040c 	rsb	r4, r4, #12
 80004c2:	f1c4 0220 	rsb	r2, r4, #32
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 f304 	lsl.w	r3, r1, r4
 80004ce:	ea40 0003 	orr.w	r0, r0, r3
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	fa21 f004 	lsr.w	r0, r1, r4
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	f094 0f00 	teq	r4, #0
 80004e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004e6:	bf06      	itte	eq
 80004e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ec:	3401      	addeq	r4, #1
 80004ee:	3d01      	subne	r5, #1
 80004f0:	e74e      	b.n	8000390 <__adddf3+0x8c>
 80004f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f6:	bf18      	it	ne
 80004f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004fc:	d029      	beq.n	8000552 <__adddf3+0x24e>
 80004fe:	ea94 0f05 	teq	r4, r5
 8000502:	bf08      	it	eq
 8000504:	ea90 0f02 	teqeq	r0, r2
 8000508:	d005      	beq.n	8000516 <__adddf3+0x212>
 800050a:	ea54 0c00 	orrs.w	ip, r4, r0
 800050e:	bf04      	itt	eq
 8000510:	4619      	moveq	r1, r3
 8000512:	4610      	moveq	r0, r2
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	ea91 0f03 	teq	r1, r3
 800051a:	bf1e      	ittt	ne
 800051c:	2100      	movne	r1, #0
 800051e:	2000      	movne	r0, #0
 8000520:	bd30      	popne	{r4, r5, pc}
 8000522:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000526:	d105      	bne.n	8000534 <__adddf3+0x230>
 8000528:	0040      	lsls	r0, r0, #1
 800052a:	4149      	adcs	r1, r1
 800052c:	bf28      	it	cs
 800052e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000532:	bd30      	pop	{r4, r5, pc}
 8000534:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000538:	bf3c      	itt	cc
 800053a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800053e:	bd30      	popcc	{r4, r5, pc}
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000548:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800054c:	f04f 0000 	mov.w	r0, #0
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000556:	bf1a      	itte	ne
 8000558:	4619      	movne	r1, r3
 800055a:	4610      	movne	r0, r2
 800055c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000560:	bf1c      	itt	ne
 8000562:	460b      	movne	r3, r1
 8000564:	4602      	movne	r2, r0
 8000566:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800056a:	bf06      	itte	eq
 800056c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000570:	ea91 0f03 	teqeq	r1, r3
 8000574:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	bf00      	nop

0800057c <__aeabi_ui2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f04f 0500 	mov.w	r5, #0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e750      	b.n	800043c <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_i2d>:
 800059c:	f090 0f00 	teq	r0, #0
 80005a0:	bf04      	itt	eq
 80005a2:	2100      	moveq	r1, #0
 80005a4:	4770      	bxeq	lr
 80005a6:	b530      	push	{r4, r5, lr}
 80005a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005b4:	bf48      	it	mi
 80005b6:	4240      	negmi	r0, r0
 80005b8:	f04f 0100 	mov.w	r1, #0
 80005bc:	e73e      	b.n	800043c <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_f2d>:
 80005c0:	0042      	lsls	r2, r0, #1
 80005c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ce:	bf1f      	itttt	ne
 80005d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005dc:	4770      	bxne	lr
 80005de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005e2:	bf08      	it	eq
 80005e4:	4770      	bxeq	lr
 80005e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ea:	bf04      	itt	eq
 80005ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f0:	4770      	bxeq	lr
 80005f2:	b530      	push	{r4, r5, lr}
 80005f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	e71c      	b.n	800043c <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_ul2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	e00a      	b.n	800062a <__aeabi_l2d+0x16>

08000614 <__aeabi_l2d>:
 8000614:	ea50 0201 	orrs.w	r2, r0, r1
 8000618:	bf08      	it	eq
 800061a:	4770      	bxeq	lr
 800061c:	b530      	push	{r4, r5, lr}
 800061e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000622:	d502      	bpl.n	800062a <__aeabi_l2d+0x16>
 8000624:	4240      	negs	r0, r0
 8000626:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800062a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000632:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000636:	f43f aed8 	beq.w	80003ea <__adddf3+0xe6>
 800063a:	f04f 0203 	mov.w	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000652:	f1c2 0320 	rsb	r3, r2, #32
 8000656:	fa00 fc03 	lsl.w	ip, r0, r3
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000662:	ea40 000e 	orr.w	r0, r0, lr
 8000666:	fa21 f102 	lsr.w	r1, r1, r2
 800066a:	4414      	add	r4, r2
 800066c:	e6bd      	b.n	80003ea <__adddf3+0xe6>
 800066e:	bf00      	nop

08000670 <__aeabi_dmul>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000676:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800067a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800067e:	bf1d      	ittte	ne
 8000680:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000684:	ea94 0f0c 	teqne	r4, ip
 8000688:	ea95 0f0c 	teqne	r5, ip
 800068c:	f000 f8de 	bleq	800084c <__aeabi_dmul+0x1dc>
 8000690:	442c      	add	r4, r5
 8000692:	ea81 0603 	eor.w	r6, r1, r3
 8000696:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800069a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800069e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006a2:	bf18      	it	ne
 80006a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b0:	d038      	beq.n	8000724 <__aeabi_dmul+0xb4>
 80006b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006c6:	f04f 0600 	mov.w	r6, #0
 80006ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ce:	f09c 0f00 	teq	ip, #0
 80006d2:	bf18      	it	ne
 80006d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006e4:	d204      	bcs.n	80006f0 <__aeabi_dmul+0x80>
 80006e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ea:	416d      	adcs	r5, r5
 80006ec:	eb46 0606 	adc.w	r6, r6, r6
 80006f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000700:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000704:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000708:	bf88      	it	hi
 800070a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800070e:	d81e      	bhi.n	800074e <__aeabi_dmul+0xde>
 8000710:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000714:	bf08      	it	eq
 8000716:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800071a:	f150 0000 	adcs.w	r0, r0, #0
 800071e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000728:	ea46 0101 	orr.w	r1, r6, r1
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000738:	bfc2      	ittt	gt
 800073a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800073e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000742:	bd70      	popgt	{r4, r5, r6, pc}
 8000744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000748:	f04f 0e00 	mov.w	lr, #0
 800074c:	3c01      	subs	r4, #1
 800074e:	f300 80ab 	bgt.w	80008a8 <__aeabi_dmul+0x238>
 8000752:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000756:	bfde      	ittt	le
 8000758:	2000      	movle	r0, #0
 800075a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd70      	pople	{r4, r5, r6, pc}
 8000760:	f1c4 0400 	rsb	r4, r4, #0
 8000764:	3c20      	subs	r4, #32
 8000766:	da35      	bge.n	80007d4 <__aeabi_dmul+0x164>
 8000768:	340c      	adds	r4, #12
 800076a:	dc1b      	bgt.n	80007a4 <__aeabi_dmul+0x134>
 800076c:	f104 0414 	add.w	r4, r4, #20
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f305 	lsl.w	r3, r0, r5
 8000778:	fa20 f004 	lsr.w	r0, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	fa21 f604 	lsr.w	r6, r1, r4
 8000794:	eb42 0106 	adc.w	r1, r2, r6
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 040c 	rsb	r4, r4, #12
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f304 	lsl.w	r3, r0, r4
 80007b0:	fa20 f005 	lsr.w	r0, r0, r5
 80007b4:	fa01 f204 	lsl.w	r2, r1, r4
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c4:	f141 0100 	adc.w	r1, r1, #0
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f1c4 0520 	rsb	r5, r4, #32
 80007d8:	fa00 f205 	lsl.w	r2, r0, r5
 80007dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e0:	fa20 f304 	lsr.w	r3, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea43 0302 	orr.w	r3, r3, r2
 80007ec:	fa21 f004 	lsr.w	r0, r1, r4
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	fa21 f204 	lsr.w	r2, r1, r4
 80007f8:	ea20 0002 	bic.w	r0, r0, r2
 80007fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f094 0f00 	teq	r4, #0
 8000810:	d10f      	bne.n	8000832 <__aeabi_dmul+0x1c2>
 8000812:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000816:	0040      	lsls	r0, r0, #1
 8000818:	eb41 0101 	adc.w	r1, r1, r1
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3c01      	subeq	r4, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1a6>
 8000826:	ea41 0106 	orr.w	r1, r1, r6
 800082a:	f095 0f00 	teq	r5, #0
 800082e:	bf18      	it	ne
 8000830:	4770      	bxne	lr
 8000832:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000836:	0052      	lsls	r2, r2, #1
 8000838:	eb43 0303 	adc.w	r3, r3, r3
 800083c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000840:	bf08      	it	eq
 8000842:	3d01      	subeq	r5, #1
 8000844:	d0f7      	beq.n	8000836 <__aeabi_dmul+0x1c6>
 8000846:	ea43 0306 	orr.w	r3, r3, r6
 800084a:	4770      	bx	lr
 800084c:	ea94 0f0c 	teq	r4, ip
 8000850:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000854:	bf18      	it	ne
 8000856:	ea95 0f0c 	teqne	r5, ip
 800085a:	d00c      	beq.n	8000876 <__aeabi_dmul+0x206>
 800085c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000866:	d1d1      	bne.n	800080c <__aeabi_dmul+0x19c>
 8000868:	ea81 0103 	eor.w	r1, r1, r3
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800087a:	bf06      	itte	eq
 800087c:	4610      	moveq	r0, r2
 800087e:	4619      	moveq	r1, r3
 8000880:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000884:	d019      	beq.n	80008ba <__aeabi_dmul+0x24a>
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	d102      	bne.n	8000892 <__aeabi_dmul+0x222>
 800088c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000890:	d113      	bne.n	80008ba <__aeabi_dmul+0x24a>
 8000892:	ea95 0f0c 	teq	r5, ip
 8000896:	d105      	bne.n	80008a4 <__aeabi_dmul+0x234>
 8000898:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800089c:	bf1c      	itt	ne
 800089e:	4610      	movne	r0, r2
 80008a0:	4619      	movne	r1, r3
 80008a2:	d10a      	bne.n	80008ba <__aeabi_dmul+0x24a>
 80008a4:	ea81 0103 	eor.w	r1, r1, r3
 80008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	bd70      	pop	{r4, r5, r6, pc}
 80008ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008c2:	bd70      	pop	{r4, r5, r6, pc}

080008c4 <__aeabi_ddiv>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d2:	bf1d      	ittte	ne
 80008d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d8:	ea94 0f0c 	teqne	r4, ip
 80008dc:	ea95 0f0c 	teqne	r5, ip
 80008e0:	f000 f8a7 	bleq	8000a32 <__aeabi_ddiv+0x16e>
 80008e4:	eba4 0405 	sub.w	r4, r4, r5
 80008e8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f4:	f000 8088 	beq.w	8000a08 <__aeabi_ddiv+0x144>
 80008f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000900:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000904:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000908:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800090c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000910:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000914:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000918:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800091c:	429d      	cmp	r5, r3
 800091e:	bf08      	it	eq
 8000920:	4296      	cmpeq	r6, r2
 8000922:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000926:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800092a:	d202      	bcs.n	8000932 <__aeabi_ddiv+0x6e>
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	1ab6      	subs	r6, r6, r2
 8000934:	eb65 0503 	sbc.w	r5, r5, r3
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000942:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 000c 	orrcs.w	r0, r0, ip
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a4:	d018      	beq.n	80009d8 <__aeabi_ddiv+0x114>
 80009a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009c2:	d1c0      	bne.n	8000946 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	d10b      	bne.n	80009e2 <__aeabi_ddiv+0x11e>
 80009ca:	ea41 0100 	orr.w	r1, r1, r0
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009d6:	e7b6      	b.n	8000946 <__aeabi_ddiv+0x82>
 80009d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009dc:	bf04      	itt	eq
 80009de:	4301      	orreq	r1, r0
 80009e0:	2000      	moveq	r0, #0
 80009e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009e6:	bf88      	it	hi
 80009e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ec:	f63f aeaf 	bhi.w	800074e <__aeabi_dmul+0xde>
 80009f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f4:	bf04      	itt	eq
 80009f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009fe:	f150 0000 	adcs.w	r0, r0, #0
 8000a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a14:	bfc2      	ittt	gt
 8000a16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a24:	f04f 0e00 	mov.w	lr, #0
 8000a28:	3c01      	subs	r4, #1
 8000a2a:	e690      	b.n	800074e <__aeabi_dmul+0xde>
 8000a2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a30:	e68d      	b.n	800074e <__aeabi_dmul+0xde>
 8000a32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a36:	ea94 0f0c 	teq	r4, ip
 8000a3a:	bf08      	it	eq
 8000a3c:	ea95 0f0c 	teqeq	r5, ip
 8000a40:	f43f af3b 	beq.w	80008ba <__aeabi_dmul+0x24a>
 8000a44:	ea94 0f0c 	teq	r4, ip
 8000a48:	d10a      	bne.n	8000a60 <__aeabi_ddiv+0x19c>
 8000a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a4e:	f47f af34 	bne.w	80008ba <__aeabi_dmul+0x24a>
 8000a52:	ea95 0f0c 	teq	r5, ip
 8000a56:	f47f af25 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e72c      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a60:	ea95 0f0c 	teq	r5, ip
 8000a64:	d106      	bne.n	8000a74 <__aeabi_ddiv+0x1b0>
 8000a66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a6a:	f43f aefd 	beq.w	8000868 <__aeabi_dmul+0x1f8>
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	e722      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7e:	f47f aec5 	bne.w	800080c <__aeabi_dmul+0x19c>
 8000a82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a86:	f47f af0d 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a8e:	f47f aeeb 	bne.w	8000868 <__aeabi_dmul+0x1f8>
 8000a92:	e712      	b.n	80008ba <__aeabi_dmul+0x24a>

08000a94 <__gedf2>:
 8000a94:	f04f 3cff 	mov.w	ip, #4294967295
 8000a98:	e006      	b.n	8000aa8 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__ledf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	e002      	b.n	8000aa8 <__cmpdf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__cmpdf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	bf18      	it	ne
 8000aba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000abe:	d01b      	beq.n	8000af8 <__cmpdf2+0x54>
 8000ac0:	b001      	add	sp, #4
 8000ac2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ac6:	bf0c      	ite	eq
 8000ac8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000acc:	ea91 0f03 	teqne	r1, r3
 8000ad0:	bf02      	ittt	eq
 8000ad2:	ea90 0f02 	teqeq	r0, r2
 8000ad6:	2000      	moveq	r0, #0
 8000ad8:	4770      	bxeq	lr
 8000ada:	f110 0f00 	cmn.w	r0, #0
 8000ade:	ea91 0f03 	teq	r1, r3
 8000ae2:	bf58      	it	pl
 8000ae4:	4299      	cmppl	r1, r3
 8000ae6:	bf08      	it	eq
 8000ae8:	4290      	cmpeq	r0, r2
 8000aea:	bf2c      	ite	cs
 8000aec:	17d8      	asrcs	r0, r3, #31
 8000aee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000af2:	f040 0001 	orr.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__cmpdf2+0x64>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d107      	bne.n	8000b18 <__cmpdf2+0x74>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d1d6      	bne.n	8000ac0 <__cmpdf2+0x1c>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d0d3      	beq.n	8000ac0 <__cmpdf2+0x1c>
 8000b18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_cdrcmple>:
 8000b20:	4684      	mov	ip, r0
 8000b22:	4610      	mov	r0, r2
 8000b24:	4662      	mov	r2, ip
 8000b26:	468c      	mov	ip, r1
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4663      	mov	r3, ip
 8000b2c:	e000      	b.n	8000b30 <__aeabi_cdcmpeq>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_cdcmpeq>:
 8000b30:	b501      	push	{r0, lr}
 8000b32:	f7ff ffb7 	bl	8000aa4 <__cmpdf2>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	bf48      	it	mi
 8000b3a:	f110 0f00 	cmnmi.w	r0, #0
 8000b3e:	bd01      	pop	{r0, pc}

08000b40 <__aeabi_dcmpeq>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff fff4 	bl	8000b30 <__aeabi_cdcmpeq>
 8000b48:	bf0c      	ite	eq
 8000b4a:	2001      	moveq	r0, #1
 8000b4c:	2000      	movne	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmplt>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffea 	bl	8000b30 <__aeabi_cdcmpeq>
 8000b5c:	bf34      	ite	cc
 8000b5e:	2001      	movcc	r0, #1
 8000b60:	2000      	movcs	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmple>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffe0 	bl	8000b30 <__aeabi_cdcmpeq>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpge>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffce 	bl	8000b20 <__aeabi_cdrcmple>
 8000b84:	bf94      	ite	ls
 8000b86:	2001      	movls	r0, #1
 8000b88:	2000      	movhi	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpgt>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffc4 	bl	8000b20 <__aeabi_cdrcmple>
 8000b98:	bf34      	ite	cc
 8000b9a:	2001      	movcc	r0, #1
 8000b9c:	2000      	movcs	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpun>:
 8000ba4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bac:	d102      	bne.n	8000bb4 <__aeabi_dcmpun+0x10>
 8000bae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bb2:	d10a      	bne.n	8000bca <__aeabi_dcmpun+0x26>
 8000bb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bbc:	d102      	bne.n	8000bc4 <__aeabi_dcmpun+0x20>
 8000bbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bc2:	d102      	bne.n	8000bca <__aeabi_dcmpun+0x26>
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	f04f 0001 	mov.w	r0, #1
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_d2iz>:
 8000bd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd8:	d215      	bcs.n	8000c06 <__aeabi_d2iz+0x36>
 8000bda:	d511      	bpl.n	8000c00 <__aeabi_d2iz+0x30>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d912      	bls.n	8000c0c <__aeabi_d2iz+0x3c>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	4240      	negne	r0, r0
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d105      	bne.n	8000c18 <__aeabi_d2iz+0x48>
 8000c0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	bf08      	it	eq
 8000c12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_d2f>:
 8000c20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c28:	bf24      	itt	cs
 8000c2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c32:	d90d      	bls.n	8000c50 <__aeabi_d2f+0x30>
 8000c34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c54:	d121      	bne.n	8000c9a <__aeabi_d2f+0x7a>
 8000c56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c5a:	bfbc      	itt	lt
 8000c5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	4770      	bxlt	lr
 8000c62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c6a:	f1c2 0218 	rsb	r2, r2, #24
 8000c6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c76:	fa20 f002 	lsr.w	r0, r0, r2
 8000c7a:	bf18      	it	ne
 8000c7c:	f040 0001 	orrne.w	r0, r0, #1
 8000c80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c8c:	ea40 000c 	orr.w	r0, r0, ip
 8000c90:	fa23 f302 	lsr.w	r3, r3, r2
 8000c94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c98:	e7cc      	b.n	8000c34 <__aeabi_d2f+0x14>
 8000c9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9e:	d107      	bne.n	8000cb0 <__aeabi_d2f+0x90>
 8000ca0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca4:	bf1e      	ittt	ne
 8000ca6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bxne	lr
 8000cb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_frsub>:
 8000cc0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	e002      	b.n	8000ccc <__addsf3>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_fsub>:
 8000cc8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ccc <__addsf3>:
 8000ccc:	0042      	lsls	r2, r0, #1
 8000cce:	bf1f      	itttt	ne
 8000cd0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cd4:	ea92 0f03 	teqne	r2, r3
 8000cd8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cdc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce0:	d06a      	beq.n	8000db8 <__addsf3+0xec>
 8000ce2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ce6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cea:	bfc1      	itttt	gt
 8000cec:	18d2      	addgt	r2, r2, r3
 8000cee:	4041      	eorgt	r1, r0
 8000cf0:	4048      	eorgt	r0, r1
 8000cf2:	4041      	eorgt	r1, r0
 8000cf4:	bfb8      	it	lt
 8000cf6:	425b      	neglt	r3, r3
 8000cf8:	2b19      	cmp	r3, #25
 8000cfa:	bf88      	it	hi
 8000cfc:	4770      	bxhi	lr
 8000cfe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d0a:	bf18      	it	ne
 8000d0c:	4240      	negne	r0, r0
 8000d0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d12:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4249      	negne	r1, r1
 8000d1e:	ea92 0f03 	teq	r2, r3
 8000d22:	d03f      	beq.n	8000da4 <__addsf3+0xd8>
 8000d24:	f1a2 0201 	sub.w	r2, r2, #1
 8000d28:	fa41 fc03 	asr.w	ip, r1, r3
 8000d2c:	eb10 000c 	adds.w	r0, r0, ip
 8000d30:	f1c3 0320 	rsb	r3, r3, #32
 8000d34:	fa01 f103 	lsl.w	r1, r1, r3
 8000d38:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__addsf3+0x78>
 8000d3e:	4249      	negs	r1, r1
 8000d40:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d48:	d313      	bcc.n	8000d72 <__addsf3+0xa6>
 8000d4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d4e:	d306      	bcc.n	8000d5e <__addsf3+0x92>
 8000d50:	0840      	lsrs	r0, r0, #1
 8000d52:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d56:	f102 0201 	add.w	r2, r2, #1
 8000d5a:	2afe      	cmp	r2, #254	; 0xfe
 8000d5c:	d251      	bcs.n	8000e02 <__addsf3+0x136>
 8000d5e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	ea40 0003 	orr.w	r0, r0, r3
 8000d70:	4770      	bx	lr
 8000d72:	0049      	lsls	r1, r1, #1
 8000d74:	eb40 0000 	adc.w	r0, r0, r0
 8000d78:	3a01      	subs	r2, #1
 8000d7a:	bf28      	it	cs
 8000d7c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d80:	d2ed      	bcs.n	8000d5e <__addsf3+0x92>
 8000d82:	fab0 fc80 	clz	ip, r0
 8000d86:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d8a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d92:	bfaa      	itet	ge
 8000d94:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d98:	4252      	neglt	r2, r2
 8000d9a:	4318      	orrge	r0, r3
 8000d9c:	bfbc      	itt	lt
 8000d9e:	40d0      	lsrlt	r0, r2
 8000da0:	4318      	orrlt	r0, r3
 8000da2:	4770      	bx	lr
 8000da4:	f092 0f00 	teq	r2, #0
 8000da8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dac:	bf06      	itte	eq
 8000dae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000db2:	3201      	addeq	r2, #1
 8000db4:	3b01      	subne	r3, #1
 8000db6:	e7b5      	b.n	8000d24 <__addsf3+0x58>
 8000db8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dbc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc0:	bf18      	it	ne
 8000dc2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc6:	d021      	beq.n	8000e0c <__addsf3+0x140>
 8000dc8:	ea92 0f03 	teq	r2, r3
 8000dcc:	d004      	beq.n	8000dd8 <__addsf3+0x10c>
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	bf08      	it	eq
 8000dd4:	4608      	moveq	r0, r1
 8000dd6:	4770      	bx	lr
 8000dd8:	ea90 0f01 	teq	r0, r1
 8000ddc:	bf1c      	itt	ne
 8000dde:	2000      	movne	r0, #0
 8000de0:	4770      	bxne	lr
 8000de2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000de6:	d104      	bne.n	8000df2 <__addsf3+0x126>
 8000de8:	0040      	lsls	r0, r0, #1
 8000dea:	bf28      	it	cs
 8000dec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000df6:	bf3c      	itt	cc
 8000df8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dfc:	4770      	bxcc	lr
 8000dfe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e02:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0a:	4770      	bx	lr
 8000e0c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e10:	bf16      	itet	ne
 8000e12:	4608      	movne	r0, r1
 8000e14:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e18:	4601      	movne	r1, r0
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	bf06      	itte	eq
 8000e1e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e22:	ea90 0f01 	teqeq	r0, r1
 8000e26:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_ui2f>:
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e004      	b.n	8000e3c <__aeabi_i2f+0x8>
 8000e32:	bf00      	nop

08000e34 <__aeabi_i2f>:
 8000e34:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e38:	bf48      	it	mi
 8000e3a:	4240      	negmi	r0, r0
 8000e3c:	ea5f 0c00 	movs.w	ip, r0
 8000e40:	bf08      	it	eq
 8000e42:	4770      	bxeq	lr
 8000e44:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e48:	4601      	mov	r1, r0
 8000e4a:	f04f 0000 	mov.w	r0, #0
 8000e4e:	e01c      	b.n	8000e8a <__aeabi_l2f+0x2a>

08000e50 <__aeabi_ul2f>:
 8000e50:	ea50 0201 	orrs.w	r2, r0, r1
 8000e54:	bf08      	it	eq
 8000e56:	4770      	bxeq	lr
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	e00a      	b.n	8000e74 <__aeabi_l2f+0x14>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_l2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e6c:	d502      	bpl.n	8000e74 <__aeabi_l2f+0x14>
 8000e6e:	4240      	negs	r0, r0
 8000e70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e74:	ea5f 0c01 	movs.w	ip, r1
 8000e78:	bf02      	ittt	eq
 8000e7a:	4684      	moveq	ip, r0
 8000e7c:	4601      	moveq	r1, r0
 8000e7e:	2000      	moveq	r0, #0
 8000e80:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e84:	bf08      	it	eq
 8000e86:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e8e:	fabc f28c 	clz	r2, ip
 8000e92:	3a08      	subs	r2, #8
 8000e94:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e98:	db10      	blt.n	8000ebc <__aeabi_l2f+0x5c>
 8000e9a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ea4:	f1c2 0220 	rsb	r2, r2, #32
 8000ea8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eac:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb0:	eb43 0002 	adc.w	r0, r3, r2
 8000eb4:	bf08      	it	eq
 8000eb6:	f020 0001 	biceq.w	r0, r0, #1
 8000eba:	4770      	bx	lr
 8000ebc:	f102 0220 	add.w	r2, r2, #32
 8000ec0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ec4:	f1c2 0220 	rsb	r2, r2, #32
 8000ec8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ecc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed0:	eb43 0002 	adc.w	r0, r3, r2
 8000ed4:	bf08      	it	eq
 8000ed6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eda:	4770      	bx	lr

08000edc <__aeabi_f2iz>:
 8000edc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ee4:	d30f      	bcc.n	8000f06 <__aeabi_f2iz+0x2a>
 8000ee6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eee:	d90d      	bls.n	8000f0c <__aeabi_f2iz+0x30>
 8000ef0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ef8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000efc:	fa23 f002 	lsr.w	r0, r3, r2
 8000f00:	bf18      	it	ne
 8000f02:	4240      	negne	r0, r0
 8000f04:	4770      	bx	lr
 8000f06:	f04f 0000 	mov.w	r0, #0
 8000f0a:	4770      	bx	lr
 8000f0c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f10:	d101      	bne.n	8000f16 <__aeabi_f2iz+0x3a>
 8000f12:	0242      	lsls	r2, r0, #9
 8000f14:	d105      	bne.n	8000f22 <__aeabi_f2iz+0x46>
 8000f16:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f1a:	bf08      	it	eq
 8000f1c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f20:	4770      	bx	lr
 8000f22:	f04f 0000 	mov.w	r0, #0
 8000f26:	4770      	bx	lr

08000f28 <__aeabi_uldivmod>:
 8000f28:	b953      	cbnz	r3, 8000f40 <__aeabi_uldivmod+0x18>
 8000f2a:	b94a      	cbnz	r2, 8000f40 <__aeabi_uldivmod+0x18>
 8000f2c:	2900      	cmp	r1, #0
 8000f2e:	bf08      	it	eq
 8000f30:	2800      	cmpeq	r0, #0
 8000f32:	bf1c      	itt	ne
 8000f34:	f04f 31ff 	movne.w	r1, #4294967295
 8000f38:	f04f 30ff 	movne.w	r0, #4294967295
 8000f3c:	f000 b96e 	b.w	800121c <__aeabi_idiv0>
 8000f40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f48:	f000 f806 	bl	8000f58 <__udivmoddi4>
 8000f4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f54:	b004      	add	sp, #16
 8000f56:	4770      	bx	lr

08000f58 <__udivmoddi4>:
 8000f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f5c:	9e08      	ldr	r6, [sp, #32]
 8000f5e:	460d      	mov	r5, r1
 8000f60:	4604      	mov	r4, r0
 8000f62:	468e      	mov	lr, r1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f040 8083 	bne.w	8001070 <__udivmoddi4+0x118>
 8000f6a:	428a      	cmp	r2, r1
 8000f6c:	4617      	mov	r7, r2
 8000f6e:	d947      	bls.n	8001000 <__udivmoddi4+0xa8>
 8000f70:	fab2 f382 	clz	r3, r2
 8000f74:	b14b      	cbz	r3, 8000f8a <__udivmoddi4+0x32>
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa05 fe03 	lsl.w	lr, r5, r3
 8000f7e:	fa20 f101 	lsr.w	r1, r0, r1
 8000f82:	409f      	lsls	r7, r3
 8000f84:	ea41 0e0e 	orr.w	lr, r1, lr
 8000f88:	409c      	lsls	r4, r3
 8000f8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f8e:	fbbe fcf8 	udiv	ip, lr, r8
 8000f92:	fa1f f987 	uxth.w	r9, r7
 8000f96:	fb08 e21c 	mls	r2, r8, ip, lr
 8000f9a:	fb0c f009 	mul.w	r0, ip, r9
 8000f9e:	0c21      	lsrs	r1, r4, #16
 8000fa0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000fa4:	4290      	cmp	r0, r2
 8000fa6:	d90a      	bls.n	8000fbe <__udivmoddi4+0x66>
 8000fa8:	18ba      	adds	r2, r7, r2
 8000faa:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000fae:	f080 8118 	bcs.w	80011e2 <__udivmoddi4+0x28a>
 8000fb2:	4290      	cmp	r0, r2
 8000fb4:	f240 8115 	bls.w	80011e2 <__udivmoddi4+0x28a>
 8000fb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fbc:	443a      	add	r2, r7
 8000fbe:	1a12      	subs	r2, r2, r0
 8000fc0:	fbb2 f0f8 	udiv	r0, r2, r8
 8000fc4:	fb08 2210 	mls	r2, r8, r0, r2
 8000fc8:	fb00 f109 	mul.w	r1, r0, r9
 8000fcc:	b2a4      	uxth	r4, r4
 8000fce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fd2:	42a1      	cmp	r1, r4
 8000fd4:	d909      	bls.n	8000fea <__udivmoddi4+0x92>
 8000fd6:	193c      	adds	r4, r7, r4
 8000fd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fdc:	f080 8103 	bcs.w	80011e6 <__udivmoddi4+0x28e>
 8000fe0:	42a1      	cmp	r1, r4
 8000fe2:	f240 8100 	bls.w	80011e6 <__udivmoddi4+0x28e>
 8000fe6:	3802      	subs	r0, #2
 8000fe8:	443c      	add	r4, r7
 8000fea:	1a64      	subs	r4, r4, r1
 8000fec:	2100      	movs	r1, #0
 8000fee:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ff2:	b11e      	cbz	r6, 8000ffc <__udivmoddi4+0xa4>
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	40dc      	lsrs	r4, r3
 8000ff8:	e9c6 4200 	strd	r4, r2, [r6]
 8000ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001000:	b902      	cbnz	r2, 8001004 <__udivmoddi4+0xac>
 8001002:	deff      	udf	#255	; 0xff
 8001004:	fab2 f382 	clz	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d14f      	bne.n	80010ac <__udivmoddi4+0x154>
 800100c:	1a8d      	subs	r5, r1, r2
 800100e:	2101      	movs	r1, #1
 8001010:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001014:	fa1f f882 	uxth.w	r8, r2
 8001018:	fbb5 fcfe 	udiv	ip, r5, lr
 800101c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001020:	fb08 f00c 	mul.w	r0, r8, ip
 8001024:	0c22      	lsrs	r2, r4, #16
 8001026:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800102a:	42a8      	cmp	r0, r5
 800102c:	d907      	bls.n	800103e <__udivmoddi4+0xe6>
 800102e:	197d      	adds	r5, r7, r5
 8001030:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001034:	d202      	bcs.n	800103c <__udivmoddi4+0xe4>
 8001036:	42a8      	cmp	r0, r5
 8001038:	f200 80e9 	bhi.w	800120e <__udivmoddi4+0x2b6>
 800103c:	4694      	mov	ip, r2
 800103e:	1a2d      	subs	r5, r5, r0
 8001040:	fbb5 f0fe 	udiv	r0, r5, lr
 8001044:	fb0e 5510 	mls	r5, lr, r0, r5
 8001048:	fb08 f800 	mul.w	r8, r8, r0
 800104c:	b2a4      	uxth	r4, r4
 800104e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001052:	45a0      	cmp	r8, r4
 8001054:	d907      	bls.n	8001066 <__udivmoddi4+0x10e>
 8001056:	193c      	adds	r4, r7, r4
 8001058:	f100 32ff 	add.w	r2, r0, #4294967295
 800105c:	d202      	bcs.n	8001064 <__udivmoddi4+0x10c>
 800105e:	45a0      	cmp	r8, r4
 8001060:	f200 80d9 	bhi.w	8001216 <__udivmoddi4+0x2be>
 8001064:	4610      	mov	r0, r2
 8001066:	eba4 0408 	sub.w	r4, r4, r8
 800106a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800106e:	e7c0      	b.n	8000ff2 <__udivmoddi4+0x9a>
 8001070:	428b      	cmp	r3, r1
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x12e>
 8001074:	2e00      	cmp	r6, #0
 8001076:	f000 80b1 	beq.w	80011dc <__udivmoddi4+0x284>
 800107a:	2100      	movs	r1, #0
 800107c:	e9c6 0500 	strd	r0, r5, [r6]
 8001080:	4608      	mov	r0, r1
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	fab3 f183 	clz	r1, r3
 800108a:	2900      	cmp	r1, #0
 800108c:	d14b      	bne.n	8001126 <__udivmoddi4+0x1ce>
 800108e:	42ab      	cmp	r3, r5
 8001090:	d302      	bcc.n	8001098 <__udivmoddi4+0x140>
 8001092:	4282      	cmp	r2, r0
 8001094:	f200 80b9 	bhi.w	800120a <__udivmoddi4+0x2b2>
 8001098:	1a84      	subs	r4, r0, r2
 800109a:	eb65 0303 	sbc.w	r3, r5, r3
 800109e:	2001      	movs	r0, #1
 80010a0:	469e      	mov	lr, r3
 80010a2:	2e00      	cmp	r6, #0
 80010a4:	d0aa      	beq.n	8000ffc <__udivmoddi4+0xa4>
 80010a6:	e9c6 4e00 	strd	r4, lr, [r6]
 80010aa:	e7a7      	b.n	8000ffc <__udivmoddi4+0xa4>
 80010ac:	409f      	lsls	r7, r3
 80010ae:	f1c3 0220 	rsb	r2, r3, #32
 80010b2:	40d1      	lsrs	r1, r2
 80010b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80010bc:	fa1f f887 	uxth.w	r8, r7
 80010c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80010c4:	fa24 f202 	lsr.w	r2, r4, r2
 80010c8:	409d      	lsls	r5, r3
 80010ca:	fb00 fc08 	mul.w	ip, r0, r8
 80010ce:	432a      	orrs	r2, r5
 80010d0:	0c15      	lsrs	r5, r2, #16
 80010d2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80010d6:	45ac      	cmp	ip, r5
 80010d8:	fa04 f403 	lsl.w	r4, r4, r3
 80010dc:	d909      	bls.n	80010f2 <__udivmoddi4+0x19a>
 80010de:	197d      	adds	r5, r7, r5
 80010e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80010e4:	f080 808f 	bcs.w	8001206 <__udivmoddi4+0x2ae>
 80010e8:	45ac      	cmp	ip, r5
 80010ea:	f240 808c 	bls.w	8001206 <__udivmoddi4+0x2ae>
 80010ee:	3802      	subs	r0, #2
 80010f0:	443d      	add	r5, r7
 80010f2:	eba5 050c 	sub.w	r5, r5, ip
 80010f6:	fbb5 f1fe 	udiv	r1, r5, lr
 80010fa:	fb0e 5c11 	mls	ip, lr, r1, r5
 80010fe:	fb01 f908 	mul.w	r9, r1, r8
 8001102:	b295      	uxth	r5, r2
 8001104:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001108:	45a9      	cmp	r9, r5
 800110a:	d907      	bls.n	800111c <__udivmoddi4+0x1c4>
 800110c:	197d      	adds	r5, r7, r5
 800110e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001112:	d274      	bcs.n	80011fe <__udivmoddi4+0x2a6>
 8001114:	45a9      	cmp	r9, r5
 8001116:	d972      	bls.n	80011fe <__udivmoddi4+0x2a6>
 8001118:	3902      	subs	r1, #2
 800111a:	443d      	add	r5, r7
 800111c:	eba5 0509 	sub.w	r5, r5, r9
 8001120:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001124:	e778      	b.n	8001018 <__udivmoddi4+0xc0>
 8001126:	f1c1 0720 	rsb	r7, r1, #32
 800112a:	408b      	lsls	r3, r1
 800112c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001130:	ea4c 0c03 	orr.w	ip, ip, r3
 8001134:	fa25 f407 	lsr.w	r4, r5, r7
 8001138:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800113c:	fbb4 f9fe 	udiv	r9, r4, lr
 8001140:	fa1f f88c 	uxth.w	r8, ip
 8001144:	fb0e 4419 	mls	r4, lr, r9, r4
 8001148:	fa20 f307 	lsr.w	r3, r0, r7
 800114c:	fb09 fa08 	mul.w	sl, r9, r8
 8001150:	408d      	lsls	r5, r1
 8001152:	431d      	orrs	r5, r3
 8001154:	0c2b      	lsrs	r3, r5, #16
 8001156:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800115a:	45a2      	cmp	sl, r4
 800115c:	fa02 f201 	lsl.w	r2, r2, r1
 8001160:	fa00 f301 	lsl.w	r3, r0, r1
 8001164:	d909      	bls.n	800117a <__udivmoddi4+0x222>
 8001166:	eb1c 0404 	adds.w	r4, ip, r4
 800116a:	f109 30ff 	add.w	r0, r9, #4294967295
 800116e:	d248      	bcs.n	8001202 <__udivmoddi4+0x2aa>
 8001170:	45a2      	cmp	sl, r4
 8001172:	d946      	bls.n	8001202 <__udivmoddi4+0x2aa>
 8001174:	f1a9 0902 	sub.w	r9, r9, #2
 8001178:	4464      	add	r4, ip
 800117a:	eba4 040a 	sub.w	r4, r4, sl
 800117e:	fbb4 f0fe 	udiv	r0, r4, lr
 8001182:	fb0e 4410 	mls	r4, lr, r0, r4
 8001186:	fb00 fa08 	mul.w	sl, r0, r8
 800118a:	b2ad      	uxth	r5, r5
 800118c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001190:	45a2      	cmp	sl, r4
 8001192:	d908      	bls.n	80011a6 <__udivmoddi4+0x24e>
 8001194:	eb1c 0404 	adds.w	r4, ip, r4
 8001198:	f100 35ff 	add.w	r5, r0, #4294967295
 800119c:	d22d      	bcs.n	80011fa <__udivmoddi4+0x2a2>
 800119e:	45a2      	cmp	sl, r4
 80011a0:	d92b      	bls.n	80011fa <__udivmoddi4+0x2a2>
 80011a2:	3802      	subs	r0, #2
 80011a4:	4464      	add	r4, ip
 80011a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011aa:	fba0 8902 	umull	r8, r9, r0, r2
 80011ae:	eba4 040a 	sub.w	r4, r4, sl
 80011b2:	454c      	cmp	r4, r9
 80011b4:	46c6      	mov	lr, r8
 80011b6:	464d      	mov	r5, r9
 80011b8:	d319      	bcc.n	80011ee <__udivmoddi4+0x296>
 80011ba:	d016      	beq.n	80011ea <__udivmoddi4+0x292>
 80011bc:	b15e      	cbz	r6, 80011d6 <__udivmoddi4+0x27e>
 80011be:	ebb3 020e 	subs.w	r2, r3, lr
 80011c2:	eb64 0405 	sbc.w	r4, r4, r5
 80011c6:	fa04 f707 	lsl.w	r7, r4, r7
 80011ca:	fa22 f301 	lsr.w	r3, r2, r1
 80011ce:	431f      	orrs	r7, r3
 80011d0:	40cc      	lsrs	r4, r1
 80011d2:	e9c6 7400 	strd	r7, r4, [r6]
 80011d6:	2100      	movs	r1, #0
 80011d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011dc:	4631      	mov	r1, r6
 80011de:	4630      	mov	r0, r6
 80011e0:	e70c      	b.n	8000ffc <__udivmoddi4+0xa4>
 80011e2:	468c      	mov	ip, r1
 80011e4:	e6eb      	b.n	8000fbe <__udivmoddi4+0x66>
 80011e6:	4610      	mov	r0, r2
 80011e8:	e6ff      	b.n	8000fea <__udivmoddi4+0x92>
 80011ea:	4543      	cmp	r3, r8
 80011ec:	d2e6      	bcs.n	80011bc <__udivmoddi4+0x264>
 80011ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80011f2:	eb69 050c 	sbc.w	r5, r9, ip
 80011f6:	3801      	subs	r0, #1
 80011f8:	e7e0      	b.n	80011bc <__udivmoddi4+0x264>
 80011fa:	4628      	mov	r0, r5
 80011fc:	e7d3      	b.n	80011a6 <__udivmoddi4+0x24e>
 80011fe:	4611      	mov	r1, r2
 8001200:	e78c      	b.n	800111c <__udivmoddi4+0x1c4>
 8001202:	4681      	mov	r9, r0
 8001204:	e7b9      	b.n	800117a <__udivmoddi4+0x222>
 8001206:	4608      	mov	r0, r1
 8001208:	e773      	b.n	80010f2 <__udivmoddi4+0x19a>
 800120a:	4608      	mov	r0, r1
 800120c:	e749      	b.n	80010a2 <__udivmoddi4+0x14a>
 800120e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001212:	443d      	add	r5, r7
 8001214:	e713      	b.n	800103e <__udivmoddi4+0xe6>
 8001216:	3802      	subs	r0, #2
 8001218:	443c      	add	r4, r7
 800121a:	e724      	b.n	8001066 <__udivmoddi4+0x10e>

0800121c <__aeabi_idiv0>:
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <TMP_Receive>:
#define TIMEOUT 5000
#define ADRESSETEMP (0x44<<1)

I2C_HandleTypeDef hi2c_tmp;
void TMP_Receive(uint16_t address, uint8_t *Data, uint16_t len)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af02      	add	r7, sp, #8
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	4613      	mov	r3, r2
 800122e:	80bb      	strh	r3, [r7, #4]


	 HAL_I2C_Master_Receive(&hi2c_tmp, address, Data, len, TIMEOUT);
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	88f9      	ldrh	r1, [r7, #6]
 8001234:	f241 3288 	movw	r2, #5000	; 0x1388
 8001238:	9200      	str	r2, [sp, #0]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <TMP_Receive+0x2c>)
 800123e:	f001 fec1 	bl	8002fc4 <HAL_I2C_Master_Receive>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000210 	.word	0x20000210

08001250 <TMP_init>:

void TMP_init(I2C_HandleTypeDef hi2c)
{
 8001250:	b084      	sub	sp, #16
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
 8001256:	f107 0c08 	add.w	ip, r7, #8
 800125a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c_tmp = hi2c;
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <TMP_init+0x2c>)
 8001260:	4618      	mov	r0, r3
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2254      	movs	r2, #84	; 0x54
 8001268:	4619      	mov	r1, r3
 800126a:	f003 fd27 	bl	8004cbc <memcpy>
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001276:	b004      	add	sp, #16
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000210 	.word	0x20000210

08001280 <TMP_Transmit>:
void TMP_Transmit(uint16_t address, uint8_t *Data, uint16_t len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af02      	add	r7, sp, #8
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	80fb      	strh	r3, [r7, #6]
 800128c:	4613      	mov	r3, r2
 800128e:	80bb      	strh	r3, [r7, #4]
	 HAL_I2C_Master_Transmit(&hi2c_tmp, address, Data, len, TIMEOUT);
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	88f9      	ldrh	r1, [r7, #6]
 8001294:	f241 3288 	movw	r2, #5000	; 0x1388
 8001298:	9200      	str	r2, [sp, #0]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <TMP_Transmit+0x2c>)
 800129e:	f001 fd93 	bl	8002dc8 <HAL_I2C_Master_Transmit>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000210 	.word	0x20000210

080012b0 <Temp_read>:

void Temp_read( float *temp, float *humidity)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
	float temperature=0;
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

	uint8_t Data[6]={0x24, 0x00};
 80012c0:	2324      	movs	r3, #36	; 0x24
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	2300      	movs	r3, #0
 80012c6:	823b      	strh	r3, [r7, #16]
	TMP_Transmit(ADRESSETEMP, Data, 2);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2202      	movs	r2, #2
 80012ce:	4619      	mov	r1, r3
 80012d0:	2088      	movs	r0, #136	; 0x88
 80012d2:	f7ff ffd5 	bl	8001280 <TMP_Transmit>
	HAL_Delay(50);
 80012d6:	2032      	movs	r0, #50	; 0x32
 80012d8:	f001 f984 	bl	80025e4 <HAL_Delay>
	TMP_Receive(ADRESSETEMP, Data, 6);
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	2206      	movs	r2, #6
 80012e2:	4619      	mov	r1, r3
 80012e4:	2088      	movs	r0, #136	; 0x88
 80012e6:	f7ff ff9b 	bl	8001220 <TMP_Receive>

	temperature = Data[0] * 256 + Data[1];
 80012ea:	7b3b      	ldrb	r3, [r7, #12]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	7b7a      	ldrb	r2, [r7, #13]
 80012f0:	4413      	add	r3, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fd9e 	bl	8000e34 <__aeabi_i2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	617b      	str	r3, [r7, #20]
	temperature = -45 + (175 * temperature / 65535.0);
 80012fc:	4930      	ldr	r1, [pc, #192]	; (80013c0 <Temp_read+0x110>)
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7fe ff46 	bl	8000190 <__aeabi_fmul>
 8001304:	4603      	mov	r3, r0
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f95a 	bl	80005c0 <__aeabi_f2d>
 800130c:	a32a      	add	r3, pc, #168	; (adr r3, 80013b8 <Temp_read+0x108>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fad7 	bl	80008c4 <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <Temp_read+0x114>)
 8001324:	f7fe ffec 	bl	8000300 <__aeabi_dsub>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fc76 	bl	8000c20 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	617b      	str	r3, [r7, #20]
	*temp=-45+175*(Data[0]<<8 | Data[1])/65535.0 ;
 8001338:	7b3b      	ldrb	r3, [r7, #12]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	7b7a      	ldrb	r2, [r7, #13]
 800133e:	4313      	orrs	r3, r2
 8001340:	22af      	movs	r2, #175	; 0xaf
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f928 	bl	800059c <__aeabi_i2d>
 800134c:	a31a      	add	r3, pc, #104	; (adr r3, 80013b8 <Temp_read+0x108>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff fab7 	bl	80008c4 <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <Temp_read+0x114>)
 8001364:	f7fe ffcc 	bl	8000300 <__aeabi_dsub>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc56 	bl	8000c20 <__aeabi_d2f>
 8001374:	4602      	mov	r2, r0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
	*humidity=100*(Data[3]<<8 | Data[4])/65535.0 ;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	7c3a      	ldrb	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	2264      	movs	r2, #100	; 0x64
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f907 	bl	800059c <__aeabi_i2d>
 800138e:	a30a      	add	r3, pc, #40	; (adr r3, 80013b8 <Temp_read+0x108>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7ff fa96 	bl	80008c4 <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fc3e 	bl	8000c20 <__aeabi_d2f>
 80013a4:	4602      	mov	r2, r0
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	601a      	str	r2, [r3, #0]

}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	00000000 	.word	0x00000000
 80013bc:	40efffe0 	.word	0x40efffe0
 80013c0:	432f0000 	.word	0x432f0000
 80013c4:	40468000 	.word	0x40468000

080013c8 <reverse>:
 */

#include "caracter.h"

void reverse(char *str, int len)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	613b      	str	r3, [r7, #16]
    while (i<j)
 80013dc:	e018      	b.n	8001410 <reverse+0x48>
    {
        temp = str[i];
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	441a      	add	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	440b      	add	r3, r1
 80013f4:	7812      	ldrb	r2, [r2, #0]
 80013f6:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3301      	adds	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	3b01      	subs	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
    while (i<j)
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbe2      	blt.n	80013de <reverse+0x16>
    }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	371c      	adds	r7, #28
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <intToStr>:
// fonction qui converti un entier en chaine de caractère
int intToStr(int x, char str[], int d)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
    while (x)
 8001434:	e01d      	b.n	8001472 <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <intToStr+0x8c>)
 800143a:	fb83 1302 	smull	r1, r3, r3, r2
 800143e:	1099      	asrs	r1, r3, #2
 8001440:	17d3      	asrs	r3, r2, #31
 8001442:	1ac9      	subs	r1, r1, r3
 8001444:	460b      	mov	r3, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	1ad1      	subs	r1, r2, r3
 800144e:	b2ca      	uxtb	r2, r1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	1c59      	adds	r1, r3, #1
 8001454:	6179      	str	r1, [r7, #20]
 8001456:	4619      	mov	r1, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	440b      	add	r3, r1
 800145c:	3230      	adds	r2, #48	; 0x30
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <intToStr+0x8c>)
 8001466:	fb82 1203 	smull	r1, r2, r2, r3
 800146a:	1092      	asrs	r2, r2, #2
 800146c:	17db      	asrs	r3, r3, #31
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	60fb      	str	r3, [r7, #12]
    while (x)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1de      	bne.n	8001436 <intToStr+0x12>
    }

    while (i < d)
 8001478:	e007      	b.n	800148a <intToStr+0x66>
        str[i++] = '0';
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	617a      	str	r2, [r7, #20]
 8001480:	461a      	mov	r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	4413      	add	r3, r2
 8001486:	2230      	movs	r2, #48	; 0x30
 8001488:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	429a      	cmp	r2, r3
 8001490:	dbf3      	blt.n	800147a <intToStr+0x56>

    reverse(str, i);
 8001492:	6979      	ldr	r1, [r7, #20]
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f7ff ff97 	bl	80013c8 <reverse>
    str[i] = '\0';
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	4413      	add	r3, r2
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
    return i;
 80014a4:	697b      	ldr	r3, [r7, #20]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	66666667 	.word	0x66666667

080014b4 <ftoat>:
// fonction qui converti un réel en chaine de caractère
void ftoat(float n, char *res, int afterpoint)
{
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
    // on extrait avant tout la partie entiere
    int ipart = (int)n;
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7ff fd0b 	bl	8000edc <__aeabi_f2iz>
 80014c6:	4603      	mov	r3, r0
 80014c8:	61fb      	str	r3, [r7, #28]

    // on extrait maintenant la partie decimal
    float fpart = n - (float)ipart;
 80014ca:	69f8      	ldr	r0, [r7, #28]
 80014cc:	f7ff fcb2 	bl	8000e34 <__aeabi_i2f>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4619      	mov	r1, r3
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff fbf7 	bl	8000cc8 <__aeabi_fsub>
 80014da:	4603      	mov	r3, r0
 80014dc:	61bb      	str	r3, [r7, #24]

    // on convertie la partie entiere en chaine de caractère
    int i = intToStr(ipart, res, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	69f8      	ldr	r0, [r7, #28]
 80014e4:	f7ff ff9e 	bl	8001424 <intToStr>
 80014e8:	6178      	str	r0, [r7, #20]

    // afterpoint correspond au nombre de chiffre apres la virgule souhaiter
    if (afterpoint != 0)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d02c      	beq.n	800154a <ftoat+0x96>
    {
        res[i] = '.';  // add dot
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	4413      	add	r3, r2
 80014f6:	222e      	movs	r2, #46	; 0x2e
 80014f8:	701a      	strb	r2, [r3, #0]


        fpart = fpart * pow(10, afterpoint);
 80014fa:	69b8      	ldr	r0, [r7, #24]
 80014fc:	f7ff f860 	bl	80005c0 <__aeabi_f2d>
 8001500:	4604      	mov	r4, r0
 8001502:	460d      	mov	r5, r1
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff f849 	bl	800059c <__aeabi_i2d>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	f04f 0000 	mov.w	r0, #0
 8001512:	4910      	ldr	r1, [pc, #64]	; (8001554 <ftoat+0xa0>)
 8001514:	f006 fa80 	bl	8007a18 <pow>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4620      	mov	r0, r4
 800151e:	4629      	mov	r1, r5
 8001520:	f7ff f8a6 	bl	8000670 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff fb78 	bl	8000c20 <__aeabi_d2f>
 8001530:	4603      	mov	r3, r0
 8001532:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8001534:	69b8      	ldr	r0, [r7, #24]
 8001536:	f7ff fcd1 	bl	8000edc <__aeabi_f2iz>
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	4413      	add	r3, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff ff6d 	bl	8001424 <intToStr>
    }
}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bdb0      	pop	{r4, r5, r7, pc}
 8001552:	bf00      	nop
 8001554:	40240000 	.word	0x40240000

08001558 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <MX_GPIO_Init+0xc0>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a29      	ldr	r2, [pc, #164]	; (8001618 <MX_GPIO_Init+0xc0>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b27      	ldr	r3, [pc, #156]	; (8001618 <MX_GPIO_Init+0xc0>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	4b24      	ldr	r3, [pc, #144]	; (8001618 <MX_GPIO_Init+0xc0>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a23      	ldr	r2, [pc, #140]	; (8001618 <MX_GPIO_Init+0xc0>)
 800158c:	f043 0320 	orr.w	r3, r3, #32
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b21      	ldr	r3, [pc, #132]	; (8001618 <MX_GPIO_Init+0xc0>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 0320 	and.w	r3, r3, #32
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_GPIO_Init+0xc0>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <MX_GPIO_Init+0xc0>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_GPIO_Init+0xc0>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_GPIO_Init+0xc0>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	4a17      	ldr	r2, [pc, #92]	; (8001618 <MX_GPIO_Init+0xc0>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	61d3      	str	r3, [r2, #28]
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_GPIO_Init+0xc0>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2120      	movs	r1, #32
 80015d2:	4812      	ldr	r0, [pc, #72]	; (800161c <MX_GPIO_Init+0xc4>)
 80015d4:	f001 fa9c 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	480c      	ldr	r0, [pc, #48]	; (8001620 <MX_GPIO_Init+0xc8>)
 80015f0:	f001 f8fe 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015f4:	2320      	movs	r3, #32
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_GPIO_Init+0xc4>)
 800160c:	f001 f8f0 	bl	80027f0 <HAL_GPIO_Init>

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020800 	.word	0x40020800

08001624 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_I2C1_Init+0x50>)
 800162a:	4a13      	ldr	r2, [pc, #76]	; (8001678 <MX_I2C1_Init+0x54>)
 800162c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_I2C1_Init+0x50>)
 8001630:	4a12      	ldr	r2, [pc, #72]	; (800167c <MX_I2C1_Init+0x58>)
 8001632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_I2C1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_I2C1_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_I2C1_Init+0x50>)
 8001642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001646:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <MX_I2C1_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_I2C1_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <MX_I2C1_Init+0x50>)
 8001662:	f001 fa6d 	bl	8002b40 <HAL_I2C_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800166c:	f000 fb40 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000264 	.word	0x20000264
 8001678:	40005400 	.word	0x40005400
 800167c:	000186a0 	.word	0x000186a0

08001680 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_I2C_MspInit+0x7c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d128      	bne.n	80016f4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_I2C_MspInit+0x80>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <HAL_I2C_MspInit+0x80>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_I2C_MspInit+0x80>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c0:	2312      	movs	r3, #18
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016cc:	2304      	movs	r3, #4
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <HAL_I2C_MspInit+0x84>)
 80016d8:	f001 f88a 	bl	80027f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_I2C_MspInit+0x80>)
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_I2C_MspInit+0x80>)
 80016e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e6:	6253      	str	r3, [r2, #36]	; 0x24
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_I2C_MspInit+0x80>)
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	; 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40005400 	.word	0x40005400
 8001700:	40023800 	.word	0x40023800
 8001704:	40020400 	.word	0x40020400

08001708 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af02      	add	r7, sp, #8
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	f043 030c 	orr.w	r3, r3, #12
 800171e:	b2da      	uxtb	r2, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	b2db      	uxtb	r3, r3
 8001732:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8001734:	f107 0118 	add.w	r1, r7, #24
 8001738:	230a      	movs	r3, #10
 800173a:	2202      	movs	r2, #2
 800173c:	486c      	ldr	r0, [pc, #432]	; (80018f0 <lcd_init+0x1e8>)
 800173e:	f003 f8d2 	bl	80048e6 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8001742:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001746:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001748:	f107 0114 	add.w	r1, r7, #20
 800174c:	230a      	movs	r3, #10
 800174e:	2202      	movs	r2, #2
 8001750:	4867      	ldr	r0, [pc, #412]	; (80018f0 <lcd_init+0x1e8>)
 8001752:	f003 f8c8 	bl	80048e6 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001756:	2364      	movs	r3, #100	; 0x64
 8001758:	2205      	movs	r2, #5
 800175a:	217c      	movs	r1, #124	; 0x7c
 800175c:	69f8      	ldr	r0, [r7, #28]
 800175e:	f001 fe57 	bl	8003410 <HAL_I2C_IsDeviceReady>
 8001762:	4603      	mov	r3, r0
 8001764:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8001766:	f107 0113 	add.w	r1, r7, #19
 800176a:	230a      	movs	r3, #10
 800176c:	2201      	movs	r2, #1
 800176e:	4860      	ldr	r0, [pc, #384]	; (80018f0 <lcd_init+0x1e8>)
 8001770:	f003 f8b9 	bl	80048e6 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001774:	2032      	movs	r0, #50	; 0x32
 8001776:	f000 ff35 	bl	80025e4 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 800177a:	f107 0218 	add.w	r2, r7, #24
 800177e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2302      	movs	r3, #2
 8001786:	217c      	movs	r1, #124	; 0x7c
 8001788:	69f8      	ldr	r0, [r7, #28]
 800178a:	f001 fb1d 	bl	8002dc8 <HAL_I2C_Master_Transmit>
 800178e:	4603      	mov	r3, r0
 8001790:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8001792:	f107 0112 	add.w	r1, r7, #18
 8001796:	230a      	movs	r3, #10
 8001798:	2201      	movs	r2, #1
 800179a:	4855      	ldr	r0, [pc, #340]	; (80018f0 <lcd_init+0x1e8>)
 800179c:	f003 f8a3 	bl	80048e6 <HAL_UART_Transmit>
	HAL_Delay(50);
 80017a0:	2032      	movs	r0, #50	; 0x32
 80017a2:	f000 ff1f 	bl	80025e4 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80017a6:	f107 0218 	add.w	r2, r7, #24
 80017aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2302      	movs	r3, #2
 80017b2:	217c      	movs	r1, #124	; 0x7c
 80017b4:	69f8      	ldr	r0, [r7, #28]
 80017b6:	f001 fb07 	bl	8002dc8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80017ba:	2005      	movs	r0, #5
 80017bc:	f000 ff12 	bl	80025e4 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80017c0:	f107 0218 	add.w	r2, r7, #24
 80017c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2302      	movs	r3, #2
 80017cc:	217c      	movs	r1, #124	; 0x7c
 80017ce:	69f8      	ldr	r0, [r7, #28]
 80017d0:	f001 fafa 	bl	8002dc8 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2204      	movs	r2, #4
 80017d8:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80017e6:	f107 0218 	add.w	r2, r7, #24
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2302      	movs	r3, #2
 80017f2:	217c      	movs	r1, #124	; 0x7c
 80017f4:	69f8      	ldr	r0, [r7, #28]
 80017f6:	f001 fae7 	bl	8002dc8 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 80017fa:	2301      	movs	r3, #1
 80017fc:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80017fe:	f107 0218 	add.w	r2, r7, #24
 8001802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2302      	movs	r3, #2
 800180a:	217c      	movs	r1, #124	; 0x7c
 800180c:	69f8      	ldr	r0, [r7, #28]
 800180e:	f001 fadb 	bl	8002dc8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001812:	2002      	movs	r0, #2
 8001814:	f000 fee6 	bl	80025e4 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2202      	movs	r2, #2
 800181c:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	789b      	ldrb	r3, [r3, #2]
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	b2db      	uxtb	r3, r3
 8001828:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800182a:	f107 0218 	add.w	r2, r7, #24
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2302      	movs	r3, #2
 8001836:	217c      	movs	r1, #124	; 0x7c
 8001838:	69f8      	ldr	r0, [r7, #28]
 800183a:	f001 fac5 	bl	8002dc8 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 800183e:	2300      	movs	r3, #0
 8001840:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001846:	f107 0210 	add.w	r2, r7, #16
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2302      	movs	r3, #2
 8001852:	21c4      	movs	r1, #196	; 0xc4
 8001854:	69f8      	ldr	r0, [r7, #28]
 8001856:	f001 fab7 	bl	8002dc8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 800185a:	2308      	movs	r3, #8
 800185c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 800185e:	23ff      	movs	r3, #255	; 0xff
 8001860:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001862:	f107 0210 	add.w	r2, r7, #16
 8001866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2302      	movs	r3, #2
 800186e:	21c4      	movs	r1, #196	; 0xc4
 8001870:	69f8      	ldr	r0, [r7, #28]
 8001872:	f001 faa9 	bl	8002dc8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8001876:	2301      	movs	r3, #1
 8001878:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 800187a:	2320      	movs	r3, #32
 800187c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800187e:	f107 0210 	add.w	r2, r7, #16
 8001882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2302      	movs	r3, #2
 800188a:	21c4      	movs	r1, #196	; 0xc4
 800188c:	69f8      	ldr	r0, [r7, #28]
 800188e:	f001 fa9b 	bl	8002dc8 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8001892:	2304      	movs	r3, #4
 8001894:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001896:	23ff      	movs	r3, #255	; 0xff
 8001898:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800189a:	f107 020c 	add.w	r2, r7, #12
 800189e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2302      	movs	r3, #2
 80018a6:	21c4      	movs	r1, #196	; 0xc4
 80018a8:	69f8      	ldr	r0, [r7, #28]
 80018aa:	f001 fa8d 	bl	8002dc8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 80018ae:	2303      	movs	r3, #3
 80018b0:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80018b2:	23ff      	movs	r3, #255	; 0xff
 80018b4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80018b6:	f107 020c 	add.w	r2, r7, #12
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2302      	movs	r3, #2
 80018c2:	21c4      	movs	r1, #196	; 0xc4
 80018c4:	69f8      	ldr	r0, [r7, #28]
 80018c6:	f001 fa7f 	bl	8002dc8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 80018ca:	2302      	movs	r3, #2
 80018cc:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80018ce:	23ff      	movs	r3, #255	; 0xff
 80018d0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80018d2:	f107 020c 	add.w	r2, r7, #12
 80018d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2302      	movs	r3, #2
 80018de:	21c4      	movs	r1, #196	; 0xc4
 80018e0:	69f8      	ldr	r0, [r7, #28]
 80018e2:	f001 fa71 	bl	8002dc8 <HAL_I2C_Master_Transmit>


}
 80018e6:	bf00      	nop
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200002fc 	.word	0x200002fc

080018f4 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8001902:	2340      	movs	r3, #64	; 0x40
 8001904:	733b      	strb	r3, [r7, #12]
    int i=0;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800190a:	e011      	b.n	8001930 <lcd_print+0x3c>
    {
            data[1] = str[i];
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	4413      	add	r3, r2
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001916:	f107 020c 	add.w	r2, r7, #12
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2302      	movs	r3, #2
 8001922:	217c      	movs	r1, #124	; 0x7c
 8001924:	6938      	ldr	r0, [r7, #16]
 8001926:	f001 fa4f 	bl	8002dc8 <HAL_I2C_Master_Transmit>
            i++;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	4413      	add	r3, r2
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e7      	bne.n	800190c <lcd_print+0x18>
   }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af02      	add	r7, sp, #8
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	70fb      	strb	r3, [r7, #3]
 8001952:	4613      	mov	r3, r2
 8001954:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 800195a:	78bb      	ldrb	r3, [r7, #2]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d104      	bne.n	800196a <lcd_position+0x24>
    {
        col = col | 0x80;
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001966:	70fb      	strb	r3, [r7, #3]
 8001968:	e003      	b.n	8001972 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001970:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800197a:	f107 0208 	add.w	r2, r7, #8
 800197e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2302      	movs	r3, #2
 8001986:	217c      	movs	r1, #124	; 0x7c
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f001 fa1d 	bl	8002dc8 <HAL_I2C_Master_Transmit>
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af02      	add	r7, sp, #8
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	460b      	mov	r3, r1
 80019a4:	71bb      	strb	r3, [r7, #6]
 80019a6:	4613      	mov	r3, r2
 80019a8:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <reglagecouleur+0x74>)
 80019ac:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 80019ae:	2304      	movs	r3, #4
 80019b0:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 80019b6:	f107 0210 	add.w	r2, r7, #16
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2302      	movs	r3, #2
 80019c2:	21c4      	movs	r1, #196	; 0xc4
 80019c4:	6978      	ldr	r0, [r7, #20]
 80019c6:	f001 f9ff 	bl	8002dc8 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 80019ca:	2303      	movs	r3, #3
 80019cc:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 80019d2:	f107 020c 	add.w	r2, r7, #12
 80019d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2302      	movs	r3, #2
 80019de:	21c4      	movs	r1, #196	; 0xc4
 80019e0:	6978      	ldr	r0, [r7, #20]
 80019e2:	f001 f9f1 	bl	8002dc8 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 80019e6:	2302      	movs	r3, #2
 80019e8:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 80019ea:	797b      	ldrb	r3, [r7, #5]
 80019ec:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 80019ee:	f107 0208 	add.w	r2, r7, #8
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2302      	movs	r3, #2
 80019fa:	21c4      	movs	r1, #196	; 0xc4
 80019fc:	6978      	ldr	r0, [r7, #20]
 80019fe:	f001 f9e3 	bl	8002dc8 <HAL_I2C_Master_Transmit>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000264 	.word	0x20000264

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b0eb      	sub	sp, #428	; 0x1ac
 8001a14:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */

	  uint8_t send_buffer[100] ="";
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a1c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a20:	2260      	movs	r2, #96	; 0x60
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 f957 	bl	8004cd8 <memset>
	  uint8_t temp[128] = "";
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a32:	227c      	movs	r2, #124	; 0x7c
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 f94e 	bl	8004cd8 <memset>

	  char res [10];
	  	  float temperature=0;
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	66fb      	str	r3, [r7, #108]	; 0x6c
	      float humidity=0;
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a48:	f000 fd5d 	bl	8002506 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4c:	f000 f902 	bl	8001c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a50:	f7ff fd82 	bl	8001558 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a54:	f7ff fde6 	bl	8001624 <MX_I2C1_Init>
  MX_UART4_Init();
 8001a58:	f000 fc66 	bl	8002328 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001a5c:	f000 fc8e 	bl	800237c <MX_USART2_UART_Init>



  /* -------- AFFICHAGE--------*/

  lcd_init(&hi2c1, &lcdData); // initialise le lcd
 8001a60:	496f      	ldr	r1, [pc, #444]	; (8001c20 <main+0x210>)
 8001a62:	4870      	ldr	r0, [pc, #448]	; (8001c24 <main+0x214>)
 8001a64:	f7ff fe50 	bl	8001708 <lcd_init>
  lcd_position(&hi2c1,0,0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	486d      	ldr	r0, [pc, #436]	; (8001c24 <main+0x214>)
 8001a6e:	f7ff ff6a 	bl	8001946 <lcd_position>
  lcd_print(&hi2c1,"Temperature ");// ecris "temperature" sur le lcd
 8001a72:	496d      	ldr	r1, [pc, #436]	; (8001c28 <main+0x218>)
 8001a74:	486b      	ldr	r0, [pc, #428]	; (8001c24 <main+0x214>)
 8001a76:	f7ff ff3d 	bl	80018f4 <lcd_print>
  lcd_position(&hi2c1,0,1);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4869      	ldr	r0, [pc, #420]	; (8001c24 <main+0x214>)
 8001a80:	f7ff ff61 	bl	8001946 <lcd_position>
  lcd_print(&hi2c1,"Humidite: ");// ecris "Humidité " sur le lcd
 8001a84:	4969      	ldr	r1, [pc, #420]	; (8001c2c <main+0x21c>)
 8001a86:	4867      	ldr	r0, [pc, #412]	; (8001c24 <main+0x214>)
 8001a88:	f7ff ff34 	bl	80018f4 <lcd_print>
  reglagecouleur(50,50,9);
 8001a8c:	2209      	movs	r2, #9
 8001a8e:	2132      	movs	r1, #50	; 0x32
 8001a90:	2032      	movs	r0, #50	; 0x32
 8001a92:	f7ff ff81 	bl	8001998 <reglagecouleur>


  TMP_init(hi2c1);
 8001a96:	4c63      	ldr	r4, [pc, #396]	; (8001c24 <main+0x214>)
 8001a98:	4668      	mov	r0, sp
 8001a9a:	f104 0310 	add.w	r3, r4, #16
 8001a9e:	2244      	movs	r2, #68	; 0x44
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f003 f90b 	bl	8004cbc <memcpy>
 8001aa6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001aaa:	f7ff fbd1 	bl	8001250 <TMP_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  	  Temp_read(&temperature, &humidity);
 8001aae:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001ab2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fbf9 	bl	80012b0 <Temp_read>

	  	  ftoat (temperature,res,1);
 8001abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ac0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fcf4 	bl	80014b4 <ftoat>
	  	  lcd_position(&hi2c1,12,0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	210c      	movs	r1, #12
 8001ad0:	4854      	ldr	r0, [pc, #336]	; (8001c24 <main+0x214>)
 8001ad2:	f7ff ff38 	bl	8001946 <lcd_position>
	  	  lcd_print(&hi2c1,res);
 8001ad6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ada:	4619      	mov	r1, r3
 8001adc:	4851      	ldr	r0, [pc, #324]	; (8001c24 <main+0x214>)
 8001ade:	f7ff ff09 	bl	80018f4 <lcd_print>

	  	  ftoat (humidity,res,1);
 8001ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ae4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fce2 	bl	80014b4 <ftoat>
	  	  lcd_position(&hi2c1,10,1);
 8001af0:	2201      	movs	r2, #1
 8001af2:	210a      	movs	r1, #10
 8001af4:	484b      	ldr	r0, [pc, #300]	; (8001c24 <main+0x214>)
 8001af6:	f7ff ff26 	bl	8001946 <lcd_position>
	  	  lcd_print(&hi2c1,res);
 8001afa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001afe:	4619      	mov	r1, r3
 8001b00:	4848      	ldr	r0, [pc, #288]	; (8001c24 <main+0x214>)
 8001b02:	f7ff fef7 	bl	80018f4 <lcd_print>


	  	 print("la temperature est =%f\n\r ", temperature);
 8001b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd59 	bl	80005c0 <__aeabi_f2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4847      	ldr	r0, [pc, #284]	; (8001c30 <main+0x220>)
 8001b14:	f000 f8f2 	bl	8001cfc <print>
	  	 print("l'humidité est =%f\n\r ", humidity);
 8001b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd50 	bl	80005c0 <__aeabi_f2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4843      	ldr	r0, [pc, #268]	; (8001c34 <main+0x224>)
 8001b26:	f000 f8e9 	bl	8001cfc <print>
	  	  HAL_Delay(1000);
 8001b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b2e:	f000 fd59 	bl	80025e4 <HAL_Delay>

	  	/* -------- Envoi de données via XBEE--------*/

	  	  char send_buffer[100];

          memset(send_buffer,0, sizeof(send_buffer));
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2264      	movs	r2, #100	; 0x64
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 f8cd 	bl	8004cd8 <memset>
          strcat((char *)send_buffer,"$");
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fb1d 	bl	8000180 <strlen>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4413      	add	r3, r2
 8001b4e:	493a      	ldr	r1, [pc, #232]	; (8001c38 <main+0x228>)
 8001b50:	461a      	mov	r2, r3
 8001b52:	460b      	mov	r3, r1
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	8013      	strh	r3, [r2, #0]


          memset(temp,0, sizeof(temp));
 8001b58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b5c:	2280      	movs	r2, #128	; 0x80
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 f8b9 	bl	8004cd8 <memset>
          sprintf((char *)temp,"&i=%s", device_ID);
 8001b66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b6a:	4a34      	ldr	r2, [pc, #208]	; (8001c3c <main+0x22c>)
 8001b6c:	4934      	ldr	r1, [pc, #208]	; (8001c40 <main+0x230>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fd1a 	bl	80055a8 <siprintf>
          strcat((char *)send_buffer,(char *)temp);
 8001b74:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fd33 	bl	80055e8 <strcat>


          memset(temp,0, sizeof(temp));
 8001b82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f003 f8a4 	bl	8004cd8 <memset>
          sprintf((char *)temp,"&t=%.2f", temperature);
 8001b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fd14 	bl	80005c0 <__aeabi_f2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001ba0:	4928      	ldr	r1, [pc, #160]	; (8001c44 <main+0x234>)
 8001ba2:	f003 fd01 	bl	80055a8 <siprintf>
          strcat((char *)send_buffer,(char *)temp);
 8001ba6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fd1a 	bl	80055e8 <strcat>


          memset(temp,0, sizeof(temp));
 8001bb4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 f88b 	bl	8004cd8 <memset>
          sprintf((char *)temp,"&h=%.2f", humidity);
 8001bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcfb 	bl	80005c0 <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001bd2:	491d      	ldr	r1, [pc, #116]	; (8001c48 <main+0x238>)
 8001bd4:	f003 fce8 	bl	80055a8 <siprintf>
          strcat((char *)send_buffer,(char *)temp);
 8001bd8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 fd01 	bl	80055e8 <strcat>
          strcat((char *)send_buffer,(char *)"\r\n");
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fac9 	bl	8000180 <strlen>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <main+0x23c>)
 8001bf8:	8811      	ldrh	r1, [r2, #0]
 8001bfa:	7892      	ldrb	r2, [r2, #2]
 8001bfc:	8019      	strh	r1, [r3, #0]
 8001bfe:	709a      	strb	r2, [r3, #2]


	 // HAL_UART_Transmit(&huart4,(uint8_t*)"Salut",strlen("Salut"),100);


          HAL_UART_Transmit(&huart4,(uint8_t*)send_buffer, strlen((char *)send_buffer),100);
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fabc 	bl	8000180 <strlen>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	1d39      	adds	r1, r7, #4
 8001c0e:	2364      	movs	r3, #100	; 0x64
 8001c10:	480f      	ldr	r0, [pc, #60]	; (8001c50 <main+0x240>)
 8001c12:	f002 fe68 	bl	80048e6 <HAL_UART_Transmit>

          HAL_Delay(1000);
 8001c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1a:	f000 fce3 	bl	80025e4 <HAL_Delay>
  {
 8001c1e:	e746      	b.n	8001aae <main+0x9e>
 8001c20:	20000200 	.word	0x20000200
 8001c24:	20000264 	.word	0x20000264
 8001c28:	08008950 	.word	0x08008950
 8001c2c:	08008960 	.word	0x08008960
 8001c30:	0800896c 	.word	0x0800896c
 8001c34:	08008988 	.word	0x08008988
 8001c38:	080089a0 	.word	0x080089a0
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	080089a4 	.word	0x080089a4
 8001c44:	080089ac 	.word	0x080089ac
 8001c48:	080089b4 	.word	0x080089b4
 8001c4c:	080089bc 	.word	0x080089bc
 8001c50:	200002b8 	.word	0x200002b8

08001c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b092      	sub	sp, #72	; 0x48
 8001c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	2234      	movs	r2, #52	; 0x34
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 f838 	bl	8004cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c68:	463b      	mov	r3, r7
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <SystemClock_Config+0x98>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <SystemClock_Config+0x98>)
 8001c80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c84:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c86:	2302      	movs	r3, #2
 8001c88:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c8e:	2310      	movs	r3, #16
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c92:	2302      	movs	r3, #2
 8001c94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c96:	2300      	movs	r3, #0
 8001c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001c9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001ca0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 f80a 	bl	8003cc4 <HAL_RCC_OscConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001cb6:	f000 f81b 	bl	8001cf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cba:	230f      	movs	r3, #15
 8001cbc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cce:	463b      	mov	r3, r7
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f002 fb26 	bl	8004324 <HAL_RCC_ClockConfig>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001cde:	f000 f807 	bl	8001cf0 <Error_Handler>
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3748      	adds	r7, #72	; 0x48
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40007000 	.word	0x40007000

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <print>:
void uart_begin(UART_HandleTypeDef huart)
{
	huart1 = huart;
}
void print(char *str, ...)
{
 8001cfc:	b40f      	push	{r0, r1, r2, r3}
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b090      	sub	sp, #64	; 0x40
 8001d02:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t len = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
	char caractere;



	va_list liste;
	va_start(liste, str);
 8001d0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d10:	607b      	str	r3, [r7, #4]
	i = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	87fb      	strh	r3, [r7, #62]	; 0x3e
	while(str[i] != '\0')
 8001d16:	e195      	b.n	8002044 <print+0x348>
	{
		if(str[i] == '%')
 8001d18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d1c:	4413      	add	r3, r2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b25      	cmp	r3, #37	; 0x25
 8001d22:	f040 8185 	bne.w	8002030 <print+0x334>
		{
			len = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	87bb      	strh	r3, [r7, #60]	; 0x3c
			i++;
 8001d2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
			switch(str[i])
 8001d30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d34:	4413      	add	r3, r2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	3b43      	subs	r3, #67	; 0x43
 8001d3a:	2b35      	cmp	r3, #53	; 0x35
 8001d3c:	f200 8162 	bhi.w	8002004 <print+0x308>
 8001d40:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <print+0x4c>)
 8001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001faf 	.word	0x08001faf
 8001d4c:	08001e21 	.word	0x08001e21
 8001d50:	08002005 	.word	0x08002005
 8001d54:	08001fcd 	.word	0x08001fcd
 8001d58:	08002005 	.word	0x08002005
 8001d5c:	08002005 	.word	0x08002005
 8001d60:	08002005 	.word	0x08002005
 8001d64:	08002005 	.word	0x08002005
 8001d68:	08002005 	.word	0x08002005
 8001d6c:	08001e5d 	.word	0x08001e5d
 8001d70:	08002005 	.word	0x08002005
 8001d74:	08002005 	.word	0x08002005
 8001d78:	08002005 	.word	0x08002005
 8001d7c:	08002005 	.word	0x08002005
 8001d80:	08002005 	.word	0x08002005
 8001d84:	08002005 	.word	0x08002005
 8001d88:	08002005 	.word	0x08002005
 8001d8c:	08002005 	.word	0x08002005
 8001d90:	08001e3f 	.word	0x08001e3f
 8001d94:	08002005 	.word	0x08002005
 8001d98:	08002005 	.word	0x08002005
 8001d9c:	08001f91 	.word	0x08001f91
 8001da0:	08002005 	.word	0x08002005
 8001da4:	08002005 	.word	0x08002005
 8001da8:	08002005 	.word	0x08002005
 8001dac:	08002005 	.word	0x08002005
 8001db0:	08002005 	.word	0x08002005
 8001db4:	08002005 	.word	0x08002005
 8001db8:	08002005 	.word	0x08002005
 8001dbc:	08002005 	.word	0x08002005
 8001dc0:	08002005 	.word	0x08002005
 8001dc4:	08002005 	.word	0x08002005
 8001dc8:	08001faf 	.word	0x08001faf
 8001dcc:	08001e21 	.word	0x08001e21
 8001dd0:	08002005 	.word	0x08002005
 8001dd4:	08001fcd 	.word	0x08001fcd
 8001dd8:	08002005 	.word	0x08002005
 8001ddc:	08002005 	.word	0x08002005
 8001de0:	08002005 	.word	0x08002005
 8001de4:	08002005 	.word	0x08002005
 8001de8:	08002005 	.word	0x08002005
 8001dec:	08001e5d 	.word	0x08001e5d
 8001df0:	08002005 	.word	0x08002005
 8001df4:	08002005 	.word	0x08002005
 8001df8:	08002005 	.word	0x08002005
 8001dfc:	08002005 	.word	0x08002005
 8001e00:	08002005 	.word	0x08002005
 8001e04:	08002005 	.word	0x08002005
 8001e08:	08002005 	.word	0x08002005
 8001e0c:	08002005 	.word	0x08002005
 8001e10:	08001e3f 	.word	0x08001e3f
 8001e14:	08002005 	.word	0x08002005
 8001e18:	08002005 	.word	0x08002005
 8001e1c:	08001f91 	.word	0x08001f91
			{
				case 'D'	:
				case 'd'	:	
								entier = va_arg(liste, int);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	1d1a      	adds	r2, r3, #4
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	623b      	str	r3, [r7, #32]
								len = sprintf((char *)str_var, "%d", entier);
 8001e2a:	f107 0308 	add.w	r3, r7, #8
 8001e2e:	6a3a      	ldr	r2, [r7, #32]
 8001e30:	498c      	ldr	r1, [pc, #560]	; (8002064 <print+0x368>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fbb8 	bl	80055a8 <siprintf>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
								break;
 8001e3c:	e0e5      	b.n	800200a <print+0x30e>
				case 'U'	:
				case 'u'	:	
								u_entier = va_arg(liste, unsigned int);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	1d1a      	adds	r2, r3, #4
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	63bb      	str	r3, [r7, #56]	; 0x38
								len = sprintf((char *)str_var, "%u", u_entier);
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e4e:	4986      	ldr	r1, [pc, #536]	; (8002068 <print+0x36c>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fba9 	bl	80055a8 <siprintf>
 8001e56:	4603      	mov	r3, r0
 8001e58:	87bb      	strh	r3, [r7, #60]	; 0x3c
								break;
 8001e5a:	e0d6      	b.n	800200a <print+0x30e>
				case 'L'	:
				case 'l'	:	i++;
 8001e5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001e5e:	3301      	adds	r3, #1
 8001e60:	87fb      	strh	r3, [r7, #62]	; 0x3e
								switch(str[i++])
 8001e62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	87fa      	strh	r2, [r7, #62]	; 0x3e
 8001e68:	461a      	mov	r2, r3
 8001e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b46      	cmp	r3, #70	; 0x46
 8001e72:	d066      	beq.n	8001f42 <print+0x246>
 8001e74:	2b46      	cmp	r3, #70	; 0x46
 8001e76:	f2c0 8088 	blt.w	8001f8a <print+0x28e>
 8001e7a:	2b78      	cmp	r3, #120	; 0x78
 8001e7c:	f300 8085 	bgt.w	8001f8a <print+0x28e>
 8001e80:	2b55      	cmp	r3, #85	; 0x55
 8001e82:	f2c0 8082 	blt.w	8001f8a <print+0x28e>
 8001e86:	3b55      	subs	r3, #85	; 0x55
 8001e88:	2b23      	cmp	r3, #35	; 0x23
 8001e8a:	d87e      	bhi.n	8001f8a <print+0x28e>
 8001e8c:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <print+0x198>)
 8001e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e92:	bf00      	nop
 8001e94:	08001f25 	.word	0x08001f25
 8001e98:	08001f8b 	.word	0x08001f8b
 8001e9c:	08001f8b 	.word	0x08001f8b
 8001ea0:	08001f6d 	.word	0x08001f6d
 8001ea4:	08001f8b 	.word	0x08001f8b
 8001ea8:	08001f8b 	.word	0x08001f8b
 8001eac:	08001f8b 	.word	0x08001f8b
 8001eb0:	08001f8b 	.word	0x08001f8b
 8001eb4:	08001f8b 	.word	0x08001f8b
 8001eb8:	08001f8b 	.word	0x08001f8b
 8001ebc:	08001f8b 	.word	0x08001f8b
 8001ec0:	08001f8b 	.word	0x08001f8b
 8001ec4:	08001f8b 	.word	0x08001f8b
 8001ec8:	08001f8b 	.word	0x08001f8b
 8001ecc:	08001f8b 	.word	0x08001f8b
 8001ed0:	08001f8b 	.word	0x08001f8b
 8001ed4:	08001f8b 	.word	0x08001f8b
 8001ed8:	08001f43 	.word	0x08001f43
 8001edc:	08001f8b 	.word	0x08001f8b
 8001ee0:	08001f8b 	.word	0x08001f8b
 8001ee4:	08001f8b 	.word	0x08001f8b
 8001ee8:	08001f8b 	.word	0x08001f8b
 8001eec:	08001f8b 	.word	0x08001f8b
 8001ef0:	08001f8b 	.word	0x08001f8b
 8001ef4:	08001f8b 	.word	0x08001f8b
 8001ef8:	08001f8b 	.word	0x08001f8b
 8001efc:	08001f8b 	.word	0x08001f8b
 8001f00:	08001f8b 	.word	0x08001f8b
 8001f04:	08001f8b 	.word	0x08001f8b
 8001f08:	08001f8b 	.word	0x08001f8b
 8001f0c:	08001f8b 	.word	0x08001f8b
 8001f10:	08001f8b 	.word	0x08001f8b
 8001f14:	08001f25 	.word	0x08001f25
 8001f18:	08001f8b 	.word	0x08001f8b
 8001f1c:	08001f8b 	.word	0x08001f8b
 8001f20:	08001f6d 	.word	0x08001f6d
								{
									case 'U'	:
									case 'u'	:	
													long_u = va_arg(liste, unsigned long);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	1d1a      	adds	r2, r3, #4
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
													len = sprintf((char *)str_var, "%lu", long_u);
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f34:	494d      	ldr	r1, [pc, #308]	; (800206c <print+0x370>)
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fb36 	bl	80055a8 <siprintf>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
													break;
 8001f40:	e026      	b.n	8001f90 <print+0x294>
									case 'F'	:
									case 'f'	:	
													reel = va_arg(liste, double);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3307      	adds	r3, #7
 8001f46:	f023 0307 	bic.w	r3, r3, #7
 8001f4a:	f103 0208 	add.w	r2, r3, #8
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
													len = sprintf((char *)str_var, "%f", reel);
 8001f58:	f107 0008 	add.w	r0, r7, #8
 8001f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f60:	4943      	ldr	r1, [pc, #268]	; (8002070 <print+0x374>)
 8001f62:	f003 fb21 	bl	80055a8 <siprintf>
 8001f66:	4603      	mov	r3, r0
 8001f68:	87bb      	strh	r3, [r7, #60]	; 0x3c
													break;
 8001f6a:	e011      	b.n	8001f90 <print+0x294>
									case 'x'	:	
									case 'X'	:	
													long_u = va_arg(liste, unsigned long);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	1d1a      	adds	r2, r3, #4
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	637b      	str	r3, [r7, #52]	; 0x34
													len = sprintf((char *)str_var, "%lX", long_u);
 8001f76:	f107 0308 	add.w	r3, r7, #8
 8001f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f7c:	493d      	ldr	r1, [pc, #244]	; (8002074 <print+0x378>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fb12 	bl	80055a8 <siprintf>
 8001f84:	4603      	mov	r3, r0
 8001f86:	87bb      	strh	r3, [r7, #60]	; 0x3c
													break;
 8001f88:	e002      	b.n	8001f90 <print+0x294>
									default		: 	i--;
 8001f8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
								}
				case 'x'	:
				case 'X'	:	
								u_entier = va_arg(liste, unsigned int);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	1d1a      	adds	r2, r3, #4
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
								len = sprintf((char *)str_var, "%X", u_entier);
 8001f9a:	f107 0308 	add.w	r3, r7, #8
 8001f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fa0:	4935      	ldr	r1, [pc, #212]	; (8002078 <print+0x37c>)
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 fb00 	bl	80055a8 <siprintf>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	87bb      	strh	r3, [r7, #60]	; 0x3c
								break;
 8001fac:	e02d      	b.n	800200a <print+0x30e>
				case 'c'	:
				case 'C'	:	
								caractere = va_arg(liste, int);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	1d1a      	adds	r2, r3, #4
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	77fb      	strb	r3, [r7, #31]
								len = sprintf((char *)str_var, "%c", caractere);
 8001fb8:	7ffa      	ldrb	r2, [r7, #31]
 8001fba:	f107 0308 	add.w	r3, r7, #8
 8001fbe:	492f      	ldr	r1, [pc, #188]	; (800207c <print+0x380>)
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 faf1 	bl	80055a8 <siprintf>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
								break;
 8001fca:	e01e      	b.n	800200a <print+0x30e>
				case 'f'	:
				case 'F'	:	floatant = va_arg(liste, double);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3307      	adds	r3, #7
 8001fd0:	f023 0307 	bic.w	r3, r3, #7
 8001fd4:	f103 0208 	add.w	r2, r3, #8
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7fe fe1d 	bl	8000c20 <__aeabi_d2f>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
								len = sprintf((char *)str_var, "%f", floatant);
 8001fea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fec:	f7fe fae8 	bl	80005c0 <__aeabi_f2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	f107 0008 	add.w	r0, r7, #8
 8001ff8:	491d      	ldr	r1, [pc, #116]	; (8002070 <print+0x374>)
 8001ffa:	f003 fad5 	bl	80055a8 <siprintf>
 8001ffe:	4603      	mov	r3, r0
 8002000:	87bb      	strh	r3, [r7, #60]	; 0x3c
								break;
 8002002:	e002      	b.n	800200a <print+0x30e>
				default		:	i--;
 8002004:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002006:	3b01      	subs	r3, #1
 8002008:	87fb      	strh	r3, [r7, #62]	; 0x3e
			}
			if(len != 0)
 800200a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <print+0x324>
				print_str(str_var, len);
 8002010:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f000 f84b 	bl	80020b4 <print_str>
 800201e:	e00e      	b.n	800203e <print+0x342>
			else
				print_char((unsigned char)str[i]);
 8002020:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002024:	4413      	add	r3, r2
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f829 	bl	8002080 <print_char>
 800202e:	e006      	b.n	800203e <print+0x342>
		}
		else
		{
			print_char((unsigned char)str[i]);
 8002030:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f821 	bl	8002080 <print_char>
		}
		i++;
 800203e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002040:	3301      	adds	r3, #1
 8002042:	87fb      	strh	r3, [r7, #62]	; 0x3e
	while(str[i] != '\0')
 8002044:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f47f ae63 	bne.w	8001d18 <print+0x1c>
	}
	va_end(liste);
}
 8002052:	bf00      	nop
 8002054:	bf00      	nop
 8002056:	3740      	adds	r7, #64	; 0x40
 8002058:	46bd      	mov	sp, r7
 800205a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800205e:	b004      	add	sp, #16
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	080089c0 	.word	0x080089c0
 8002068:	080089c4 	.word	0x080089c4
 800206c:	080089c8 	.word	0x080089c8
 8002070:	080089cc 	.word	0x080089cc
 8002074:	080089d0 	.word	0x080089d0
 8002078:	080089d4 	.word	0x080089d4
 800207c:	080089d8 	.word	0x080089d8

08002080 <print_char>:
char print_char(uint8_t c)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_StatusUart;
	HAL_StatusUart = HAL_UART_Transmit(&huart2, &c, 1, TIMEOUT);
 800208a:	1df9      	adds	r1, r7, #7
 800208c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002090:	2201      	movs	r2, #1
 8002092:	4807      	ldr	r0, [pc, #28]	; (80020b0 <print_char+0x30>)
 8002094:	f002 fc27 	bl	80048e6 <HAL_UART_Transmit>
 8002098:	4603      	mov	r3, r0
 800209a:	73fb      	strb	r3, [r7, #15]
	if(HAL_StatusUart != HAL_OK)
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <print_char+0x26>
		return -1;
 80020a2:	23ff      	movs	r3, #255	; 0xff
 80020a4:	e000      	b.n	80020a8 <print_char+0x28>
	else
		return 0;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200002fc 	.word	0x200002fc

080020b4 <print_str>:
char print_str(uint8_t *str, uint16_t len)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef HAL_StatusUart;
	HAL_StatusUart = HAL_UART_Transmit(&huart2, str, len, TIMEOUT);
 80020c0:	887a      	ldrh	r2, [r7, #2]
 80020c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4807      	ldr	r0, [pc, #28]	; (80020e8 <print_str+0x34>)
 80020ca:	f002 fc0c 	bl	80048e6 <HAL_UART_Transmit>
 80020ce:	4603      	mov	r3, r0
 80020d0:	73fb      	strb	r3, [r7, #15]
	if(HAL_StatusUart != HAL_OK)
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <print_str+0x28>
		return -1;
 80020d8:	23ff      	movs	r3, #255	; 0xff
 80020da:	e000      	b.n	80020de <print_str+0x2a>
	else
		return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200002fc 	.word	0x200002fc

080020ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_MspInit+0x5c>)
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_MspInit+0x5c>)
 80020f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020fc:	6253      	str	r3, [r2, #36]	; 0x24
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_MspInit+0x5c>)
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_MspInit+0x5c>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_MspInit+0x5c>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6213      	str	r3, [r2, #32]
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_MspInit+0x5c>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_MspInit+0x5c>)
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	4a08      	ldr	r2, [pc, #32]	; (8002148 <HAL_MspInit+0x5c>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	6253      	str	r3, [r2, #36]	; 0x24
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_MspInit+0x5c>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800213a:	2007      	movs	r0, #7
 800213c:	f000 fb24 	bl	8002788 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <NMI_Handler+0x4>

08002152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <HardFault_Handler+0x4>

08002158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <MemManage_Handler+0x4>

0800215e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <BusFault_Handler+0x4>

08002164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <UsageFault_Handler+0x4>

0800216a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002192:	f000 fa0b 	bl	80025ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}

0800219a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
	return 1;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <_kill>:

int _kill(int pid, int sig)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021b2:	f002 fd59 	bl	8004c68 <__errno>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2216      	movs	r2, #22
 80021ba:	601a      	str	r2, [r3, #0]
	return -1;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_exit>:

void _exit (int status)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ffe7 	bl	80021a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021da:	e7fe      	b.n	80021da <_exit+0x12>

080021dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e00a      	b.n	8002204 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ee:	f3af 8000 	nop.w
 80021f2:	4601      	mov	r1, r0
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	60ba      	str	r2, [r7, #8]
 80021fa:	b2ca      	uxtb	r2, r1
 80021fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	dbf0      	blt.n	80021ee <_read+0x12>
	}

return len;
 800220c:	687b      	ldr	r3, [r7, #4]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	e009      	b.n	800223c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	60ba      	str	r2, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3301      	adds	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	dbf1      	blt.n	8002228 <_write+0x12>
	}
	return len;
 8002244:	687b      	ldr	r3, [r7, #4]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_close>:

int _close(int file)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
	return -1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002274:	605a      	str	r2, [r3, #4]
	return 0;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <_isatty>:

int _isatty(int file)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
	return 1;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
	return 0;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
	...

080022b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022b8:	4a14      	ldr	r2, [pc, #80]	; (800230c <_sbrk+0x5c>)
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <_sbrk+0x60>)
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <_sbrk+0x64>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <_sbrk+0x64>)
 80022ce:	4a12      	ldr	r2, [pc, #72]	; (8002318 <_sbrk+0x68>)
 80022d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <_sbrk+0x64>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d207      	bcs.n	80022f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e0:	f002 fcc2 	bl	8004c68 <__errno>
 80022e4:	4603      	mov	r3, r0
 80022e6:	220c      	movs	r2, #12
 80022e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
 80022ee:	e009      	b.n	8002304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <_sbrk+0x64>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	4a05      	ldr	r2, [pc, #20]	; (8002314 <_sbrk+0x64>)
 8002300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20014000 	.word	0x20014000
 8002310:	00000400 	.word	0x00000400
 8002314:	20000204 	.word	0x20000204
 8002318:	20000358 	.word	0x20000358

0800231c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <MX_UART4_Init+0x4c>)
 800232e:	4a12      	ldr	r2, [pc, #72]	; (8002378 <MX_UART4_Init+0x50>)
 8002330:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <MX_UART4_Init+0x4c>)
 8002334:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002338:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_UART4_Init+0x4c>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <MX_UART4_Init+0x4c>)
 8002342:	2200      	movs	r2, #0
 8002344:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <MX_UART4_Init+0x4c>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <MX_UART4_Init+0x4c>)
 800234e:	220c      	movs	r2, #12
 8002350:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <MX_UART4_Init+0x4c>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_UART4_Init+0x4c>)
 800235a:	2200      	movs	r2, #0
 800235c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_UART4_Init+0x4c>)
 8002360:	f002 fa74 	bl	800484c <HAL_UART_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800236a:	f7ff fcc1 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200002b8 	.word	0x200002b8
 8002378:	40004c00 	.word	0x40004c00

0800237c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <MX_USART2_UART_Init+0x50>)
 8002384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 8002388:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800238c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 80023a2:	220c      	movs	r2, #12
 80023a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 80023b4:	f002 fa4a 	bl	800484c <HAL_UART_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023be:	f7ff fc97 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200002fc 	.word	0x200002fc
 80023cc:	40004400 	.word	0x40004400

080023d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08c      	sub	sp, #48	; 0x30
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2e      	ldr	r2, [pc, #184]	; (80024a8 <HAL_UART_MspInit+0xd8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d129      	bne.n	8002446 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80023f2:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <HAL_UART_MspInit+0xdc>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	4a2d      	ldr	r2, [pc, #180]	; (80024ac <HAL_UART_MspInit+0xdc>)
 80023f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023fc:	6253      	str	r3, [r2, #36]	; 0x24
 80023fe:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_UART_MspInit+0xdc>)
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240a:	4b28      	ldr	r3, [pc, #160]	; (80024ac <HAL_UART_MspInit+0xdc>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4a27      	ldr	r2, [pc, #156]	; (80024ac <HAL_UART_MspInit+0xdc>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	61d3      	str	r3, [r2, #28]
 8002416:	4b25      	ldr	r3, [pc, #148]	; (80024ac <HAL_UART_MspInit+0xdc>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002422:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800242c:	2301      	movs	r3, #1
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002430:	2303      	movs	r3, #3
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002434:	2308      	movs	r3, #8
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002438:	f107 031c 	add.w	r3, r7, #28
 800243c:	4619      	mov	r1, r3
 800243e:	481c      	ldr	r0, [pc, #112]	; (80024b0 <HAL_UART_MspInit+0xe0>)
 8002440:	f000 f9d6 	bl	80027f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002444:	e02c      	b.n	80024a0 <HAL_UART_MspInit+0xd0>
  else if(uartHandle->Instance==USART2)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <HAL_UART_MspInit+0xe4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d127      	bne.n	80024a0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <HAL_UART_MspInit+0xdc>)
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	4a15      	ldr	r2, [pc, #84]	; (80024ac <HAL_UART_MspInit+0xdc>)
 8002456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245a:	6253      	str	r3, [r2, #36]	; 0x24
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_UART_MspInit+0xdc>)
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <HAL_UART_MspInit+0xdc>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	4a0f      	ldr	r2, [pc, #60]	; (80024ac <HAL_UART_MspInit+0xdc>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	61d3      	str	r3, [r2, #28]
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_UART_MspInit+0xdc>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|USART_RX_Pin;
 8002480:	230e      	movs	r3, #14
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002490:	2307      	movs	r3, #7
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	4619      	mov	r1, r3
 800249a:	4807      	ldr	r0, [pc, #28]	; (80024b8 <HAL_UART_MspInit+0xe8>)
 800249c:	f000 f9a8 	bl	80027f0 <HAL_GPIO_Init>
}
 80024a0:	bf00      	nop
 80024a2:	3730      	adds	r7, #48	; 0x30
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40004c00 	.word	0x40004c00
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40004400 	.word	0x40004400
 80024b8:	40020000 	.word	0x40020000

080024bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024bc:	480c      	ldr	r0, [pc, #48]	; (80024f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024be:	490d      	ldr	r1, [pc, #52]	; (80024f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024c0:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c4:	e002      	b.n	80024cc <LoopCopyDataInit>

080024c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ca:	3304      	adds	r3, #4

080024cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d0:	d3f9      	bcc.n	80024c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024d4:	4c0a      	ldr	r4, [pc, #40]	; (8002500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d8:	e001      	b.n	80024de <LoopFillZerobss>

080024da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024dc:	3204      	adds	r2, #4

080024de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e0:	d3fb      	bcc.n	80024da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024e2:	f7ff ff1b 	bl	800231c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e6:	f002 fbc5 	bl	8004c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ea:	f7ff fa91 	bl	8001a10 <main>
  bx lr
 80024ee:	4770      	bx	lr
  ldr r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80024f8:	08008e38 	.word	0x08008e38
  ldr r2, =_sbss
 80024fc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002500:	20000354 	.word	0x20000354

08002504 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <ADC1_IRQHandler>

08002506 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002510:	2003      	movs	r0, #3
 8002512:	f000 f939 	bl	8002788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002516:	2000      	movs	r0, #0
 8002518:	f000 f80e 	bl	8002538 <HAL_InitTick>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	e001      	b.n	800252c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002528:	f7ff fde0 	bl	80020ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800252c:	79fb      	ldrb	r3, [r7, #7]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_InitTick+0x68>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d022      	beq.n	8002592 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_InitTick+0x6c>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_InitTick+0x68>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002558:	fbb1 f3f3 	udiv	r3, r1, r3
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f938 	bl	80027d6 <HAL_SYSTICK_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10f      	bne.n	800258c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	d809      	bhi.n	8002586 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002572:	2200      	movs	r2, #0
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	f04f 30ff 	mov.w	r0, #4294967295
 800257a:	f000 f910 	bl	800279e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <HAL_InitTick+0x70>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	e007      	b.n	8002596 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e004      	b.n	8002596 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e001      	b.n	8002596 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000000c 	.word	0x2000000c
 80025a4:	20000004 	.word	0x20000004
 80025a8:	20000008 	.word	0x20000008

080025ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_IncTick+0x1c>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_IncTick+0x20>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a03      	ldr	r2, [pc, #12]	; (80025c8 <HAL_IncTick+0x1c>)
 80025bc:	6013      	str	r3, [r2, #0]
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000340 	.word	0x20000340
 80025cc:	2000000c 	.word	0x2000000c

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <HAL_GetTick+0x10>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	20000340 	.word	0x20000340

080025e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff fff0 	bl	80025d0 <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d004      	beq.n	8002608 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_Delay+0x40>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4413      	add	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002608:	bf00      	nop
 800260a:	f7ff ffe1 	bl	80025d0 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	429a      	cmp	r2, r3
 8002618:	d8f7      	bhi.n	800260a <HAL_Delay+0x26>
  {
  }
}
 800261a:	bf00      	nop
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000000c 	.word	0x2000000c

08002628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <__NVIC_SetPriorityGrouping+0x44>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002644:	4013      	ands	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265a:	4a04      	ldr	r2, [pc, #16]	; (800266c <__NVIC_SetPriorityGrouping+0x44>)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	60d3      	str	r3, [r2, #12]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <__NVIC_GetPriorityGrouping+0x18>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	f003 0307 	and.w	r3, r3, #7
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	; (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	; (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002754:	d301      	bcc.n	800275a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002756:	2301      	movs	r3, #1
 8002758:	e00f      	b.n	800277a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <SysTick_Config+0x40>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002762:	210f      	movs	r1, #15
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f7ff ff90 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <SysTick_Config+0x40>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <SysTick_Config+0x40>)
 8002774:	2207      	movs	r2, #7
 8002776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	e000e010 	.word	0xe000e010

08002788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff49 	bl	8002628 <__NVIC_SetPriorityGrouping>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b0:	f7ff ff5e 	bl	8002670 <__NVIC_GetPriorityGrouping>
 80027b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f7ff ff90 	bl	80026e0 <NVIC_EncodePriority>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff5f 	bl	800268c <__NVIC_SetPriority>
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffb0 	bl	8002744 <SysTick_Config>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002806:	e160      	b.n	8002aca <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2101      	movs	r1, #1
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8152 	beq.w	8002ac4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d005      	beq.n	8002838 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002834:	2b02      	cmp	r3, #2
 8002836:	d130      	bne.n	800289a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800286e:	2201      	movs	r2, #1
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 0201 	and.w	r2, r3, #1
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d017      	beq.n	80028d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	2203      	movs	r2, #3
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d123      	bne.n	800292a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	6939      	ldr	r1, [r7, #16]
 8002926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	2203      	movs	r2, #3
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0203 	and.w	r2, r3, #3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80ac 	beq.w	8002ac4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296c:	4b5e      	ldr	r3, [pc, #376]	; (8002ae8 <HAL_GPIO_Init+0x2f8>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4a5d      	ldr	r2, [pc, #372]	; (8002ae8 <HAL_GPIO_Init+0x2f8>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6213      	str	r3, [r2, #32]
 8002978:	4b5b      	ldr	r3, [pc, #364]	; (8002ae8 <HAL_GPIO_Init+0x2f8>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002984:	4a59      	ldr	r2, [pc, #356]	; (8002aec <HAL_GPIO_Init+0x2fc>)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002990:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a51      	ldr	r2, [pc, #324]	; (8002af0 <HAL_GPIO_Init+0x300>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d025      	beq.n	80029fc <HAL_GPIO_Init+0x20c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a50      	ldr	r2, [pc, #320]	; (8002af4 <HAL_GPIO_Init+0x304>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d01f      	beq.n	80029f8 <HAL_GPIO_Init+0x208>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a4f      	ldr	r2, [pc, #316]	; (8002af8 <HAL_GPIO_Init+0x308>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d019      	beq.n	80029f4 <HAL_GPIO_Init+0x204>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a4e      	ldr	r2, [pc, #312]	; (8002afc <HAL_GPIO_Init+0x30c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d013      	beq.n	80029f0 <HAL_GPIO_Init+0x200>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a4d      	ldr	r2, [pc, #308]	; (8002b00 <HAL_GPIO_Init+0x310>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00d      	beq.n	80029ec <HAL_GPIO_Init+0x1fc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a4c      	ldr	r2, [pc, #304]	; (8002b04 <HAL_GPIO_Init+0x314>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d007      	beq.n	80029e8 <HAL_GPIO_Init+0x1f8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a4b      	ldr	r2, [pc, #300]	; (8002b08 <HAL_GPIO_Init+0x318>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_GPIO_Init+0x1f4>
 80029e0:	2306      	movs	r3, #6
 80029e2:	e00c      	b.n	80029fe <HAL_GPIO_Init+0x20e>
 80029e4:	2307      	movs	r3, #7
 80029e6:	e00a      	b.n	80029fe <HAL_GPIO_Init+0x20e>
 80029e8:	2305      	movs	r3, #5
 80029ea:	e008      	b.n	80029fe <HAL_GPIO_Init+0x20e>
 80029ec:	2304      	movs	r3, #4
 80029ee:	e006      	b.n	80029fe <HAL_GPIO_Init+0x20e>
 80029f0:	2303      	movs	r3, #3
 80029f2:	e004      	b.n	80029fe <HAL_GPIO_Init+0x20e>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e002      	b.n	80029fe <HAL_GPIO_Init+0x20e>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <HAL_GPIO_Init+0x20e>
 80029fc:	2300      	movs	r3, #0
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	f002 0203 	and.w	r2, r2, #3
 8002a04:	0092      	lsls	r2, r2, #2
 8002a06:	4093      	lsls	r3, r2
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a0e:	4937      	ldr	r1, [pc, #220]	; (8002aec <HAL_GPIO_Init+0x2fc>)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1c:	4b3b      	ldr	r3, [pc, #236]	; (8002b0c <HAL_GPIO_Init+0x31c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a40:	4a32      	ldr	r2, [pc, #200]	; (8002b0c <HAL_GPIO_Init+0x31c>)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a46:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <HAL_GPIO_Init+0x31c>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a6a:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <HAL_GPIO_Init+0x31c>)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a70:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <HAL_GPIO_Init+0x31c>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a94:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <HAL_GPIO_Init+0x31c>)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <HAL_GPIO_Init+0x31c>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002abe:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <HAL_GPIO_Init+0x31c>)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f47f ae97 	bne.w	8002808 <HAL_GPIO_Init+0x18>
  }
}
 8002ada:	bf00      	nop
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40020000 	.word	0x40020000
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40020800 	.word	0x40020800
 8002afc:	40020c00 	.word	0x40020c00
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40021400 	.word	0x40021400
 8002b08:	40021800 	.word	0x40021800
 8002b0c:	40010400 	.word	0x40010400

08002b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b20:	787b      	ldrb	r3, [r7, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002b2c:	e003      	b.n	8002b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	041a      	lsls	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	619a      	str	r2, [r3, #24]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e12b      	b.n	8002daa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fe fd8a 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ba4:	f001 fdca 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 8002ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a81      	ldr	r2, [pc, #516]	; (8002db4 <HAL_I2C_Init+0x274>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d807      	bhi.n	8002bc4 <HAL_I2C_Init+0x84>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a80      	ldr	r2, [pc, #512]	; (8002db8 <HAL_I2C_Init+0x278>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	bf94      	ite	ls
 8002bbc:	2301      	movls	r3, #1
 8002bbe:	2300      	movhi	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e006      	b.n	8002bd2 <HAL_I2C_Init+0x92>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4a7d      	ldr	r2, [pc, #500]	; (8002dbc <HAL_I2C_Init+0x27c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	bf94      	ite	ls
 8002bcc:	2301      	movls	r3, #1
 8002bce:	2300      	movhi	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0e7      	b.n	8002daa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a78      	ldr	r2, [pc, #480]	; (8002dc0 <HAL_I2C_Init+0x280>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	0c9b      	lsrs	r3, r3, #18
 8002be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a6a      	ldr	r2, [pc, #424]	; (8002db4 <HAL_I2C_Init+0x274>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d802      	bhi.n	8002c14 <HAL_I2C_Init+0xd4>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	3301      	adds	r3, #1
 8002c12:	e009      	b.n	8002c28 <HAL_I2C_Init+0xe8>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	4a69      	ldr	r2, [pc, #420]	; (8002dc4 <HAL_I2C_Init+0x284>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	3301      	adds	r3, #1
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	495c      	ldr	r1, [pc, #368]	; (8002db4 <HAL_I2C_Init+0x274>)
 8002c44:	428b      	cmp	r3, r1
 8002c46:	d819      	bhi.n	8002c7c <HAL_I2C_Init+0x13c>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1e59      	subs	r1, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c56:	1c59      	adds	r1, r3, #1
 8002c58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_I2C_Init+0x138>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1e59      	subs	r1, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c76:	e051      	b.n	8002d1c <HAL_I2C_Init+0x1dc>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	e04f      	b.n	8002d1c <HAL_I2C_Init+0x1dc>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d111      	bne.n	8002ca8 <HAL_I2C_Init+0x168>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1e58      	subs	r0, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	440b      	add	r3, r1
 8002c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c96:	3301      	adds	r3, #1
 8002c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e012      	b.n	8002cce <HAL_I2C_Init+0x18e>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e58      	subs	r0, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	0099      	lsls	r1, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_I2C_Init+0x196>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e022      	b.n	8002d1c <HAL_I2C_Init+0x1dc>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10e      	bne.n	8002cfc <HAL_I2C_Init+0x1bc>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1e58      	subs	r0, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	440b      	add	r3, r1
 8002cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cfa:	e00f      	b.n	8002d1c <HAL_I2C_Init+0x1dc>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	0099      	lsls	r1, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	6809      	ldr	r1, [r1, #0]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69da      	ldr	r2, [r3, #28]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6911      	ldr	r1, [r2, #16]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68d2      	ldr	r2, [r2, #12]
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	000186a0 	.word	0x000186a0
 8002db8:	001e847f 	.word	0x001e847f
 8002dbc:	003d08ff 	.word	0x003d08ff
 8002dc0:	431bde83 	.word	0x431bde83
 8002dc4:	10624dd3 	.word	0x10624dd3

08002dc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	817b      	strh	r3, [r7, #10]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff fbf8 	bl	80025d0 <HAL_GetTick>
 8002de0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	f040 80e0 	bne.w	8002fb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2319      	movs	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	4970      	ldr	r1, [pc, #448]	; (8002fbc <HAL_I2C_Master_Transmit+0x1f4>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fd86 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
 8002e08:	e0d3      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_I2C_Master_Transmit+0x50>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e0cc      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d007      	beq.n	8002e3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2221      	movs	r2, #33	; 0x21
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2210      	movs	r2, #16
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	893a      	ldrh	r2, [r7, #8]
 8002e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a50      	ldr	r2, [pc, #320]	; (8002fc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e80:	8979      	ldrh	r1, [r7, #10]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fbf0 	bl	800366c <I2C_MasterRequestWrite>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e08d      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002eac:	e066      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	6a39      	ldr	r1, [r7, #32]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fe00 	bl	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d107      	bne.n	8002ed6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06b      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d11b      	bne.n	8002f50 <HAL_I2C_Master_Transmit+0x188>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d017      	beq.n	8002f50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	6a39      	ldr	r1, [r7, #32]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fdf0 	bl	8003b3a <I2C_WaitOnBTFFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d107      	bne.n	8002f78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e01a      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d194      	bne.n	8002eae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	00100002 	.word	0x00100002
 8002fc0:	ffff0000 	.word	0xffff0000

08002fc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08c      	sub	sp, #48	; 0x30
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	817b      	strh	r3, [r7, #10]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff fafa 	bl	80025d0 <HAL_GetTick>
 8002fdc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	f040 820b 	bne.w	8003402 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2319      	movs	r3, #25
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	497c      	ldr	r1, [pc, #496]	; (80031e8 <HAL_I2C_Master_Receive+0x224>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fc88 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
 8003004:	e1fe      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_I2C_Master_Receive+0x50>
 8003010:	2302      	movs	r3, #2
 8003012:	e1f7      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d007      	beq.n	800303a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003048:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2222      	movs	r2, #34	; 0x22
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2210      	movs	r2, #16
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	893a      	ldrh	r2, [r7, #8]
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4a5c      	ldr	r2, [pc, #368]	; (80031ec <HAL_I2C_Master_Receive+0x228>)
 800307a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800307c:	8979      	ldrh	r1, [r7, #10]
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fb74 	bl	8003770 <I2C_MasterRequestRead>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e1b8      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003096:	2b00      	cmp	r3, #0
 8003098:	d113      	bne.n	80030c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309a:	2300      	movs	r3, #0
 800309c:	623b      	str	r3, [r7, #32]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	623b      	str	r3, [r7, #32]
 80030ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e18c      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d11b      	bne.n	8003102 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e16c      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	2b02      	cmp	r3, #2
 8003108:	d11b      	bne.n	8003142 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003118:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	e14c      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003150:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003168:	e138      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316e:	2b03      	cmp	r3, #3
 8003170:	f200 80f1 	bhi.w	8003356 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	2b01      	cmp	r3, #1
 800317a:	d123      	bne.n	80031c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 fd1b 	bl	8003bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e139      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c2:	e10b      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d14e      	bne.n	800326a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	2200      	movs	r2, #0
 80031d4:	4906      	ldr	r1, [pc, #24]	; (80031f0 <HAL_I2C_Master_Receive+0x22c>)
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fb98 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e10e      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
 80031e6:	bf00      	nop
 80031e8:	00100002 	.word	0x00100002
 80031ec:	ffff0000 	.word	0xffff0000
 80031f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003268:	e0b8      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	2200      	movs	r2, #0
 8003272:	4966      	ldr	r1, [pc, #408]	; (800340c <HAL_I2C_Master_Receive+0x448>)
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fb49 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0bf      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	2200      	movs	r2, #0
 80032ce:	494f      	ldr	r1, [pc, #316]	; (800340c <HAL_I2C_Master_Receive+0x448>)
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fb1b 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e091      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003354:	e042      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fc2e 	bl	8003bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e04c      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d118      	bne.n	80033dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f47f aec2 	bne.w	800316a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e000      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003402:	2302      	movs	r3, #2
  }
}
 8003404:	4618      	mov	r0, r3
 8003406:	3728      	adds	r7, #40	; 0x28
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	00010004 	.word	0x00010004

08003410 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	460b      	mov	r3, r1
 800341e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003420:	f7ff f8d6 	bl	80025d0 <HAL_GetTick>
 8003424:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003426:	2301      	movs	r3, #1
 8003428:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	f040 8111 	bne.w	800365a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2319      	movs	r3, #25
 800343e:	2201      	movs	r2, #1
 8003440:	4988      	ldr	r1, [pc, #544]	; (8003664 <HAL_I2C_IsDeviceReady+0x254>)
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fa62 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800344e:	2302      	movs	r3, #2
 8003450:	e104      	b.n	800365c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_I2C_IsDeviceReady+0x50>
 800345c:	2302      	movs	r3, #2
 800345e:	e0fd      	b.n	800365c <HAL_I2C_IsDeviceReady+0x24c>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b01      	cmp	r3, #1
 8003474:	d007      	beq.n	8003486 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003494:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2224      	movs	r2, #36	; 0x24
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a70      	ldr	r2, [pc, #448]	; (8003668 <HAL_I2C_IsDeviceReady+0x258>)
 80034a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fa20 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e0:	d103      	bne.n	80034ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0b6      	b.n	800365c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ee:	897b      	ldrh	r3, [r7, #10]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80034fe:	f7ff f867 	bl	80025d0 <HAL_GetTick>
 8003502:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b02      	cmp	r3, #2
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003532:	e025      	b.n	8003580 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003534:	f7ff f84c 	bl	80025d0 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d302      	bcc.n	800354a <HAL_I2C_IsDeviceReady+0x13a>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	22a0      	movs	r2, #160	; 0xa0
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b02      	cmp	r3, #2
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2ba0      	cmp	r3, #160	; 0xa0
 800358a:	d005      	beq.n	8003598 <HAL_I2C_IsDeviceReady+0x188>
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <HAL_I2C_IsDeviceReady+0x188>
 8003592:	7dbb      	ldrb	r3, [r7, #22]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0cd      	beq.n	8003534 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d129      	bne.n	8003602 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	2319      	movs	r3, #25
 80035da:	2201      	movs	r2, #1
 80035dc:	4921      	ldr	r1, [pc, #132]	; (8003664 <HAL_I2C_IsDeviceReady+0x254>)
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f994 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e036      	b.n	800365c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e02c      	b.n	800365c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003610:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800361a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	2319      	movs	r3, #25
 8003622:	2201      	movs	r2, #1
 8003624:	490f      	ldr	r1, [pc, #60]	; (8003664 <HAL_I2C_IsDeviceReady+0x254>)
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f970 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e012      	b.n	800365c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	3301      	adds	r3, #1
 800363a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	f4ff af32 	bcc.w	80034aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800365a:	2302      	movs	r3, #2
  }
}
 800365c:	4618      	mov	r0, r3
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	00100002 	.word	0x00100002
 8003668:	ffff0000 	.word	0xffff0000

0800366c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	460b      	mov	r3, r1
 800367a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d006      	beq.n	8003696 <I2C_MasterRequestWrite+0x2a>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d003      	beq.n	8003696 <I2C_MasterRequestWrite+0x2a>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003694:	d108      	bne.n	80036a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e00b      	b.n	80036c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	2b12      	cmp	r3, #18
 80036ae:	d107      	bne.n	80036c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f91d 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e6:	d103      	bne.n	80036f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e035      	b.n	8003760 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036fc:	d108      	bne.n	8003710 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036fe:	897b      	ldrh	r3, [r7, #10]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800370c:	611a      	str	r2, [r3, #16]
 800370e:	e01b      	b.n	8003748 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003710:	897b      	ldrh	r3, [r7, #10]
 8003712:	11db      	asrs	r3, r3, #7
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f003 0306 	and.w	r3, r3, #6
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f063 030f 	orn	r3, r3, #15
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	490e      	ldr	r1, [pc, #56]	; (8003768 <I2C_MasterRequestWrite+0xfc>)
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f943 	bl	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e010      	b.n	8003760 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800373e:	897b      	ldrh	r3, [r7, #10]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4907      	ldr	r1, [pc, #28]	; (800376c <I2C_MasterRequestWrite+0x100>)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f933 	bl	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	00010008 	.word	0x00010008
 800376c:	00010002 	.word	0x00010002

08003770 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	460b      	mov	r3, r1
 800377e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003794:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d006      	beq.n	80037aa <I2C_MasterRequestRead+0x3a>
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d003      	beq.n	80037aa <I2C_MasterRequestRead+0x3a>
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037a8:	d108      	bne.n	80037bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e00b      	b.n	80037d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	2b11      	cmp	r3, #17
 80037c2:	d107      	bne.n	80037d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f893 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00d      	beq.n	8003808 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fa:	d103      	bne.n	8003804 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e079      	b.n	80038fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003810:	d108      	bne.n	8003824 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	611a      	str	r2, [r3, #16]
 8003822:	e05f      	b.n	80038e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003824:	897b      	ldrh	r3, [r7, #10]
 8003826:	11db      	asrs	r3, r3, #7
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f003 0306 	and.w	r3, r3, #6
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f063 030f 	orn	r3, r3, #15
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4930      	ldr	r1, [pc, #192]	; (8003904 <I2C_MasterRequestRead+0x194>)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f8b9 	bl	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e054      	b.n	80038fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	b2da      	uxtb	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4929      	ldr	r1, [pc, #164]	; (8003908 <I2C_MasterRequestRead+0x198>)
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f8a9 	bl	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e044      	b.n	80038fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003896:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f831 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038be:	d103      	bne.n	80038c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e017      	b.n	80038fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038cc:	897b      	ldrh	r3, [r7, #10]
 80038ce:	11db      	asrs	r3, r3, #7
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	f003 0306 	and.w	r3, r3, #6
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f063 030e 	orn	r3, r3, #14
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4907      	ldr	r1, [pc, #28]	; (8003908 <I2C_MasterRequestRead+0x198>)
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f865 	bl	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	00010008 	.word	0x00010008
 8003908:	00010002 	.word	0x00010002

0800390c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800391c:	e025      	b.n	800396a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d021      	beq.n	800396a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fe fe53 	bl	80025d0 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d116      	bne.n	800396a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e023      	b.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	0c1b      	lsrs	r3, r3, #16
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	d10d      	bne.n	8003990 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	43da      	mvns	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4013      	ands	r3, r2
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	bf0c      	ite	eq
 8003986:	2301      	moveq	r3, #1
 8003988:	2300      	movne	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	e00c      	b.n	80039aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4013      	ands	r3, r2
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf0c      	ite	eq
 80039a2:	2301      	moveq	r3, #1
 80039a4:	2300      	movne	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d0b6      	beq.n	800391e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039c8:	e051      	b.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d8:	d123      	bne.n	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e046      	b.n	8003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d021      	beq.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2a:	f7fe fdd1 	bl	80025d0 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d302      	bcc.n	8003a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d116      	bne.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e020      	b.n	8003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d10c      	bne.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4013      	ands	r3, r2
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bf14      	ite	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	2300      	moveq	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	e00b      	b.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d18d      	bne.n	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ac4:	e02d      	b.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f8ce 	bl	8003c68 <I2C_IsAcknowledgeFailed>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e02d      	b.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d021      	beq.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7fe fd77 	bl	80025d0 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d116      	bne.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f043 0220 	orr.w	r2, r3, #32
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e007      	b.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d1ca      	bne.n	8003ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b46:	e02d      	b.n	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f88d 	bl	8003c68 <I2C_IsAcknowledgeFailed>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e02d      	b.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5e:	d021      	beq.n	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b60:	f7fe fd36 	bl	80025d0 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d302      	bcc.n	8003b76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d116      	bne.n	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e007      	b.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d1ca      	bne.n	8003b48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc8:	e042      	b.n	8003c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d119      	bne.n	8003c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0210 	mvn.w	r2, #16
 8003be0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e029      	b.n	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0c:	f7fe fce0 	bl	80025d0 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d302      	bcc.n	8003c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d116      	bne.n	8003c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e007      	b.n	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d1b5      	bne.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7e:	d11b      	bne.n	8003cb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f043 0204 	orr.w	r2, r3, #4
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e31d      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cd6:	4b94      	ldr	r3, [pc, #592]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ce0:	4b91      	ldr	r3, [pc, #580]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d07b      	beq.n	8003dee <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d006      	beq.n	8003d0a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	d10f      	bne.n	8003d22 <HAL_RCC_OscConfig+0x5e>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d10b      	bne.n	8003d22 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0a:	4b87      	ldr	r3, [pc, #540]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d06a      	beq.n	8003dec <HAL_RCC_OscConfig+0x128>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d166      	bne.n	8003dec <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e2f7      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d106      	bne.n	8003d38 <HAL_RCC_OscConfig+0x74>
 8003d2a:	4b7f      	ldr	r3, [pc, #508]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7e      	ldr	r2, [pc, #504]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e02d      	b.n	8003d94 <HAL_RCC_OscConfig+0xd0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10c      	bne.n	8003d5a <HAL_RCC_OscConfig+0x96>
 8003d40:	4b79      	ldr	r3, [pc, #484]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a78      	ldr	r2, [pc, #480]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b76      	ldr	r3, [pc, #472]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a75      	ldr	r2, [pc, #468]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	e01c      	b.n	8003d94 <HAL_RCC_OscConfig+0xd0>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0xb8>
 8003d62:	4b71      	ldr	r3, [pc, #452]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a70      	ldr	r2, [pc, #448]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	4b6e      	ldr	r3, [pc, #440]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a6d      	ldr	r2, [pc, #436]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0xd0>
 8003d7c:	4b6a      	ldr	r3, [pc, #424]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a69      	ldr	r2, [pc, #420]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b67      	ldr	r3, [pc, #412]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a66      	ldr	r2, [pc, #408]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d013      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fc18 	bl	80025d0 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fe fc14 	bl	80025d0 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e2ad      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003db6:	4b5c      	ldr	r3, [pc, #368]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0xe0>
 8003dc2:	e014      	b.n	8003dee <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fc04 	bl	80025d0 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fe fc00 	bl	80025d0 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e299      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dde:	4b52      	ldr	r3, [pc, #328]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x108>
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d05a      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d119      	bne.n	8003e3a <HAL_RCC_OscConfig+0x176>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d116      	bne.n	8003e3a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0c:	4b46      	ldr	r3, [pc, #280]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_OscConfig+0x160>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e276      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e24:	4b40      	ldr	r3, [pc, #256]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	493d      	ldr	r1, [pc, #244]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e38:	e03a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d020      	beq.n	8003e84 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e42:	4b3a      	ldr	r3, [pc, #232]	; (8003f2c <HAL_RCC_OscConfig+0x268>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fe fbc2 	bl	80025d0 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e50:	f7fe fbbe 	bl	80025d0 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e257      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e62:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6e:	4b2e      	ldr	r3, [pc, #184]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	492a      	ldr	r1, [pc, #168]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
 8003e82:	e015      	b.n	8003eb0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e84:	4b29      	ldr	r3, [pc, #164]	; (8003f2c <HAL_RCC_OscConfig+0x268>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8a:	f7fe fba1 	bl	80025d0 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e92:	f7fe fb9d 	bl	80025d0 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e236      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ea4:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80b8 	beq.w	800402e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d170      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ec4:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_OscConfig+0x218>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e21a      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1a      	ldr	r2, [r3, #32]
 8003ee0:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d921      	bls.n	8003f30 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fc4b 	bl	800478c <RCC_SetFlashLatencyFromMSIRange>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e208      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f00:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4906      	ldr	r1, [pc, #24]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	061b      	lsls	r3, r3, #24
 8003f20:	4901      	ldr	r1, [pc, #4]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]
 8003f26:	e020      	b.n	8003f6a <HAL_RCC_OscConfig+0x2a6>
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f30:	4ba4      	ldr	r3, [pc, #656]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	49a1      	ldr	r1, [pc, #644]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f42:	4ba0      	ldr	r3, [pc, #640]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	061b      	lsls	r3, r3, #24
 8003f50:	499c      	ldr	r1, [pc, #624]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fc16 	bl	800478c <RCC_SetFlashLatencyFromMSIRange>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e1d3      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	0b5b      	lsrs	r3, r3, #13
 8003f70:	3301      	adds	r3, #1
 8003f72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f7a:	4a92      	ldr	r2, [pc, #584]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003f7c:	6892      	ldr	r2, [r2, #8]
 8003f7e:	0912      	lsrs	r2, r2, #4
 8003f80:	f002 020f 	and.w	r2, r2, #15
 8003f84:	4990      	ldr	r1, [pc, #576]	; (80041c8 <HAL_RCC_OscConfig+0x504>)
 8003f86:	5c8a      	ldrb	r2, [r1, r2]
 8003f88:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f8a:	4a90      	ldr	r2, [pc, #576]	; (80041cc <HAL_RCC_OscConfig+0x508>)
 8003f8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f8e:	4b90      	ldr	r3, [pc, #576]	; (80041d0 <HAL_RCC_OscConfig+0x50c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fad0 	bl	8002538 <HAL_InitTick>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d045      	beq.n	800402e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	e1b5      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d029      	beq.n	8004002 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fae:	4b89      	ldr	r3, [pc, #548]	; (80041d4 <HAL_RCC_OscConfig+0x510>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe fb0c 	bl	80025d0 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fbc:	f7fe fb08 	bl	80025d0 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e1a1      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003fce:	4b7d      	ldr	r3, [pc, #500]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fda:	4b7a      	ldr	r3, [pc, #488]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4977      	ldr	r1, [pc, #476]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fec:	4b75      	ldr	r3, [pc, #468]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	4972      	ldr	r1, [pc, #456]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004002:	4b74      	ldr	r3, [pc, #464]	; (80041d4 <HAL_RCC_OscConfig+0x510>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fe fae2 	bl	80025d0 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004010:	f7fe fade 	bl	80025d0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e177      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004022:	4b68      	ldr	r3, [pc, #416]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d030      	beq.n	800409c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	4b65      	ldr	r3, [pc, #404]	; (80041d8 <HAL_RCC_OscConfig+0x514>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004048:	f7fe fac2 	bl	80025d0 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004050:	f7fe fabe 	bl	80025d0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e157      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004062:	4b58      	ldr	r3, [pc, #352]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x38c>
 800406e:	e015      	b.n	800409c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCC_OscConfig+0x514>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7fe faab 	bl	80025d0 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800407e:	f7fe faa7 	bl	80025d0 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e140      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004090:	4b4c      	ldr	r3, [pc, #304]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1f0      	bne.n	800407e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80b5 	beq.w	8004214 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040aa:	2300      	movs	r3, #0
 80040ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ae:	4b45      	ldr	r3, [pc, #276]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	4a41      	ldr	r2, [pc, #260]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6253      	str	r3, [r2, #36]	; 0x24
 80040c6:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d2:	2301      	movs	r3, #1
 80040d4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d6:	4b41      	ldr	r3, [pc, #260]	; (80041dc <HAL_RCC_OscConfig+0x518>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d118      	bne.n	8004114 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e2:	4b3e      	ldr	r3, [pc, #248]	; (80041dc <HAL_RCC_OscConfig+0x518>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a3d      	ldr	r2, [pc, #244]	; (80041dc <HAL_RCC_OscConfig+0x518>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ee:	f7fe fa6f 	bl	80025d0 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f6:	f7fe fa6b 	bl	80025d0 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b64      	cmp	r3, #100	; 0x64
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e104      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004108:	4b34      	ldr	r3, [pc, #208]	; (80041dc <HAL_RCC_OscConfig+0x518>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d106      	bne.n	800412a <HAL_RCC_OscConfig+0x466>
 800411c:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 800411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004120:	4a28      	ldr	r2, [pc, #160]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004126:	6353      	str	r3, [r2, #52]	; 0x34
 8004128:	e02d      	b.n	8004186 <HAL_RCC_OscConfig+0x4c2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10c      	bne.n	800414c <HAL_RCC_OscConfig+0x488>
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	4a23      	ldr	r2, [pc, #140]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800413c:	6353      	str	r3, [r2, #52]	; 0x34
 800413e:	4b21      	ldr	r3, [pc, #132]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004142:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004148:	6353      	str	r3, [r2, #52]	; 0x34
 800414a:	e01c      	b.n	8004186 <HAL_RCC_OscConfig+0x4c2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b05      	cmp	r3, #5
 8004152:	d10c      	bne.n	800416e <HAL_RCC_OscConfig+0x4aa>
 8004154:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004158:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 800415a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800415e:	6353      	str	r3, [r2, #52]	; 0x34
 8004160:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	4a17      	ldr	r2, [pc, #92]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416a:	6353      	str	r3, [r2, #52]	; 0x34
 800416c:	e00b      	b.n	8004186 <HAL_RCC_OscConfig+0x4c2>
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004172:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004178:	6353      	str	r3, [r2, #52]	; 0x34
 800417a:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	4a11      	ldr	r2, [pc, #68]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004184:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d015      	beq.n	80041ba <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418e:	f7fe fa1f 	bl	80025d0 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004194:	e00a      	b.n	80041ac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7fe fa1b 	bl	80025d0 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e0b2      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ee      	beq.n	8004196 <HAL_RCC_OscConfig+0x4d2>
 80041b8:	e023      	b.n	8004202 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ba:	f7fe fa09 	bl	80025d0 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041c0:	e019      	b.n	80041f6 <HAL_RCC_OscConfig+0x532>
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800
 80041c8:	080089e8 	.word	0x080089e8
 80041cc:	20000004 	.word	0x20000004
 80041d0:	20000008 	.word	0x20000008
 80041d4:	42470020 	.word	0x42470020
 80041d8:	42470680 	.word	0x42470680
 80041dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e0:	f7fe f9f6 	bl	80025d0 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e08d      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041f6:	4b49      	ldr	r3, [pc, #292]	; (800431c <HAL_RCC_OscConfig+0x658>)
 80041f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1ee      	bne.n	80041e0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004202:	7ffb      	ldrb	r3, [r7, #31]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004208:	4b44      	ldr	r3, [pc, #272]	; (800431c <HAL_RCC_OscConfig+0x658>)
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	4a43      	ldr	r2, [pc, #268]	; (800431c <HAL_RCC_OscConfig+0x658>)
 800420e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004212:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d079      	beq.n	8004310 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d056      	beq.n	80042d0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	2b02      	cmp	r3, #2
 8004228:	d13b      	bne.n	80042a2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422a:	4b3d      	ldr	r3, [pc, #244]	; (8004320 <HAL_RCC_OscConfig+0x65c>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004230:	f7fe f9ce 	bl	80025d0 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004238:	f7fe f9ca 	bl	80025d0 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e063      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800424a:	4b34      	ldr	r3, [pc, #208]	; (800431c <HAL_RCC_OscConfig+0x658>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004256:	4b31      	ldr	r3, [pc, #196]	; (800431c <HAL_RCC_OscConfig+0x658>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	4319      	orrs	r1, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	430b      	orrs	r3, r1
 800426e:	492b      	ldr	r1, [pc, #172]	; (800431c <HAL_RCC_OscConfig+0x658>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004274:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <HAL_RCC_OscConfig+0x65c>)
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427a:	f7fe f9a9 	bl	80025d0 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004282:	f7fe f9a5 	bl	80025d0 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e03e      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004294:	4b21      	ldr	r3, [pc, #132]	; (800431c <HAL_RCC_OscConfig+0x658>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCC_OscConfig+0x5be>
 80042a0:	e036      	b.n	8004310 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a2:	4b1f      	ldr	r3, [pc, #124]	; (8004320 <HAL_RCC_OscConfig+0x65c>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7fe f992 	bl	80025d0 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b0:	f7fe f98e 	bl	80025d0 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e027      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042c2:	4b16      	ldr	r3, [pc, #88]	; (800431c <HAL_RCC_OscConfig+0x658>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x5ec>
 80042ce:	e01f      	b.n	8004310 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e01a      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <HAL_RCC_OscConfig+0x658>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d10d      	bne.n	800430c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d106      	bne.n	800430c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	42470060 	.word	0x42470060

08004324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e11a      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004338:	4b8f      	ldr	r3, [pc, #572]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d919      	bls.n	800437a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d105      	bne.n	8004358 <HAL_RCC_ClockConfig+0x34>
 800434c:	4b8a      	ldr	r3, [pc, #552]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a89      	ldr	r2, [pc, #548]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 8004352:	f043 0304 	orr.w	r3, r3, #4
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b87      	ldr	r3, [pc, #540]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f023 0201 	bic.w	r2, r3, #1
 8004360:	4985      	ldr	r1, [pc, #532]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	4313      	orrs	r3, r2
 8004366:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004368:	4b83      	ldr	r3, [pc, #524]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d001      	beq.n	800437a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0f9      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004386:	4b7d      	ldr	r3, [pc, #500]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	497a      	ldr	r1, [pc, #488]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004394:	4313      	orrs	r3, r2
 8004396:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 808e 	beq.w	80044c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043ae:	4b73      	ldr	r3, [pc, #460]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d121      	bne.n	80043fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e0d7      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043c6:	4b6d      	ldr	r3, [pc, #436]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d115      	bne.n	80043fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e0cb      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043de:	4b67      	ldr	r3, [pc, #412]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0bf      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043ee:	4b63      	ldr	r3, [pc, #396]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e0b7      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043fe:	4b5f      	ldr	r3, [pc, #380]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	495c      	ldr	r1, [pc, #368]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 800440c:	4313      	orrs	r3, r2
 800440e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004410:	f7fe f8de 	bl	80025d0 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d112      	bne.n	8004444 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800441e:	e00a      	b.n	8004436 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004420:	f7fe f8d6 	bl	80025d0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e09b      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004436:	4b51      	ldr	r3, [pc, #324]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b08      	cmp	r3, #8
 8004440:	d1ee      	bne.n	8004420 <HAL_RCC_ClockConfig+0xfc>
 8004442:	e03e      	b.n	80044c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d112      	bne.n	8004472 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444e:	f7fe f8bf 	bl	80025d0 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e084      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004464:	4b45      	ldr	r3, [pc, #276]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b0c      	cmp	r3, #12
 800446e:	d1ee      	bne.n	800444e <HAL_RCC_ClockConfig+0x12a>
 8004470:	e027      	b.n	80044c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d11d      	bne.n	80044b6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800447a:	e00a      	b.n	8004492 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800447c:	f7fe f8a8 	bl	80025d0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	; 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e06d      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004492:	4b3a      	ldr	r3, [pc, #232]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d1ee      	bne.n	800447c <HAL_RCC_ClockConfig+0x158>
 800449e:	e010      	b.n	80044c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fe f896 	bl	80025d0 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e05b      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80044b6:	4b31      	ldr	r3, [pc, #196]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1ee      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044c2:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d219      	bcs.n	8004504 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x1be>
 80044d6:	4b28      	ldr	r3, [pc, #160]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a27      	ldr	r2, [pc, #156]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b25      	ldr	r3, [pc, #148]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 0201 	bic.w	r2, r3, #1
 80044ea:	4923      	ldr	r1, [pc, #140]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f2:	4b21      	ldr	r3, [pc, #132]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d001      	beq.n	8004504 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e034      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004510:	4b1a      	ldr	r3, [pc, #104]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4917      	ldr	r1, [pc, #92]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 800451e:	4313      	orrs	r3, r2
 8004520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800452e:	4b13      	ldr	r3, [pc, #76]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	490f      	ldr	r1, [pc, #60]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 800453e:	4313      	orrs	r3, r2
 8004540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004542:	f000 f823 	bl	800458c <HAL_RCC_GetSysClockFreq>
 8004546:	4602      	mov	r2, r0
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	091b      	lsrs	r3, r3, #4
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	490b      	ldr	r1, [pc, #44]	; (8004580 <HAL_RCC_ClockConfig+0x25c>)
 8004554:	5ccb      	ldrb	r3, [r1, r3]
 8004556:	fa22 f303 	lsr.w	r3, r2, r3
 800455a:	4a0a      	ldr	r2, [pc, #40]	; (8004584 <HAL_RCC_ClockConfig+0x260>)
 800455c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <HAL_RCC_ClockConfig+0x264>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7fd ffe8 	bl	8002538 <HAL_InitTick>
 8004568:	4603      	mov	r3, r0
 800456a:	72fb      	strb	r3, [r7, #11]

  return status;
 800456c:	7afb      	ldrb	r3, [r7, #11]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40023c00 	.word	0x40023c00
 800457c:	40023800 	.word	0x40023800
 8004580:	080089e8 	.word	0x080089e8
 8004584:	20000004 	.word	0x20000004
 8004588:	20000008 	.word	0x20000008

0800458c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800458c:	b5b0      	push	{r4, r5, r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004592:	4b61      	ldr	r3, [pc, #388]	; (8004718 <HAL_RCC_GetSysClockFreq+0x18c>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	d00d      	beq.n	80045be <HAL_RCC_GetSysClockFreq+0x32>
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	f200 80a4 	bhi.w	80046f0 <HAL_RCC_GetSysClockFreq+0x164>
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d002      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0x26>
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d003      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x2c>
 80045b0:	e09e      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045b2:	4b5a      	ldr	r3, [pc, #360]	; (800471c <HAL_RCC_GetSysClockFreq+0x190>)
 80045b4:	613b      	str	r3, [r7, #16]
      break;
 80045b6:	e0a9      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045b8:	4b59      	ldr	r3, [pc, #356]	; (8004720 <HAL_RCC_GetSysClockFreq+0x194>)
 80045ba:	613b      	str	r3, [r7, #16]
      break;
 80045bc:	e0a6      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	0c9b      	lsrs	r3, r3, #18
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	4a57      	ldr	r2, [pc, #348]	; (8004724 <HAL_RCC_GetSysClockFreq+0x198>)
 80045c8:	5cd3      	ldrb	r3, [r2, r3]
 80045ca:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	0d9b      	lsrs	r3, r3, #22
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	3301      	adds	r3, #1
 80045d6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045d8:	4b4f      	ldr	r3, [pc, #316]	; (8004718 <HAL_RCC_GetSysClockFreq+0x18c>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d041      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	461c      	mov	r4, r3
 80045e8:	f04f 0500 	mov.w	r5, #0
 80045ec:	4620      	mov	r0, r4
 80045ee:	4629      	mov	r1, r5
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	014b      	lsls	r3, r1, #5
 80045fa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045fe:	0142      	lsls	r2, r0, #5
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	1b00      	subs	r0, r0, r4
 8004606:	eb61 0105 	sbc.w	r1, r1, r5
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	018b      	lsls	r3, r1, #6
 8004614:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004618:	0182      	lsls	r2, r0, #6
 800461a:	1a12      	subs	r2, r2, r0
 800461c:	eb63 0301 	sbc.w	r3, r3, r1
 8004620:	f04f 0000 	mov.w	r0, #0
 8004624:	f04f 0100 	mov.w	r1, #0
 8004628:	00d9      	lsls	r1, r3, #3
 800462a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800462e:	00d0      	lsls	r0, r2, #3
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	1912      	adds	r2, r2, r4
 8004636:	eb45 0303 	adc.w	r3, r5, r3
 800463a:	f04f 0000 	mov.w	r0, #0
 800463e:	f04f 0100 	mov.w	r1, #0
 8004642:	0259      	lsls	r1, r3, #9
 8004644:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004648:	0250      	lsls	r0, r2, #9
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4610      	mov	r0, r2
 8004650:	4619      	mov	r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	461a      	mov	r2, r3
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	f7fc fc65 	bl	8000f28 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4613      	mov	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e040      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	461c      	mov	r4, r3
 800466c:	f04f 0500 	mov.w	r5, #0
 8004670:	4620      	mov	r0, r4
 8004672:	4629      	mov	r1, r5
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	014b      	lsls	r3, r1, #5
 800467e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004682:	0142      	lsls	r2, r0, #5
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	1b00      	subs	r0, r0, r4
 800468a:	eb61 0105 	sbc.w	r1, r1, r5
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	018b      	lsls	r3, r1, #6
 8004698:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800469c:	0182      	lsls	r2, r0, #6
 800469e:	1a12      	subs	r2, r2, r0
 80046a0:	eb63 0301 	sbc.w	r3, r3, r1
 80046a4:	f04f 0000 	mov.w	r0, #0
 80046a8:	f04f 0100 	mov.w	r1, #0
 80046ac:	00d9      	lsls	r1, r3, #3
 80046ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046b2:	00d0      	lsls	r0, r2, #3
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	1912      	adds	r2, r2, r4
 80046ba:	eb45 0303 	adc.w	r3, r5, r3
 80046be:	f04f 0000 	mov.w	r0, #0
 80046c2:	f04f 0100 	mov.w	r1, #0
 80046c6:	0299      	lsls	r1, r3, #10
 80046c8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046cc:	0290      	lsls	r0, r2, #10
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4610      	mov	r0, r2
 80046d4:	4619      	mov	r1, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	461a      	mov	r2, r3
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	f7fc fc23 	bl	8000f28 <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4613      	mov	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	613b      	str	r3, [r7, #16]
      break;
 80046ee:	e00d      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <HAL_RCC_GetSysClockFreq+0x18c>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	0b5b      	lsrs	r3, r3, #13
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	3301      	adds	r3, #1
 8004700:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	613b      	str	r3, [r7, #16]
      break;
 800470a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470c:	693b      	ldr	r3, [r7, #16]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bdb0      	pop	{r4, r5, r7, pc}
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
 800471c:	00f42400 	.word	0x00f42400
 8004720:	007a1200 	.word	0x007a1200
 8004724:	080089dc 	.word	0x080089dc

08004728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800472c:	4b02      	ldr	r3, [pc, #8]	; (8004738 <HAL_RCC_GetHCLKFreq+0x10>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr
 8004738:	20000004 	.word	0x20000004

0800473c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004740:	f7ff fff2 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004744:	4602      	mov	r2, r0
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	0a1b      	lsrs	r3, r3, #8
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	4903      	ldr	r1, [pc, #12]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004752:	5ccb      	ldrb	r3, [r1, r3]
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40023800 	.word	0x40023800
 8004760:	080089f8 	.word	0x080089f8

08004764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004768:	f7ff ffde 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 800476c:	4602      	mov	r2, r0
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	0adb      	lsrs	r3, r3, #11
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	4903      	ldr	r1, [pc, #12]	; (8004788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800477a:	5ccb      	ldrb	r3, [r1, r3]
 800477c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004780:	4618      	mov	r0, r3
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40023800 	.word	0x40023800
 8004788:	080089f8 	.word	0x080089f8

0800478c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004794:	2300      	movs	r3, #0
 8004796:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004798:	4b29      	ldr	r3, [pc, #164]	; (8004840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d12c      	bne.n	80047fe <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047a4:	4b26      	ldr	r3, [pc, #152]	; (8004840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80047b0:	4b24      	ldr	r3, [pc, #144]	; (8004844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e016      	b.n	80047ea <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047bc:	4b20      	ldr	r3, [pc, #128]	; (8004840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	4a1f      	ldr	r2, [pc, #124]	; (8004840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c6:	6253      	str	r3, [r2, #36]	; 0x24
 80047c8:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80047dc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	4a17      	ldr	r2, [pc, #92]	; (8004840 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80047f0:	d105      	bne.n	80047fe <RCC_SetFlashLatencyFromMSIRange+0x72>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047f8:	d101      	bne.n	80047fe <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80047fa:	2301      	movs	r3, #1
 80047fc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d105      	bne.n	8004810 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004804:	4b10      	ldr	r3, [pc, #64]	; (8004848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a0f      	ldr	r2, [pc, #60]	; (8004848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800480a:	f043 0304 	orr.w	r3, r3, #4
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f023 0201 	bic.w	r2, r3, #1
 8004818:	490b      	ldr	r1, [pc, #44]	; (8004848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	429a      	cmp	r2, r3
 800482c:	d001      	beq.n	8004832 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40023800 	.word	0x40023800
 8004844:	40007000 	.word	0x40007000
 8004848:	40023c00 	.word	0x40023c00

0800484c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e03f      	b.n	80048de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fd fdac 	bl	80023d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2224      	movs	r2, #36	; 0x24
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800488e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f905 	bl	8004aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b08a      	sub	sp, #40	; 0x28
 80048ea:	af02      	add	r7, sp, #8
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b20      	cmp	r3, #32
 8004904:	d17c      	bne.n	8004a00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_UART_Transmit+0x2c>
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e075      	b.n	8004a02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_UART_Transmit+0x3e>
 8004920:	2302      	movs	r3, #2
 8004922:	e06e      	b.n	8004a02 <HAL_UART_Transmit+0x11c>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2221      	movs	r2, #33	; 0x21
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800493a:	f7fd fe49 	bl	80025d0 <HAL_GetTick>
 800493e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	88fa      	ldrh	r2, [r7, #6]
 800494a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004954:	d108      	bne.n	8004968 <HAL_UART_Transmit+0x82>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d104      	bne.n	8004968 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	e003      	b.n	8004970 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004978:	e02a      	b.n	80049d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2200      	movs	r2, #0
 8004982:	2180      	movs	r1, #128	; 0x80
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f840 	bl	8004a0a <UART_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e036      	b.n	8004a02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	3302      	adds	r3, #2
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	e007      	b.n	80049c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	781a      	ldrb	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	3301      	adds	r3, #1
 80049c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1cf      	bne.n	800497a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2140      	movs	r1, #64	; 0x40
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f810 	bl	8004a0a <UART_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e006      	b.n	8004a02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	e000      	b.n	8004a02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a00:	2302      	movs	r3, #2
  }
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	4613      	mov	r3, r2
 8004a18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1a:	e02c      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a22:	d028      	beq.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a2a:	f7fd fdd1 	bl	80025d0 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d21d      	bcs.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a48:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0201 	bic.w	r2, r2, #1
 8004a58:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e00f      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d0c3      	beq.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ae0:	f023 030c 	bic.w	r3, r3, #12
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	430b      	orrs	r3, r1
 8004aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699a      	ldr	r2, [r3, #24]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a55      	ldr	r2, [pc, #340]	; (8004c60 <UART_SetConfig+0x1c0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d103      	bne.n	8004b16 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b0e:	f7ff fe29 	bl	8004764 <HAL_RCC_GetPCLK2Freq>
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	e002      	b.n	8004b1c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b16:	f7ff fe11 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 8004b1a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b24:	d14c      	bne.n	8004bc0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009a      	lsls	r2, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3c:	4a49      	ldr	r2, [pc, #292]	; (8004c64 <UART_SetConfig+0x1c4>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	0119      	lsls	r1, r3, #4
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009a      	lsls	r2, r3, #2
 8004b50:	441a      	add	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b5c:	4b41      	ldr	r3, [pc, #260]	; (8004c64 <UART_SetConfig+0x1c4>)
 8004b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	2064      	movs	r0, #100	; 0x64
 8004b66:	fb00 f303 	mul.w	r3, r0, r3
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	3332      	adds	r3, #50	; 0x32
 8004b70:	4a3c      	ldr	r2, [pc, #240]	; (8004c64 <UART_SetConfig+0x1c4>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b7e:	4419      	add	r1, r3
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009a      	lsls	r2, r3, #2
 8004b8a:	441a      	add	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b96:	4b33      	ldr	r3, [pc, #204]	; (8004c64 <UART_SetConfig+0x1c4>)
 8004b98:	fba3 0302 	umull	r0, r3, r3, r2
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	2064      	movs	r0, #100	; 0x64
 8004ba0:	fb00 f303 	mul.w	r3, r0, r3
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	3332      	adds	r3, #50	; 0x32
 8004baa:	4a2e      	ldr	r2, [pc, #184]	; (8004c64 <UART_SetConfig+0x1c4>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	f003 0207 	and.w	r2, r3, #7
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	440a      	add	r2, r1
 8004bbc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bbe:	e04a      	b.n	8004c56 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009a      	lsls	r2, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	4a23      	ldr	r2, [pc, #140]	; (8004c64 <UART_SetConfig+0x1c4>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	0119      	lsls	r1, r3, #4
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	009a      	lsls	r2, r3, #2
 8004bea:	441a      	add	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bf6:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <UART_SetConfig+0x1c4>)
 8004bf8:	fba3 0302 	umull	r0, r3, r3, r2
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	2064      	movs	r0, #100	; 0x64
 8004c00:	fb00 f303 	mul.w	r3, r0, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	3332      	adds	r3, #50	; 0x32
 8004c0a:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <UART_SetConfig+0x1c4>)
 8004c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c16:	4419      	add	r1, r3
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	009a      	lsls	r2, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <UART_SetConfig+0x1c4>)
 8004c30:	fba3 0302 	umull	r0, r3, r3, r2
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	2064      	movs	r0, #100	; 0x64
 8004c38:	fb00 f303 	mul.w	r3, r0, r3
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	3332      	adds	r3, #50	; 0x32
 8004c42:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <UART_SetConfig+0x1c4>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	f003 020f 	and.w	r2, r3, #15
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	440a      	add	r2, r1
 8004c54:	609a      	str	r2, [r3, #8]
}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40013800 	.word	0x40013800
 8004c64:	51eb851f 	.word	0x51eb851f

08004c68 <__errno>:
 8004c68:	4b01      	ldr	r3, [pc, #4]	; (8004c70 <__errno+0x8>)
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20000010 	.word	0x20000010

08004c74 <__libc_init_array>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	2600      	movs	r6, #0
 8004c78:	4d0c      	ldr	r5, [pc, #48]	; (8004cac <__libc_init_array+0x38>)
 8004c7a:	4c0d      	ldr	r4, [pc, #52]	; (8004cb0 <__libc_init_array+0x3c>)
 8004c7c:	1b64      	subs	r4, r4, r5
 8004c7e:	10a4      	asrs	r4, r4, #2
 8004c80:	42a6      	cmp	r6, r4
 8004c82:	d109      	bne.n	8004c98 <__libc_init_array+0x24>
 8004c84:	f003 fe56 	bl	8008934 <_init>
 8004c88:	2600      	movs	r6, #0
 8004c8a:	4d0a      	ldr	r5, [pc, #40]	; (8004cb4 <__libc_init_array+0x40>)
 8004c8c:	4c0a      	ldr	r4, [pc, #40]	; (8004cb8 <__libc_init_array+0x44>)
 8004c8e:	1b64      	subs	r4, r4, r5
 8004c90:	10a4      	asrs	r4, r4, #2
 8004c92:	42a6      	cmp	r6, r4
 8004c94:	d105      	bne.n	8004ca2 <__libc_init_array+0x2e>
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9c:	4798      	blx	r3
 8004c9e:	3601      	adds	r6, #1
 8004ca0:	e7ee      	b.n	8004c80 <__libc_init_array+0xc>
 8004ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca6:	4798      	blx	r3
 8004ca8:	3601      	adds	r6, #1
 8004caa:	e7f2      	b.n	8004c92 <__libc_init_array+0x1e>
 8004cac:	08008e30 	.word	0x08008e30
 8004cb0:	08008e30 	.word	0x08008e30
 8004cb4:	08008e30 	.word	0x08008e30
 8004cb8:	08008e34 	.word	0x08008e34

08004cbc <memcpy>:
 8004cbc:	440a      	add	r2, r1
 8004cbe:	4291      	cmp	r1, r2
 8004cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cc4:	d100      	bne.n	8004cc8 <memcpy+0xc>
 8004cc6:	4770      	bx	lr
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cce:	4291      	cmp	r1, r2
 8004cd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cd4:	d1f9      	bne.n	8004cca <memcpy+0xe>
 8004cd6:	bd10      	pop	{r4, pc}

08004cd8 <memset>:
 8004cd8:	4603      	mov	r3, r0
 8004cda:	4402      	add	r2, r0
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d100      	bne.n	8004ce2 <memset+0xa>
 8004ce0:	4770      	bx	lr
 8004ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce6:	e7f9      	b.n	8004cdc <memset+0x4>

08004ce8 <__cvt>:
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cee:	461f      	mov	r7, r3
 8004cf0:	bfbb      	ittet	lt
 8004cf2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004cf6:	461f      	movlt	r7, r3
 8004cf8:	2300      	movge	r3, #0
 8004cfa:	232d      	movlt	r3, #45	; 0x2d
 8004cfc:	b088      	sub	sp, #32
 8004cfe:	4614      	mov	r4, r2
 8004d00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d02:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d04:	7013      	strb	r3, [r2, #0]
 8004d06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d08:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d0c:	f023 0820 	bic.w	r8, r3, #32
 8004d10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d14:	d005      	beq.n	8004d22 <__cvt+0x3a>
 8004d16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d1a:	d100      	bne.n	8004d1e <__cvt+0x36>
 8004d1c:	3501      	adds	r5, #1
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e000      	b.n	8004d24 <__cvt+0x3c>
 8004d22:	2303      	movs	r3, #3
 8004d24:	aa07      	add	r2, sp, #28
 8004d26:	9204      	str	r2, [sp, #16]
 8004d28:	aa06      	add	r2, sp, #24
 8004d2a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d2e:	e9cd 3500 	strd	r3, r5, [sp]
 8004d32:	4622      	mov	r2, r4
 8004d34:	463b      	mov	r3, r7
 8004d36:	f000 fcf3 	bl	8005720 <_dtoa_r>
 8004d3a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d3e:	4606      	mov	r6, r0
 8004d40:	d102      	bne.n	8004d48 <__cvt+0x60>
 8004d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d44:	07db      	lsls	r3, r3, #31
 8004d46:	d522      	bpl.n	8004d8e <__cvt+0xa6>
 8004d48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d4c:	eb06 0905 	add.w	r9, r6, r5
 8004d50:	d110      	bne.n	8004d74 <__cvt+0x8c>
 8004d52:	7833      	ldrb	r3, [r6, #0]
 8004d54:	2b30      	cmp	r3, #48	; 0x30
 8004d56:	d10a      	bne.n	8004d6e <__cvt+0x86>
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	4639      	mov	r1, r7
 8004d60:	f7fb feee 	bl	8000b40 <__aeabi_dcmpeq>
 8004d64:	b918      	cbnz	r0, 8004d6e <__cvt+0x86>
 8004d66:	f1c5 0501 	rsb	r5, r5, #1
 8004d6a:	f8ca 5000 	str.w	r5, [sl]
 8004d6e:	f8da 3000 	ldr.w	r3, [sl]
 8004d72:	4499      	add	r9, r3
 8004d74:	2200      	movs	r2, #0
 8004d76:	2300      	movs	r3, #0
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4639      	mov	r1, r7
 8004d7c:	f7fb fee0 	bl	8000b40 <__aeabi_dcmpeq>
 8004d80:	b108      	cbz	r0, 8004d86 <__cvt+0x9e>
 8004d82:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d86:	2230      	movs	r2, #48	; 0x30
 8004d88:	9b07      	ldr	r3, [sp, #28]
 8004d8a:	454b      	cmp	r3, r9
 8004d8c:	d307      	bcc.n	8004d9e <__cvt+0xb6>
 8004d8e:	4630      	mov	r0, r6
 8004d90:	9b07      	ldr	r3, [sp, #28]
 8004d92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d94:	1b9b      	subs	r3, r3, r6
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	b008      	add	sp, #32
 8004d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d9e:	1c59      	adds	r1, r3, #1
 8004da0:	9107      	str	r1, [sp, #28]
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	e7f0      	b.n	8004d88 <__cvt+0xa0>

08004da6 <__exponent>:
 8004da6:	4603      	mov	r3, r0
 8004da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004daa:	2900      	cmp	r1, #0
 8004dac:	f803 2b02 	strb.w	r2, [r3], #2
 8004db0:	bfb6      	itet	lt
 8004db2:	222d      	movlt	r2, #45	; 0x2d
 8004db4:	222b      	movge	r2, #43	; 0x2b
 8004db6:	4249      	neglt	r1, r1
 8004db8:	2909      	cmp	r1, #9
 8004dba:	7042      	strb	r2, [r0, #1]
 8004dbc:	dd2b      	ble.n	8004e16 <__exponent+0x70>
 8004dbe:	f10d 0407 	add.w	r4, sp, #7
 8004dc2:	46a4      	mov	ip, r4
 8004dc4:	270a      	movs	r7, #10
 8004dc6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004dca:	460a      	mov	r2, r1
 8004dcc:	46a6      	mov	lr, r4
 8004dce:	fb07 1516 	mls	r5, r7, r6, r1
 8004dd2:	2a63      	cmp	r2, #99	; 0x63
 8004dd4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004dd8:	4631      	mov	r1, r6
 8004dda:	f104 34ff 	add.w	r4, r4, #4294967295
 8004dde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004de2:	dcf0      	bgt.n	8004dc6 <__exponent+0x20>
 8004de4:	3130      	adds	r1, #48	; 0x30
 8004de6:	f1ae 0502 	sub.w	r5, lr, #2
 8004dea:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004dee:	4629      	mov	r1, r5
 8004df0:	1c44      	adds	r4, r0, #1
 8004df2:	4561      	cmp	r1, ip
 8004df4:	d30a      	bcc.n	8004e0c <__exponent+0x66>
 8004df6:	f10d 0209 	add.w	r2, sp, #9
 8004dfa:	eba2 020e 	sub.w	r2, r2, lr
 8004dfe:	4565      	cmp	r5, ip
 8004e00:	bf88      	it	hi
 8004e02:	2200      	movhi	r2, #0
 8004e04:	4413      	add	r3, r2
 8004e06:	1a18      	subs	r0, r3, r0
 8004e08:	b003      	add	sp, #12
 8004e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e10:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e14:	e7ed      	b.n	8004df2 <__exponent+0x4c>
 8004e16:	2330      	movs	r3, #48	; 0x30
 8004e18:	3130      	adds	r1, #48	; 0x30
 8004e1a:	7083      	strb	r3, [r0, #2]
 8004e1c:	70c1      	strb	r1, [r0, #3]
 8004e1e:	1d03      	adds	r3, r0, #4
 8004e20:	e7f1      	b.n	8004e06 <__exponent+0x60>
	...

08004e24 <_printf_float>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	b091      	sub	sp, #68	; 0x44
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004e30:	4616      	mov	r6, r2
 8004e32:	461f      	mov	r7, r3
 8004e34:	4605      	mov	r5, r0
 8004e36:	f001 fa61 	bl	80062fc <_localeconv_r>
 8004e3a:	6803      	ldr	r3, [r0, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e40:	f7fb f99e 	bl	8000180 <strlen>
 8004e44:	2300      	movs	r3, #0
 8004e46:	930e      	str	r3, [sp, #56]	; 0x38
 8004e48:	f8d8 3000 	ldr.w	r3, [r8]
 8004e4c:	900a      	str	r0, [sp, #40]	; 0x28
 8004e4e:	3307      	adds	r3, #7
 8004e50:	f023 0307 	bic.w	r3, r3, #7
 8004e54:	f103 0208 	add.w	r2, r3, #8
 8004e58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e5c:	f8d4 b000 	ldr.w	fp, [r4]
 8004e60:	f8c8 2000 	str.w	r2, [r8]
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e6c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004e70:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e74:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e76:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	4b9c      	ldr	r3, [pc, #624]	; (80050f0 <_printf_float+0x2cc>)
 8004e7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e80:	f7fb fe90 	bl	8000ba4 <__aeabi_dcmpun>
 8004e84:	bb70      	cbnz	r0, 8004ee4 <_printf_float+0xc0>
 8004e86:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	4b98      	ldr	r3, [pc, #608]	; (80050f0 <_printf_float+0x2cc>)
 8004e8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e90:	f7fb fe6a 	bl	8000b68 <__aeabi_dcmple>
 8004e94:	bb30      	cbnz	r0, 8004ee4 <_printf_float+0xc0>
 8004e96:	2200      	movs	r2, #0
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	4651      	mov	r1, sl
 8004e9e:	f7fb fe59 	bl	8000b54 <__aeabi_dcmplt>
 8004ea2:	b110      	cbz	r0, 8004eaa <_printf_float+0x86>
 8004ea4:	232d      	movs	r3, #45	; 0x2d
 8004ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eaa:	4b92      	ldr	r3, [pc, #584]	; (80050f4 <_printf_float+0x2d0>)
 8004eac:	4892      	ldr	r0, [pc, #584]	; (80050f8 <_printf_float+0x2d4>)
 8004eae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004eb2:	bf94      	ite	ls
 8004eb4:	4698      	movls	r8, r3
 8004eb6:	4680      	movhi	r8, r0
 8004eb8:	2303      	movs	r3, #3
 8004eba:	f04f 0a00 	mov.w	sl, #0
 8004ebe:	6123      	str	r3, [r4, #16]
 8004ec0:	f02b 0304 	bic.w	r3, fp, #4
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	4633      	mov	r3, r6
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4628      	mov	r0, r5
 8004ecc:	9700      	str	r7, [sp, #0]
 8004ece:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ed0:	f000 f9d4 	bl	800527c <_printf_common>
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	f040 8090 	bne.w	8004ffa <_printf_float+0x1d6>
 8004eda:	f04f 30ff 	mov.w	r0, #4294967295
 8004ede:	b011      	add	sp, #68	; 0x44
 8004ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	4653      	mov	r3, sl
 8004ee8:	4640      	mov	r0, r8
 8004eea:	4651      	mov	r1, sl
 8004eec:	f7fb fe5a 	bl	8000ba4 <__aeabi_dcmpun>
 8004ef0:	b148      	cbz	r0, 8004f06 <_printf_float+0xe2>
 8004ef2:	f1ba 0f00 	cmp.w	sl, #0
 8004ef6:	bfb8      	it	lt
 8004ef8:	232d      	movlt	r3, #45	; 0x2d
 8004efa:	4880      	ldr	r0, [pc, #512]	; (80050fc <_printf_float+0x2d8>)
 8004efc:	bfb8      	it	lt
 8004efe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f02:	4b7f      	ldr	r3, [pc, #508]	; (8005100 <_printf_float+0x2dc>)
 8004f04:	e7d3      	b.n	8004eae <_printf_float+0x8a>
 8004f06:	6863      	ldr	r3, [r4, #4]
 8004f08:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	d142      	bne.n	8004f96 <_printf_float+0x172>
 8004f10:	2306      	movs	r3, #6
 8004f12:	6063      	str	r3, [r4, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	9206      	str	r2, [sp, #24]
 8004f18:	aa0e      	add	r2, sp, #56	; 0x38
 8004f1a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f1e:	aa0d      	add	r2, sp, #52	; 0x34
 8004f20:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f24:	9203      	str	r2, [sp, #12]
 8004f26:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f2a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	6863      	ldr	r3, [r4, #4]
 8004f32:	4642      	mov	r2, r8
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	4628      	mov	r0, r5
 8004f38:	4653      	mov	r3, sl
 8004f3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f3c:	f7ff fed4 	bl	8004ce8 <__cvt>
 8004f40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f42:	4680      	mov	r8, r0
 8004f44:	2947      	cmp	r1, #71	; 0x47
 8004f46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f48:	d108      	bne.n	8004f5c <_printf_float+0x138>
 8004f4a:	1cc8      	adds	r0, r1, #3
 8004f4c:	db02      	blt.n	8004f54 <_printf_float+0x130>
 8004f4e:	6863      	ldr	r3, [r4, #4]
 8004f50:	4299      	cmp	r1, r3
 8004f52:	dd40      	ble.n	8004fd6 <_printf_float+0x1b2>
 8004f54:	f1a9 0902 	sub.w	r9, r9, #2
 8004f58:	fa5f f989 	uxtb.w	r9, r9
 8004f5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f60:	d81f      	bhi.n	8004fa2 <_printf_float+0x17e>
 8004f62:	464a      	mov	r2, r9
 8004f64:	3901      	subs	r1, #1
 8004f66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f6a:	910d      	str	r1, [sp, #52]	; 0x34
 8004f6c:	f7ff ff1b 	bl	8004da6 <__exponent>
 8004f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f72:	4682      	mov	sl, r0
 8004f74:	1813      	adds	r3, r2, r0
 8004f76:	2a01      	cmp	r2, #1
 8004f78:	6123      	str	r3, [r4, #16]
 8004f7a:	dc02      	bgt.n	8004f82 <_printf_float+0x15e>
 8004f7c:	6822      	ldr	r2, [r4, #0]
 8004f7e:	07d2      	lsls	r2, r2, #31
 8004f80:	d501      	bpl.n	8004f86 <_printf_float+0x162>
 8004f82:	3301      	adds	r3, #1
 8004f84:	6123      	str	r3, [r4, #16]
 8004f86:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d09b      	beq.n	8004ec6 <_printf_float+0xa2>
 8004f8e:	232d      	movs	r3, #45	; 0x2d
 8004f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f94:	e797      	b.n	8004ec6 <_printf_float+0xa2>
 8004f96:	2947      	cmp	r1, #71	; 0x47
 8004f98:	d1bc      	bne.n	8004f14 <_printf_float+0xf0>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1ba      	bne.n	8004f14 <_printf_float+0xf0>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e7b7      	b.n	8004f12 <_printf_float+0xee>
 8004fa2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004fa6:	d118      	bne.n	8004fda <_printf_float+0x1b6>
 8004fa8:	2900      	cmp	r1, #0
 8004faa:	6863      	ldr	r3, [r4, #4]
 8004fac:	dd0b      	ble.n	8004fc6 <_printf_float+0x1a2>
 8004fae:	6121      	str	r1, [r4, #16]
 8004fb0:	b913      	cbnz	r3, 8004fb8 <_printf_float+0x194>
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	07d0      	lsls	r0, r2, #31
 8004fb6:	d502      	bpl.n	8004fbe <_printf_float+0x19a>
 8004fb8:	3301      	adds	r3, #1
 8004fba:	440b      	add	r3, r1
 8004fbc:	6123      	str	r3, [r4, #16]
 8004fbe:	f04f 0a00 	mov.w	sl, #0
 8004fc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fc4:	e7df      	b.n	8004f86 <_printf_float+0x162>
 8004fc6:	b913      	cbnz	r3, 8004fce <_printf_float+0x1aa>
 8004fc8:	6822      	ldr	r2, [r4, #0]
 8004fca:	07d2      	lsls	r2, r2, #31
 8004fcc:	d501      	bpl.n	8004fd2 <_printf_float+0x1ae>
 8004fce:	3302      	adds	r3, #2
 8004fd0:	e7f4      	b.n	8004fbc <_printf_float+0x198>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e7f2      	b.n	8004fbc <_printf_float+0x198>
 8004fd6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fdc:	4299      	cmp	r1, r3
 8004fde:	db05      	blt.n	8004fec <_printf_float+0x1c8>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	6121      	str	r1, [r4, #16]
 8004fe4:	07d8      	lsls	r0, r3, #31
 8004fe6:	d5ea      	bpl.n	8004fbe <_printf_float+0x19a>
 8004fe8:	1c4b      	adds	r3, r1, #1
 8004fea:	e7e7      	b.n	8004fbc <_printf_float+0x198>
 8004fec:	2900      	cmp	r1, #0
 8004fee:	bfcc      	ite	gt
 8004ff0:	2201      	movgt	r2, #1
 8004ff2:	f1c1 0202 	rsble	r2, r1, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	e7e0      	b.n	8004fbc <_printf_float+0x198>
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	055a      	lsls	r2, r3, #21
 8004ffe:	d407      	bmi.n	8005010 <_printf_float+0x1ec>
 8005000:	6923      	ldr	r3, [r4, #16]
 8005002:	4642      	mov	r2, r8
 8005004:	4631      	mov	r1, r6
 8005006:	4628      	mov	r0, r5
 8005008:	47b8      	blx	r7
 800500a:	3001      	adds	r0, #1
 800500c:	d12b      	bne.n	8005066 <_printf_float+0x242>
 800500e:	e764      	b.n	8004eda <_printf_float+0xb6>
 8005010:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005014:	f240 80dd 	bls.w	80051d2 <_printf_float+0x3ae>
 8005018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800501c:	2200      	movs	r2, #0
 800501e:	2300      	movs	r3, #0
 8005020:	f7fb fd8e 	bl	8000b40 <__aeabi_dcmpeq>
 8005024:	2800      	cmp	r0, #0
 8005026:	d033      	beq.n	8005090 <_printf_float+0x26c>
 8005028:	2301      	movs	r3, #1
 800502a:	4631      	mov	r1, r6
 800502c:	4628      	mov	r0, r5
 800502e:	4a35      	ldr	r2, [pc, #212]	; (8005104 <_printf_float+0x2e0>)
 8005030:	47b8      	blx	r7
 8005032:	3001      	adds	r0, #1
 8005034:	f43f af51 	beq.w	8004eda <_printf_float+0xb6>
 8005038:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800503c:	429a      	cmp	r2, r3
 800503e:	db02      	blt.n	8005046 <_printf_float+0x222>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	07d8      	lsls	r0, r3, #31
 8005044:	d50f      	bpl.n	8005066 <_printf_float+0x242>
 8005046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800504a:	4631      	mov	r1, r6
 800504c:	4628      	mov	r0, r5
 800504e:	47b8      	blx	r7
 8005050:	3001      	adds	r0, #1
 8005052:	f43f af42 	beq.w	8004eda <_printf_float+0xb6>
 8005056:	f04f 0800 	mov.w	r8, #0
 800505a:	f104 091a 	add.w	r9, r4, #26
 800505e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005060:	3b01      	subs	r3, #1
 8005062:	4543      	cmp	r3, r8
 8005064:	dc09      	bgt.n	800507a <_printf_float+0x256>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	079b      	lsls	r3, r3, #30
 800506a:	f100 8102 	bmi.w	8005272 <_printf_float+0x44e>
 800506e:	68e0      	ldr	r0, [r4, #12]
 8005070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005072:	4298      	cmp	r0, r3
 8005074:	bfb8      	it	lt
 8005076:	4618      	movlt	r0, r3
 8005078:	e731      	b.n	8004ede <_printf_float+0xba>
 800507a:	2301      	movs	r3, #1
 800507c:	464a      	mov	r2, r9
 800507e:	4631      	mov	r1, r6
 8005080:	4628      	mov	r0, r5
 8005082:	47b8      	blx	r7
 8005084:	3001      	adds	r0, #1
 8005086:	f43f af28 	beq.w	8004eda <_printf_float+0xb6>
 800508a:	f108 0801 	add.w	r8, r8, #1
 800508e:	e7e6      	b.n	800505e <_printf_float+0x23a>
 8005090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005092:	2b00      	cmp	r3, #0
 8005094:	dc38      	bgt.n	8005108 <_printf_float+0x2e4>
 8005096:	2301      	movs	r3, #1
 8005098:	4631      	mov	r1, r6
 800509a:	4628      	mov	r0, r5
 800509c:	4a19      	ldr	r2, [pc, #100]	; (8005104 <_printf_float+0x2e0>)
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f af1a 	beq.w	8004eda <_printf_float+0xb6>
 80050a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050aa:	4313      	orrs	r3, r2
 80050ac:	d102      	bne.n	80050b4 <_printf_float+0x290>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	07d9      	lsls	r1, r3, #31
 80050b2:	d5d8      	bpl.n	8005066 <_printf_float+0x242>
 80050b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050b8:	4631      	mov	r1, r6
 80050ba:	4628      	mov	r0, r5
 80050bc:	47b8      	blx	r7
 80050be:	3001      	adds	r0, #1
 80050c0:	f43f af0b 	beq.w	8004eda <_printf_float+0xb6>
 80050c4:	f04f 0900 	mov.w	r9, #0
 80050c8:	f104 0a1a 	add.w	sl, r4, #26
 80050cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050ce:	425b      	negs	r3, r3
 80050d0:	454b      	cmp	r3, r9
 80050d2:	dc01      	bgt.n	80050d8 <_printf_float+0x2b4>
 80050d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050d6:	e794      	b.n	8005002 <_printf_float+0x1de>
 80050d8:	2301      	movs	r3, #1
 80050da:	4652      	mov	r2, sl
 80050dc:	4631      	mov	r1, r6
 80050de:	4628      	mov	r0, r5
 80050e0:	47b8      	blx	r7
 80050e2:	3001      	adds	r0, #1
 80050e4:	f43f aef9 	beq.w	8004eda <_printf_float+0xb6>
 80050e8:	f109 0901 	add.w	r9, r9, #1
 80050ec:	e7ee      	b.n	80050cc <_printf_float+0x2a8>
 80050ee:	bf00      	nop
 80050f0:	7fefffff 	.word	0x7fefffff
 80050f4:	08008a04 	.word	0x08008a04
 80050f8:	08008a08 	.word	0x08008a08
 80050fc:	08008a10 	.word	0x08008a10
 8005100:	08008a0c 	.word	0x08008a0c
 8005104:	08008a14 	.word	0x08008a14
 8005108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800510a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800510c:	429a      	cmp	r2, r3
 800510e:	bfa8      	it	ge
 8005110:	461a      	movge	r2, r3
 8005112:	2a00      	cmp	r2, #0
 8005114:	4691      	mov	r9, r2
 8005116:	dc37      	bgt.n	8005188 <_printf_float+0x364>
 8005118:	f04f 0b00 	mov.w	fp, #0
 800511c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005120:	f104 021a 	add.w	r2, r4, #26
 8005124:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005128:	ebaa 0309 	sub.w	r3, sl, r9
 800512c:	455b      	cmp	r3, fp
 800512e:	dc33      	bgt.n	8005198 <_printf_float+0x374>
 8005130:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005134:	429a      	cmp	r2, r3
 8005136:	db3b      	blt.n	80051b0 <_printf_float+0x38c>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	07da      	lsls	r2, r3, #31
 800513c:	d438      	bmi.n	80051b0 <_printf_float+0x38c>
 800513e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005140:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005142:	eba2 030a 	sub.w	r3, r2, sl
 8005146:	eba2 0901 	sub.w	r9, r2, r1
 800514a:	4599      	cmp	r9, r3
 800514c:	bfa8      	it	ge
 800514e:	4699      	movge	r9, r3
 8005150:	f1b9 0f00 	cmp.w	r9, #0
 8005154:	dc34      	bgt.n	80051c0 <_printf_float+0x39c>
 8005156:	f04f 0800 	mov.w	r8, #0
 800515a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800515e:	f104 0a1a 	add.w	sl, r4, #26
 8005162:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	eba3 0309 	sub.w	r3, r3, r9
 800516c:	4543      	cmp	r3, r8
 800516e:	f77f af7a 	ble.w	8005066 <_printf_float+0x242>
 8005172:	2301      	movs	r3, #1
 8005174:	4652      	mov	r2, sl
 8005176:	4631      	mov	r1, r6
 8005178:	4628      	mov	r0, r5
 800517a:	47b8      	blx	r7
 800517c:	3001      	adds	r0, #1
 800517e:	f43f aeac 	beq.w	8004eda <_printf_float+0xb6>
 8005182:	f108 0801 	add.w	r8, r8, #1
 8005186:	e7ec      	b.n	8005162 <_printf_float+0x33e>
 8005188:	4613      	mov	r3, r2
 800518a:	4631      	mov	r1, r6
 800518c:	4642      	mov	r2, r8
 800518e:	4628      	mov	r0, r5
 8005190:	47b8      	blx	r7
 8005192:	3001      	adds	r0, #1
 8005194:	d1c0      	bne.n	8005118 <_printf_float+0x2f4>
 8005196:	e6a0      	b.n	8004eda <_printf_float+0xb6>
 8005198:	2301      	movs	r3, #1
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	920b      	str	r2, [sp, #44]	; 0x2c
 80051a0:	47b8      	blx	r7
 80051a2:	3001      	adds	r0, #1
 80051a4:	f43f ae99 	beq.w	8004eda <_printf_float+0xb6>
 80051a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051aa:	f10b 0b01 	add.w	fp, fp, #1
 80051ae:	e7b9      	b.n	8005124 <_printf_float+0x300>
 80051b0:	4631      	mov	r1, r6
 80051b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051b6:	4628      	mov	r0, r5
 80051b8:	47b8      	blx	r7
 80051ba:	3001      	adds	r0, #1
 80051bc:	d1bf      	bne.n	800513e <_printf_float+0x31a>
 80051be:	e68c      	b.n	8004eda <_printf_float+0xb6>
 80051c0:	464b      	mov	r3, r9
 80051c2:	4631      	mov	r1, r6
 80051c4:	4628      	mov	r0, r5
 80051c6:	eb08 020a 	add.w	r2, r8, sl
 80051ca:	47b8      	blx	r7
 80051cc:	3001      	adds	r0, #1
 80051ce:	d1c2      	bne.n	8005156 <_printf_float+0x332>
 80051d0:	e683      	b.n	8004eda <_printf_float+0xb6>
 80051d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051d4:	2a01      	cmp	r2, #1
 80051d6:	dc01      	bgt.n	80051dc <_printf_float+0x3b8>
 80051d8:	07db      	lsls	r3, r3, #31
 80051da:	d537      	bpl.n	800524c <_printf_float+0x428>
 80051dc:	2301      	movs	r3, #1
 80051de:	4642      	mov	r2, r8
 80051e0:	4631      	mov	r1, r6
 80051e2:	4628      	mov	r0, r5
 80051e4:	47b8      	blx	r7
 80051e6:	3001      	adds	r0, #1
 80051e8:	f43f ae77 	beq.w	8004eda <_printf_float+0xb6>
 80051ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	47b8      	blx	r7
 80051f6:	3001      	adds	r0, #1
 80051f8:	f43f ae6f 	beq.w	8004eda <_printf_float+0xb6>
 80051fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005200:	2200      	movs	r2, #0
 8005202:	2300      	movs	r3, #0
 8005204:	f7fb fc9c 	bl	8000b40 <__aeabi_dcmpeq>
 8005208:	b9d8      	cbnz	r0, 8005242 <_printf_float+0x41e>
 800520a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800520c:	f108 0201 	add.w	r2, r8, #1
 8005210:	3b01      	subs	r3, #1
 8005212:	4631      	mov	r1, r6
 8005214:	4628      	mov	r0, r5
 8005216:	47b8      	blx	r7
 8005218:	3001      	adds	r0, #1
 800521a:	d10e      	bne.n	800523a <_printf_float+0x416>
 800521c:	e65d      	b.n	8004eda <_printf_float+0xb6>
 800521e:	2301      	movs	r3, #1
 8005220:	464a      	mov	r2, r9
 8005222:	4631      	mov	r1, r6
 8005224:	4628      	mov	r0, r5
 8005226:	47b8      	blx	r7
 8005228:	3001      	adds	r0, #1
 800522a:	f43f ae56 	beq.w	8004eda <_printf_float+0xb6>
 800522e:	f108 0801 	add.w	r8, r8, #1
 8005232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005234:	3b01      	subs	r3, #1
 8005236:	4543      	cmp	r3, r8
 8005238:	dcf1      	bgt.n	800521e <_printf_float+0x3fa>
 800523a:	4653      	mov	r3, sl
 800523c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005240:	e6e0      	b.n	8005004 <_printf_float+0x1e0>
 8005242:	f04f 0800 	mov.w	r8, #0
 8005246:	f104 091a 	add.w	r9, r4, #26
 800524a:	e7f2      	b.n	8005232 <_printf_float+0x40e>
 800524c:	2301      	movs	r3, #1
 800524e:	4642      	mov	r2, r8
 8005250:	e7df      	b.n	8005212 <_printf_float+0x3ee>
 8005252:	2301      	movs	r3, #1
 8005254:	464a      	mov	r2, r9
 8005256:	4631      	mov	r1, r6
 8005258:	4628      	mov	r0, r5
 800525a:	47b8      	blx	r7
 800525c:	3001      	adds	r0, #1
 800525e:	f43f ae3c 	beq.w	8004eda <_printf_float+0xb6>
 8005262:	f108 0801 	add.w	r8, r8, #1
 8005266:	68e3      	ldr	r3, [r4, #12]
 8005268:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800526a:	1a5b      	subs	r3, r3, r1
 800526c:	4543      	cmp	r3, r8
 800526e:	dcf0      	bgt.n	8005252 <_printf_float+0x42e>
 8005270:	e6fd      	b.n	800506e <_printf_float+0x24a>
 8005272:	f04f 0800 	mov.w	r8, #0
 8005276:	f104 0919 	add.w	r9, r4, #25
 800527a:	e7f4      	b.n	8005266 <_printf_float+0x442>

0800527c <_printf_common>:
 800527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	4616      	mov	r6, r2
 8005282:	4699      	mov	r9, r3
 8005284:	688a      	ldr	r2, [r1, #8]
 8005286:	690b      	ldr	r3, [r1, #16]
 8005288:	4607      	mov	r7, r0
 800528a:	4293      	cmp	r3, r2
 800528c:	bfb8      	it	lt
 800528e:	4613      	movlt	r3, r2
 8005290:	6033      	str	r3, [r6, #0]
 8005292:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005296:	460c      	mov	r4, r1
 8005298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800529c:	b10a      	cbz	r2, 80052a2 <_printf_common+0x26>
 800529e:	3301      	adds	r3, #1
 80052a0:	6033      	str	r3, [r6, #0]
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	0699      	lsls	r1, r3, #26
 80052a6:	bf42      	ittt	mi
 80052a8:	6833      	ldrmi	r3, [r6, #0]
 80052aa:	3302      	addmi	r3, #2
 80052ac:	6033      	strmi	r3, [r6, #0]
 80052ae:	6825      	ldr	r5, [r4, #0]
 80052b0:	f015 0506 	ands.w	r5, r5, #6
 80052b4:	d106      	bne.n	80052c4 <_printf_common+0x48>
 80052b6:	f104 0a19 	add.w	sl, r4, #25
 80052ba:	68e3      	ldr	r3, [r4, #12]
 80052bc:	6832      	ldr	r2, [r6, #0]
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	42ab      	cmp	r3, r5
 80052c2:	dc28      	bgt.n	8005316 <_printf_common+0x9a>
 80052c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052c8:	1e13      	subs	r3, r2, #0
 80052ca:	6822      	ldr	r2, [r4, #0]
 80052cc:	bf18      	it	ne
 80052ce:	2301      	movne	r3, #1
 80052d0:	0692      	lsls	r2, r2, #26
 80052d2:	d42d      	bmi.n	8005330 <_printf_common+0xb4>
 80052d4:	4649      	mov	r1, r9
 80052d6:	4638      	mov	r0, r7
 80052d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052dc:	47c0      	blx	r8
 80052de:	3001      	adds	r0, #1
 80052e0:	d020      	beq.n	8005324 <_printf_common+0xa8>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	68e5      	ldr	r5, [r4, #12]
 80052e6:	f003 0306 	and.w	r3, r3, #6
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	bf18      	it	ne
 80052ee:	2500      	movne	r5, #0
 80052f0:	6832      	ldr	r2, [r6, #0]
 80052f2:	f04f 0600 	mov.w	r6, #0
 80052f6:	68a3      	ldr	r3, [r4, #8]
 80052f8:	bf08      	it	eq
 80052fa:	1aad      	subeq	r5, r5, r2
 80052fc:	6922      	ldr	r2, [r4, #16]
 80052fe:	bf08      	it	eq
 8005300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005304:	4293      	cmp	r3, r2
 8005306:	bfc4      	itt	gt
 8005308:	1a9b      	subgt	r3, r3, r2
 800530a:	18ed      	addgt	r5, r5, r3
 800530c:	341a      	adds	r4, #26
 800530e:	42b5      	cmp	r5, r6
 8005310:	d11a      	bne.n	8005348 <_printf_common+0xcc>
 8005312:	2000      	movs	r0, #0
 8005314:	e008      	b.n	8005328 <_printf_common+0xac>
 8005316:	2301      	movs	r3, #1
 8005318:	4652      	mov	r2, sl
 800531a:	4649      	mov	r1, r9
 800531c:	4638      	mov	r0, r7
 800531e:	47c0      	blx	r8
 8005320:	3001      	adds	r0, #1
 8005322:	d103      	bne.n	800532c <_printf_common+0xb0>
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800532c:	3501      	adds	r5, #1
 800532e:	e7c4      	b.n	80052ba <_printf_common+0x3e>
 8005330:	2030      	movs	r0, #48	; 0x30
 8005332:	18e1      	adds	r1, r4, r3
 8005334:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800533e:	4422      	add	r2, r4
 8005340:	3302      	adds	r3, #2
 8005342:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005346:	e7c5      	b.n	80052d4 <_printf_common+0x58>
 8005348:	2301      	movs	r3, #1
 800534a:	4622      	mov	r2, r4
 800534c:	4649      	mov	r1, r9
 800534e:	4638      	mov	r0, r7
 8005350:	47c0      	blx	r8
 8005352:	3001      	adds	r0, #1
 8005354:	d0e6      	beq.n	8005324 <_printf_common+0xa8>
 8005356:	3601      	adds	r6, #1
 8005358:	e7d9      	b.n	800530e <_printf_common+0x92>
	...

0800535c <_printf_i>:
 800535c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005360:	460c      	mov	r4, r1
 8005362:	7e27      	ldrb	r7, [r4, #24]
 8005364:	4691      	mov	r9, r2
 8005366:	2f78      	cmp	r7, #120	; 0x78
 8005368:	4680      	mov	r8, r0
 800536a:	469a      	mov	sl, r3
 800536c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800536e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005372:	d807      	bhi.n	8005384 <_printf_i+0x28>
 8005374:	2f62      	cmp	r7, #98	; 0x62
 8005376:	d80a      	bhi.n	800538e <_printf_i+0x32>
 8005378:	2f00      	cmp	r7, #0
 800537a:	f000 80d9 	beq.w	8005530 <_printf_i+0x1d4>
 800537e:	2f58      	cmp	r7, #88	; 0x58
 8005380:	f000 80a4 	beq.w	80054cc <_printf_i+0x170>
 8005384:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005388:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800538c:	e03a      	b.n	8005404 <_printf_i+0xa8>
 800538e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005392:	2b15      	cmp	r3, #21
 8005394:	d8f6      	bhi.n	8005384 <_printf_i+0x28>
 8005396:	a001      	add	r0, pc, #4	; (adr r0, 800539c <_printf_i+0x40>)
 8005398:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800539c:	080053f5 	.word	0x080053f5
 80053a0:	08005409 	.word	0x08005409
 80053a4:	08005385 	.word	0x08005385
 80053a8:	08005385 	.word	0x08005385
 80053ac:	08005385 	.word	0x08005385
 80053b0:	08005385 	.word	0x08005385
 80053b4:	08005409 	.word	0x08005409
 80053b8:	08005385 	.word	0x08005385
 80053bc:	08005385 	.word	0x08005385
 80053c0:	08005385 	.word	0x08005385
 80053c4:	08005385 	.word	0x08005385
 80053c8:	08005517 	.word	0x08005517
 80053cc:	08005439 	.word	0x08005439
 80053d0:	080054f9 	.word	0x080054f9
 80053d4:	08005385 	.word	0x08005385
 80053d8:	08005385 	.word	0x08005385
 80053dc:	08005539 	.word	0x08005539
 80053e0:	08005385 	.word	0x08005385
 80053e4:	08005439 	.word	0x08005439
 80053e8:	08005385 	.word	0x08005385
 80053ec:	08005385 	.word	0x08005385
 80053f0:	08005501 	.word	0x08005501
 80053f4:	680b      	ldr	r3, [r1, #0]
 80053f6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053fa:	1d1a      	adds	r2, r3, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	600a      	str	r2, [r1, #0]
 8005400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005404:	2301      	movs	r3, #1
 8005406:	e0a4      	b.n	8005552 <_printf_i+0x1f6>
 8005408:	6825      	ldr	r5, [r4, #0]
 800540a:	6808      	ldr	r0, [r1, #0]
 800540c:	062e      	lsls	r6, r5, #24
 800540e:	f100 0304 	add.w	r3, r0, #4
 8005412:	d50a      	bpl.n	800542a <_printf_i+0xce>
 8005414:	6805      	ldr	r5, [r0, #0]
 8005416:	600b      	str	r3, [r1, #0]
 8005418:	2d00      	cmp	r5, #0
 800541a:	da03      	bge.n	8005424 <_printf_i+0xc8>
 800541c:	232d      	movs	r3, #45	; 0x2d
 800541e:	426d      	negs	r5, r5
 8005420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005424:	230a      	movs	r3, #10
 8005426:	485e      	ldr	r0, [pc, #376]	; (80055a0 <_printf_i+0x244>)
 8005428:	e019      	b.n	800545e <_printf_i+0x102>
 800542a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800542e:	6805      	ldr	r5, [r0, #0]
 8005430:	600b      	str	r3, [r1, #0]
 8005432:	bf18      	it	ne
 8005434:	b22d      	sxthne	r5, r5
 8005436:	e7ef      	b.n	8005418 <_printf_i+0xbc>
 8005438:	680b      	ldr	r3, [r1, #0]
 800543a:	6825      	ldr	r5, [r4, #0]
 800543c:	1d18      	adds	r0, r3, #4
 800543e:	6008      	str	r0, [r1, #0]
 8005440:	0628      	lsls	r0, r5, #24
 8005442:	d501      	bpl.n	8005448 <_printf_i+0xec>
 8005444:	681d      	ldr	r5, [r3, #0]
 8005446:	e002      	b.n	800544e <_printf_i+0xf2>
 8005448:	0669      	lsls	r1, r5, #25
 800544a:	d5fb      	bpl.n	8005444 <_printf_i+0xe8>
 800544c:	881d      	ldrh	r5, [r3, #0]
 800544e:	2f6f      	cmp	r7, #111	; 0x6f
 8005450:	bf0c      	ite	eq
 8005452:	2308      	moveq	r3, #8
 8005454:	230a      	movne	r3, #10
 8005456:	4852      	ldr	r0, [pc, #328]	; (80055a0 <_printf_i+0x244>)
 8005458:	2100      	movs	r1, #0
 800545a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800545e:	6866      	ldr	r6, [r4, #4]
 8005460:	2e00      	cmp	r6, #0
 8005462:	bfa8      	it	ge
 8005464:	6821      	ldrge	r1, [r4, #0]
 8005466:	60a6      	str	r6, [r4, #8]
 8005468:	bfa4      	itt	ge
 800546a:	f021 0104 	bicge.w	r1, r1, #4
 800546e:	6021      	strge	r1, [r4, #0]
 8005470:	b90d      	cbnz	r5, 8005476 <_printf_i+0x11a>
 8005472:	2e00      	cmp	r6, #0
 8005474:	d04d      	beq.n	8005512 <_printf_i+0x1b6>
 8005476:	4616      	mov	r6, r2
 8005478:	fbb5 f1f3 	udiv	r1, r5, r3
 800547c:	fb03 5711 	mls	r7, r3, r1, r5
 8005480:	5dc7      	ldrb	r7, [r0, r7]
 8005482:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005486:	462f      	mov	r7, r5
 8005488:	42bb      	cmp	r3, r7
 800548a:	460d      	mov	r5, r1
 800548c:	d9f4      	bls.n	8005478 <_printf_i+0x11c>
 800548e:	2b08      	cmp	r3, #8
 8005490:	d10b      	bne.n	80054aa <_printf_i+0x14e>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	07df      	lsls	r7, r3, #31
 8005496:	d508      	bpl.n	80054aa <_printf_i+0x14e>
 8005498:	6923      	ldr	r3, [r4, #16]
 800549a:	6861      	ldr	r1, [r4, #4]
 800549c:	4299      	cmp	r1, r3
 800549e:	bfde      	ittt	le
 80054a0:	2330      	movle	r3, #48	; 0x30
 80054a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054aa:	1b92      	subs	r2, r2, r6
 80054ac:	6122      	str	r2, [r4, #16]
 80054ae:	464b      	mov	r3, r9
 80054b0:	4621      	mov	r1, r4
 80054b2:	4640      	mov	r0, r8
 80054b4:	f8cd a000 	str.w	sl, [sp]
 80054b8:	aa03      	add	r2, sp, #12
 80054ba:	f7ff fedf 	bl	800527c <_printf_common>
 80054be:	3001      	adds	r0, #1
 80054c0:	d14c      	bne.n	800555c <_printf_i+0x200>
 80054c2:	f04f 30ff 	mov.w	r0, #4294967295
 80054c6:	b004      	add	sp, #16
 80054c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054cc:	4834      	ldr	r0, [pc, #208]	; (80055a0 <_printf_i+0x244>)
 80054ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054d2:	680e      	ldr	r6, [r1, #0]
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80054da:	061f      	lsls	r7, r3, #24
 80054dc:	600e      	str	r6, [r1, #0]
 80054de:	d514      	bpl.n	800550a <_printf_i+0x1ae>
 80054e0:	07d9      	lsls	r1, r3, #31
 80054e2:	bf44      	itt	mi
 80054e4:	f043 0320 	orrmi.w	r3, r3, #32
 80054e8:	6023      	strmi	r3, [r4, #0]
 80054ea:	b91d      	cbnz	r5, 80054f4 <_printf_i+0x198>
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	f023 0320 	bic.w	r3, r3, #32
 80054f2:	6023      	str	r3, [r4, #0]
 80054f4:	2310      	movs	r3, #16
 80054f6:	e7af      	b.n	8005458 <_printf_i+0xfc>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	f043 0320 	orr.w	r3, r3, #32
 80054fe:	6023      	str	r3, [r4, #0]
 8005500:	2378      	movs	r3, #120	; 0x78
 8005502:	4828      	ldr	r0, [pc, #160]	; (80055a4 <_printf_i+0x248>)
 8005504:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005508:	e7e3      	b.n	80054d2 <_printf_i+0x176>
 800550a:	065e      	lsls	r6, r3, #25
 800550c:	bf48      	it	mi
 800550e:	b2ad      	uxthmi	r5, r5
 8005510:	e7e6      	b.n	80054e0 <_printf_i+0x184>
 8005512:	4616      	mov	r6, r2
 8005514:	e7bb      	b.n	800548e <_printf_i+0x132>
 8005516:	680b      	ldr	r3, [r1, #0]
 8005518:	6826      	ldr	r6, [r4, #0]
 800551a:	1d1d      	adds	r5, r3, #4
 800551c:	6960      	ldr	r0, [r4, #20]
 800551e:	600d      	str	r5, [r1, #0]
 8005520:	0635      	lsls	r5, r6, #24
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	d501      	bpl.n	800552a <_printf_i+0x1ce>
 8005526:	6018      	str	r0, [r3, #0]
 8005528:	e002      	b.n	8005530 <_printf_i+0x1d4>
 800552a:	0671      	lsls	r1, r6, #25
 800552c:	d5fb      	bpl.n	8005526 <_printf_i+0x1ca>
 800552e:	8018      	strh	r0, [r3, #0]
 8005530:	2300      	movs	r3, #0
 8005532:	4616      	mov	r6, r2
 8005534:	6123      	str	r3, [r4, #16]
 8005536:	e7ba      	b.n	80054ae <_printf_i+0x152>
 8005538:	680b      	ldr	r3, [r1, #0]
 800553a:	1d1a      	adds	r2, r3, #4
 800553c:	600a      	str	r2, [r1, #0]
 800553e:	681e      	ldr	r6, [r3, #0]
 8005540:	2100      	movs	r1, #0
 8005542:	4630      	mov	r0, r6
 8005544:	6862      	ldr	r2, [r4, #4]
 8005546:	f000 fee5 	bl	8006314 <memchr>
 800554a:	b108      	cbz	r0, 8005550 <_printf_i+0x1f4>
 800554c:	1b80      	subs	r0, r0, r6
 800554e:	6060      	str	r0, [r4, #4]
 8005550:	6863      	ldr	r3, [r4, #4]
 8005552:	6123      	str	r3, [r4, #16]
 8005554:	2300      	movs	r3, #0
 8005556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800555a:	e7a8      	b.n	80054ae <_printf_i+0x152>
 800555c:	4632      	mov	r2, r6
 800555e:	4649      	mov	r1, r9
 8005560:	4640      	mov	r0, r8
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	47d0      	blx	sl
 8005566:	3001      	adds	r0, #1
 8005568:	d0ab      	beq.n	80054c2 <_printf_i+0x166>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	079b      	lsls	r3, r3, #30
 800556e:	d413      	bmi.n	8005598 <_printf_i+0x23c>
 8005570:	68e0      	ldr	r0, [r4, #12]
 8005572:	9b03      	ldr	r3, [sp, #12]
 8005574:	4298      	cmp	r0, r3
 8005576:	bfb8      	it	lt
 8005578:	4618      	movlt	r0, r3
 800557a:	e7a4      	b.n	80054c6 <_printf_i+0x16a>
 800557c:	2301      	movs	r3, #1
 800557e:	4632      	mov	r2, r6
 8005580:	4649      	mov	r1, r9
 8005582:	4640      	mov	r0, r8
 8005584:	47d0      	blx	sl
 8005586:	3001      	adds	r0, #1
 8005588:	d09b      	beq.n	80054c2 <_printf_i+0x166>
 800558a:	3501      	adds	r5, #1
 800558c:	68e3      	ldr	r3, [r4, #12]
 800558e:	9903      	ldr	r1, [sp, #12]
 8005590:	1a5b      	subs	r3, r3, r1
 8005592:	42ab      	cmp	r3, r5
 8005594:	dcf2      	bgt.n	800557c <_printf_i+0x220>
 8005596:	e7eb      	b.n	8005570 <_printf_i+0x214>
 8005598:	2500      	movs	r5, #0
 800559a:	f104 0619 	add.w	r6, r4, #25
 800559e:	e7f5      	b.n	800558c <_printf_i+0x230>
 80055a0:	08008a16 	.word	0x08008a16
 80055a4:	08008a27 	.word	0x08008a27

080055a8 <siprintf>:
 80055a8:	b40e      	push	{r1, r2, r3}
 80055aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055ae:	b500      	push	{lr}
 80055b0:	b09c      	sub	sp, #112	; 0x70
 80055b2:	ab1d      	add	r3, sp, #116	; 0x74
 80055b4:	9002      	str	r0, [sp, #8]
 80055b6:	9006      	str	r0, [sp, #24]
 80055b8:	9107      	str	r1, [sp, #28]
 80055ba:	9104      	str	r1, [sp, #16]
 80055bc:	4808      	ldr	r0, [pc, #32]	; (80055e0 <siprintf+0x38>)
 80055be:	4909      	ldr	r1, [pc, #36]	; (80055e4 <siprintf+0x3c>)
 80055c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c4:	9105      	str	r1, [sp, #20]
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	a902      	add	r1, sp, #8
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	f001 fb42 	bl	8006c54 <_svfiprintf_r>
 80055d0:	2200      	movs	r2, #0
 80055d2:	9b02      	ldr	r3, [sp, #8]
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	b01c      	add	sp, #112	; 0x70
 80055d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055dc:	b003      	add	sp, #12
 80055de:	4770      	bx	lr
 80055e0:	20000010 	.word	0x20000010
 80055e4:	ffff0208 	.word	0xffff0208

080055e8 <strcat>:
 80055e8:	4602      	mov	r2, r0
 80055ea:	b510      	push	{r4, lr}
 80055ec:	7814      	ldrb	r4, [r2, #0]
 80055ee:	4613      	mov	r3, r2
 80055f0:	3201      	adds	r2, #1
 80055f2:	2c00      	cmp	r4, #0
 80055f4:	d1fa      	bne.n	80055ec <strcat+0x4>
 80055f6:	3b01      	subs	r3, #1
 80055f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005600:	2a00      	cmp	r2, #0
 8005602:	d1f9      	bne.n	80055f8 <strcat+0x10>
 8005604:	bd10      	pop	{r4, pc}

08005606 <quorem>:
 8005606:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560a:	6903      	ldr	r3, [r0, #16]
 800560c:	690c      	ldr	r4, [r1, #16]
 800560e:	4607      	mov	r7, r0
 8005610:	42a3      	cmp	r3, r4
 8005612:	f2c0 8083 	blt.w	800571c <quorem+0x116>
 8005616:	3c01      	subs	r4, #1
 8005618:	f100 0514 	add.w	r5, r0, #20
 800561c:	f101 0814 	add.w	r8, r1, #20
 8005620:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800562a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800562e:	3301      	adds	r3, #1
 8005630:	429a      	cmp	r2, r3
 8005632:	fbb2 f6f3 	udiv	r6, r2, r3
 8005636:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800563a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800563e:	d332      	bcc.n	80056a6 <quorem+0xa0>
 8005640:	f04f 0e00 	mov.w	lr, #0
 8005644:	4640      	mov	r0, r8
 8005646:	46ac      	mov	ip, r5
 8005648:	46f2      	mov	sl, lr
 800564a:	f850 2b04 	ldr.w	r2, [r0], #4
 800564e:	b293      	uxth	r3, r2
 8005650:	fb06 e303 	mla	r3, r6, r3, lr
 8005654:	0c12      	lsrs	r2, r2, #16
 8005656:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800565a:	fb06 e202 	mla	r2, r6, r2, lr
 800565e:	b29b      	uxth	r3, r3
 8005660:	ebaa 0303 	sub.w	r3, sl, r3
 8005664:	f8dc a000 	ldr.w	sl, [ip]
 8005668:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800566c:	fa1f fa8a 	uxth.w	sl, sl
 8005670:	4453      	add	r3, sl
 8005672:	fa1f fa82 	uxth.w	sl, r2
 8005676:	f8dc 2000 	ldr.w	r2, [ip]
 800567a:	4581      	cmp	r9, r0
 800567c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005684:	b29b      	uxth	r3, r3
 8005686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800568a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800568e:	f84c 3b04 	str.w	r3, [ip], #4
 8005692:	d2da      	bcs.n	800564a <quorem+0x44>
 8005694:	f855 300b 	ldr.w	r3, [r5, fp]
 8005698:	b92b      	cbnz	r3, 80056a6 <quorem+0xa0>
 800569a:	9b01      	ldr	r3, [sp, #4]
 800569c:	3b04      	subs	r3, #4
 800569e:	429d      	cmp	r5, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	d32f      	bcc.n	8005704 <quorem+0xfe>
 80056a4:	613c      	str	r4, [r7, #16]
 80056a6:	4638      	mov	r0, r7
 80056a8:	f001 f8bc 	bl	8006824 <__mcmp>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	db25      	blt.n	80056fc <quorem+0xf6>
 80056b0:	4628      	mov	r0, r5
 80056b2:	f04f 0c00 	mov.w	ip, #0
 80056b6:	3601      	adds	r6, #1
 80056b8:	f858 1b04 	ldr.w	r1, [r8], #4
 80056bc:	f8d0 e000 	ldr.w	lr, [r0]
 80056c0:	b28b      	uxth	r3, r1
 80056c2:	ebac 0303 	sub.w	r3, ip, r3
 80056c6:	fa1f f28e 	uxth.w	r2, lr
 80056ca:	4413      	add	r3, r2
 80056cc:	0c0a      	lsrs	r2, r1, #16
 80056ce:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056dc:	45c1      	cmp	r9, r8
 80056de:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056e2:	f840 3b04 	str.w	r3, [r0], #4
 80056e6:	d2e7      	bcs.n	80056b8 <quorem+0xb2>
 80056e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056f0:	b922      	cbnz	r2, 80056fc <quorem+0xf6>
 80056f2:	3b04      	subs	r3, #4
 80056f4:	429d      	cmp	r5, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	d30a      	bcc.n	8005710 <quorem+0x10a>
 80056fa:	613c      	str	r4, [r7, #16]
 80056fc:	4630      	mov	r0, r6
 80056fe:	b003      	add	sp, #12
 8005700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	3b04      	subs	r3, #4
 8005708:	2a00      	cmp	r2, #0
 800570a:	d1cb      	bne.n	80056a4 <quorem+0x9e>
 800570c:	3c01      	subs	r4, #1
 800570e:	e7c6      	b.n	800569e <quorem+0x98>
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	3b04      	subs	r3, #4
 8005714:	2a00      	cmp	r2, #0
 8005716:	d1f0      	bne.n	80056fa <quorem+0xf4>
 8005718:	3c01      	subs	r4, #1
 800571a:	e7eb      	b.n	80056f4 <quorem+0xee>
 800571c:	2000      	movs	r0, #0
 800571e:	e7ee      	b.n	80056fe <quorem+0xf8>

08005720 <_dtoa_r>:
 8005720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005724:	4616      	mov	r6, r2
 8005726:	461f      	mov	r7, r3
 8005728:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800572a:	b099      	sub	sp, #100	; 0x64
 800572c:	4605      	mov	r5, r0
 800572e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005732:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005736:	b974      	cbnz	r4, 8005756 <_dtoa_r+0x36>
 8005738:	2010      	movs	r0, #16
 800573a:	f000 fde3 	bl	8006304 <malloc>
 800573e:	4602      	mov	r2, r0
 8005740:	6268      	str	r0, [r5, #36]	; 0x24
 8005742:	b920      	cbnz	r0, 800574e <_dtoa_r+0x2e>
 8005744:	21ea      	movs	r1, #234	; 0xea
 8005746:	4bae      	ldr	r3, [pc, #696]	; (8005a00 <_dtoa_r+0x2e0>)
 8005748:	48ae      	ldr	r0, [pc, #696]	; (8005a04 <_dtoa_r+0x2e4>)
 800574a:	f001 fb93 	bl	8006e74 <__assert_func>
 800574e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005752:	6004      	str	r4, [r0, #0]
 8005754:	60c4      	str	r4, [r0, #12]
 8005756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005758:	6819      	ldr	r1, [r3, #0]
 800575a:	b151      	cbz	r1, 8005772 <_dtoa_r+0x52>
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	2301      	movs	r3, #1
 8005760:	4093      	lsls	r3, r2
 8005762:	604a      	str	r2, [r1, #4]
 8005764:	608b      	str	r3, [r1, #8]
 8005766:	4628      	mov	r0, r5
 8005768:	f000 fe22 	bl	80063b0 <_Bfree>
 800576c:	2200      	movs	r2, #0
 800576e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	1e3b      	subs	r3, r7, #0
 8005774:	bfaf      	iteee	ge
 8005776:	2300      	movge	r3, #0
 8005778:	2201      	movlt	r2, #1
 800577a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800577e:	9305      	strlt	r3, [sp, #20]
 8005780:	bfa8      	it	ge
 8005782:	f8c8 3000 	strge.w	r3, [r8]
 8005786:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800578a:	4b9f      	ldr	r3, [pc, #636]	; (8005a08 <_dtoa_r+0x2e8>)
 800578c:	bfb8      	it	lt
 800578e:	f8c8 2000 	strlt.w	r2, [r8]
 8005792:	ea33 0309 	bics.w	r3, r3, r9
 8005796:	d119      	bne.n	80057cc <_dtoa_r+0xac>
 8005798:	f242 730f 	movw	r3, #9999	; 0x270f
 800579c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057a4:	4333      	orrs	r3, r6
 80057a6:	f000 8580 	beq.w	80062aa <_dtoa_r+0xb8a>
 80057aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057ac:	b953      	cbnz	r3, 80057c4 <_dtoa_r+0xa4>
 80057ae:	4b97      	ldr	r3, [pc, #604]	; (8005a0c <_dtoa_r+0x2ec>)
 80057b0:	e022      	b.n	80057f8 <_dtoa_r+0xd8>
 80057b2:	4b97      	ldr	r3, [pc, #604]	; (8005a10 <_dtoa_r+0x2f0>)
 80057b4:	9308      	str	r3, [sp, #32]
 80057b6:	3308      	adds	r3, #8
 80057b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	9808      	ldr	r0, [sp, #32]
 80057be:	b019      	add	sp, #100	; 0x64
 80057c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c4:	4b91      	ldr	r3, [pc, #580]	; (8005a0c <_dtoa_r+0x2ec>)
 80057c6:	9308      	str	r3, [sp, #32]
 80057c8:	3303      	adds	r3, #3
 80057ca:	e7f5      	b.n	80057b8 <_dtoa_r+0x98>
 80057cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80057d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80057d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057d8:	2200      	movs	r2, #0
 80057da:	2300      	movs	r3, #0
 80057dc:	f7fb f9b0 	bl	8000b40 <__aeabi_dcmpeq>
 80057e0:	4680      	mov	r8, r0
 80057e2:	b158      	cbz	r0, 80057fc <_dtoa_r+0xdc>
 80057e4:	2301      	movs	r3, #1
 80057e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8559 	beq.w	80062a4 <_dtoa_r+0xb84>
 80057f2:	4888      	ldr	r0, [pc, #544]	; (8005a14 <_dtoa_r+0x2f4>)
 80057f4:	6018      	str	r0, [r3, #0]
 80057f6:	1e43      	subs	r3, r0, #1
 80057f8:	9308      	str	r3, [sp, #32]
 80057fa:	e7df      	b.n	80057bc <_dtoa_r+0x9c>
 80057fc:	ab16      	add	r3, sp, #88	; 0x58
 80057fe:	9301      	str	r3, [sp, #4]
 8005800:	ab17      	add	r3, sp, #92	; 0x5c
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	4628      	mov	r0, r5
 8005806:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800580a:	f001 f8b7 	bl	800697c <__d2b>
 800580e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005812:	4682      	mov	sl, r0
 8005814:	2c00      	cmp	r4, #0
 8005816:	d07e      	beq.n	8005916 <_dtoa_r+0x1f6>
 8005818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800581c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800581e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005826:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800582a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800582e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005832:	2200      	movs	r2, #0
 8005834:	4b78      	ldr	r3, [pc, #480]	; (8005a18 <_dtoa_r+0x2f8>)
 8005836:	f7fa fd63 	bl	8000300 <__aeabi_dsub>
 800583a:	a36b      	add	r3, pc, #428	; (adr r3, 80059e8 <_dtoa_r+0x2c8>)
 800583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005840:	f7fa ff16 	bl	8000670 <__aeabi_dmul>
 8005844:	a36a      	add	r3, pc, #424	; (adr r3, 80059f0 <_dtoa_r+0x2d0>)
 8005846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584a:	f7fa fd5b 	bl	8000304 <__adddf3>
 800584e:	4606      	mov	r6, r0
 8005850:	4620      	mov	r0, r4
 8005852:	460f      	mov	r7, r1
 8005854:	f7fa fea2 	bl	800059c <__aeabi_i2d>
 8005858:	a367      	add	r3, pc, #412	; (adr r3, 80059f8 <_dtoa_r+0x2d8>)
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f7fa ff07 	bl	8000670 <__aeabi_dmul>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4630      	mov	r0, r6
 8005868:	4639      	mov	r1, r7
 800586a:	f7fa fd4b 	bl	8000304 <__adddf3>
 800586e:	4606      	mov	r6, r0
 8005870:	460f      	mov	r7, r1
 8005872:	f7fb f9ad 	bl	8000bd0 <__aeabi_d2iz>
 8005876:	2200      	movs	r2, #0
 8005878:	4681      	mov	r9, r0
 800587a:	2300      	movs	r3, #0
 800587c:	4630      	mov	r0, r6
 800587e:	4639      	mov	r1, r7
 8005880:	f7fb f968 	bl	8000b54 <__aeabi_dcmplt>
 8005884:	b148      	cbz	r0, 800589a <_dtoa_r+0x17a>
 8005886:	4648      	mov	r0, r9
 8005888:	f7fa fe88 	bl	800059c <__aeabi_i2d>
 800588c:	4632      	mov	r2, r6
 800588e:	463b      	mov	r3, r7
 8005890:	f7fb f956 	bl	8000b40 <__aeabi_dcmpeq>
 8005894:	b908      	cbnz	r0, 800589a <_dtoa_r+0x17a>
 8005896:	f109 39ff 	add.w	r9, r9, #4294967295
 800589a:	f1b9 0f16 	cmp.w	r9, #22
 800589e:	d857      	bhi.n	8005950 <_dtoa_r+0x230>
 80058a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058a4:	4b5d      	ldr	r3, [pc, #372]	; (8005a1c <_dtoa_r+0x2fc>)
 80058a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80058aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ae:	f7fb f951 	bl	8000b54 <__aeabi_dcmplt>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d04e      	beq.n	8005954 <_dtoa_r+0x234>
 80058b6:	2300      	movs	r3, #0
 80058b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80058bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80058be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80058c0:	1b1c      	subs	r4, r3, r4
 80058c2:	1e63      	subs	r3, r4, #1
 80058c4:	9309      	str	r3, [sp, #36]	; 0x24
 80058c6:	bf49      	itett	mi
 80058c8:	f1c4 0301 	rsbmi	r3, r4, #1
 80058cc:	2300      	movpl	r3, #0
 80058ce:	9306      	strmi	r3, [sp, #24]
 80058d0:	2300      	movmi	r3, #0
 80058d2:	bf54      	ite	pl
 80058d4:	9306      	strpl	r3, [sp, #24]
 80058d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80058d8:	f1b9 0f00 	cmp.w	r9, #0
 80058dc:	db3c      	blt.n	8005958 <_dtoa_r+0x238>
 80058de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80058e4:	444b      	add	r3, r9
 80058e6:	9309      	str	r3, [sp, #36]	; 0x24
 80058e8:	2300      	movs	r3, #0
 80058ea:	930a      	str	r3, [sp, #40]	; 0x28
 80058ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058ee:	2b09      	cmp	r3, #9
 80058f0:	d86c      	bhi.n	80059cc <_dtoa_r+0x2ac>
 80058f2:	2b05      	cmp	r3, #5
 80058f4:	bfc4      	itt	gt
 80058f6:	3b04      	subgt	r3, #4
 80058f8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80058fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058fc:	bfc8      	it	gt
 80058fe:	2400      	movgt	r4, #0
 8005900:	f1a3 0302 	sub.w	r3, r3, #2
 8005904:	bfd8      	it	le
 8005906:	2401      	movle	r4, #1
 8005908:	2b03      	cmp	r3, #3
 800590a:	f200 808b 	bhi.w	8005a24 <_dtoa_r+0x304>
 800590e:	e8df f003 	tbb	[pc, r3]
 8005912:	4f2d      	.short	0x4f2d
 8005914:	5b4d      	.short	0x5b4d
 8005916:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800591a:	441c      	add	r4, r3
 800591c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005920:	2b20      	cmp	r3, #32
 8005922:	bfc3      	ittte	gt
 8005924:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005928:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800592c:	fa09 f303 	lslgt.w	r3, r9, r3
 8005930:	f1c3 0320 	rsble	r3, r3, #32
 8005934:	bfc6      	itte	gt
 8005936:	fa26 f000 	lsrgt.w	r0, r6, r0
 800593a:	4318      	orrgt	r0, r3
 800593c:	fa06 f003 	lslle.w	r0, r6, r3
 8005940:	f7fa fe1c 	bl	800057c <__aeabi_ui2d>
 8005944:	2301      	movs	r3, #1
 8005946:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800594a:	3c01      	subs	r4, #1
 800594c:	9313      	str	r3, [sp, #76]	; 0x4c
 800594e:	e770      	b.n	8005832 <_dtoa_r+0x112>
 8005950:	2301      	movs	r3, #1
 8005952:	e7b3      	b.n	80058bc <_dtoa_r+0x19c>
 8005954:	900f      	str	r0, [sp, #60]	; 0x3c
 8005956:	e7b2      	b.n	80058be <_dtoa_r+0x19e>
 8005958:	9b06      	ldr	r3, [sp, #24]
 800595a:	eba3 0309 	sub.w	r3, r3, r9
 800595e:	9306      	str	r3, [sp, #24]
 8005960:	f1c9 0300 	rsb	r3, r9, #0
 8005964:	930a      	str	r3, [sp, #40]	; 0x28
 8005966:	2300      	movs	r3, #0
 8005968:	930e      	str	r3, [sp, #56]	; 0x38
 800596a:	e7bf      	b.n	80058ec <_dtoa_r+0x1cc>
 800596c:	2300      	movs	r3, #0
 800596e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005970:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005972:	2b00      	cmp	r3, #0
 8005974:	dc59      	bgt.n	8005a2a <_dtoa_r+0x30a>
 8005976:	f04f 0b01 	mov.w	fp, #1
 800597a:	465b      	mov	r3, fp
 800597c:	f8cd b008 	str.w	fp, [sp, #8]
 8005980:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005984:	2200      	movs	r2, #0
 8005986:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005988:	6042      	str	r2, [r0, #4]
 800598a:	2204      	movs	r2, #4
 800598c:	f102 0614 	add.w	r6, r2, #20
 8005990:	429e      	cmp	r6, r3
 8005992:	6841      	ldr	r1, [r0, #4]
 8005994:	d94f      	bls.n	8005a36 <_dtoa_r+0x316>
 8005996:	4628      	mov	r0, r5
 8005998:	f000 fcca 	bl	8006330 <_Balloc>
 800599c:	9008      	str	r0, [sp, #32]
 800599e:	2800      	cmp	r0, #0
 80059a0:	d14d      	bne.n	8005a3e <_dtoa_r+0x31e>
 80059a2:	4602      	mov	r2, r0
 80059a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80059a8:	4b1d      	ldr	r3, [pc, #116]	; (8005a20 <_dtoa_r+0x300>)
 80059aa:	e6cd      	b.n	8005748 <_dtoa_r+0x28>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e7de      	b.n	800596e <_dtoa_r+0x24e>
 80059b0:	2300      	movs	r3, #0
 80059b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80059b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059b6:	eb09 0b03 	add.w	fp, r9, r3
 80059ba:	f10b 0301 	add.w	r3, fp, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	9302      	str	r3, [sp, #8]
 80059c2:	bfb8      	it	lt
 80059c4:	2301      	movlt	r3, #1
 80059c6:	e7dd      	b.n	8005984 <_dtoa_r+0x264>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e7f2      	b.n	80059b2 <_dtoa_r+0x292>
 80059cc:	2401      	movs	r4, #1
 80059ce:	2300      	movs	r3, #0
 80059d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80059d2:	9322      	str	r3, [sp, #136]	; 0x88
 80059d4:	f04f 3bff 	mov.w	fp, #4294967295
 80059d8:	2200      	movs	r2, #0
 80059da:	2312      	movs	r3, #18
 80059dc:	f8cd b008 	str.w	fp, [sp, #8]
 80059e0:	9223      	str	r2, [sp, #140]	; 0x8c
 80059e2:	e7cf      	b.n	8005984 <_dtoa_r+0x264>
 80059e4:	f3af 8000 	nop.w
 80059e8:	636f4361 	.word	0x636f4361
 80059ec:	3fd287a7 	.word	0x3fd287a7
 80059f0:	8b60c8b3 	.word	0x8b60c8b3
 80059f4:	3fc68a28 	.word	0x3fc68a28
 80059f8:	509f79fb 	.word	0x509f79fb
 80059fc:	3fd34413 	.word	0x3fd34413
 8005a00:	08008a45 	.word	0x08008a45
 8005a04:	08008a5c 	.word	0x08008a5c
 8005a08:	7ff00000 	.word	0x7ff00000
 8005a0c:	08008a41 	.word	0x08008a41
 8005a10:	08008a38 	.word	0x08008a38
 8005a14:	08008a15 	.word	0x08008a15
 8005a18:	3ff80000 	.word	0x3ff80000
 8005a1c:	08008b58 	.word	0x08008b58
 8005a20:	08008abb 	.word	0x08008abb
 8005a24:	2301      	movs	r3, #1
 8005a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a28:	e7d4      	b.n	80059d4 <_dtoa_r+0x2b4>
 8005a2a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005a2e:	465b      	mov	r3, fp
 8005a30:	f8cd b008 	str.w	fp, [sp, #8]
 8005a34:	e7a6      	b.n	8005984 <_dtoa_r+0x264>
 8005a36:	3101      	adds	r1, #1
 8005a38:	6041      	str	r1, [r0, #4]
 8005a3a:	0052      	lsls	r2, r2, #1
 8005a3c:	e7a6      	b.n	800598c <_dtoa_r+0x26c>
 8005a3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a40:	9a08      	ldr	r2, [sp, #32]
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	9b02      	ldr	r3, [sp, #8]
 8005a46:	2b0e      	cmp	r3, #14
 8005a48:	f200 80a8 	bhi.w	8005b9c <_dtoa_r+0x47c>
 8005a4c:	2c00      	cmp	r4, #0
 8005a4e:	f000 80a5 	beq.w	8005b9c <_dtoa_r+0x47c>
 8005a52:	f1b9 0f00 	cmp.w	r9, #0
 8005a56:	dd34      	ble.n	8005ac2 <_dtoa_r+0x3a2>
 8005a58:	4a9a      	ldr	r2, [pc, #616]	; (8005cc4 <_dtoa_r+0x5a4>)
 8005a5a:	f009 030f 	and.w	r3, r9, #15
 8005a5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a62:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005a66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005a6e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005a72:	d016      	beq.n	8005aa2 <_dtoa_r+0x382>
 8005a74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a78:	4b93      	ldr	r3, [pc, #588]	; (8005cc8 <_dtoa_r+0x5a8>)
 8005a7a:	2703      	movs	r7, #3
 8005a7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a80:	f7fa ff20 	bl	80008c4 <__aeabi_ddiv>
 8005a84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a88:	f004 040f 	and.w	r4, r4, #15
 8005a8c:	4e8e      	ldr	r6, [pc, #568]	; (8005cc8 <_dtoa_r+0x5a8>)
 8005a8e:	b954      	cbnz	r4, 8005aa6 <_dtoa_r+0x386>
 8005a90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a98:	f7fa ff14 	bl	80008c4 <__aeabi_ddiv>
 8005a9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005aa0:	e029      	b.n	8005af6 <_dtoa_r+0x3d6>
 8005aa2:	2702      	movs	r7, #2
 8005aa4:	e7f2      	b.n	8005a8c <_dtoa_r+0x36c>
 8005aa6:	07e1      	lsls	r1, r4, #31
 8005aa8:	d508      	bpl.n	8005abc <_dtoa_r+0x39c>
 8005aaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005aae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ab2:	f7fa fddd 	bl	8000670 <__aeabi_dmul>
 8005ab6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005aba:	3701      	adds	r7, #1
 8005abc:	1064      	asrs	r4, r4, #1
 8005abe:	3608      	adds	r6, #8
 8005ac0:	e7e5      	b.n	8005a8e <_dtoa_r+0x36e>
 8005ac2:	f000 80a5 	beq.w	8005c10 <_dtoa_r+0x4f0>
 8005ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aca:	f1c9 0400 	rsb	r4, r9, #0
 8005ace:	4b7d      	ldr	r3, [pc, #500]	; (8005cc4 <_dtoa_r+0x5a4>)
 8005ad0:	f004 020f 	and.w	r2, r4, #15
 8005ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f7fa fdc8 	bl	8000670 <__aeabi_dmul>
 8005ae0:	2702      	movs	r7, #2
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ae8:	4e77      	ldr	r6, [pc, #476]	; (8005cc8 <_dtoa_r+0x5a8>)
 8005aea:	1124      	asrs	r4, r4, #4
 8005aec:	2c00      	cmp	r4, #0
 8005aee:	f040 8084 	bne.w	8005bfa <_dtoa_r+0x4da>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1d2      	bne.n	8005a9c <_dtoa_r+0x37c>
 8005af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 808b 	beq.w	8005c14 <_dtoa_r+0x4f4>
 8005afe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	4b6f      	ldr	r3, [pc, #444]	; (8005ccc <_dtoa_r+0x5ac>)
 8005b0e:	f7fb f821 	bl	8000b54 <__aeabi_dcmplt>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d07e      	beq.n	8005c14 <_dtoa_r+0x4f4>
 8005b16:	9b02      	ldr	r3, [sp, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d07b      	beq.n	8005c14 <_dtoa_r+0x4f4>
 8005b1c:	f1bb 0f00 	cmp.w	fp, #0
 8005b20:	dd38      	ble.n	8005b94 <_dtoa_r+0x474>
 8005b22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b26:	2200      	movs	r2, #0
 8005b28:	4b69      	ldr	r3, [pc, #420]	; (8005cd0 <_dtoa_r+0x5b0>)
 8005b2a:	f7fa fda1 	bl	8000670 <__aeabi_dmul>
 8005b2e:	465c      	mov	r4, fp
 8005b30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b34:	f109 38ff 	add.w	r8, r9, #4294967295
 8005b38:	3701      	adds	r7, #1
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	f7fa fd2e 	bl	800059c <__aeabi_i2d>
 8005b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b44:	f7fa fd94 	bl	8000670 <__aeabi_dmul>
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4b62      	ldr	r3, [pc, #392]	; (8005cd4 <_dtoa_r+0x5b4>)
 8005b4c:	f7fa fbda 	bl	8000304 <__adddf3>
 8005b50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005b54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b58:	9611      	str	r6, [sp, #68]	; 0x44
 8005b5a:	2c00      	cmp	r4, #0
 8005b5c:	d15d      	bne.n	8005c1a <_dtoa_r+0x4fa>
 8005b5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b62:	2200      	movs	r2, #0
 8005b64:	4b5c      	ldr	r3, [pc, #368]	; (8005cd8 <_dtoa_r+0x5b8>)
 8005b66:	f7fa fbcb 	bl	8000300 <__aeabi_dsub>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b72:	4633      	mov	r3, r6
 8005b74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b76:	f7fb f80b 	bl	8000b90 <__aeabi_dcmpgt>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	f040 829e 	bne.w	80060bc <_dtoa_r+0x99c>
 8005b80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b86:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005b8a:	f7fa ffe3 	bl	8000b54 <__aeabi_dcmplt>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	f040 8292 	bne.w	80060b8 <_dtoa_r+0x998>
 8005b94:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005b98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f2c0 8153 	blt.w	8005e4a <_dtoa_r+0x72a>
 8005ba4:	f1b9 0f0e 	cmp.w	r9, #14
 8005ba8:	f300 814f 	bgt.w	8005e4a <_dtoa_r+0x72a>
 8005bac:	4b45      	ldr	r3, [pc, #276]	; (8005cc4 <_dtoa_r+0x5a4>)
 8005bae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005bb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bb6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005bba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f280 80db 	bge.w	8005d78 <_dtoa_r+0x658>
 8005bc2:	9b02      	ldr	r3, [sp, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f300 80d7 	bgt.w	8005d78 <_dtoa_r+0x658>
 8005bca:	f040 8274 	bne.w	80060b6 <_dtoa_r+0x996>
 8005bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4b40      	ldr	r3, [pc, #256]	; (8005cd8 <_dtoa_r+0x5b8>)
 8005bd6:	f7fa fd4b 	bl	8000670 <__aeabi_dmul>
 8005bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bde:	f7fa ffcd 	bl	8000b7c <__aeabi_dcmpge>
 8005be2:	9c02      	ldr	r4, [sp, #8]
 8005be4:	4626      	mov	r6, r4
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f040 824a 	bne.w	8006080 <_dtoa_r+0x960>
 8005bec:	2331      	movs	r3, #49	; 0x31
 8005bee:	9f08      	ldr	r7, [sp, #32]
 8005bf0:	f109 0901 	add.w	r9, r9, #1
 8005bf4:	f807 3b01 	strb.w	r3, [r7], #1
 8005bf8:	e246      	b.n	8006088 <_dtoa_r+0x968>
 8005bfa:	07e2      	lsls	r2, r4, #31
 8005bfc:	d505      	bpl.n	8005c0a <_dtoa_r+0x4ea>
 8005bfe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c02:	f7fa fd35 	bl	8000670 <__aeabi_dmul>
 8005c06:	2301      	movs	r3, #1
 8005c08:	3701      	adds	r7, #1
 8005c0a:	1064      	asrs	r4, r4, #1
 8005c0c:	3608      	adds	r6, #8
 8005c0e:	e76d      	b.n	8005aec <_dtoa_r+0x3cc>
 8005c10:	2702      	movs	r7, #2
 8005c12:	e770      	b.n	8005af6 <_dtoa_r+0x3d6>
 8005c14:	46c8      	mov	r8, r9
 8005c16:	9c02      	ldr	r4, [sp, #8]
 8005c18:	e78f      	b.n	8005b3a <_dtoa_r+0x41a>
 8005c1a:	9908      	ldr	r1, [sp, #32]
 8005c1c:	4b29      	ldr	r3, [pc, #164]	; (8005cc4 <_dtoa_r+0x5a4>)
 8005c1e:	4421      	add	r1, r4
 8005c20:	9112      	str	r1, [sp, #72]	; 0x48
 8005c22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c28:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005c2c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c30:	2900      	cmp	r1, #0
 8005c32:	d055      	beq.n	8005ce0 <_dtoa_r+0x5c0>
 8005c34:	2000      	movs	r0, #0
 8005c36:	4929      	ldr	r1, [pc, #164]	; (8005cdc <_dtoa_r+0x5bc>)
 8005c38:	f7fa fe44 	bl	80008c4 <__aeabi_ddiv>
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	4632      	mov	r2, r6
 8005c40:	f7fa fb5e 	bl	8000300 <__aeabi_dsub>
 8005c44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c48:	9f08      	ldr	r7, [sp, #32]
 8005c4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c4e:	f7fa ffbf 	bl	8000bd0 <__aeabi_d2iz>
 8005c52:	4604      	mov	r4, r0
 8005c54:	f7fa fca2 	bl	800059c <__aeabi_i2d>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c60:	f7fa fb4e 	bl	8000300 <__aeabi_dsub>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	3430      	adds	r4, #48	; 0x30
 8005c6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c72:	f807 4b01 	strb.w	r4, [r7], #1
 8005c76:	f7fa ff6d 	bl	8000b54 <__aeabi_dcmplt>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d174      	bne.n	8005d68 <_dtoa_r+0x648>
 8005c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c82:	2000      	movs	r0, #0
 8005c84:	4911      	ldr	r1, [pc, #68]	; (8005ccc <_dtoa_r+0x5ac>)
 8005c86:	f7fa fb3b 	bl	8000300 <__aeabi_dsub>
 8005c8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c8e:	f7fa ff61 	bl	8000b54 <__aeabi_dcmplt>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	f040 80b6 	bne.w	8005e04 <_dtoa_r+0x6e4>
 8005c98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c9a:	429f      	cmp	r7, r3
 8005c9c:	f43f af7a 	beq.w	8005b94 <_dtoa_r+0x474>
 8005ca0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <_dtoa_r+0x5b0>)
 8005ca8:	f7fa fce2 	bl	8000670 <__aeabi_dmul>
 8005cac:	2200      	movs	r2, #0
 8005cae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cb6:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <_dtoa_r+0x5b0>)
 8005cb8:	f7fa fcda 	bl	8000670 <__aeabi_dmul>
 8005cbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cc0:	e7c3      	b.n	8005c4a <_dtoa_r+0x52a>
 8005cc2:	bf00      	nop
 8005cc4:	08008b58 	.word	0x08008b58
 8005cc8:	08008b30 	.word	0x08008b30
 8005ccc:	3ff00000 	.word	0x3ff00000
 8005cd0:	40240000 	.word	0x40240000
 8005cd4:	401c0000 	.word	0x401c0000
 8005cd8:	40140000 	.word	0x40140000
 8005cdc:	3fe00000 	.word	0x3fe00000
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	f7fa fcc4 	bl	8000670 <__aeabi_dmul>
 8005ce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cee:	9c08      	ldr	r4, [sp, #32]
 8005cf0:	9314      	str	r3, [sp, #80]	; 0x50
 8005cf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cf6:	f7fa ff6b 	bl	8000bd0 <__aeabi_d2iz>
 8005cfa:	9015      	str	r0, [sp, #84]	; 0x54
 8005cfc:	f7fa fc4e 	bl	800059c <__aeabi_i2d>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d08:	f7fa fafa 	bl	8000300 <__aeabi_dsub>
 8005d0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d0e:	4606      	mov	r6, r0
 8005d10:	3330      	adds	r3, #48	; 0x30
 8005d12:	f804 3b01 	strb.w	r3, [r4], #1
 8005d16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d18:	460f      	mov	r7, r1
 8005d1a:	429c      	cmp	r4, r3
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	d124      	bne.n	8005d6c <_dtoa_r+0x64c>
 8005d22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d26:	4bb3      	ldr	r3, [pc, #716]	; (8005ff4 <_dtoa_r+0x8d4>)
 8005d28:	f7fa faec 	bl	8000304 <__adddf3>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4630      	mov	r0, r6
 8005d32:	4639      	mov	r1, r7
 8005d34:	f7fa ff2c 	bl	8000b90 <__aeabi_dcmpgt>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d162      	bne.n	8005e02 <_dtoa_r+0x6e2>
 8005d3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d40:	2000      	movs	r0, #0
 8005d42:	49ac      	ldr	r1, [pc, #688]	; (8005ff4 <_dtoa_r+0x8d4>)
 8005d44:	f7fa fadc 	bl	8000300 <__aeabi_dsub>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	4639      	mov	r1, r7
 8005d50:	f7fa ff00 	bl	8000b54 <__aeabi_dcmplt>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	f43f af1d 	beq.w	8005b94 <_dtoa_r+0x474>
 8005d5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005d5c:	1e7b      	subs	r3, r7, #1
 8005d5e:	9314      	str	r3, [sp, #80]	; 0x50
 8005d60:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005d64:	2b30      	cmp	r3, #48	; 0x30
 8005d66:	d0f8      	beq.n	8005d5a <_dtoa_r+0x63a>
 8005d68:	46c1      	mov	r9, r8
 8005d6a:	e03a      	b.n	8005de2 <_dtoa_r+0x6c2>
 8005d6c:	4ba2      	ldr	r3, [pc, #648]	; (8005ff8 <_dtoa_r+0x8d8>)
 8005d6e:	f7fa fc7f 	bl	8000670 <__aeabi_dmul>
 8005d72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d76:	e7bc      	b.n	8005cf2 <_dtoa_r+0x5d2>
 8005d78:	9f08      	ldr	r7, [sp, #32]
 8005d7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d82:	f7fa fd9f 	bl	80008c4 <__aeabi_ddiv>
 8005d86:	f7fa ff23 	bl	8000bd0 <__aeabi_d2iz>
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	f7fa fc06 	bl	800059c <__aeabi_i2d>
 8005d90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d94:	f7fa fc6c 	bl	8000670 <__aeabi_dmul>
 8005d98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4602      	mov	r2, r0
 8005da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005da4:	f7fa faac 	bl	8000300 <__aeabi_dsub>
 8005da8:	f807 6b01 	strb.w	r6, [r7], #1
 8005dac:	9e08      	ldr	r6, [sp, #32]
 8005dae:	9b02      	ldr	r3, [sp, #8]
 8005db0:	1bbe      	subs	r6, r7, r6
 8005db2:	42b3      	cmp	r3, r6
 8005db4:	d13a      	bne.n	8005e2c <_dtoa_r+0x70c>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	f7fa faa3 	bl	8000304 <__adddf3>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dca:	f7fa fee1 	bl	8000b90 <__aeabi_dcmpgt>
 8005dce:	bb58      	cbnz	r0, 8005e28 <_dtoa_r+0x708>
 8005dd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dd8:	f7fa feb2 	bl	8000b40 <__aeabi_dcmpeq>
 8005ddc:	b108      	cbz	r0, 8005de2 <_dtoa_r+0x6c2>
 8005dde:	07e1      	lsls	r1, r4, #31
 8005de0:	d422      	bmi.n	8005e28 <_dtoa_r+0x708>
 8005de2:	4628      	mov	r0, r5
 8005de4:	4651      	mov	r1, sl
 8005de6:	f000 fae3 	bl	80063b0 <_Bfree>
 8005dea:	2300      	movs	r3, #0
 8005dec:	703b      	strb	r3, [r7, #0]
 8005dee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005df0:	f109 0001 	add.w	r0, r9, #1
 8005df4:	6018      	str	r0, [r3, #0]
 8005df6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f43f acdf 	beq.w	80057bc <_dtoa_r+0x9c>
 8005dfe:	601f      	str	r7, [r3, #0]
 8005e00:	e4dc      	b.n	80057bc <_dtoa_r+0x9c>
 8005e02:	4627      	mov	r7, r4
 8005e04:	463b      	mov	r3, r7
 8005e06:	461f      	mov	r7, r3
 8005e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e0c:	2a39      	cmp	r2, #57	; 0x39
 8005e0e:	d107      	bne.n	8005e20 <_dtoa_r+0x700>
 8005e10:	9a08      	ldr	r2, [sp, #32]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d1f7      	bne.n	8005e06 <_dtoa_r+0x6e6>
 8005e16:	2230      	movs	r2, #48	; 0x30
 8005e18:	9908      	ldr	r1, [sp, #32]
 8005e1a:	f108 0801 	add.w	r8, r8, #1
 8005e1e:	700a      	strb	r2, [r1, #0]
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	3201      	adds	r2, #1
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e79f      	b.n	8005d68 <_dtoa_r+0x648>
 8005e28:	46c8      	mov	r8, r9
 8005e2a:	e7eb      	b.n	8005e04 <_dtoa_r+0x6e4>
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	4b72      	ldr	r3, [pc, #456]	; (8005ff8 <_dtoa_r+0x8d8>)
 8005e30:	f7fa fc1e 	bl	8000670 <__aeabi_dmul>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f7fa fe7e 	bl	8000b40 <__aeabi_dcmpeq>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d098      	beq.n	8005d7a <_dtoa_r+0x65a>
 8005e48:	e7cb      	b.n	8005de2 <_dtoa_r+0x6c2>
 8005e4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e4c:	2a00      	cmp	r2, #0
 8005e4e:	f000 80cd 	beq.w	8005fec <_dtoa_r+0x8cc>
 8005e52:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e54:	2a01      	cmp	r2, #1
 8005e56:	f300 80af 	bgt.w	8005fb8 <_dtoa_r+0x898>
 8005e5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e5c:	2a00      	cmp	r2, #0
 8005e5e:	f000 80a7 	beq.w	8005fb0 <_dtoa_r+0x890>
 8005e62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e68:	9f06      	ldr	r7, [sp, #24]
 8005e6a:	9a06      	ldr	r2, [sp, #24]
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	441a      	add	r2, r3
 8005e70:	9206      	str	r2, [sp, #24]
 8005e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e74:	4628      	mov	r0, r5
 8005e76:	441a      	add	r2, r3
 8005e78:	9209      	str	r2, [sp, #36]	; 0x24
 8005e7a:	f000 fb53 	bl	8006524 <__i2b>
 8005e7e:	4606      	mov	r6, r0
 8005e80:	2f00      	cmp	r7, #0
 8005e82:	dd0c      	ble.n	8005e9e <_dtoa_r+0x77e>
 8005e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	dd09      	ble.n	8005e9e <_dtoa_r+0x77e>
 8005e8a:	42bb      	cmp	r3, r7
 8005e8c:	bfa8      	it	ge
 8005e8e:	463b      	movge	r3, r7
 8005e90:	9a06      	ldr	r2, [sp, #24]
 8005e92:	1aff      	subs	r7, r7, r3
 8005e94:	1ad2      	subs	r2, r2, r3
 8005e96:	9206      	str	r2, [sp, #24]
 8005e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea0:	b1f3      	cbz	r3, 8005ee0 <_dtoa_r+0x7c0>
 8005ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80a9 	beq.w	8005ffc <_dtoa_r+0x8dc>
 8005eaa:	2c00      	cmp	r4, #0
 8005eac:	dd10      	ble.n	8005ed0 <_dtoa_r+0x7b0>
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4622      	mov	r2, r4
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	f000 fbf0 	bl	8006698 <__pow5mult>
 8005eb8:	4652      	mov	r2, sl
 8005eba:	4601      	mov	r1, r0
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f000 fb46 	bl	8006550 <__multiply>
 8005ec4:	4680      	mov	r8, r0
 8005ec6:	4651      	mov	r1, sl
 8005ec8:	4628      	mov	r0, r5
 8005eca:	f000 fa71 	bl	80063b0 <_Bfree>
 8005ece:	46c2      	mov	sl, r8
 8005ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ed2:	1b1a      	subs	r2, r3, r4
 8005ed4:	d004      	beq.n	8005ee0 <_dtoa_r+0x7c0>
 8005ed6:	4651      	mov	r1, sl
 8005ed8:	4628      	mov	r0, r5
 8005eda:	f000 fbdd 	bl	8006698 <__pow5mult>
 8005ede:	4682      	mov	sl, r0
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 fb1e 	bl	8006524 <__i2b>
 8005ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eea:	4604      	mov	r4, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f340 8087 	ble.w	8006000 <_dtoa_r+0x8e0>
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4601      	mov	r1, r0
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f000 fbce 	bl	8006698 <__pow5mult>
 8005efc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005efe:	4604      	mov	r4, r0
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	f340 8080 	ble.w	8006006 <_dtoa_r+0x8e6>
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	6923      	ldr	r3, [r4, #16]
 8005f0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f10:	6918      	ldr	r0, [r3, #16]
 8005f12:	f000 fab9 	bl	8006488 <__hi0bits>
 8005f16:	f1c0 0020 	rsb	r0, r0, #32
 8005f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1c:	4418      	add	r0, r3
 8005f1e:	f010 001f 	ands.w	r0, r0, #31
 8005f22:	f000 8092 	beq.w	800604a <_dtoa_r+0x92a>
 8005f26:	f1c0 0320 	rsb	r3, r0, #32
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	f340 808a 	ble.w	8006044 <_dtoa_r+0x924>
 8005f30:	f1c0 001c 	rsb	r0, r0, #28
 8005f34:	9b06      	ldr	r3, [sp, #24]
 8005f36:	4407      	add	r7, r0
 8005f38:	4403      	add	r3, r0
 8005f3a:	9306      	str	r3, [sp, #24]
 8005f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3e:	4403      	add	r3, r0
 8005f40:	9309      	str	r3, [sp, #36]	; 0x24
 8005f42:	9b06      	ldr	r3, [sp, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	dd05      	ble.n	8005f54 <_dtoa_r+0x834>
 8005f48:	4651      	mov	r1, sl
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f000 fbfd 	bl	800674c <__lshift>
 8005f52:	4682      	mov	sl, r0
 8005f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	dd05      	ble.n	8005f66 <_dtoa_r+0x846>
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f000 fbf4 	bl	800674c <__lshift>
 8005f64:	4604      	mov	r4, r0
 8005f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d070      	beq.n	800604e <_dtoa_r+0x92e>
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	4650      	mov	r0, sl
 8005f70:	f000 fc58 	bl	8006824 <__mcmp>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	da6a      	bge.n	800604e <_dtoa_r+0x92e>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4651      	mov	r1, sl
 8005f7c:	220a      	movs	r2, #10
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 fa38 	bl	80063f4 <__multadd>
 8005f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f86:	4682      	mov	sl, r0
 8005f88:	f109 39ff 	add.w	r9, r9, #4294967295
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 8193 	beq.w	80062b8 <_dtoa_r+0xb98>
 8005f92:	4631      	mov	r1, r6
 8005f94:	2300      	movs	r3, #0
 8005f96:	220a      	movs	r2, #10
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f000 fa2b 	bl	80063f4 <__multadd>
 8005f9e:	f1bb 0f00 	cmp.w	fp, #0
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	f300 8093 	bgt.w	80060ce <_dtoa_r+0x9ae>
 8005fa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	dc57      	bgt.n	800605e <_dtoa_r+0x93e>
 8005fae:	e08e      	b.n	80060ce <_dtoa_r+0x9ae>
 8005fb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005fb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fb6:	e756      	b.n	8005e66 <_dtoa_r+0x746>
 8005fb8:	9b02      	ldr	r3, [sp, #8]
 8005fba:	1e5c      	subs	r4, r3, #1
 8005fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fbe:	42a3      	cmp	r3, r4
 8005fc0:	bfb7      	itett	lt
 8005fc2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005fc4:	1b1c      	subge	r4, r3, r4
 8005fc6:	1ae2      	sublt	r2, r4, r3
 8005fc8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005fca:	bfbe      	ittt	lt
 8005fcc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005fce:	189b      	addlt	r3, r3, r2
 8005fd0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005fd2:	9b02      	ldr	r3, [sp, #8]
 8005fd4:	bfb8      	it	lt
 8005fd6:	2400      	movlt	r4, #0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bfbb      	ittet	lt
 8005fdc:	9b06      	ldrlt	r3, [sp, #24]
 8005fde:	9a02      	ldrlt	r2, [sp, #8]
 8005fe0:	9f06      	ldrge	r7, [sp, #24]
 8005fe2:	1a9f      	sublt	r7, r3, r2
 8005fe4:	bfac      	ite	ge
 8005fe6:	9b02      	ldrge	r3, [sp, #8]
 8005fe8:	2300      	movlt	r3, #0
 8005fea:	e73e      	b.n	8005e6a <_dtoa_r+0x74a>
 8005fec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005fee:	9f06      	ldr	r7, [sp, #24]
 8005ff0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005ff2:	e745      	b.n	8005e80 <_dtoa_r+0x760>
 8005ff4:	3fe00000 	.word	0x3fe00000
 8005ff8:	40240000 	.word	0x40240000
 8005ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ffe:	e76a      	b.n	8005ed6 <_dtoa_r+0x7b6>
 8006000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006002:	2b01      	cmp	r3, #1
 8006004:	dc19      	bgt.n	800603a <_dtoa_r+0x91a>
 8006006:	9b04      	ldr	r3, [sp, #16]
 8006008:	b9bb      	cbnz	r3, 800603a <_dtoa_r+0x91a>
 800600a:	9b05      	ldr	r3, [sp, #20]
 800600c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006010:	b99b      	cbnz	r3, 800603a <_dtoa_r+0x91a>
 8006012:	9b05      	ldr	r3, [sp, #20]
 8006014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006018:	0d1b      	lsrs	r3, r3, #20
 800601a:	051b      	lsls	r3, r3, #20
 800601c:	b183      	cbz	r3, 8006040 <_dtoa_r+0x920>
 800601e:	f04f 0801 	mov.w	r8, #1
 8006022:	9b06      	ldr	r3, [sp, #24]
 8006024:	3301      	adds	r3, #1
 8006026:	9306      	str	r3, [sp, #24]
 8006028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800602a:	3301      	adds	r3, #1
 800602c:	9309      	str	r3, [sp, #36]	; 0x24
 800602e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006030:	2b00      	cmp	r3, #0
 8006032:	f47f af6a 	bne.w	8005f0a <_dtoa_r+0x7ea>
 8006036:	2001      	movs	r0, #1
 8006038:	e76f      	b.n	8005f1a <_dtoa_r+0x7fa>
 800603a:	f04f 0800 	mov.w	r8, #0
 800603e:	e7f6      	b.n	800602e <_dtoa_r+0x90e>
 8006040:	4698      	mov	r8, r3
 8006042:	e7f4      	b.n	800602e <_dtoa_r+0x90e>
 8006044:	f43f af7d 	beq.w	8005f42 <_dtoa_r+0x822>
 8006048:	4618      	mov	r0, r3
 800604a:	301c      	adds	r0, #28
 800604c:	e772      	b.n	8005f34 <_dtoa_r+0x814>
 800604e:	9b02      	ldr	r3, [sp, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	dc36      	bgt.n	80060c2 <_dtoa_r+0x9a2>
 8006054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006056:	2b02      	cmp	r3, #2
 8006058:	dd33      	ble.n	80060c2 <_dtoa_r+0x9a2>
 800605a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800605e:	f1bb 0f00 	cmp.w	fp, #0
 8006062:	d10d      	bne.n	8006080 <_dtoa_r+0x960>
 8006064:	4621      	mov	r1, r4
 8006066:	465b      	mov	r3, fp
 8006068:	2205      	movs	r2, #5
 800606a:	4628      	mov	r0, r5
 800606c:	f000 f9c2 	bl	80063f4 <__multadd>
 8006070:	4601      	mov	r1, r0
 8006072:	4604      	mov	r4, r0
 8006074:	4650      	mov	r0, sl
 8006076:	f000 fbd5 	bl	8006824 <__mcmp>
 800607a:	2800      	cmp	r0, #0
 800607c:	f73f adb6 	bgt.w	8005bec <_dtoa_r+0x4cc>
 8006080:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006082:	9f08      	ldr	r7, [sp, #32]
 8006084:	ea6f 0903 	mvn.w	r9, r3
 8006088:	f04f 0800 	mov.w	r8, #0
 800608c:	4621      	mov	r1, r4
 800608e:	4628      	mov	r0, r5
 8006090:	f000 f98e 	bl	80063b0 <_Bfree>
 8006094:	2e00      	cmp	r6, #0
 8006096:	f43f aea4 	beq.w	8005de2 <_dtoa_r+0x6c2>
 800609a:	f1b8 0f00 	cmp.w	r8, #0
 800609e:	d005      	beq.n	80060ac <_dtoa_r+0x98c>
 80060a0:	45b0      	cmp	r8, r6
 80060a2:	d003      	beq.n	80060ac <_dtoa_r+0x98c>
 80060a4:	4641      	mov	r1, r8
 80060a6:	4628      	mov	r0, r5
 80060a8:	f000 f982 	bl	80063b0 <_Bfree>
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 f97e 	bl	80063b0 <_Bfree>
 80060b4:	e695      	b.n	8005de2 <_dtoa_r+0x6c2>
 80060b6:	2400      	movs	r4, #0
 80060b8:	4626      	mov	r6, r4
 80060ba:	e7e1      	b.n	8006080 <_dtoa_r+0x960>
 80060bc:	46c1      	mov	r9, r8
 80060be:	4626      	mov	r6, r4
 80060c0:	e594      	b.n	8005bec <_dtoa_r+0x4cc>
 80060c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 80fc 	beq.w	80062c6 <_dtoa_r+0xba6>
 80060ce:	2f00      	cmp	r7, #0
 80060d0:	dd05      	ble.n	80060de <_dtoa_r+0x9be>
 80060d2:	4631      	mov	r1, r6
 80060d4:	463a      	mov	r2, r7
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 fb38 	bl	800674c <__lshift>
 80060dc:	4606      	mov	r6, r0
 80060de:	f1b8 0f00 	cmp.w	r8, #0
 80060e2:	d05c      	beq.n	800619e <_dtoa_r+0xa7e>
 80060e4:	4628      	mov	r0, r5
 80060e6:	6871      	ldr	r1, [r6, #4]
 80060e8:	f000 f922 	bl	8006330 <_Balloc>
 80060ec:	4607      	mov	r7, r0
 80060ee:	b928      	cbnz	r0, 80060fc <_dtoa_r+0x9dc>
 80060f0:	4602      	mov	r2, r0
 80060f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80060f6:	4b7e      	ldr	r3, [pc, #504]	; (80062f0 <_dtoa_r+0xbd0>)
 80060f8:	f7ff bb26 	b.w	8005748 <_dtoa_r+0x28>
 80060fc:	6932      	ldr	r2, [r6, #16]
 80060fe:	f106 010c 	add.w	r1, r6, #12
 8006102:	3202      	adds	r2, #2
 8006104:	0092      	lsls	r2, r2, #2
 8006106:	300c      	adds	r0, #12
 8006108:	f7fe fdd8 	bl	8004cbc <memcpy>
 800610c:	2201      	movs	r2, #1
 800610e:	4639      	mov	r1, r7
 8006110:	4628      	mov	r0, r5
 8006112:	f000 fb1b 	bl	800674c <__lshift>
 8006116:	46b0      	mov	r8, r6
 8006118:	4606      	mov	r6, r0
 800611a:	9b08      	ldr	r3, [sp, #32]
 800611c:	3301      	adds	r3, #1
 800611e:	9302      	str	r3, [sp, #8]
 8006120:	9b08      	ldr	r3, [sp, #32]
 8006122:	445b      	add	r3, fp
 8006124:	930a      	str	r3, [sp, #40]	; 0x28
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	9309      	str	r3, [sp, #36]	; 0x24
 800612e:	9b02      	ldr	r3, [sp, #8]
 8006130:	4621      	mov	r1, r4
 8006132:	4650      	mov	r0, sl
 8006134:	f103 3bff 	add.w	fp, r3, #4294967295
 8006138:	f7ff fa65 	bl	8005606 <quorem>
 800613c:	4603      	mov	r3, r0
 800613e:	4641      	mov	r1, r8
 8006140:	3330      	adds	r3, #48	; 0x30
 8006142:	9004      	str	r0, [sp, #16]
 8006144:	4650      	mov	r0, sl
 8006146:	930b      	str	r3, [sp, #44]	; 0x2c
 8006148:	f000 fb6c 	bl	8006824 <__mcmp>
 800614c:	4632      	mov	r2, r6
 800614e:	9006      	str	r0, [sp, #24]
 8006150:	4621      	mov	r1, r4
 8006152:	4628      	mov	r0, r5
 8006154:	f000 fb82 	bl	800685c <__mdiff>
 8006158:	68c2      	ldr	r2, [r0, #12]
 800615a:	4607      	mov	r7, r0
 800615c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800615e:	bb02      	cbnz	r2, 80061a2 <_dtoa_r+0xa82>
 8006160:	4601      	mov	r1, r0
 8006162:	4650      	mov	r0, sl
 8006164:	f000 fb5e 	bl	8006824 <__mcmp>
 8006168:	4602      	mov	r2, r0
 800616a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800616c:	4639      	mov	r1, r7
 800616e:	4628      	mov	r0, r5
 8006170:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006174:	f000 f91c 	bl	80063b0 <_Bfree>
 8006178:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800617a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800617c:	9f02      	ldr	r7, [sp, #8]
 800617e:	ea43 0102 	orr.w	r1, r3, r2
 8006182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006184:	430b      	orrs	r3, r1
 8006186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006188:	d10d      	bne.n	80061a6 <_dtoa_r+0xa86>
 800618a:	2b39      	cmp	r3, #57	; 0x39
 800618c:	d027      	beq.n	80061de <_dtoa_r+0xabe>
 800618e:	9a06      	ldr	r2, [sp, #24]
 8006190:	2a00      	cmp	r2, #0
 8006192:	dd01      	ble.n	8006198 <_dtoa_r+0xa78>
 8006194:	9b04      	ldr	r3, [sp, #16]
 8006196:	3331      	adds	r3, #49	; 0x31
 8006198:	f88b 3000 	strb.w	r3, [fp]
 800619c:	e776      	b.n	800608c <_dtoa_r+0x96c>
 800619e:	4630      	mov	r0, r6
 80061a0:	e7b9      	b.n	8006116 <_dtoa_r+0x9f6>
 80061a2:	2201      	movs	r2, #1
 80061a4:	e7e2      	b.n	800616c <_dtoa_r+0xa4c>
 80061a6:	9906      	ldr	r1, [sp, #24]
 80061a8:	2900      	cmp	r1, #0
 80061aa:	db04      	blt.n	80061b6 <_dtoa_r+0xa96>
 80061ac:	9822      	ldr	r0, [sp, #136]	; 0x88
 80061ae:	4301      	orrs	r1, r0
 80061b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061b2:	4301      	orrs	r1, r0
 80061b4:	d120      	bne.n	80061f8 <_dtoa_r+0xad8>
 80061b6:	2a00      	cmp	r2, #0
 80061b8:	ddee      	ble.n	8006198 <_dtoa_r+0xa78>
 80061ba:	4651      	mov	r1, sl
 80061bc:	2201      	movs	r2, #1
 80061be:	4628      	mov	r0, r5
 80061c0:	9302      	str	r3, [sp, #8]
 80061c2:	f000 fac3 	bl	800674c <__lshift>
 80061c6:	4621      	mov	r1, r4
 80061c8:	4682      	mov	sl, r0
 80061ca:	f000 fb2b 	bl	8006824 <__mcmp>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	9b02      	ldr	r3, [sp, #8]
 80061d2:	dc02      	bgt.n	80061da <_dtoa_r+0xaba>
 80061d4:	d1e0      	bne.n	8006198 <_dtoa_r+0xa78>
 80061d6:	07da      	lsls	r2, r3, #31
 80061d8:	d5de      	bpl.n	8006198 <_dtoa_r+0xa78>
 80061da:	2b39      	cmp	r3, #57	; 0x39
 80061dc:	d1da      	bne.n	8006194 <_dtoa_r+0xa74>
 80061de:	2339      	movs	r3, #57	; 0x39
 80061e0:	f88b 3000 	strb.w	r3, [fp]
 80061e4:	463b      	mov	r3, r7
 80061e6:	461f      	mov	r7, r3
 80061e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	2a39      	cmp	r2, #57	; 0x39
 80061f0:	d050      	beq.n	8006294 <_dtoa_r+0xb74>
 80061f2:	3201      	adds	r2, #1
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	e749      	b.n	800608c <_dtoa_r+0x96c>
 80061f8:	2a00      	cmp	r2, #0
 80061fa:	dd03      	ble.n	8006204 <_dtoa_r+0xae4>
 80061fc:	2b39      	cmp	r3, #57	; 0x39
 80061fe:	d0ee      	beq.n	80061de <_dtoa_r+0xabe>
 8006200:	3301      	adds	r3, #1
 8006202:	e7c9      	b.n	8006198 <_dtoa_r+0xa78>
 8006204:	9a02      	ldr	r2, [sp, #8]
 8006206:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006208:	f802 3c01 	strb.w	r3, [r2, #-1]
 800620c:	428a      	cmp	r2, r1
 800620e:	d02a      	beq.n	8006266 <_dtoa_r+0xb46>
 8006210:	4651      	mov	r1, sl
 8006212:	2300      	movs	r3, #0
 8006214:	220a      	movs	r2, #10
 8006216:	4628      	mov	r0, r5
 8006218:	f000 f8ec 	bl	80063f4 <__multadd>
 800621c:	45b0      	cmp	r8, r6
 800621e:	4682      	mov	sl, r0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	f04f 020a 	mov.w	r2, #10
 8006228:	4641      	mov	r1, r8
 800622a:	4628      	mov	r0, r5
 800622c:	d107      	bne.n	800623e <_dtoa_r+0xb1e>
 800622e:	f000 f8e1 	bl	80063f4 <__multadd>
 8006232:	4680      	mov	r8, r0
 8006234:	4606      	mov	r6, r0
 8006236:	9b02      	ldr	r3, [sp, #8]
 8006238:	3301      	adds	r3, #1
 800623a:	9302      	str	r3, [sp, #8]
 800623c:	e777      	b.n	800612e <_dtoa_r+0xa0e>
 800623e:	f000 f8d9 	bl	80063f4 <__multadd>
 8006242:	4631      	mov	r1, r6
 8006244:	4680      	mov	r8, r0
 8006246:	2300      	movs	r3, #0
 8006248:	220a      	movs	r2, #10
 800624a:	4628      	mov	r0, r5
 800624c:	f000 f8d2 	bl	80063f4 <__multadd>
 8006250:	4606      	mov	r6, r0
 8006252:	e7f0      	b.n	8006236 <_dtoa_r+0xb16>
 8006254:	f1bb 0f00 	cmp.w	fp, #0
 8006258:	bfcc      	ite	gt
 800625a:	465f      	movgt	r7, fp
 800625c:	2701      	movle	r7, #1
 800625e:	f04f 0800 	mov.w	r8, #0
 8006262:	9a08      	ldr	r2, [sp, #32]
 8006264:	4417      	add	r7, r2
 8006266:	4651      	mov	r1, sl
 8006268:	2201      	movs	r2, #1
 800626a:	4628      	mov	r0, r5
 800626c:	9302      	str	r3, [sp, #8]
 800626e:	f000 fa6d 	bl	800674c <__lshift>
 8006272:	4621      	mov	r1, r4
 8006274:	4682      	mov	sl, r0
 8006276:	f000 fad5 	bl	8006824 <__mcmp>
 800627a:	2800      	cmp	r0, #0
 800627c:	dcb2      	bgt.n	80061e4 <_dtoa_r+0xac4>
 800627e:	d102      	bne.n	8006286 <_dtoa_r+0xb66>
 8006280:	9b02      	ldr	r3, [sp, #8]
 8006282:	07db      	lsls	r3, r3, #31
 8006284:	d4ae      	bmi.n	80061e4 <_dtoa_r+0xac4>
 8006286:	463b      	mov	r3, r7
 8006288:	461f      	mov	r7, r3
 800628a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800628e:	2a30      	cmp	r2, #48	; 0x30
 8006290:	d0fa      	beq.n	8006288 <_dtoa_r+0xb68>
 8006292:	e6fb      	b.n	800608c <_dtoa_r+0x96c>
 8006294:	9a08      	ldr	r2, [sp, #32]
 8006296:	429a      	cmp	r2, r3
 8006298:	d1a5      	bne.n	80061e6 <_dtoa_r+0xac6>
 800629a:	2331      	movs	r3, #49	; 0x31
 800629c:	f109 0901 	add.w	r9, r9, #1
 80062a0:	7013      	strb	r3, [r2, #0]
 80062a2:	e6f3      	b.n	800608c <_dtoa_r+0x96c>
 80062a4:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <_dtoa_r+0xbd4>)
 80062a6:	f7ff baa7 	b.w	80057f8 <_dtoa_r+0xd8>
 80062aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f47f aa80 	bne.w	80057b2 <_dtoa_r+0x92>
 80062b2:	4b11      	ldr	r3, [pc, #68]	; (80062f8 <_dtoa_r+0xbd8>)
 80062b4:	f7ff baa0 	b.w	80057f8 <_dtoa_r+0xd8>
 80062b8:	f1bb 0f00 	cmp.w	fp, #0
 80062bc:	dc03      	bgt.n	80062c6 <_dtoa_r+0xba6>
 80062be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	f73f aecc 	bgt.w	800605e <_dtoa_r+0x93e>
 80062c6:	9f08      	ldr	r7, [sp, #32]
 80062c8:	4621      	mov	r1, r4
 80062ca:	4650      	mov	r0, sl
 80062cc:	f7ff f99b 	bl	8005606 <quorem>
 80062d0:	9a08      	ldr	r2, [sp, #32]
 80062d2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80062d6:	f807 3b01 	strb.w	r3, [r7], #1
 80062da:	1aba      	subs	r2, r7, r2
 80062dc:	4593      	cmp	fp, r2
 80062de:	ddb9      	ble.n	8006254 <_dtoa_r+0xb34>
 80062e0:	4651      	mov	r1, sl
 80062e2:	2300      	movs	r3, #0
 80062e4:	220a      	movs	r2, #10
 80062e6:	4628      	mov	r0, r5
 80062e8:	f000 f884 	bl	80063f4 <__multadd>
 80062ec:	4682      	mov	sl, r0
 80062ee:	e7eb      	b.n	80062c8 <_dtoa_r+0xba8>
 80062f0:	08008abb 	.word	0x08008abb
 80062f4:	08008a14 	.word	0x08008a14
 80062f8:	08008a38 	.word	0x08008a38

080062fc <_localeconv_r>:
 80062fc:	4800      	ldr	r0, [pc, #0]	; (8006300 <_localeconv_r+0x4>)
 80062fe:	4770      	bx	lr
 8006300:	20000164 	.word	0x20000164

08006304 <malloc>:
 8006304:	4b02      	ldr	r3, [pc, #8]	; (8006310 <malloc+0xc>)
 8006306:	4601      	mov	r1, r0
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	f000 bbed 	b.w	8006ae8 <_malloc_r>
 800630e:	bf00      	nop
 8006310:	20000010 	.word	0x20000010

08006314 <memchr>:
 8006314:	4603      	mov	r3, r0
 8006316:	b510      	push	{r4, lr}
 8006318:	b2c9      	uxtb	r1, r1
 800631a:	4402      	add	r2, r0
 800631c:	4293      	cmp	r3, r2
 800631e:	4618      	mov	r0, r3
 8006320:	d101      	bne.n	8006326 <memchr+0x12>
 8006322:	2000      	movs	r0, #0
 8006324:	e003      	b.n	800632e <memchr+0x1a>
 8006326:	7804      	ldrb	r4, [r0, #0]
 8006328:	3301      	adds	r3, #1
 800632a:	428c      	cmp	r4, r1
 800632c:	d1f6      	bne.n	800631c <memchr+0x8>
 800632e:	bd10      	pop	{r4, pc}

08006330 <_Balloc>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006334:	4604      	mov	r4, r0
 8006336:	460d      	mov	r5, r1
 8006338:	b976      	cbnz	r6, 8006358 <_Balloc+0x28>
 800633a:	2010      	movs	r0, #16
 800633c:	f7ff ffe2 	bl	8006304 <malloc>
 8006340:	4602      	mov	r2, r0
 8006342:	6260      	str	r0, [r4, #36]	; 0x24
 8006344:	b920      	cbnz	r0, 8006350 <_Balloc+0x20>
 8006346:	2166      	movs	r1, #102	; 0x66
 8006348:	4b17      	ldr	r3, [pc, #92]	; (80063a8 <_Balloc+0x78>)
 800634a:	4818      	ldr	r0, [pc, #96]	; (80063ac <_Balloc+0x7c>)
 800634c:	f000 fd92 	bl	8006e74 <__assert_func>
 8006350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006354:	6006      	str	r6, [r0, #0]
 8006356:	60c6      	str	r6, [r0, #12]
 8006358:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800635a:	68f3      	ldr	r3, [r6, #12]
 800635c:	b183      	cbz	r3, 8006380 <_Balloc+0x50>
 800635e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006366:	b9b8      	cbnz	r0, 8006398 <_Balloc+0x68>
 8006368:	2101      	movs	r1, #1
 800636a:	fa01 f605 	lsl.w	r6, r1, r5
 800636e:	1d72      	adds	r2, r6, #5
 8006370:	4620      	mov	r0, r4
 8006372:	0092      	lsls	r2, r2, #2
 8006374:	f000 fb5e 	bl	8006a34 <_calloc_r>
 8006378:	b160      	cbz	r0, 8006394 <_Balloc+0x64>
 800637a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800637e:	e00e      	b.n	800639e <_Balloc+0x6e>
 8006380:	2221      	movs	r2, #33	; 0x21
 8006382:	2104      	movs	r1, #4
 8006384:	4620      	mov	r0, r4
 8006386:	f000 fb55 	bl	8006a34 <_calloc_r>
 800638a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800638c:	60f0      	str	r0, [r6, #12]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e4      	bne.n	800635e <_Balloc+0x2e>
 8006394:	2000      	movs	r0, #0
 8006396:	bd70      	pop	{r4, r5, r6, pc}
 8006398:	6802      	ldr	r2, [r0, #0]
 800639a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800639e:	2300      	movs	r3, #0
 80063a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063a4:	e7f7      	b.n	8006396 <_Balloc+0x66>
 80063a6:	bf00      	nop
 80063a8:	08008a45 	.word	0x08008a45
 80063ac:	08008acc 	.word	0x08008acc

080063b0 <_Bfree>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063b4:	4605      	mov	r5, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	b976      	cbnz	r6, 80063d8 <_Bfree+0x28>
 80063ba:	2010      	movs	r0, #16
 80063bc:	f7ff ffa2 	bl	8006304 <malloc>
 80063c0:	4602      	mov	r2, r0
 80063c2:	6268      	str	r0, [r5, #36]	; 0x24
 80063c4:	b920      	cbnz	r0, 80063d0 <_Bfree+0x20>
 80063c6:	218a      	movs	r1, #138	; 0x8a
 80063c8:	4b08      	ldr	r3, [pc, #32]	; (80063ec <_Bfree+0x3c>)
 80063ca:	4809      	ldr	r0, [pc, #36]	; (80063f0 <_Bfree+0x40>)
 80063cc:	f000 fd52 	bl	8006e74 <__assert_func>
 80063d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063d4:	6006      	str	r6, [r0, #0]
 80063d6:	60c6      	str	r6, [r0, #12]
 80063d8:	b13c      	cbz	r4, 80063ea <_Bfree+0x3a>
 80063da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063dc:	6862      	ldr	r2, [r4, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063e4:	6021      	str	r1, [r4, #0]
 80063e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	08008a45 	.word	0x08008a45
 80063f0:	08008acc 	.word	0x08008acc

080063f4 <__multadd>:
 80063f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f8:	4698      	mov	r8, r3
 80063fa:	460c      	mov	r4, r1
 80063fc:	2300      	movs	r3, #0
 80063fe:	690e      	ldr	r6, [r1, #16]
 8006400:	4607      	mov	r7, r0
 8006402:	f101 0014 	add.w	r0, r1, #20
 8006406:	6805      	ldr	r5, [r0, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	b2a9      	uxth	r1, r5
 800640c:	fb02 8101 	mla	r1, r2, r1, r8
 8006410:	0c2d      	lsrs	r5, r5, #16
 8006412:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006416:	fb02 c505 	mla	r5, r2, r5, ip
 800641a:	b289      	uxth	r1, r1
 800641c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006420:	429e      	cmp	r6, r3
 8006422:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006426:	f840 1b04 	str.w	r1, [r0], #4
 800642a:	dcec      	bgt.n	8006406 <__multadd+0x12>
 800642c:	f1b8 0f00 	cmp.w	r8, #0
 8006430:	d022      	beq.n	8006478 <__multadd+0x84>
 8006432:	68a3      	ldr	r3, [r4, #8]
 8006434:	42b3      	cmp	r3, r6
 8006436:	dc19      	bgt.n	800646c <__multadd+0x78>
 8006438:	6861      	ldr	r1, [r4, #4]
 800643a:	4638      	mov	r0, r7
 800643c:	3101      	adds	r1, #1
 800643e:	f7ff ff77 	bl	8006330 <_Balloc>
 8006442:	4605      	mov	r5, r0
 8006444:	b928      	cbnz	r0, 8006452 <__multadd+0x5e>
 8006446:	4602      	mov	r2, r0
 8006448:	21b5      	movs	r1, #181	; 0xb5
 800644a:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <__multadd+0x8c>)
 800644c:	480d      	ldr	r0, [pc, #52]	; (8006484 <__multadd+0x90>)
 800644e:	f000 fd11 	bl	8006e74 <__assert_func>
 8006452:	6922      	ldr	r2, [r4, #16]
 8006454:	f104 010c 	add.w	r1, r4, #12
 8006458:	3202      	adds	r2, #2
 800645a:	0092      	lsls	r2, r2, #2
 800645c:	300c      	adds	r0, #12
 800645e:	f7fe fc2d 	bl	8004cbc <memcpy>
 8006462:	4621      	mov	r1, r4
 8006464:	4638      	mov	r0, r7
 8006466:	f7ff ffa3 	bl	80063b0 <_Bfree>
 800646a:	462c      	mov	r4, r5
 800646c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006470:	3601      	adds	r6, #1
 8006472:	f8c3 8014 	str.w	r8, [r3, #20]
 8006476:	6126      	str	r6, [r4, #16]
 8006478:	4620      	mov	r0, r4
 800647a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800647e:	bf00      	nop
 8006480:	08008abb 	.word	0x08008abb
 8006484:	08008acc 	.word	0x08008acc

08006488 <__hi0bits>:
 8006488:	0c02      	lsrs	r2, r0, #16
 800648a:	0412      	lsls	r2, r2, #16
 800648c:	4603      	mov	r3, r0
 800648e:	b9ca      	cbnz	r2, 80064c4 <__hi0bits+0x3c>
 8006490:	0403      	lsls	r3, r0, #16
 8006492:	2010      	movs	r0, #16
 8006494:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006498:	bf04      	itt	eq
 800649a:	021b      	lsleq	r3, r3, #8
 800649c:	3008      	addeq	r0, #8
 800649e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064a2:	bf04      	itt	eq
 80064a4:	011b      	lsleq	r3, r3, #4
 80064a6:	3004      	addeq	r0, #4
 80064a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064ac:	bf04      	itt	eq
 80064ae:	009b      	lsleq	r3, r3, #2
 80064b0:	3002      	addeq	r0, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	db05      	blt.n	80064c2 <__hi0bits+0x3a>
 80064b6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80064ba:	f100 0001 	add.w	r0, r0, #1
 80064be:	bf08      	it	eq
 80064c0:	2020      	moveq	r0, #32
 80064c2:	4770      	bx	lr
 80064c4:	2000      	movs	r0, #0
 80064c6:	e7e5      	b.n	8006494 <__hi0bits+0xc>

080064c8 <__lo0bits>:
 80064c8:	6803      	ldr	r3, [r0, #0]
 80064ca:	4602      	mov	r2, r0
 80064cc:	f013 0007 	ands.w	r0, r3, #7
 80064d0:	d00b      	beq.n	80064ea <__lo0bits+0x22>
 80064d2:	07d9      	lsls	r1, r3, #31
 80064d4:	d422      	bmi.n	800651c <__lo0bits+0x54>
 80064d6:	0798      	lsls	r0, r3, #30
 80064d8:	bf49      	itett	mi
 80064da:	085b      	lsrmi	r3, r3, #1
 80064dc:	089b      	lsrpl	r3, r3, #2
 80064de:	2001      	movmi	r0, #1
 80064e0:	6013      	strmi	r3, [r2, #0]
 80064e2:	bf5c      	itt	pl
 80064e4:	2002      	movpl	r0, #2
 80064e6:	6013      	strpl	r3, [r2, #0]
 80064e8:	4770      	bx	lr
 80064ea:	b299      	uxth	r1, r3
 80064ec:	b909      	cbnz	r1, 80064f2 <__lo0bits+0x2a>
 80064ee:	2010      	movs	r0, #16
 80064f0:	0c1b      	lsrs	r3, r3, #16
 80064f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80064f6:	bf04      	itt	eq
 80064f8:	0a1b      	lsreq	r3, r3, #8
 80064fa:	3008      	addeq	r0, #8
 80064fc:	0719      	lsls	r1, r3, #28
 80064fe:	bf04      	itt	eq
 8006500:	091b      	lsreq	r3, r3, #4
 8006502:	3004      	addeq	r0, #4
 8006504:	0799      	lsls	r1, r3, #30
 8006506:	bf04      	itt	eq
 8006508:	089b      	lsreq	r3, r3, #2
 800650a:	3002      	addeq	r0, #2
 800650c:	07d9      	lsls	r1, r3, #31
 800650e:	d403      	bmi.n	8006518 <__lo0bits+0x50>
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	f100 0001 	add.w	r0, r0, #1
 8006516:	d003      	beq.n	8006520 <__lo0bits+0x58>
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	4770      	bx	lr
 800651c:	2000      	movs	r0, #0
 800651e:	4770      	bx	lr
 8006520:	2020      	movs	r0, #32
 8006522:	4770      	bx	lr

08006524 <__i2b>:
 8006524:	b510      	push	{r4, lr}
 8006526:	460c      	mov	r4, r1
 8006528:	2101      	movs	r1, #1
 800652a:	f7ff ff01 	bl	8006330 <_Balloc>
 800652e:	4602      	mov	r2, r0
 8006530:	b928      	cbnz	r0, 800653e <__i2b+0x1a>
 8006532:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006536:	4b04      	ldr	r3, [pc, #16]	; (8006548 <__i2b+0x24>)
 8006538:	4804      	ldr	r0, [pc, #16]	; (800654c <__i2b+0x28>)
 800653a:	f000 fc9b 	bl	8006e74 <__assert_func>
 800653e:	2301      	movs	r3, #1
 8006540:	6144      	str	r4, [r0, #20]
 8006542:	6103      	str	r3, [r0, #16]
 8006544:	bd10      	pop	{r4, pc}
 8006546:	bf00      	nop
 8006548:	08008abb 	.word	0x08008abb
 800654c:	08008acc 	.word	0x08008acc

08006550 <__multiply>:
 8006550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	4614      	mov	r4, r2
 8006556:	690a      	ldr	r2, [r1, #16]
 8006558:	6923      	ldr	r3, [r4, #16]
 800655a:	460d      	mov	r5, r1
 800655c:	429a      	cmp	r2, r3
 800655e:	bfbe      	ittt	lt
 8006560:	460b      	movlt	r3, r1
 8006562:	4625      	movlt	r5, r4
 8006564:	461c      	movlt	r4, r3
 8006566:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800656a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800656e:	68ab      	ldr	r3, [r5, #8]
 8006570:	6869      	ldr	r1, [r5, #4]
 8006572:	eb0a 0709 	add.w	r7, sl, r9
 8006576:	42bb      	cmp	r3, r7
 8006578:	b085      	sub	sp, #20
 800657a:	bfb8      	it	lt
 800657c:	3101      	addlt	r1, #1
 800657e:	f7ff fed7 	bl	8006330 <_Balloc>
 8006582:	b930      	cbnz	r0, 8006592 <__multiply+0x42>
 8006584:	4602      	mov	r2, r0
 8006586:	f240 115d 	movw	r1, #349	; 0x15d
 800658a:	4b41      	ldr	r3, [pc, #260]	; (8006690 <__multiply+0x140>)
 800658c:	4841      	ldr	r0, [pc, #260]	; (8006694 <__multiply+0x144>)
 800658e:	f000 fc71 	bl	8006e74 <__assert_func>
 8006592:	f100 0614 	add.w	r6, r0, #20
 8006596:	4633      	mov	r3, r6
 8006598:	2200      	movs	r2, #0
 800659a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800659e:	4543      	cmp	r3, r8
 80065a0:	d31e      	bcc.n	80065e0 <__multiply+0x90>
 80065a2:	f105 0c14 	add.w	ip, r5, #20
 80065a6:	f104 0314 	add.w	r3, r4, #20
 80065aa:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80065ae:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80065b2:	9202      	str	r2, [sp, #8]
 80065b4:	ebac 0205 	sub.w	r2, ip, r5
 80065b8:	3a15      	subs	r2, #21
 80065ba:	f022 0203 	bic.w	r2, r2, #3
 80065be:	3204      	adds	r2, #4
 80065c0:	f105 0115 	add.w	r1, r5, #21
 80065c4:	458c      	cmp	ip, r1
 80065c6:	bf38      	it	cc
 80065c8:	2204      	movcc	r2, #4
 80065ca:	9201      	str	r2, [sp, #4]
 80065cc:	9a02      	ldr	r2, [sp, #8]
 80065ce:	9303      	str	r3, [sp, #12]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d808      	bhi.n	80065e6 <__multiply+0x96>
 80065d4:	2f00      	cmp	r7, #0
 80065d6:	dc55      	bgt.n	8006684 <__multiply+0x134>
 80065d8:	6107      	str	r7, [r0, #16]
 80065da:	b005      	add	sp, #20
 80065dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e0:	f843 2b04 	str.w	r2, [r3], #4
 80065e4:	e7db      	b.n	800659e <__multiply+0x4e>
 80065e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80065ea:	f1ba 0f00 	cmp.w	sl, #0
 80065ee:	d020      	beq.n	8006632 <__multiply+0xe2>
 80065f0:	46b1      	mov	r9, r6
 80065f2:	2200      	movs	r2, #0
 80065f4:	f105 0e14 	add.w	lr, r5, #20
 80065f8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80065fc:	f8d9 b000 	ldr.w	fp, [r9]
 8006600:	b2a1      	uxth	r1, r4
 8006602:	fa1f fb8b 	uxth.w	fp, fp
 8006606:	fb0a b101 	mla	r1, sl, r1, fp
 800660a:	4411      	add	r1, r2
 800660c:	f8d9 2000 	ldr.w	r2, [r9]
 8006610:	0c24      	lsrs	r4, r4, #16
 8006612:	0c12      	lsrs	r2, r2, #16
 8006614:	fb0a 2404 	mla	r4, sl, r4, r2
 8006618:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800661c:	b289      	uxth	r1, r1
 800661e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006622:	45f4      	cmp	ip, lr
 8006624:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006628:	f849 1b04 	str.w	r1, [r9], #4
 800662c:	d8e4      	bhi.n	80065f8 <__multiply+0xa8>
 800662e:	9901      	ldr	r1, [sp, #4]
 8006630:	5072      	str	r2, [r6, r1]
 8006632:	9a03      	ldr	r2, [sp, #12]
 8006634:	3304      	adds	r3, #4
 8006636:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800663a:	f1b9 0f00 	cmp.w	r9, #0
 800663e:	d01f      	beq.n	8006680 <__multiply+0x130>
 8006640:	46b6      	mov	lr, r6
 8006642:	f04f 0a00 	mov.w	sl, #0
 8006646:	6834      	ldr	r4, [r6, #0]
 8006648:	f105 0114 	add.w	r1, r5, #20
 800664c:	880a      	ldrh	r2, [r1, #0]
 800664e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006652:	b2a4      	uxth	r4, r4
 8006654:	fb09 b202 	mla	r2, r9, r2, fp
 8006658:	4492      	add	sl, r2
 800665a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800665e:	f84e 4b04 	str.w	r4, [lr], #4
 8006662:	f851 4b04 	ldr.w	r4, [r1], #4
 8006666:	f8be 2000 	ldrh.w	r2, [lr]
 800666a:	0c24      	lsrs	r4, r4, #16
 800666c:	fb09 2404 	mla	r4, r9, r4, r2
 8006670:	458c      	cmp	ip, r1
 8006672:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006676:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800667a:	d8e7      	bhi.n	800664c <__multiply+0xfc>
 800667c:	9a01      	ldr	r2, [sp, #4]
 800667e:	50b4      	str	r4, [r6, r2]
 8006680:	3604      	adds	r6, #4
 8006682:	e7a3      	b.n	80065cc <__multiply+0x7c>
 8006684:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1a5      	bne.n	80065d8 <__multiply+0x88>
 800668c:	3f01      	subs	r7, #1
 800668e:	e7a1      	b.n	80065d4 <__multiply+0x84>
 8006690:	08008abb 	.word	0x08008abb
 8006694:	08008acc 	.word	0x08008acc

08006698 <__pow5mult>:
 8006698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800669c:	4615      	mov	r5, r2
 800669e:	f012 0203 	ands.w	r2, r2, #3
 80066a2:	4606      	mov	r6, r0
 80066a4:	460f      	mov	r7, r1
 80066a6:	d007      	beq.n	80066b8 <__pow5mult+0x20>
 80066a8:	4c25      	ldr	r4, [pc, #148]	; (8006740 <__pow5mult+0xa8>)
 80066aa:	3a01      	subs	r2, #1
 80066ac:	2300      	movs	r3, #0
 80066ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066b2:	f7ff fe9f 	bl	80063f4 <__multadd>
 80066b6:	4607      	mov	r7, r0
 80066b8:	10ad      	asrs	r5, r5, #2
 80066ba:	d03d      	beq.n	8006738 <__pow5mult+0xa0>
 80066bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066be:	b97c      	cbnz	r4, 80066e0 <__pow5mult+0x48>
 80066c0:	2010      	movs	r0, #16
 80066c2:	f7ff fe1f 	bl	8006304 <malloc>
 80066c6:	4602      	mov	r2, r0
 80066c8:	6270      	str	r0, [r6, #36]	; 0x24
 80066ca:	b928      	cbnz	r0, 80066d8 <__pow5mult+0x40>
 80066cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80066d0:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <__pow5mult+0xac>)
 80066d2:	481d      	ldr	r0, [pc, #116]	; (8006748 <__pow5mult+0xb0>)
 80066d4:	f000 fbce 	bl	8006e74 <__assert_func>
 80066d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066dc:	6004      	str	r4, [r0, #0]
 80066de:	60c4      	str	r4, [r0, #12]
 80066e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066e8:	b94c      	cbnz	r4, 80066fe <__pow5mult+0x66>
 80066ea:	f240 2171 	movw	r1, #625	; 0x271
 80066ee:	4630      	mov	r0, r6
 80066f0:	f7ff ff18 	bl	8006524 <__i2b>
 80066f4:	2300      	movs	r3, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80066fc:	6003      	str	r3, [r0, #0]
 80066fe:	f04f 0900 	mov.w	r9, #0
 8006702:	07eb      	lsls	r3, r5, #31
 8006704:	d50a      	bpl.n	800671c <__pow5mult+0x84>
 8006706:	4639      	mov	r1, r7
 8006708:	4622      	mov	r2, r4
 800670a:	4630      	mov	r0, r6
 800670c:	f7ff ff20 	bl	8006550 <__multiply>
 8006710:	4680      	mov	r8, r0
 8006712:	4639      	mov	r1, r7
 8006714:	4630      	mov	r0, r6
 8006716:	f7ff fe4b 	bl	80063b0 <_Bfree>
 800671a:	4647      	mov	r7, r8
 800671c:	106d      	asrs	r5, r5, #1
 800671e:	d00b      	beq.n	8006738 <__pow5mult+0xa0>
 8006720:	6820      	ldr	r0, [r4, #0]
 8006722:	b938      	cbnz	r0, 8006734 <__pow5mult+0x9c>
 8006724:	4622      	mov	r2, r4
 8006726:	4621      	mov	r1, r4
 8006728:	4630      	mov	r0, r6
 800672a:	f7ff ff11 	bl	8006550 <__multiply>
 800672e:	6020      	str	r0, [r4, #0]
 8006730:	f8c0 9000 	str.w	r9, [r0]
 8006734:	4604      	mov	r4, r0
 8006736:	e7e4      	b.n	8006702 <__pow5mult+0x6a>
 8006738:	4638      	mov	r0, r7
 800673a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800673e:	bf00      	nop
 8006740:	08008c20 	.word	0x08008c20
 8006744:	08008a45 	.word	0x08008a45
 8006748:	08008acc 	.word	0x08008acc

0800674c <__lshift>:
 800674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	460c      	mov	r4, r1
 8006752:	4607      	mov	r7, r0
 8006754:	4691      	mov	r9, r2
 8006756:	6923      	ldr	r3, [r4, #16]
 8006758:	6849      	ldr	r1, [r1, #4]
 800675a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800675e:	68a3      	ldr	r3, [r4, #8]
 8006760:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006764:	f108 0601 	add.w	r6, r8, #1
 8006768:	42b3      	cmp	r3, r6
 800676a:	db0b      	blt.n	8006784 <__lshift+0x38>
 800676c:	4638      	mov	r0, r7
 800676e:	f7ff fddf 	bl	8006330 <_Balloc>
 8006772:	4605      	mov	r5, r0
 8006774:	b948      	cbnz	r0, 800678a <__lshift+0x3e>
 8006776:	4602      	mov	r2, r0
 8006778:	f240 11d9 	movw	r1, #473	; 0x1d9
 800677c:	4b27      	ldr	r3, [pc, #156]	; (800681c <__lshift+0xd0>)
 800677e:	4828      	ldr	r0, [pc, #160]	; (8006820 <__lshift+0xd4>)
 8006780:	f000 fb78 	bl	8006e74 <__assert_func>
 8006784:	3101      	adds	r1, #1
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	e7ee      	b.n	8006768 <__lshift+0x1c>
 800678a:	2300      	movs	r3, #0
 800678c:	f100 0114 	add.w	r1, r0, #20
 8006790:	f100 0210 	add.w	r2, r0, #16
 8006794:	4618      	mov	r0, r3
 8006796:	4553      	cmp	r3, sl
 8006798:	db33      	blt.n	8006802 <__lshift+0xb6>
 800679a:	6920      	ldr	r0, [r4, #16]
 800679c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067a0:	f104 0314 	add.w	r3, r4, #20
 80067a4:	f019 091f 	ands.w	r9, r9, #31
 80067a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067b0:	d02b      	beq.n	800680a <__lshift+0xbe>
 80067b2:	468a      	mov	sl, r1
 80067b4:	2200      	movs	r2, #0
 80067b6:	f1c9 0e20 	rsb	lr, r9, #32
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	fa00 f009 	lsl.w	r0, r0, r9
 80067c0:	4302      	orrs	r2, r0
 80067c2:	f84a 2b04 	str.w	r2, [sl], #4
 80067c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ca:	459c      	cmp	ip, r3
 80067cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80067d0:	d8f3      	bhi.n	80067ba <__lshift+0x6e>
 80067d2:	ebac 0304 	sub.w	r3, ip, r4
 80067d6:	3b15      	subs	r3, #21
 80067d8:	f023 0303 	bic.w	r3, r3, #3
 80067dc:	3304      	adds	r3, #4
 80067de:	f104 0015 	add.w	r0, r4, #21
 80067e2:	4584      	cmp	ip, r0
 80067e4:	bf38      	it	cc
 80067e6:	2304      	movcc	r3, #4
 80067e8:	50ca      	str	r2, [r1, r3]
 80067ea:	b10a      	cbz	r2, 80067f0 <__lshift+0xa4>
 80067ec:	f108 0602 	add.w	r6, r8, #2
 80067f0:	3e01      	subs	r6, #1
 80067f2:	4638      	mov	r0, r7
 80067f4:	4621      	mov	r1, r4
 80067f6:	612e      	str	r6, [r5, #16]
 80067f8:	f7ff fdda 	bl	80063b0 <_Bfree>
 80067fc:	4628      	mov	r0, r5
 80067fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006802:	f842 0f04 	str.w	r0, [r2, #4]!
 8006806:	3301      	adds	r3, #1
 8006808:	e7c5      	b.n	8006796 <__lshift+0x4a>
 800680a:	3904      	subs	r1, #4
 800680c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006810:	459c      	cmp	ip, r3
 8006812:	f841 2f04 	str.w	r2, [r1, #4]!
 8006816:	d8f9      	bhi.n	800680c <__lshift+0xc0>
 8006818:	e7ea      	b.n	80067f0 <__lshift+0xa4>
 800681a:	bf00      	nop
 800681c:	08008abb 	.word	0x08008abb
 8006820:	08008acc 	.word	0x08008acc

08006824 <__mcmp>:
 8006824:	4603      	mov	r3, r0
 8006826:	690a      	ldr	r2, [r1, #16]
 8006828:	6900      	ldr	r0, [r0, #16]
 800682a:	b530      	push	{r4, r5, lr}
 800682c:	1a80      	subs	r0, r0, r2
 800682e:	d10d      	bne.n	800684c <__mcmp+0x28>
 8006830:	3314      	adds	r3, #20
 8006832:	3114      	adds	r1, #20
 8006834:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006838:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800683c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006840:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006844:	4295      	cmp	r5, r2
 8006846:	d002      	beq.n	800684e <__mcmp+0x2a>
 8006848:	d304      	bcc.n	8006854 <__mcmp+0x30>
 800684a:	2001      	movs	r0, #1
 800684c:	bd30      	pop	{r4, r5, pc}
 800684e:	42a3      	cmp	r3, r4
 8006850:	d3f4      	bcc.n	800683c <__mcmp+0x18>
 8006852:	e7fb      	b.n	800684c <__mcmp+0x28>
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	e7f8      	b.n	800684c <__mcmp+0x28>
	...

0800685c <__mdiff>:
 800685c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	460c      	mov	r4, r1
 8006862:	4606      	mov	r6, r0
 8006864:	4611      	mov	r1, r2
 8006866:	4620      	mov	r0, r4
 8006868:	4692      	mov	sl, r2
 800686a:	f7ff ffdb 	bl	8006824 <__mcmp>
 800686e:	1e05      	subs	r5, r0, #0
 8006870:	d111      	bne.n	8006896 <__mdiff+0x3a>
 8006872:	4629      	mov	r1, r5
 8006874:	4630      	mov	r0, r6
 8006876:	f7ff fd5b 	bl	8006330 <_Balloc>
 800687a:	4602      	mov	r2, r0
 800687c:	b928      	cbnz	r0, 800688a <__mdiff+0x2e>
 800687e:	f240 2132 	movw	r1, #562	; 0x232
 8006882:	4b3c      	ldr	r3, [pc, #240]	; (8006974 <__mdiff+0x118>)
 8006884:	483c      	ldr	r0, [pc, #240]	; (8006978 <__mdiff+0x11c>)
 8006886:	f000 faf5 	bl	8006e74 <__assert_func>
 800688a:	2301      	movs	r3, #1
 800688c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006890:	4610      	mov	r0, r2
 8006892:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006896:	bfa4      	itt	ge
 8006898:	4653      	movge	r3, sl
 800689a:	46a2      	movge	sl, r4
 800689c:	4630      	mov	r0, r6
 800689e:	f8da 1004 	ldr.w	r1, [sl, #4]
 80068a2:	bfa6      	itte	ge
 80068a4:	461c      	movge	r4, r3
 80068a6:	2500      	movge	r5, #0
 80068a8:	2501      	movlt	r5, #1
 80068aa:	f7ff fd41 	bl	8006330 <_Balloc>
 80068ae:	4602      	mov	r2, r0
 80068b0:	b918      	cbnz	r0, 80068ba <__mdiff+0x5e>
 80068b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068b6:	4b2f      	ldr	r3, [pc, #188]	; (8006974 <__mdiff+0x118>)
 80068b8:	e7e4      	b.n	8006884 <__mdiff+0x28>
 80068ba:	f100 0814 	add.w	r8, r0, #20
 80068be:	f8da 7010 	ldr.w	r7, [sl, #16]
 80068c2:	60c5      	str	r5, [r0, #12]
 80068c4:	f04f 0c00 	mov.w	ip, #0
 80068c8:	f10a 0514 	add.w	r5, sl, #20
 80068cc:	f10a 0010 	add.w	r0, sl, #16
 80068d0:	46c2      	mov	sl, r8
 80068d2:	6926      	ldr	r6, [r4, #16]
 80068d4:	f104 0914 	add.w	r9, r4, #20
 80068d8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80068dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068e0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80068e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80068e8:	fa1f f18b 	uxth.w	r1, fp
 80068ec:	4461      	add	r1, ip
 80068ee:	fa1f fc83 	uxth.w	ip, r3
 80068f2:	0c1b      	lsrs	r3, r3, #16
 80068f4:	eba1 010c 	sub.w	r1, r1, ip
 80068f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80068fc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006900:	b289      	uxth	r1, r1
 8006902:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006906:	454e      	cmp	r6, r9
 8006908:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800690c:	f84a 3b04 	str.w	r3, [sl], #4
 8006910:	d8e6      	bhi.n	80068e0 <__mdiff+0x84>
 8006912:	1b33      	subs	r3, r6, r4
 8006914:	3b15      	subs	r3, #21
 8006916:	f023 0303 	bic.w	r3, r3, #3
 800691a:	3415      	adds	r4, #21
 800691c:	3304      	adds	r3, #4
 800691e:	42a6      	cmp	r6, r4
 8006920:	bf38      	it	cc
 8006922:	2304      	movcc	r3, #4
 8006924:	441d      	add	r5, r3
 8006926:	4443      	add	r3, r8
 8006928:	461e      	mov	r6, r3
 800692a:	462c      	mov	r4, r5
 800692c:	4574      	cmp	r4, lr
 800692e:	d30e      	bcc.n	800694e <__mdiff+0xf2>
 8006930:	f10e 0103 	add.w	r1, lr, #3
 8006934:	1b49      	subs	r1, r1, r5
 8006936:	f021 0103 	bic.w	r1, r1, #3
 800693a:	3d03      	subs	r5, #3
 800693c:	45ae      	cmp	lr, r5
 800693e:	bf38      	it	cc
 8006940:	2100      	movcc	r1, #0
 8006942:	4419      	add	r1, r3
 8006944:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006948:	b18b      	cbz	r3, 800696e <__mdiff+0x112>
 800694a:	6117      	str	r7, [r2, #16]
 800694c:	e7a0      	b.n	8006890 <__mdiff+0x34>
 800694e:	f854 8b04 	ldr.w	r8, [r4], #4
 8006952:	fa1f f188 	uxth.w	r1, r8
 8006956:	4461      	add	r1, ip
 8006958:	1408      	asrs	r0, r1, #16
 800695a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800695e:	b289      	uxth	r1, r1
 8006960:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006964:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006968:	f846 1b04 	str.w	r1, [r6], #4
 800696c:	e7de      	b.n	800692c <__mdiff+0xd0>
 800696e:	3f01      	subs	r7, #1
 8006970:	e7e8      	b.n	8006944 <__mdiff+0xe8>
 8006972:	bf00      	nop
 8006974:	08008abb 	.word	0x08008abb
 8006978:	08008acc 	.word	0x08008acc

0800697c <__d2b>:
 800697c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006980:	2101      	movs	r1, #1
 8006982:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006986:	4690      	mov	r8, r2
 8006988:	461d      	mov	r5, r3
 800698a:	f7ff fcd1 	bl	8006330 <_Balloc>
 800698e:	4604      	mov	r4, r0
 8006990:	b930      	cbnz	r0, 80069a0 <__d2b+0x24>
 8006992:	4602      	mov	r2, r0
 8006994:	f240 310a 	movw	r1, #778	; 0x30a
 8006998:	4b24      	ldr	r3, [pc, #144]	; (8006a2c <__d2b+0xb0>)
 800699a:	4825      	ldr	r0, [pc, #148]	; (8006a30 <__d2b+0xb4>)
 800699c:	f000 fa6a 	bl	8006e74 <__assert_func>
 80069a0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80069a4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80069a8:	bb2d      	cbnz	r5, 80069f6 <__d2b+0x7a>
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	f1b8 0300 	subs.w	r3, r8, #0
 80069b0:	d026      	beq.n	8006a00 <__d2b+0x84>
 80069b2:	4668      	mov	r0, sp
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	f7ff fd87 	bl	80064c8 <__lo0bits>
 80069ba:	9900      	ldr	r1, [sp, #0]
 80069bc:	b1f0      	cbz	r0, 80069fc <__d2b+0x80>
 80069be:	9a01      	ldr	r2, [sp, #4]
 80069c0:	f1c0 0320 	rsb	r3, r0, #32
 80069c4:	fa02 f303 	lsl.w	r3, r2, r3
 80069c8:	430b      	orrs	r3, r1
 80069ca:	40c2      	lsrs	r2, r0
 80069cc:	6163      	str	r3, [r4, #20]
 80069ce:	9201      	str	r2, [sp, #4]
 80069d0:	9b01      	ldr	r3, [sp, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	bf14      	ite	ne
 80069d6:	2102      	movne	r1, #2
 80069d8:	2101      	moveq	r1, #1
 80069da:	61a3      	str	r3, [r4, #24]
 80069dc:	6121      	str	r1, [r4, #16]
 80069de:	b1c5      	cbz	r5, 8006a12 <__d2b+0x96>
 80069e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80069e4:	4405      	add	r5, r0
 80069e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069ea:	603d      	str	r5, [r7, #0]
 80069ec:	6030      	str	r0, [r6, #0]
 80069ee:	4620      	mov	r0, r4
 80069f0:	b002      	add	sp, #8
 80069f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069fa:	e7d6      	b.n	80069aa <__d2b+0x2e>
 80069fc:	6161      	str	r1, [r4, #20]
 80069fe:	e7e7      	b.n	80069d0 <__d2b+0x54>
 8006a00:	a801      	add	r0, sp, #4
 8006a02:	f7ff fd61 	bl	80064c8 <__lo0bits>
 8006a06:	2101      	movs	r1, #1
 8006a08:	9b01      	ldr	r3, [sp, #4]
 8006a0a:	6121      	str	r1, [r4, #16]
 8006a0c:	6163      	str	r3, [r4, #20]
 8006a0e:	3020      	adds	r0, #32
 8006a10:	e7e5      	b.n	80069de <__d2b+0x62>
 8006a12:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006a16:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a1a:	6038      	str	r0, [r7, #0]
 8006a1c:	6918      	ldr	r0, [r3, #16]
 8006a1e:	f7ff fd33 	bl	8006488 <__hi0bits>
 8006a22:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006a26:	6031      	str	r1, [r6, #0]
 8006a28:	e7e1      	b.n	80069ee <__d2b+0x72>
 8006a2a:	bf00      	nop
 8006a2c:	08008abb 	.word	0x08008abb
 8006a30:	08008acc 	.word	0x08008acc

08006a34 <_calloc_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	fb02 f501 	mul.w	r5, r2, r1
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	f000 f854 	bl	8006ae8 <_malloc_r>
 8006a40:	4604      	mov	r4, r0
 8006a42:	b118      	cbz	r0, 8006a4c <_calloc_r+0x18>
 8006a44:	462a      	mov	r2, r5
 8006a46:	2100      	movs	r1, #0
 8006a48:	f7fe f946 	bl	8004cd8 <memset>
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}

08006a50 <_free_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4605      	mov	r5, r0
 8006a54:	2900      	cmp	r1, #0
 8006a56:	d043      	beq.n	8006ae0 <_free_r+0x90>
 8006a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a5c:	1f0c      	subs	r4, r1, #4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bfb8      	it	lt
 8006a62:	18e4      	addlt	r4, r4, r3
 8006a64:	f000 fa62 	bl	8006f2c <__malloc_lock>
 8006a68:	4a1e      	ldr	r2, [pc, #120]	; (8006ae4 <_free_r+0x94>)
 8006a6a:	6813      	ldr	r3, [r2, #0]
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	b933      	cbnz	r3, 8006a7e <_free_r+0x2e>
 8006a70:	6063      	str	r3, [r4, #4]
 8006a72:	6014      	str	r4, [r2, #0]
 8006a74:	4628      	mov	r0, r5
 8006a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a7a:	f000 ba5d 	b.w	8006f38 <__malloc_unlock>
 8006a7e:	42a3      	cmp	r3, r4
 8006a80:	d90a      	bls.n	8006a98 <_free_r+0x48>
 8006a82:	6821      	ldr	r1, [r4, #0]
 8006a84:	1862      	adds	r2, r4, r1
 8006a86:	4293      	cmp	r3, r2
 8006a88:	bf01      	itttt	eq
 8006a8a:	681a      	ldreq	r2, [r3, #0]
 8006a8c:	685b      	ldreq	r3, [r3, #4]
 8006a8e:	1852      	addeq	r2, r2, r1
 8006a90:	6022      	streq	r2, [r4, #0]
 8006a92:	6063      	str	r3, [r4, #4]
 8006a94:	6004      	str	r4, [r0, #0]
 8006a96:	e7ed      	b.n	8006a74 <_free_r+0x24>
 8006a98:	461a      	mov	r2, r3
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	b10b      	cbz	r3, 8006aa2 <_free_r+0x52>
 8006a9e:	42a3      	cmp	r3, r4
 8006aa0:	d9fa      	bls.n	8006a98 <_free_r+0x48>
 8006aa2:	6811      	ldr	r1, [r2, #0]
 8006aa4:	1850      	adds	r0, r2, r1
 8006aa6:	42a0      	cmp	r0, r4
 8006aa8:	d10b      	bne.n	8006ac2 <_free_r+0x72>
 8006aaa:	6820      	ldr	r0, [r4, #0]
 8006aac:	4401      	add	r1, r0
 8006aae:	1850      	adds	r0, r2, r1
 8006ab0:	4283      	cmp	r3, r0
 8006ab2:	6011      	str	r1, [r2, #0]
 8006ab4:	d1de      	bne.n	8006a74 <_free_r+0x24>
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	4401      	add	r1, r0
 8006abc:	6011      	str	r1, [r2, #0]
 8006abe:	6053      	str	r3, [r2, #4]
 8006ac0:	e7d8      	b.n	8006a74 <_free_r+0x24>
 8006ac2:	d902      	bls.n	8006aca <_free_r+0x7a>
 8006ac4:	230c      	movs	r3, #12
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	e7d4      	b.n	8006a74 <_free_r+0x24>
 8006aca:	6820      	ldr	r0, [r4, #0]
 8006acc:	1821      	adds	r1, r4, r0
 8006ace:	428b      	cmp	r3, r1
 8006ad0:	bf01      	itttt	eq
 8006ad2:	6819      	ldreq	r1, [r3, #0]
 8006ad4:	685b      	ldreq	r3, [r3, #4]
 8006ad6:	1809      	addeq	r1, r1, r0
 8006ad8:	6021      	streq	r1, [r4, #0]
 8006ada:	6063      	str	r3, [r4, #4]
 8006adc:	6054      	str	r4, [r2, #4]
 8006ade:	e7c9      	b.n	8006a74 <_free_r+0x24>
 8006ae0:	bd38      	pop	{r3, r4, r5, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000208 	.word	0x20000208

08006ae8 <_malloc_r>:
 8006ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aea:	1ccd      	adds	r5, r1, #3
 8006aec:	f025 0503 	bic.w	r5, r5, #3
 8006af0:	3508      	adds	r5, #8
 8006af2:	2d0c      	cmp	r5, #12
 8006af4:	bf38      	it	cc
 8006af6:	250c      	movcc	r5, #12
 8006af8:	2d00      	cmp	r5, #0
 8006afa:	4606      	mov	r6, r0
 8006afc:	db01      	blt.n	8006b02 <_malloc_r+0x1a>
 8006afe:	42a9      	cmp	r1, r5
 8006b00:	d903      	bls.n	8006b0a <_malloc_r+0x22>
 8006b02:	230c      	movs	r3, #12
 8006b04:	6033      	str	r3, [r6, #0]
 8006b06:	2000      	movs	r0, #0
 8006b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b0a:	f000 fa0f 	bl	8006f2c <__malloc_lock>
 8006b0e:	4921      	ldr	r1, [pc, #132]	; (8006b94 <_malloc_r+0xac>)
 8006b10:	680a      	ldr	r2, [r1, #0]
 8006b12:	4614      	mov	r4, r2
 8006b14:	b99c      	cbnz	r4, 8006b3e <_malloc_r+0x56>
 8006b16:	4f20      	ldr	r7, [pc, #128]	; (8006b98 <_malloc_r+0xb0>)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	b923      	cbnz	r3, 8006b26 <_malloc_r+0x3e>
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	4630      	mov	r0, r6
 8006b20:	f000 f998 	bl	8006e54 <_sbrk_r>
 8006b24:	6038      	str	r0, [r7, #0]
 8006b26:	4629      	mov	r1, r5
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f000 f993 	bl	8006e54 <_sbrk_r>
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	d123      	bne.n	8006b7a <_malloc_r+0x92>
 8006b32:	230c      	movs	r3, #12
 8006b34:	4630      	mov	r0, r6
 8006b36:	6033      	str	r3, [r6, #0]
 8006b38:	f000 f9fe 	bl	8006f38 <__malloc_unlock>
 8006b3c:	e7e3      	b.n	8006b06 <_malloc_r+0x1e>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	1b5b      	subs	r3, r3, r5
 8006b42:	d417      	bmi.n	8006b74 <_malloc_r+0x8c>
 8006b44:	2b0b      	cmp	r3, #11
 8006b46:	d903      	bls.n	8006b50 <_malloc_r+0x68>
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	441c      	add	r4, r3
 8006b4c:	6025      	str	r5, [r4, #0]
 8006b4e:	e004      	b.n	8006b5a <_malloc_r+0x72>
 8006b50:	6863      	ldr	r3, [r4, #4]
 8006b52:	42a2      	cmp	r2, r4
 8006b54:	bf0c      	ite	eq
 8006b56:	600b      	streq	r3, [r1, #0]
 8006b58:	6053      	strne	r3, [r2, #4]
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f000 f9ec 	bl	8006f38 <__malloc_unlock>
 8006b60:	f104 000b 	add.w	r0, r4, #11
 8006b64:	1d23      	adds	r3, r4, #4
 8006b66:	f020 0007 	bic.w	r0, r0, #7
 8006b6a:	1ac2      	subs	r2, r0, r3
 8006b6c:	d0cc      	beq.n	8006b08 <_malloc_r+0x20>
 8006b6e:	1a1b      	subs	r3, r3, r0
 8006b70:	50a3      	str	r3, [r4, r2]
 8006b72:	e7c9      	b.n	8006b08 <_malloc_r+0x20>
 8006b74:	4622      	mov	r2, r4
 8006b76:	6864      	ldr	r4, [r4, #4]
 8006b78:	e7cc      	b.n	8006b14 <_malloc_r+0x2c>
 8006b7a:	1cc4      	adds	r4, r0, #3
 8006b7c:	f024 0403 	bic.w	r4, r4, #3
 8006b80:	42a0      	cmp	r0, r4
 8006b82:	d0e3      	beq.n	8006b4c <_malloc_r+0x64>
 8006b84:	1a21      	subs	r1, r4, r0
 8006b86:	4630      	mov	r0, r6
 8006b88:	f000 f964 	bl	8006e54 <_sbrk_r>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d1dd      	bne.n	8006b4c <_malloc_r+0x64>
 8006b90:	e7cf      	b.n	8006b32 <_malloc_r+0x4a>
 8006b92:	bf00      	nop
 8006b94:	20000208 	.word	0x20000208
 8006b98:	2000020c 	.word	0x2000020c

08006b9c <__ssputs_r>:
 8006b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	688e      	ldr	r6, [r1, #8]
 8006ba2:	4682      	mov	sl, r0
 8006ba4:	429e      	cmp	r6, r3
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	4690      	mov	r8, r2
 8006baa:	461f      	mov	r7, r3
 8006bac:	d838      	bhi.n	8006c20 <__ssputs_r+0x84>
 8006bae:	898a      	ldrh	r2, [r1, #12]
 8006bb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bb4:	d032      	beq.n	8006c1c <__ssputs_r+0x80>
 8006bb6:	6825      	ldr	r5, [r4, #0]
 8006bb8:	6909      	ldr	r1, [r1, #16]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	eba5 0901 	sub.w	r9, r5, r1
 8006bc0:	6965      	ldr	r5, [r4, #20]
 8006bc2:	444b      	add	r3, r9
 8006bc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bcc:	106d      	asrs	r5, r5, #1
 8006bce:	429d      	cmp	r5, r3
 8006bd0:	bf38      	it	cc
 8006bd2:	461d      	movcc	r5, r3
 8006bd4:	0553      	lsls	r3, r2, #21
 8006bd6:	d531      	bpl.n	8006c3c <__ssputs_r+0xa0>
 8006bd8:	4629      	mov	r1, r5
 8006bda:	f7ff ff85 	bl	8006ae8 <_malloc_r>
 8006bde:	4606      	mov	r6, r0
 8006be0:	b950      	cbnz	r0, 8006bf8 <__ssputs_r+0x5c>
 8006be2:	230c      	movs	r3, #12
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295
 8006be8:	f8ca 3000 	str.w	r3, [sl]
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf8:	464a      	mov	r2, r9
 8006bfa:	6921      	ldr	r1, [r4, #16]
 8006bfc:	f7fe f85e 	bl	8004cbc <memcpy>
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0a:	81a3      	strh	r3, [r4, #12]
 8006c0c:	6126      	str	r6, [r4, #16]
 8006c0e:	444e      	add	r6, r9
 8006c10:	6026      	str	r6, [r4, #0]
 8006c12:	463e      	mov	r6, r7
 8006c14:	6165      	str	r5, [r4, #20]
 8006c16:	eba5 0509 	sub.w	r5, r5, r9
 8006c1a:	60a5      	str	r5, [r4, #8]
 8006c1c:	42be      	cmp	r6, r7
 8006c1e:	d900      	bls.n	8006c22 <__ssputs_r+0x86>
 8006c20:	463e      	mov	r6, r7
 8006c22:	4632      	mov	r2, r6
 8006c24:	4641      	mov	r1, r8
 8006c26:	6820      	ldr	r0, [r4, #0]
 8006c28:	f000 f966 	bl	8006ef8 <memmove>
 8006c2c:	68a3      	ldr	r3, [r4, #8]
 8006c2e:	6822      	ldr	r2, [r4, #0]
 8006c30:	1b9b      	subs	r3, r3, r6
 8006c32:	4432      	add	r2, r6
 8006c34:	2000      	movs	r0, #0
 8006c36:	60a3      	str	r3, [r4, #8]
 8006c38:	6022      	str	r2, [r4, #0]
 8006c3a:	e7db      	b.n	8006bf4 <__ssputs_r+0x58>
 8006c3c:	462a      	mov	r2, r5
 8006c3e:	f000 f981 	bl	8006f44 <_realloc_r>
 8006c42:	4606      	mov	r6, r0
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d1e1      	bne.n	8006c0c <__ssputs_r+0x70>
 8006c48:	4650      	mov	r0, sl
 8006c4a:	6921      	ldr	r1, [r4, #16]
 8006c4c:	f7ff ff00 	bl	8006a50 <_free_r>
 8006c50:	e7c7      	b.n	8006be2 <__ssputs_r+0x46>
	...

08006c54 <_svfiprintf_r>:
 8006c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c58:	4698      	mov	r8, r3
 8006c5a:	898b      	ldrh	r3, [r1, #12]
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	061b      	lsls	r3, r3, #24
 8006c60:	460d      	mov	r5, r1
 8006c62:	4614      	mov	r4, r2
 8006c64:	b09d      	sub	sp, #116	; 0x74
 8006c66:	d50e      	bpl.n	8006c86 <_svfiprintf_r+0x32>
 8006c68:	690b      	ldr	r3, [r1, #16]
 8006c6a:	b963      	cbnz	r3, 8006c86 <_svfiprintf_r+0x32>
 8006c6c:	2140      	movs	r1, #64	; 0x40
 8006c6e:	f7ff ff3b 	bl	8006ae8 <_malloc_r>
 8006c72:	6028      	str	r0, [r5, #0]
 8006c74:	6128      	str	r0, [r5, #16]
 8006c76:	b920      	cbnz	r0, 8006c82 <_svfiprintf_r+0x2e>
 8006c78:	230c      	movs	r3, #12
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c80:	e0d1      	b.n	8006e26 <_svfiprintf_r+0x1d2>
 8006c82:	2340      	movs	r3, #64	; 0x40
 8006c84:	616b      	str	r3, [r5, #20]
 8006c86:	2300      	movs	r3, #0
 8006c88:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8a:	2320      	movs	r3, #32
 8006c8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c90:	2330      	movs	r3, #48	; 0x30
 8006c92:	f04f 0901 	mov.w	r9, #1
 8006c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e40 <_svfiprintf_r+0x1ec>
 8006c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ca2:	4623      	mov	r3, r4
 8006ca4:	469a      	mov	sl, r3
 8006ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006caa:	b10a      	cbz	r2, 8006cb0 <_svfiprintf_r+0x5c>
 8006cac:	2a25      	cmp	r2, #37	; 0x25
 8006cae:	d1f9      	bne.n	8006ca4 <_svfiprintf_r+0x50>
 8006cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8006cb4:	d00b      	beq.n	8006cce <_svfiprintf_r+0x7a>
 8006cb6:	465b      	mov	r3, fp
 8006cb8:	4622      	mov	r2, r4
 8006cba:	4629      	mov	r1, r5
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	f7ff ff6d 	bl	8006b9c <__ssputs_r>
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	f000 80aa 	beq.w	8006e1c <_svfiprintf_r+0x1c8>
 8006cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cca:	445a      	add	r2, fp
 8006ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cce:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 80a2 	beq.w	8006e1c <_svfiprintf_r+0x1c8>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f04f 32ff 	mov.w	r2, #4294967295
 8006cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ce2:	f10a 0a01 	add.w	sl, sl, #1
 8006ce6:	9304      	str	r3, [sp, #16]
 8006ce8:	9307      	str	r3, [sp, #28]
 8006cea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cee:	931a      	str	r3, [sp, #104]	; 0x68
 8006cf0:	4654      	mov	r4, sl
 8006cf2:	2205      	movs	r2, #5
 8006cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf8:	4851      	ldr	r0, [pc, #324]	; (8006e40 <_svfiprintf_r+0x1ec>)
 8006cfa:	f7ff fb0b 	bl	8006314 <memchr>
 8006cfe:	9a04      	ldr	r2, [sp, #16]
 8006d00:	b9d8      	cbnz	r0, 8006d3a <_svfiprintf_r+0xe6>
 8006d02:	06d0      	lsls	r0, r2, #27
 8006d04:	bf44      	itt	mi
 8006d06:	2320      	movmi	r3, #32
 8006d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d0c:	0711      	lsls	r1, r2, #28
 8006d0e:	bf44      	itt	mi
 8006d10:	232b      	movmi	r3, #43	; 0x2b
 8006d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d16:	f89a 3000 	ldrb.w	r3, [sl]
 8006d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d1c:	d015      	beq.n	8006d4a <_svfiprintf_r+0xf6>
 8006d1e:	4654      	mov	r4, sl
 8006d20:	2000      	movs	r0, #0
 8006d22:	f04f 0c0a 	mov.w	ip, #10
 8006d26:	9a07      	ldr	r2, [sp, #28]
 8006d28:	4621      	mov	r1, r4
 8006d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d2e:	3b30      	subs	r3, #48	; 0x30
 8006d30:	2b09      	cmp	r3, #9
 8006d32:	d94e      	bls.n	8006dd2 <_svfiprintf_r+0x17e>
 8006d34:	b1b0      	cbz	r0, 8006d64 <_svfiprintf_r+0x110>
 8006d36:	9207      	str	r2, [sp, #28]
 8006d38:	e014      	b.n	8006d64 <_svfiprintf_r+0x110>
 8006d3a:	eba0 0308 	sub.w	r3, r0, r8
 8006d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d42:	4313      	orrs	r3, r2
 8006d44:	46a2      	mov	sl, r4
 8006d46:	9304      	str	r3, [sp, #16]
 8006d48:	e7d2      	b.n	8006cf0 <_svfiprintf_r+0x9c>
 8006d4a:	9b03      	ldr	r3, [sp, #12]
 8006d4c:	1d19      	adds	r1, r3, #4
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	9103      	str	r1, [sp, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	bfbb      	ittet	lt
 8006d56:	425b      	neglt	r3, r3
 8006d58:	f042 0202 	orrlt.w	r2, r2, #2
 8006d5c:	9307      	strge	r3, [sp, #28]
 8006d5e:	9307      	strlt	r3, [sp, #28]
 8006d60:	bfb8      	it	lt
 8006d62:	9204      	strlt	r2, [sp, #16]
 8006d64:	7823      	ldrb	r3, [r4, #0]
 8006d66:	2b2e      	cmp	r3, #46	; 0x2e
 8006d68:	d10c      	bne.n	8006d84 <_svfiprintf_r+0x130>
 8006d6a:	7863      	ldrb	r3, [r4, #1]
 8006d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d6e:	d135      	bne.n	8006ddc <_svfiprintf_r+0x188>
 8006d70:	9b03      	ldr	r3, [sp, #12]
 8006d72:	3402      	adds	r4, #2
 8006d74:	1d1a      	adds	r2, r3, #4
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	9203      	str	r2, [sp, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bfb8      	it	lt
 8006d7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d82:	9305      	str	r3, [sp, #20]
 8006d84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e50 <_svfiprintf_r+0x1fc>
 8006d88:	2203      	movs	r2, #3
 8006d8a:	4650      	mov	r0, sl
 8006d8c:	7821      	ldrb	r1, [r4, #0]
 8006d8e:	f7ff fac1 	bl	8006314 <memchr>
 8006d92:	b140      	cbz	r0, 8006da6 <_svfiprintf_r+0x152>
 8006d94:	2340      	movs	r3, #64	; 0x40
 8006d96:	eba0 000a 	sub.w	r0, r0, sl
 8006d9a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d9e:	9b04      	ldr	r3, [sp, #16]
 8006da0:	3401      	adds	r4, #1
 8006da2:	4303      	orrs	r3, r0
 8006da4:	9304      	str	r3, [sp, #16]
 8006da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006daa:	2206      	movs	r2, #6
 8006dac:	4825      	ldr	r0, [pc, #148]	; (8006e44 <_svfiprintf_r+0x1f0>)
 8006dae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006db2:	f7ff faaf 	bl	8006314 <memchr>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d038      	beq.n	8006e2c <_svfiprintf_r+0x1d8>
 8006dba:	4b23      	ldr	r3, [pc, #140]	; (8006e48 <_svfiprintf_r+0x1f4>)
 8006dbc:	bb1b      	cbnz	r3, 8006e06 <_svfiprintf_r+0x1b2>
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	3307      	adds	r3, #7
 8006dc2:	f023 0307 	bic.w	r3, r3, #7
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	9303      	str	r3, [sp, #12]
 8006dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dcc:	4433      	add	r3, r6
 8006dce:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd0:	e767      	b.n	8006ca2 <_svfiprintf_r+0x4e>
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dda:	e7a5      	b.n	8006d28 <_svfiprintf_r+0xd4>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f04f 0c0a 	mov.w	ip, #10
 8006de2:	4619      	mov	r1, r3
 8006de4:	3401      	adds	r4, #1
 8006de6:	9305      	str	r3, [sp, #20]
 8006de8:	4620      	mov	r0, r4
 8006dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dee:	3a30      	subs	r2, #48	; 0x30
 8006df0:	2a09      	cmp	r2, #9
 8006df2:	d903      	bls.n	8006dfc <_svfiprintf_r+0x1a8>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0c5      	beq.n	8006d84 <_svfiprintf_r+0x130>
 8006df8:	9105      	str	r1, [sp, #20]
 8006dfa:	e7c3      	b.n	8006d84 <_svfiprintf_r+0x130>
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	2301      	movs	r3, #1
 8006e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e04:	e7f0      	b.n	8006de8 <_svfiprintf_r+0x194>
 8006e06:	ab03      	add	r3, sp, #12
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	462a      	mov	r2, r5
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <_svfiprintf_r+0x1f8>)
 8006e10:	a904      	add	r1, sp, #16
 8006e12:	f7fe f807 	bl	8004e24 <_printf_float>
 8006e16:	1c42      	adds	r2, r0, #1
 8006e18:	4606      	mov	r6, r0
 8006e1a:	d1d6      	bne.n	8006dca <_svfiprintf_r+0x176>
 8006e1c:	89ab      	ldrh	r3, [r5, #12]
 8006e1e:	065b      	lsls	r3, r3, #25
 8006e20:	f53f af2c 	bmi.w	8006c7c <_svfiprintf_r+0x28>
 8006e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e26:	b01d      	add	sp, #116	; 0x74
 8006e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2c:	ab03      	add	r3, sp, #12
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	462a      	mov	r2, r5
 8006e32:	4638      	mov	r0, r7
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <_svfiprintf_r+0x1f8>)
 8006e36:	a904      	add	r1, sp, #16
 8006e38:	f7fe fa90 	bl	800535c <_printf_i>
 8006e3c:	e7eb      	b.n	8006e16 <_svfiprintf_r+0x1c2>
 8006e3e:	bf00      	nop
 8006e40:	08008c2c 	.word	0x08008c2c
 8006e44:	08008c36 	.word	0x08008c36
 8006e48:	08004e25 	.word	0x08004e25
 8006e4c:	08006b9d 	.word	0x08006b9d
 8006e50:	08008c32 	.word	0x08008c32

08006e54 <_sbrk_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	2300      	movs	r3, #0
 8006e58:	4d05      	ldr	r5, [pc, #20]	; (8006e70 <_sbrk_r+0x1c>)
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	f7fb fa26 	bl	80022b0 <_sbrk>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_sbrk_r+0x1a>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_sbrk_r+0x1a>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	20000344 	.word	0x20000344

08006e74 <__assert_func>:
 8006e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e76:	4614      	mov	r4, r2
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <__assert_func+0x2c>)
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68d8      	ldr	r0, [r3, #12]
 8006e82:	b14c      	cbz	r4, 8006e98 <__assert_func+0x24>
 8006e84:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <__assert_func+0x30>)
 8006e86:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e8a:	9100      	str	r1, [sp, #0]
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	4906      	ldr	r1, [pc, #24]	; (8006ea8 <__assert_func+0x34>)
 8006e90:	f000 f80e 	bl	8006eb0 <fiprintf>
 8006e94:	f000 faa2 	bl	80073dc <abort>
 8006e98:	4b04      	ldr	r3, [pc, #16]	; (8006eac <__assert_func+0x38>)
 8006e9a:	461c      	mov	r4, r3
 8006e9c:	e7f3      	b.n	8006e86 <__assert_func+0x12>
 8006e9e:	bf00      	nop
 8006ea0:	20000010 	.word	0x20000010
 8006ea4:	08008c3d 	.word	0x08008c3d
 8006ea8:	08008c4a 	.word	0x08008c4a
 8006eac:	08008c78 	.word	0x08008c78

08006eb0 <fiprintf>:
 8006eb0:	b40e      	push	{r1, r2, r3}
 8006eb2:	b503      	push	{r0, r1, lr}
 8006eb4:	4601      	mov	r1, r0
 8006eb6:	ab03      	add	r3, sp, #12
 8006eb8:	4805      	ldr	r0, [pc, #20]	; (8006ed0 <fiprintf+0x20>)
 8006eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ebe:	6800      	ldr	r0, [r0, #0]
 8006ec0:	9301      	str	r3, [sp, #4]
 8006ec2:	f000 f88d 	bl	8006fe0 <_vfiprintf_r>
 8006ec6:	b002      	add	sp, #8
 8006ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ecc:	b003      	add	sp, #12
 8006ece:	4770      	bx	lr
 8006ed0:	20000010 	.word	0x20000010

08006ed4 <__ascii_mbtowc>:
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	b901      	cbnz	r1, 8006eda <__ascii_mbtowc+0x6>
 8006ed8:	a901      	add	r1, sp, #4
 8006eda:	b142      	cbz	r2, 8006eee <__ascii_mbtowc+0x1a>
 8006edc:	b14b      	cbz	r3, 8006ef2 <__ascii_mbtowc+0x1e>
 8006ede:	7813      	ldrb	r3, [r2, #0]
 8006ee0:	600b      	str	r3, [r1, #0]
 8006ee2:	7812      	ldrb	r2, [r2, #0]
 8006ee4:	1e10      	subs	r0, r2, #0
 8006ee6:	bf18      	it	ne
 8006ee8:	2001      	movne	r0, #1
 8006eea:	b002      	add	sp, #8
 8006eec:	4770      	bx	lr
 8006eee:	4610      	mov	r0, r2
 8006ef0:	e7fb      	b.n	8006eea <__ascii_mbtowc+0x16>
 8006ef2:	f06f 0001 	mvn.w	r0, #1
 8006ef6:	e7f8      	b.n	8006eea <__ascii_mbtowc+0x16>

08006ef8 <memmove>:
 8006ef8:	4288      	cmp	r0, r1
 8006efa:	b510      	push	{r4, lr}
 8006efc:	eb01 0402 	add.w	r4, r1, r2
 8006f00:	d902      	bls.n	8006f08 <memmove+0x10>
 8006f02:	4284      	cmp	r4, r0
 8006f04:	4623      	mov	r3, r4
 8006f06:	d807      	bhi.n	8006f18 <memmove+0x20>
 8006f08:	1e43      	subs	r3, r0, #1
 8006f0a:	42a1      	cmp	r1, r4
 8006f0c:	d008      	beq.n	8006f20 <memmove+0x28>
 8006f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f16:	e7f8      	b.n	8006f0a <memmove+0x12>
 8006f18:	4601      	mov	r1, r0
 8006f1a:	4402      	add	r2, r0
 8006f1c:	428a      	cmp	r2, r1
 8006f1e:	d100      	bne.n	8006f22 <memmove+0x2a>
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f2a:	e7f7      	b.n	8006f1c <memmove+0x24>

08006f2c <__malloc_lock>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__malloc_lock+0x8>)
 8006f2e:	f000 bc15 	b.w	800775c <__retarget_lock_acquire_recursive>
 8006f32:	bf00      	nop
 8006f34:	2000034c 	.word	0x2000034c

08006f38 <__malloc_unlock>:
 8006f38:	4801      	ldr	r0, [pc, #4]	; (8006f40 <__malloc_unlock+0x8>)
 8006f3a:	f000 bc10 	b.w	800775e <__retarget_lock_release_recursive>
 8006f3e:	bf00      	nop
 8006f40:	2000034c 	.word	0x2000034c

08006f44 <_realloc_r>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	4607      	mov	r7, r0
 8006f48:	4614      	mov	r4, r2
 8006f4a:	460e      	mov	r6, r1
 8006f4c:	b921      	cbnz	r1, 8006f58 <_realloc_r+0x14>
 8006f4e:	4611      	mov	r1, r2
 8006f50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f54:	f7ff bdc8 	b.w	8006ae8 <_malloc_r>
 8006f58:	b922      	cbnz	r2, 8006f64 <_realloc_r+0x20>
 8006f5a:	f7ff fd79 	bl	8006a50 <_free_r>
 8006f5e:	4625      	mov	r5, r4
 8006f60:	4628      	mov	r0, r5
 8006f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f64:	f000 fc60 	bl	8007828 <_malloc_usable_size_r>
 8006f68:	42a0      	cmp	r0, r4
 8006f6a:	d20f      	bcs.n	8006f8c <_realloc_r+0x48>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4638      	mov	r0, r7
 8006f70:	f7ff fdba 	bl	8006ae8 <_malloc_r>
 8006f74:	4605      	mov	r5, r0
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d0f2      	beq.n	8006f60 <_realloc_r+0x1c>
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4622      	mov	r2, r4
 8006f7e:	f7fd fe9d 	bl	8004cbc <memcpy>
 8006f82:	4631      	mov	r1, r6
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7ff fd63 	bl	8006a50 <_free_r>
 8006f8a:	e7e9      	b.n	8006f60 <_realloc_r+0x1c>
 8006f8c:	4635      	mov	r5, r6
 8006f8e:	e7e7      	b.n	8006f60 <_realloc_r+0x1c>

08006f90 <__sfputc_r>:
 8006f90:	6893      	ldr	r3, [r2, #8]
 8006f92:	b410      	push	{r4}
 8006f94:	3b01      	subs	r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	6093      	str	r3, [r2, #8]
 8006f9a:	da07      	bge.n	8006fac <__sfputc_r+0x1c>
 8006f9c:	6994      	ldr	r4, [r2, #24]
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	db01      	blt.n	8006fa6 <__sfputc_r+0x16>
 8006fa2:	290a      	cmp	r1, #10
 8006fa4:	d102      	bne.n	8006fac <__sfputc_r+0x1c>
 8006fa6:	bc10      	pop	{r4}
 8006fa8:	f000 b94a 	b.w	8007240 <__swbuf_r>
 8006fac:	6813      	ldr	r3, [r2, #0]
 8006fae:	1c58      	adds	r0, r3, #1
 8006fb0:	6010      	str	r0, [r2, #0]
 8006fb2:	7019      	strb	r1, [r3, #0]
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	bc10      	pop	{r4}
 8006fb8:	4770      	bx	lr

08006fba <__sfputs_r>:
 8006fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbc:	4606      	mov	r6, r0
 8006fbe:	460f      	mov	r7, r1
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	18d5      	adds	r5, r2, r3
 8006fc4:	42ac      	cmp	r4, r5
 8006fc6:	d101      	bne.n	8006fcc <__sfputs_r+0x12>
 8006fc8:	2000      	movs	r0, #0
 8006fca:	e007      	b.n	8006fdc <__sfputs_r+0x22>
 8006fcc:	463a      	mov	r2, r7
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd4:	f7ff ffdc 	bl	8006f90 <__sfputc_r>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d1f3      	bne.n	8006fc4 <__sfputs_r+0xa>
 8006fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fe0 <_vfiprintf_r>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	460d      	mov	r5, r1
 8006fe6:	4614      	mov	r4, r2
 8006fe8:	4698      	mov	r8, r3
 8006fea:	4606      	mov	r6, r0
 8006fec:	b09d      	sub	sp, #116	; 0x74
 8006fee:	b118      	cbz	r0, 8006ff8 <_vfiprintf_r+0x18>
 8006ff0:	6983      	ldr	r3, [r0, #24]
 8006ff2:	b90b      	cbnz	r3, 8006ff8 <_vfiprintf_r+0x18>
 8006ff4:	f000 fb14 	bl	8007620 <__sinit>
 8006ff8:	4b89      	ldr	r3, [pc, #548]	; (8007220 <_vfiprintf_r+0x240>)
 8006ffa:	429d      	cmp	r5, r3
 8006ffc:	d11b      	bne.n	8007036 <_vfiprintf_r+0x56>
 8006ffe:	6875      	ldr	r5, [r6, #4]
 8007000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007002:	07d9      	lsls	r1, r3, #31
 8007004:	d405      	bmi.n	8007012 <_vfiprintf_r+0x32>
 8007006:	89ab      	ldrh	r3, [r5, #12]
 8007008:	059a      	lsls	r2, r3, #22
 800700a:	d402      	bmi.n	8007012 <_vfiprintf_r+0x32>
 800700c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800700e:	f000 fba5 	bl	800775c <__retarget_lock_acquire_recursive>
 8007012:	89ab      	ldrh	r3, [r5, #12]
 8007014:	071b      	lsls	r3, r3, #28
 8007016:	d501      	bpl.n	800701c <_vfiprintf_r+0x3c>
 8007018:	692b      	ldr	r3, [r5, #16]
 800701a:	b9eb      	cbnz	r3, 8007058 <_vfiprintf_r+0x78>
 800701c:	4629      	mov	r1, r5
 800701e:	4630      	mov	r0, r6
 8007020:	f000 f96e 	bl	8007300 <__swsetup_r>
 8007024:	b1c0      	cbz	r0, 8007058 <_vfiprintf_r+0x78>
 8007026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007028:	07dc      	lsls	r4, r3, #31
 800702a:	d50e      	bpl.n	800704a <_vfiprintf_r+0x6a>
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	b01d      	add	sp, #116	; 0x74
 8007032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007036:	4b7b      	ldr	r3, [pc, #492]	; (8007224 <_vfiprintf_r+0x244>)
 8007038:	429d      	cmp	r5, r3
 800703a:	d101      	bne.n	8007040 <_vfiprintf_r+0x60>
 800703c:	68b5      	ldr	r5, [r6, #8]
 800703e:	e7df      	b.n	8007000 <_vfiprintf_r+0x20>
 8007040:	4b79      	ldr	r3, [pc, #484]	; (8007228 <_vfiprintf_r+0x248>)
 8007042:	429d      	cmp	r5, r3
 8007044:	bf08      	it	eq
 8007046:	68f5      	ldreq	r5, [r6, #12]
 8007048:	e7da      	b.n	8007000 <_vfiprintf_r+0x20>
 800704a:	89ab      	ldrh	r3, [r5, #12]
 800704c:	0598      	lsls	r0, r3, #22
 800704e:	d4ed      	bmi.n	800702c <_vfiprintf_r+0x4c>
 8007050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007052:	f000 fb84 	bl	800775e <__retarget_lock_release_recursive>
 8007056:	e7e9      	b.n	800702c <_vfiprintf_r+0x4c>
 8007058:	2300      	movs	r3, #0
 800705a:	9309      	str	r3, [sp, #36]	; 0x24
 800705c:	2320      	movs	r3, #32
 800705e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007062:	2330      	movs	r3, #48	; 0x30
 8007064:	f04f 0901 	mov.w	r9, #1
 8007068:	f8cd 800c 	str.w	r8, [sp, #12]
 800706c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800722c <_vfiprintf_r+0x24c>
 8007070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007074:	4623      	mov	r3, r4
 8007076:	469a      	mov	sl, r3
 8007078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800707c:	b10a      	cbz	r2, 8007082 <_vfiprintf_r+0xa2>
 800707e:	2a25      	cmp	r2, #37	; 0x25
 8007080:	d1f9      	bne.n	8007076 <_vfiprintf_r+0x96>
 8007082:	ebba 0b04 	subs.w	fp, sl, r4
 8007086:	d00b      	beq.n	80070a0 <_vfiprintf_r+0xc0>
 8007088:	465b      	mov	r3, fp
 800708a:	4622      	mov	r2, r4
 800708c:	4629      	mov	r1, r5
 800708e:	4630      	mov	r0, r6
 8007090:	f7ff ff93 	bl	8006fba <__sfputs_r>
 8007094:	3001      	adds	r0, #1
 8007096:	f000 80aa 	beq.w	80071ee <_vfiprintf_r+0x20e>
 800709a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800709c:	445a      	add	r2, fp
 800709e:	9209      	str	r2, [sp, #36]	; 0x24
 80070a0:	f89a 3000 	ldrb.w	r3, [sl]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 80a2 	beq.w	80071ee <_vfiprintf_r+0x20e>
 80070aa:	2300      	movs	r3, #0
 80070ac:	f04f 32ff 	mov.w	r2, #4294967295
 80070b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070b4:	f10a 0a01 	add.w	sl, sl, #1
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	9307      	str	r3, [sp, #28]
 80070bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070c0:	931a      	str	r3, [sp, #104]	; 0x68
 80070c2:	4654      	mov	r4, sl
 80070c4:	2205      	movs	r2, #5
 80070c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ca:	4858      	ldr	r0, [pc, #352]	; (800722c <_vfiprintf_r+0x24c>)
 80070cc:	f7ff f922 	bl	8006314 <memchr>
 80070d0:	9a04      	ldr	r2, [sp, #16]
 80070d2:	b9d8      	cbnz	r0, 800710c <_vfiprintf_r+0x12c>
 80070d4:	06d1      	lsls	r1, r2, #27
 80070d6:	bf44      	itt	mi
 80070d8:	2320      	movmi	r3, #32
 80070da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070de:	0713      	lsls	r3, r2, #28
 80070e0:	bf44      	itt	mi
 80070e2:	232b      	movmi	r3, #43	; 0x2b
 80070e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070e8:	f89a 3000 	ldrb.w	r3, [sl]
 80070ec:	2b2a      	cmp	r3, #42	; 0x2a
 80070ee:	d015      	beq.n	800711c <_vfiprintf_r+0x13c>
 80070f0:	4654      	mov	r4, sl
 80070f2:	2000      	movs	r0, #0
 80070f4:	f04f 0c0a 	mov.w	ip, #10
 80070f8:	9a07      	ldr	r2, [sp, #28]
 80070fa:	4621      	mov	r1, r4
 80070fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007100:	3b30      	subs	r3, #48	; 0x30
 8007102:	2b09      	cmp	r3, #9
 8007104:	d94e      	bls.n	80071a4 <_vfiprintf_r+0x1c4>
 8007106:	b1b0      	cbz	r0, 8007136 <_vfiprintf_r+0x156>
 8007108:	9207      	str	r2, [sp, #28]
 800710a:	e014      	b.n	8007136 <_vfiprintf_r+0x156>
 800710c:	eba0 0308 	sub.w	r3, r0, r8
 8007110:	fa09 f303 	lsl.w	r3, r9, r3
 8007114:	4313      	orrs	r3, r2
 8007116:	46a2      	mov	sl, r4
 8007118:	9304      	str	r3, [sp, #16]
 800711a:	e7d2      	b.n	80070c2 <_vfiprintf_r+0xe2>
 800711c:	9b03      	ldr	r3, [sp, #12]
 800711e:	1d19      	adds	r1, r3, #4
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	9103      	str	r1, [sp, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	bfbb      	ittet	lt
 8007128:	425b      	neglt	r3, r3
 800712a:	f042 0202 	orrlt.w	r2, r2, #2
 800712e:	9307      	strge	r3, [sp, #28]
 8007130:	9307      	strlt	r3, [sp, #28]
 8007132:	bfb8      	it	lt
 8007134:	9204      	strlt	r2, [sp, #16]
 8007136:	7823      	ldrb	r3, [r4, #0]
 8007138:	2b2e      	cmp	r3, #46	; 0x2e
 800713a:	d10c      	bne.n	8007156 <_vfiprintf_r+0x176>
 800713c:	7863      	ldrb	r3, [r4, #1]
 800713e:	2b2a      	cmp	r3, #42	; 0x2a
 8007140:	d135      	bne.n	80071ae <_vfiprintf_r+0x1ce>
 8007142:	9b03      	ldr	r3, [sp, #12]
 8007144:	3402      	adds	r4, #2
 8007146:	1d1a      	adds	r2, r3, #4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	9203      	str	r2, [sp, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	bfb8      	it	lt
 8007150:	f04f 33ff 	movlt.w	r3, #4294967295
 8007154:	9305      	str	r3, [sp, #20]
 8007156:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800723c <_vfiprintf_r+0x25c>
 800715a:	2203      	movs	r2, #3
 800715c:	4650      	mov	r0, sl
 800715e:	7821      	ldrb	r1, [r4, #0]
 8007160:	f7ff f8d8 	bl	8006314 <memchr>
 8007164:	b140      	cbz	r0, 8007178 <_vfiprintf_r+0x198>
 8007166:	2340      	movs	r3, #64	; 0x40
 8007168:	eba0 000a 	sub.w	r0, r0, sl
 800716c:	fa03 f000 	lsl.w	r0, r3, r0
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	3401      	adds	r4, #1
 8007174:	4303      	orrs	r3, r0
 8007176:	9304      	str	r3, [sp, #16]
 8007178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717c:	2206      	movs	r2, #6
 800717e:	482c      	ldr	r0, [pc, #176]	; (8007230 <_vfiprintf_r+0x250>)
 8007180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007184:	f7ff f8c6 	bl	8006314 <memchr>
 8007188:	2800      	cmp	r0, #0
 800718a:	d03f      	beq.n	800720c <_vfiprintf_r+0x22c>
 800718c:	4b29      	ldr	r3, [pc, #164]	; (8007234 <_vfiprintf_r+0x254>)
 800718e:	bb1b      	cbnz	r3, 80071d8 <_vfiprintf_r+0x1f8>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	3307      	adds	r3, #7
 8007194:	f023 0307 	bic.w	r3, r3, #7
 8007198:	3308      	adds	r3, #8
 800719a:	9303      	str	r3, [sp, #12]
 800719c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719e:	443b      	add	r3, r7
 80071a0:	9309      	str	r3, [sp, #36]	; 0x24
 80071a2:	e767      	b.n	8007074 <_vfiprintf_r+0x94>
 80071a4:	460c      	mov	r4, r1
 80071a6:	2001      	movs	r0, #1
 80071a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ac:	e7a5      	b.n	80070fa <_vfiprintf_r+0x11a>
 80071ae:	2300      	movs	r3, #0
 80071b0:	f04f 0c0a 	mov.w	ip, #10
 80071b4:	4619      	mov	r1, r3
 80071b6:	3401      	adds	r4, #1
 80071b8:	9305      	str	r3, [sp, #20]
 80071ba:	4620      	mov	r0, r4
 80071bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c0:	3a30      	subs	r2, #48	; 0x30
 80071c2:	2a09      	cmp	r2, #9
 80071c4:	d903      	bls.n	80071ce <_vfiprintf_r+0x1ee>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0c5      	beq.n	8007156 <_vfiprintf_r+0x176>
 80071ca:	9105      	str	r1, [sp, #20]
 80071cc:	e7c3      	b.n	8007156 <_vfiprintf_r+0x176>
 80071ce:	4604      	mov	r4, r0
 80071d0:	2301      	movs	r3, #1
 80071d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80071d6:	e7f0      	b.n	80071ba <_vfiprintf_r+0x1da>
 80071d8:	ab03      	add	r3, sp, #12
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	462a      	mov	r2, r5
 80071de:	4630      	mov	r0, r6
 80071e0:	4b15      	ldr	r3, [pc, #84]	; (8007238 <_vfiprintf_r+0x258>)
 80071e2:	a904      	add	r1, sp, #16
 80071e4:	f7fd fe1e 	bl	8004e24 <_printf_float>
 80071e8:	4607      	mov	r7, r0
 80071ea:	1c78      	adds	r0, r7, #1
 80071ec:	d1d6      	bne.n	800719c <_vfiprintf_r+0x1bc>
 80071ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071f0:	07d9      	lsls	r1, r3, #31
 80071f2:	d405      	bmi.n	8007200 <_vfiprintf_r+0x220>
 80071f4:	89ab      	ldrh	r3, [r5, #12]
 80071f6:	059a      	lsls	r2, r3, #22
 80071f8:	d402      	bmi.n	8007200 <_vfiprintf_r+0x220>
 80071fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071fc:	f000 faaf 	bl	800775e <__retarget_lock_release_recursive>
 8007200:	89ab      	ldrh	r3, [r5, #12]
 8007202:	065b      	lsls	r3, r3, #25
 8007204:	f53f af12 	bmi.w	800702c <_vfiprintf_r+0x4c>
 8007208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800720a:	e711      	b.n	8007030 <_vfiprintf_r+0x50>
 800720c:	ab03      	add	r3, sp, #12
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	462a      	mov	r2, r5
 8007212:	4630      	mov	r0, r6
 8007214:	4b08      	ldr	r3, [pc, #32]	; (8007238 <_vfiprintf_r+0x258>)
 8007216:	a904      	add	r1, sp, #16
 8007218:	f7fe f8a0 	bl	800535c <_printf_i>
 800721c:	e7e4      	b.n	80071e8 <_vfiprintf_r+0x208>
 800721e:	bf00      	nop
 8007220:	08008da4 	.word	0x08008da4
 8007224:	08008dc4 	.word	0x08008dc4
 8007228:	08008d84 	.word	0x08008d84
 800722c:	08008c2c 	.word	0x08008c2c
 8007230:	08008c36 	.word	0x08008c36
 8007234:	08004e25 	.word	0x08004e25
 8007238:	08006fbb 	.word	0x08006fbb
 800723c:	08008c32 	.word	0x08008c32

08007240 <__swbuf_r>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	460e      	mov	r6, r1
 8007244:	4614      	mov	r4, r2
 8007246:	4605      	mov	r5, r0
 8007248:	b118      	cbz	r0, 8007252 <__swbuf_r+0x12>
 800724a:	6983      	ldr	r3, [r0, #24]
 800724c:	b90b      	cbnz	r3, 8007252 <__swbuf_r+0x12>
 800724e:	f000 f9e7 	bl	8007620 <__sinit>
 8007252:	4b21      	ldr	r3, [pc, #132]	; (80072d8 <__swbuf_r+0x98>)
 8007254:	429c      	cmp	r4, r3
 8007256:	d12b      	bne.n	80072b0 <__swbuf_r+0x70>
 8007258:	686c      	ldr	r4, [r5, #4]
 800725a:	69a3      	ldr	r3, [r4, #24]
 800725c:	60a3      	str	r3, [r4, #8]
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	071a      	lsls	r2, r3, #28
 8007262:	d52f      	bpl.n	80072c4 <__swbuf_r+0x84>
 8007264:	6923      	ldr	r3, [r4, #16]
 8007266:	b36b      	cbz	r3, 80072c4 <__swbuf_r+0x84>
 8007268:	6923      	ldr	r3, [r4, #16]
 800726a:	6820      	ldr	r0, [r4, #0]
 800726c:	b2f6      	uxtb	r6, r6
 800726e:	1ac0      	subs	r0, r0, r3
 8007270:	6963      	ldr	r3, [r4, #20]
 8007272:	4637      	mov	r7, r6
 8007274:	4283      	cmp	r3, r0
 8007276:	dc04      	bgt.n	8007282 <__swbuf_r+0x42>
 8007278:	4621      	mov	r1, r4
 800727a:	4628      	mov	r0, r5
 800727c:	f000 f93c 	bl	80074f8 <_fflush_r>
 8007280:	bb30      	cbnz	r0, 80072d0 <__swbuf_r+0x90>
 8007282:	68a3      	ldr	r3, [r4, #8]
 8007284:	3001      	adds	r0, #1
 8007286:	3b01      	subs	r3, #1
 8007288:	60a3      	str	r3, [r4, #8]
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	6022      	str	r2, [r4, #0]
 8007290:	701e      	strb	r6, [r3, #0]
 8007292:	6963      	ldr	r3, [r4, #20]
 8007294:	4283      	cmp	r3, r0
 8007296:	d004      	beq.n	80072a2 <__swbuf_r+0x62>
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	07db      	lsls	r3, r3, #31
 800729c:	d506      	bpl.n	80072ac <__swbuf_r+0x6c>
 800729e:	2e0a      	cmp	r6, #10
 80072a0:	d104      	bne.n	80072ac <__swbuf_r+0x6c>
 80072a2:	4621      	mov	r1, r4
 80072a4:	4628      	mov	r0, r5
 80072a6:	f000 f927 	bl	80074f8 <_fflush_r>
 80072aa:	b988      	cbnz	r0, 80072d0 <__swbuf_r+0x90>
 80072ac:	4638      	mov	r0, r7
 80072ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b0:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <__swbuf_r+0x9c>)
 80072b2:	429c      	cmp	r4, r3
 80072b4:	d101      	bne.n	80072ba <__swbuf_r+0x7a>
 80072b6:	68ac      	ldr	r4, [r5, #8]
 80072b8:	e7cf      	b.n	800725a <__swbuf_r+0x1a>
 80072ba:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <__swbuf_r+0xa0>)
 80072bc:	429c      	cmp	r4, r3
 80072be:	bf08      	it	eq
 80072c0:	68ec      	ldreq	r4, [r5, #12]
 80072c2:	e7ca      	b.n	800725a <__swbuf_r+0x1a>
 80072c4:	4621      	mov	r1, r4
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 f81a 	bl	8007300 <__swsetup_r>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d0cb      	beq.n	8007268 <__swbuf_r+0x28>
 80072d0:	f04f 37ff 	mov.w	r7, #4294967295
 80072d4:	e7ea      	b.n	80072ac <__swbuf_r+0x6c>
 80072d6:	bf00      	nop
 80072d8:	08008da4 	.word	0x08008da4
 80072dc:	08008dc4 	.word	0x08008dc4
 80072e0:	08008d84 	.word	0x08008d84

080072e4 <__ascii_wctomb>:
 80072e4:	4603      	mov	r3, r0
 80072e6:	4608      	mov	r0, r1
 80072e8:	b141      	cbz	r1, 80072fc <__ascii_wctomb+0x18>
 80072ea:	2aff      	cmp	r2, #255	; 0xff
 80072ec:	d904      	bls.n	80072f8 <__ascii_wctomb+0x14>
 80072ee:	228a      	movs	r2, #138	; 0x8a
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	4770      	bx	lr
 80072f8:	2001      	movs	r0, #1
 80072fa:	700a      	strb	r2, [r1, #0]
 80072fc:	4770      	bx	lr
	...

08007300 <__swsetup_r>:
 8007300:	4b32      	ldr	r3, [pc, #200]	; (80073cc <__swsetup_r+0xcc>)
 8007302:	b570      	push	{r4, r5, r6, lr}
 8007304:	681d      	ldr	r5, [r3, #0]
 8007306:	4606      	mov	r6, r0
 8007308:	460c      	mov	r4, r1
 800730a:	b125      	cbz	r5, 8007316 <__swsetup_r+0x16>
 800730c:	69ab      	ldr	r3, [r5, #24]
 800730e:	b913      	cbnz	r3, 8007316 <__swsetup_r+0x16>
 8007310:	4628      	mov	r0, r5
 8007312:	f000 f985 	bl	8007620 <__sinit>
 8007316:	4b2e      	ldr	r3, [pc, #184]	; (80073d0 <__swsetup_r+0xd0>)
 8007318:	429c      	cmp	r4, r3
 800731a:	d10f      	bne.n	800733c <__swsetup_r+0x3c>
 800731c:	686c      	ldr	r4, [r5, #4]
 800731e:	89a3      	ldrh	r3, [r4, #12]
 8007320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007324:	0719      	lsls	r1, r3, #28
 8007326:	d42c      	bmi.n	8007382 <__swsetup_r+0x82>
 8007328:	06dd      	lsls	r5, r3, #27
 800732a:	d411      	bmi.n	8007350 <__swsetup_r+0x50>
 800732c:	2309      	movs	r3, #9
 800732e:	6033      	str	r3, [r6, #0]
 8007330:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	81a3      	strh	r3, [r4, #12]
 800733a:	e03e      	b.n	80073ba <__swsetup_r+0xba>
 800733c:	4b25      	ldr	r3, [pc, #148]	; (80073d4 <__swsetup_r+0xd4>)
 800733e:	429c      	cmp	r4, r3
 8007340:	d101      	bne.n	8007346 <__swsetup_r+0x46>
 8007342:	68ac      	ldr	r4, [r5, #8]
 8007344:	e7eb      	b.n	800731e <__swsetup_r+0x1e>
 8007346:	4b24      	ldr	r3, [pc, #144]	; (80073d8 <__swsetup_r+0xd8>)
 8007348:	429c      	cmp	r4, r3
 800734a:	bf08      	it	eq
 800734c:	68ec      	ldreq	r4, [r5, #12]
 800734e:	e7e6      	b.n	800731e <__swsetup_r+0x1e>
 8007350:	0758      	lsls	r0, r3, #29
 8007352:	d512      	bpl.n	800737a <__swsetup_r+0x7a>
 8007354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007356:	b141      	cbz	r1, 800736a <__swsetup_r+0x6a>
 8007358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800735c:	4299      	cmp	r1, r3
 800735e:	d002      	beq.n	8007366 <__swsetup_r+0x66>
 8007360:	4630      	mov	r0, r6
 8007362:	f7ff fb75 	bl	8006a50 <_free_r>
 8007366:	2300      	movs	r3, #0
 8007368:	6363      	str	r3, [r4, #52]	; 0x34
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007370:	81a3      	strh	r3, [r4, #12]
 8007372:	2300      	movs	r3, #0
 8007374:	6063      	str	r3, [r4, #4]
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f043 0308 	orr.w	r3, r3, #8
 8007380:	81a3      	strh	r3, [r4, #12]
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	b94b      	cbnz	r3, 800739a <__swsetup_r+0x9a>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800738c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007390:	d003      	beq.n	800739a <__swsetup_r+0x9a>
 8007392:	4621      	mov	r1, r4
 8007394:	4630      	mov	r0, r6
 8007396:	f000 fa07 	bl	80077a8 <__smakebuf_r>
 800739a:	89a0      	ldrh	r0, [r4, #12]
 800739c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073a0:	f010 0301 	ands.w	r3, r0, #1
 80073a4:	d00a      	beq.n	80073bc <__swsetup_r+0xbc>
 80073a6:	2300      	movs	r3, #0
 80073a8:	60a3      	str	r3, [r4, #8]
 80073aa:	6963      	ldr	r3, [r4, #20]
 80073ac:	425b      	negs	r3, r3
 80073ae:	61a3      	str	r3, [r4, #24]
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	b943      	cbnz	r3, 80073c6 <__swsetup_r+0xc6>
 80073b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073b8:	d1ba      	bne.n	8007330 <__swsetup_r+0x30>
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	0781      	lsls	r1, r0, #30
 80073be:	bf58      	it	pl
 80073c0:	6963      	ldrpl	r3, [r4, #20]
 80073c2:	60a3      	str	r3, [r4, #8]
 80073c4:	e7f4      	b.n	80073b0 <__swsetup_r+0xb0>
 80073c6:	2000      	movs	r0, #0
 80073c8:	e7f7      	b.n	80073ba <__swsetup_r+0xba>
 80073ca:	bf00      	nop
 80073cc:	20000010 	.word	0x20000010
 80073d0:	08008da4 	.word	0x08008da4
 80073d4:	08008dc4 	.word	0x08008dc4
 80073d8:	08008d84 	.word	0x08008d84

080073dc <abort>:
 80073dc:	2006      	movs	r0, #6
 80073de:	b508      	push	{r3, lr}
 80073e0:	f000 fa52 	bl	8007888 <raise>
 80073e4:	2001      	movs	r0, #1
 80073e6:	f7fa feef 	bl	80021c8 <_exit>
	...

080073ec <__sflush_r>:
 80073ec:	898a      	ldrh	r2, [r1, #12]
 80073ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f2:	4605      	mov	r5, r0
 80073f4:	0710      	lsls	r0, r2, #28
 80073f6:	460c      	mov	r4, r1
 80073f8:	d458      	bmi.n	80074ac <__sflush_r+0xc0>
 80073fa:	684b      	ldr	r3, [r1, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dc05      	bgt.n	800740c <__sflush_r+0x20>
 8007400:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007402:	2b00      	cmp	r3, #0
 8007404:	dc02      	bgt.n	800740c <__sflush_r+0x20>
 8007406:	2000      	movs	r0, #0
 8007408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800740c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800740e:	2e00      	cmp	r6, #0
 8007410:	d0f9      	beq.n	8007406 <__sflush_r+0x1a>
 8007412:	2300      	movs	r3, #0
 8007414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007418:	682f      	ldr	r7, [r5, #0]
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	d032      	beq.n	8007484 <__sflush_r+0x98>
 800741e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007420:	89a3      	ldrh	r3, [r4, #12]
 8007422:	075a      	lsls	r2, r3, #29
 8007424:	d505      	bpl.n	8007432 <__sflush_r+0x46>
 8007426:	6863      	ldr	r3, [r4, #4]
 8007428:	1ac0      	subs	r0, r0, r3
 800742a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800742c:	b10b      	cbz	r3, 8007432 <__sflush_r+0x46>
 800742e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007430:	1ac0      	subs	r0, r0, r3
 8007432:	2300      	movs	r3, #0
 8007434:	4602      	mov	r2, r0
 8007436:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007438:	4628      	mov	r0, r5
 800743a:	6a21      	ldr	r1, [r4, #32]
 800743c:	47b0      	blx	r6
 800743e:	1c43      	adds	r3, r0, #1
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	d106      	bne.n	8007452 <__sflush_r+0x66>
 8007444:	6829      	ldr	r1, [r5, #0]
 8007446:	291d      	cmp	r1, #29
 8007448:	d82c      	bhi.n	80074a4 <__sflush_r+0xb8>
 800744a:	4a2a      	ldr	r2, [pc, #168]	; (80074f4 <__sflush_r+0x108>)
 800744c:	40ca      	lsrs	r2, r1
 800744e:	07d6      	lsls	r6, r2, #31
 8007450:	d528      	bpl.n	80074a4 <__sflush_r+0xb8>
 8007452:	2200      	movs	r2, #0
 8007454:	6062      	str	r2, [r4, #4]
 8007456:	6922      	ldr	r2, [r4, #16]
 8007458:	04d9      	lsls	r1, r3, #19
 800745a:	6022      	str	r2, [r4, #0]
 800745c:	d504      	bpl.n	8007468 <__sflush_r+0x7c>
 800745e:	1c42      	adds	r2, r0, #1
 8007460:	d101      	bne.n	8007466 <__sflush_r+0x7a>
 8007462:	682b      	ldr	r3, [r5, #0]
 8007464:	b903      	cbnz	r3, 8007468 <__sflush_r+0x7c>
 8007466:	6560      	str	r0, [r4, #84]	; 0x54
 8007468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800746a:	602f      	str	r7, [r5, #0]
 800746c:	2900      	cmp	r1, #0
 800746e:	d0ca      	beq.n	8007406 <__sflush_r+0x1a>
 8007470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007474:	4299      	cmp	r1, r3
 8007476:	d002      	beq.n	800747e <__sflush_r+0x92>
 8007478:	4628      	mov	r0, r5
 800747a:	f7ff fae9 	bl	8006a50 <_free_r>
 800747e:	2000      	movs	r0, #0
 8007480:	6360      	str	r0, [r4, #52]	; 0x34
 8007482:	e7c1      	b.n	8007408 <__sflush_r+0x1c>
 8007484:	6a21      	ldr	r1, [r4, #32]
 8007486:	2301      	movs	r3, #1
 8007488:	4628      	mov	r0, r5
 800748a:	47b0      	blx	r6
 800748c:	1c41      	adds	r1, r0, #1
 800748e:	d1c7      	bne.n	8007420 <__sflush_r+0x34>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0c4      	beq.n	8007420 <__sflush_r+0x34>
 8007496:	2b1d      	cmp	r3, #29
 8007498:	d001      	beq.n	800749e <__sflush_r+0xb2>
 800749a:	2b16      	cmp	r3, #22
 800749c:	d101      	bne.n	80074a2 <__sflush_r+0xb6>
 800749e:	602f      	str	r7, [r5, #0]
 80074a0:	e7b1      	b.n	8007406 <__sflush_r+0x1a>
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a8:	81a3      	strh	r3, [r4, #12]
 80074aa:	e7ad      	b.n	8007408 <__sflush_r+0x1c>
 80074ac:	690f      	ldr	r7, [r1, #16]
 80074ae:	2f00      	cmp	r7, #0
 80074b0:	d0a9      	beq.n	8007406 <__sflush_r+0x1a>
 80074b2:	0793      	lsls	r3, r2, #30
 80074b4:	bf18      	it	ne
 80074b6:	2300      	movne	r3, #0
 80074b8:	680e      	ldr	r6, [r1, #0]
 80074ba:	bf08      	it	eq
 80074bc:	694b      	ldreq	r3, [r1, #20]
 80074be:	eba6 0807 	sub.w	r8, r6, r7
 80074c2:	600f      	str	r7, [r1, #0]
 80074c4:	608b      	str	r3, [r1, #8]
 80074c6:	f1b8 0f00 	cmp.w	r8, #0
 80074ca:	dd9c      	ble.n	8007406 <__sflush_r+0x1a>
 80074cc:	4643      	mov	r3, r8
 80074ce:	463a      	mov	r2, r7
 80074d0:	4628      	mov	r0, r5
 80074d2:	6a21      	ldr	r1, [r4, #32]
 80074d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074d6:	47b0      	blx	r6
 80074d8:	2800      	cmp	r0, #0
 80074da:	dc06      	bgt.n	80074ea <__sflush_r+0xfe>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f04f 30ff 	mov.w	r0, #4294967295
 80074e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	e78e      	b.n	8007408 <__sflush_r+0x1c>
 80074ea:	4407      	add	r7, r0
 80074ec:	eba8 0800 	sub.w	r8, r8, r0
 80074f0:	e7e9      	b.n	80074c6 <__sflush_r+0xda>
 80074f2:	bf00      	nop
 80074f4:	20400001 	.word	0x20400001

080074f8 <_fflush_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	690b      	ldr	r3, [r1, #16]
 80074fc:	4605      	mov	r5, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	b913      	cbnz	r3, 8007508 <_fflush_r+0x10>
 8007502:	2500      	movs	r5, #0
 8007504:	4628      	mov	r0, r5
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	b118      	cbz	r0, 8007512 <_fflush_r+0x1a>
 800750a:	6983      	ldr	r3, [r0, #24]
 800750c:	b90b      	cbnz	r3, 8007512 <_fflush_r+0x1a>
 800750e:	f000 f887 	bl	8007620 <__sinit>
 8007512:	4b14      	ldr	r3, [pc, #80]	; (8007564 <_fflush_r+0x6c>)
 8007514:	429c      	cmp	r4, r3
 8007516:	d11b      	bne.n	8007550 <_fflush_r+0x58>
 8007518:	686c      	ldr	r4, [r5, #4]
 800751a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0ef      	beq.n	8007502 <_fflush_r+0xa>
 8007522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007524:	07d0      	lsls	r0, r2, #31
 8007526:	d404      	bmi.n	8007532 <_fflush_r+0x3a>
 8007528:	0599      	lsls	r1, r3, #22
 800752a:	d402      	bmi.n	8007532 <_fflush_r+0x3a>
 800752c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800752e:	f000 f915 	bl	800775c <__retarget_lock_acquire_recursive>
 8007532:	4628      	mov	r0, r5
 8007534:	4621      	mov	r1, r4
 8007536:	f7ff ff59 	bl	80073ec <__sflush_r>
 800753a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800753c:	4605      	mov	r5, r0
 800753e:	07da      	lsls	r2, r3, #31
 8007540:	d4e0      	bmi.n	8007504 <_fflush_r+0xc>
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	059b      	lsls	r3, r3, #22
 8007546:	d4dd      	bmi.n	8007504 <_fflush_r+0xc>
 8007548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800754a:	f000 f908 	bl	800775e <__retarget_lock_release_recursive>
 800754e:	e7d9      	b.n	8007504 <_fflush_r+0xc>
 8007550:	4b05      	ldr	r3, [pc, #20]	; (8007568 <_fflush_r+0x70>)
 8007552:	429c      	cmp	r4, r3
 8007554:	d101      	bne.n	800755a <_fflush_r+0x62>
 8007556:	68ac      	ldr	r4, [r5, #8]
 8007558:	e7df      	b.n	800751a <_fflush_r+0x22>
 800755a:	4b04      	ldr	r3, [pc, #16]	; (800756c <_fflush_r+0x74>)
 800755c:	429c      	cmp	r4, r3
 800755e:	bf08      	it	eq
 8007560:	68ec      	ldreq	r4, [r5, #12]
 8007562:	e7da      	b.n	800751a <_fflush_r+0x22>
 8007564:	08008da4 	.word	0x08008da4
 8007568:	08008dc4 	.word	0x08008dc4
 800756c:	08008d84 	.word	0x08008d84

08007570 <std>:
 8007570:	2300      	movs	r3, #0
 8007572:	b510      	push	{r4, lr}
 8007574:	4604      	mov	r4, r0
 8007576:	e9c0 3300 	strd	r3, r3, [r0]
 800757a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800757e:	6083      	str	r3, [r0, #8]
 8007580:	8181      	strh	r1, [r0, #12]
 8007582:	6643      	str	r3, [r0, #100]	; 0x64
 8007584:	81c2      	strh	r2, [r0, #14]
 8007586:	6183      	str	r3, [r0, #24]
 8007588:	4619      	mov	r1, r3
 800758a:	2208      	movs	r2, #8
 800758c:	305c      	adds	r0, #92	; 0x5c
 800758e:	f7fd fba3 	bl	8004cd8 <memset>
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <std+0x38>)
 8007594:	6224      	str	r4, [r4, #32]
 8007596:	6263      	str	r3, [r4, #36]	; 0x24
 8007598:	4b04      	ldr	r3, [pc, #16]	; (80075ac <std+0x3c>)
 800759a:	62a3      	str	r3, [r4, #40]	; 0x28
 800759c:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <std+0x40>)
 800759e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075a0:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <std+0x44>)
 80075a2:	6323      	str	r3, [r4, #48]	; 0x30
 80075a4:	bd10      	pop	{r4, pc}
 80075a6:	bf00      	nop
 80075a8:	080078c1 	.word	0x080078c1
 80075ac:	080078e3 	.word	0x080078e3
 80075b0:	0800791b 	.word	0x0800791b
 80075b4:	0800793f 	.word	0x0800793f

080075b8 <_cleanup_r>:
 80075b8:	4901      	ldr	r1, [pc, #4]	; (80075c0 <_cleanup_r+0x8>)
 80075ba:	f000 b8af 	b.w	800771c <_fwalk_reent>
 80075be:	bf00      	nop
 80075c0:	080074f9 	.word	0x080074f9

080075c4 <__sfmoreglue>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	2568      	movs	r5, #104	; 0x68
 80075c8:	1e4a      	subs	r2, r1, #1
 80075ca:	4355      	muls	r5, r2
 80075cc:	460e      	mov	r6, r1
 80075ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075d2:	f7ff fa89 	bl	8006ae8 <_malloc_r>
 80075d6:	4604      	mov	r4, r0
 80075d8:	b140      	cbz	r0, 80075ec <__sfmoreglue+0x28>
 80075da:	2100      	movs	r1, #0
 80075dc:	e9c0 1600 	strd	r1, r6, [r0]
 80075e0:	300c      	adds	r0, #12
 80075e2:	60a0      	str	r0, [r4, #8]
 80075e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075e8:	f7fd fb76 	bl	8004cd8 <memset>
 80075ec:	4620      	mov	r0, r4
 80075ee:	bd70      	pop	{r4, r5, r6, pc}

080075f0 <__sfp_lock_acquire>:
 80075f0:	4801      	ldr	r0, [pc, #4]	; (80075f8 <__sfp_lock_acquire+0x8>)
 80075f2:	f000 b8b3 	b.w	800775c <__retarget_lock_acquire_recursive>
 80075f6:	bf00      	nop
 80075f8:	20000350 	.word	0x20000350

080075fc <__sfp_lock_release>:
 80075fc:	4801      	ldr	r0, [pc, #4]	; (8007604 <__sfp_lock_release+0x8>)
 80075fe:	f000 b8ae 	b.w	800775e <__retarget_lock_release_recursive>
 8007602:	bf00      	nop
 8007604:	20000350 	.word	0x20000350

08007608 <__sinit_lock_acquire>:
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <__sinit_lock_acquire+0x8>)
 800760a:	f000 b8a7 	b.w	800775c <__retarget_lock_acquire_recursive>
 800760e:	bf00      	nop
 8007610:	2000034b 	.word	0x2000034b

08007614 <__sinit_lock_release>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__sinit_lock_release+0x8>)
 8007616:	f000 b8a2 	b.w	800775e <__retarget_lock_release_recursive>
 800761a:	bf00      	nop
 800761c:	2000034b 	.word	0x2000034b

08007620 <__sinit>:
 8007620:	b510      	push	{r4, lr}
 8007622:	4604      	mov	r4, r0
 8007624:	f7ff fff0 	bl	8007608 <__sinit_lock_acquire>
 8007628:	69a3      	ldr	r3, [r4, #24]
 800762a:	b11b      	cbz	r3, 8007634 <__sinit+0x14>
 800762c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007630:	f7ff bff0 	b.w	8007614 <__sinit_lock_release>
 8007634:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007638:	6523      	str	r3, [r4, #80]	; 0x50
 800763a:	4b13      	ldr	r3, [pc, #76]	; (8007688 <__sinit+0x68>)
 800763c:	4a13      	ldr	r2, [pc, #76]	; (800768c <__sinit+0x6c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	62a2      	str	r2, [r4, #40]	; 0x28
 8007642:	42a3      	cmp	r3, r4
 8007644:	bf08      	it	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	4620      	mov	r0, r4
 800764a:	bf08      	it	eq
 800764c:	61a3      	streq	r3, [r4, #24]
 800764e:	f000 f81f 	bl	8007690 <__sfp>
 8007652:	6060      	str	r0, [r4, #4]
 8007654:	4620      	mov	r0, r4
 8007656:	f000 f81b 	bl	8007690 <__sfp>
 800765a:	60a0      	str	r0, [r4, #8]
 800765c:	4620      	mov	r0, r4
 800765e:	f000 f817 	bl	8007690 <__sfp>
 8007662:	2200      	movs	r2, #0
 8007664:	2104      	movs	r1, #4
 8007666:	60e0      	str	r0, [r4, #12]
 8007668:	6860      	ldr	r0, [r4, #4]
 800766a:	f7ff ff81 	bl	8007570 <std>
 800766e:	2201      	movs	r2, #1
 8007670:	2109      	movs	r1, #9
 8007672:	68a0      	ldr	r0, [r4, #8]
 8007674:	f7ff ff7c 	bl	8007570 <std>
 8007678:	2202      	movs	r2, #2
 800767a:	2112      	movs	r1, #18
 800767c:	68e0      	ldr	r0, [r4, #12]
 800767e:	f7ff ff77 	bl	8007570 <std>
 8007682:	2301      	movs	r3, #1
 8007684:	61a3      	str	r3, [r4, #24]
 8007686:	e7d1      	b.n	800762c <__sinit+0xc>
 8007688:	08008a00 	.word	0x08008a00
 800768c:	080075b9 	.word	0x080075b9

08007690 <__sfp>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	4607      	mov	r7, r0
 8007694:	f7ff ffac 	bl	80075f0 <__sfp_lock_acquire>
 8007698:	4b1e      	ldr	r3, [pc, #120]	; (8007714 <__sfp+0x84>)
 800769a:	681e      	ldr	r6, [r3, #0]
 800769c:	69b3      	ldr	r3, [r6, #24]
 800769e:	b913      	cbnz	r3, 80076a6 <__sfp+0x16>
 80076a0:	4630      	mov	r0, r6
 80076a2:	f7ff ffbd 	bl	8007620 <__sinit>
 80076a6:	3648      	adds	r6, #72	; 0x48
 80076a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	d503      	bpl.n	80076b8 <__sfp+0x28>
 80076b0:	6833      	ldr	r3, [r6, #0]
 80076b2:	b30b      	cbz	r3, 80076f8 <__sfp+0x68>
 80076b4:	6836      	ldr	r6, [r6, #0]
 80076b6:	e7f7      	b.n	80076a8 <__sfp+0x18>
 80076b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076bc:	b9d5      	cbnz	r5, 80076f4 <__sfp+0x64>
 80076be:	4b16      	ldr	r3, [pc, #88]	; (8007718 <__sfp+0x88>)
 80076c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076c4:	60e3      	str	r3, [r4, #12]
 80076c6:	6665      	str	r5, [r4, #100]	; 0x64
 80076c8:	f000 f847 	bl	800775a <__retarget_lock_init_recursive>
 80076cc:	f7ff ff96 	bl	80075fc <__sfp_lock_release>
 80076d0:	2208      	movs	r2, #8
 80076d2:	4629      	mov	r1, r5
 80076d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076dc:	6025      	str	r5, [r4, #0]
 80076de:	61a5      	str	r5, [r4, #24]
 80076e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076e4:	f7fd faf8 	bl	8004cd8 <memset>
 80076e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076f0:	4620      	mov	r0, r4
 80076f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076f4:	3468      	adds	r4, #104	; 0x68
 80076f6:	e7d9      	b.n	80076ac <__sfp+0x1c>
 80076f8:	2104      	movs	r1, #4
 80076fa:	4638      	mov	r0, r7
 80076fc:	f7ff ff62 	bl	80075c4 <__sfmoreglue>
 8007700:	4604      	mov	r4, r0
 8007702:	6030      	str	r0, [r6, #0]
 8007704:	2800      	cmp	r0, #0
 8007706:	d1d5      	bne.n	80076b4 <__sfp+0x24>
 8007708:	f7ff ff78 	bl	80075fc <__sfp_lock_release>
 800770c:	230c      	movs	r3, #12
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	e7ee      	b.n	80076f0 <__sfp+0x60>
 8007712:	bf00      	nop
 8007714:	08008a00 	.word	0x08008a00
 8007718:	ffff0001 	.word	0xffff0001

0800771c <_fwalk_reent>:
 800771c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007720:	4606      	mov	r6, r0
 8007722:	4688      	mov	r8, r1
 8007724:	2700      	movs	r7, #0
 8007726:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800772a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800772e:	f1b9 0901 	subs.w	r9, r9, #1
 8007732:	d505      	bpl.n	8007740 <_fwalk_reent+0x24>
 8007734:	6824      	ldr	r4, [r4, #0]
 8007736:	2c00      	cmp	r4, #0
 8007738:	d1f7      	bne.n	800772a <_fwalk_reent+0xe>
 800773a:	4638      	mov	r0, r7
 800773c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007740:	89ab      	ldrh	r3, [r5, #12]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d907      	bls.n	8007756 <_fwalk_reent+0x3a>
 8007746:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800774a:	3301      	adds	r3, #1
 800774c:	d003      	beq.n	8007756 <_fwalk_reent+0x3a>
 800774e:	4629      	mov	r1, r5
 8007750:	4630      	mov	r0, r6
 8007752:	47c0      	blx	r8
 8007754:	4307      	orrs	r7, r0
 8007756:	3568      	adds	r5, #104	; 0x68
 8007758:	e7e9      	b.n	800772e <_fwalk_reent+0x12>

0800775a <__retarget_lock_init_recursive>:
 800775a:	4770      	bx	lr

0800775c <__retarget_lock_acquire_recursive>:
 800775c:	4770      	bx	lr

0800775e <__retarget_lock_release_recursive>:
 800775e:	4770      	bx	lr

08007760 <__swhatbuf_r>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	460e      	mov	r6, r1
 8007764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007768:	4614      	mov	r4, r2
 800776a:	2900      	cmp	r1, #0
 800776c:	461d      	mov	r5, r3
 800776e:	b096      	sub	sp, #88	; 0x58
 8007770:	da07      	bge.n	8007782 <__swhatbuf_r+0x22>
 8007772:	2300      	movs	r3, #0
 8007774:	602b      	str	r3, [r5, #0]
 8007776:	89b3      	ldrh	r3, [r6, #12]
 8007778:	061a      	lsls	r2, r3, #24
 800777a:	d410      	bmi.n	800779e <__swhatbuf_r+0x3e>
 800777c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007780:	e00e      	b.n	80077a0 <__swhatbuf_r+0x40>
 8007782:	466a      	mov	r2, sp
 8007784:	f000 f902 	bl	800798c <_fstat_r>
 8007788:	2800      	cmp	r0, #0
 800778a:	dbf2      	blt.n	8007772 <__swhatbuf_r+0x12>
 800778c:	9a01      	ldr	r2, [sp, #4]
 800778e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007792:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007796:	425a      	negs	r2, r3
 8007798:	415a      	adcs	r2, r3
 800779a:	602a      	str	r2, [r5, #0]
 800779c:	e7ee      	b.n	800777c <__swhatbuf_r+0x1c>
 800779e:	2340      	movs	r3, #64	; 0x40
 80077a0:	2000      	movs	r0, #0
 80077a2:	6023      	str	r3, [r4, #0]
 80077a4:	b016      	add	sp, #88	; 0x58
 80077a6:	bd70      	pop	{r4, r5, r6, pc}

080077a8 <__smakebuf_r>:
 80077a8:	898b      	ldrh	r3, [r1, #12]
 80077aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077ac:	079d      	lsls	r5, r3, #30
 80077ae:	4606      	mov	r6, r0
 80077b0:	460c      	mov	r4, r1
 80077b2:	d507      	bpl.n	80077c4 <__smakebuf_r+0x1c>
 80077b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	6123      	str	r3, [r4, #16]
 80077bc:	2301      	movs	r3, #1
 80077be:	6163      	str	r3, [r4, #20]
 80077c0:	b002      	add	sp, #8
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
 80077c4:	466a      	mov	r2, sp
 80077c6:	ab01      	add	r3, sp, #4
 80077c8:	f7ff ffca 	bl	8007760 <__swhatbuf_r>
 80077cc:	9900      	ldr	r1, [sp, #0]
 80077ce:	4605      	mov	r5, r0
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff f989 	bl	8006ae8 <_malloc_r>
 80077d6:	b948      	cbnz	r0, 80077ec <__smakebuf_r+0x44>
 80077d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077dc:	059a      	lsls	r2, r3, #22
 80077de:	d4ef      	bmi.n	80077c0 <__smakebuf_r+0x18>
 80077e0:	f023 0303 	bic.w	r3, r3, #3
 80077e4:	f043 0302 	orr.w	r3, r3, #2
 80077e8:	81a3      	strh	r3, [r4, #12]
 80077ea:	e7e3      	b.n	80077b4 <__smakebuf_r+0xc>
 80077ec:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <__smakebuf_r+0x7c>)
 80077ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	6020      	str	r0, [r4, #0]
 80077f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f8:	81a3      	strh	r3, [r4, #12]
 80077fa:	9b00      	ldr	r3, [sp, #0]
 80077fc:	6120      	str	r0, [r4, #16]
 80077fe:	6163      	str	r3, [r4, #20]
 8007800:	9b01      	ldr	r3, [sp, #4]
 8007802:	b15b      	cbz	r3, 800781c <__smakebuf_r+0x74>
 8007804:	4630      	mov	r0, r6
 8007806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800780a:	f000 f8d1 	bl	80079b0 <_isatty_r>
 800780e:	b128      	cbz	r0, 800781c <__smakebuf_r+0x74>
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	f023 0303 	bic.w	r3, r3, #3
 8007816:	f043 0301 	orr.w	r3, r3, #1
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	89a0      	ldrh	r0, [r4, #12]
 800781e:	4305      	orrs	r5, r0
 8007820:	81a5      	strh	r5, [r4, #12]
 8007822:	e7cd      	b.n	80077c0 <__smakebuf_r+0x18>
 8007824:	080075b9 	.word	0x080075b9

08007828 <_malloc_usable_size_r>:
 8007828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782c:	1f18      	subs	r0, r3, #4
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfbc      	itt	lt
 8007832:	580b      	ldrlt	r3, [r1, r0]
 8007834:	18c0      	addlt	r0, r0, r3
 8007836:	4770      	bx	lr

08007838 <_raise_r>:
 8007838:	291f      	cmp	r1, #31
 800783a:	b538      	push	{r3, r4, r5, lr}
 800783c:	4604      	mov	r4, r0
 800783e:	460d      	mov	r5, r1
 8007840:	d904      	bls.n	800784c <_raise_r+0x14>
 8007842:	2316      	movs	r3, #22
 8007844:	6003      	str	r3, [r0, #0]
 8007846:	f04f 30ff 	mov.w	r0, #4294967295
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800784e:	b112      	cbz	r2, 8007856 <_raise_r+0x1e>
 8007850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007854:	b94b      	cbnz	r3, 800786a <_raise_r+0x32>
 8007856:	4620      	mov	r0, r4
 8007858:	f000 f830 	bl	80078bc <_getpid_r>
 800785c:	462a      	mov	r2, r5
 800785e:	4601      	mov	r1, r0
 8007860:	4620      	mov	r0, r4
 8007862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007866:	f000 b817 	b.w	8007898 <_kill_r>
 800786a:	2b01      	cmp	r3, #1
 800786c:	d00a      	beq.n	8007884 <_raise_r+0x4c>
 800786e:	1c59      	adds	r1, r3, #1
 8007870:	d103      	bne.n	800787a <_raise_r+0x42>
 8007872:	2316      	movs	r3, #22
 8007874:	6003      	str	r3, [r0, #0]
 8007876:	2001      	movs	r0, #1
 8007878:	e7e7      	b.n	800784a <_raise_r+0x12>
 800787a:	2400      	movs	r4, #0
 800787c:	4628      	mov	r0, r5
 800787e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007882:	4798      	blx	r3
 8007884:	2000      	movs	r0, #0
 8007886:	e7e0      	b.n	800784a <_raise_r+0x12>

08007888 <raise>:
 8007888:	4b02      	ldr	r3, [pc, #8]	; (8007894 <raise+0xc>)
 800788a:	4601      	mov	r1, r0
 800788c:	6818      	ldr	r0, [r3, #0]
 800788e:	f7ff bfd3 	b.w	8007838 <_raise_r>
 8007892:	bf00      	nop
 8007894:	20000010 	.word	0x20000010

08007898 <_kill_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	2300      	movs	r3, #0
 800789c:	4d06      	ldr	r5, [pc, #24]	; (80078b8 <_kill_r+0x20>)
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	f7fa fc7f 	bl	80021a8 <_kill>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	d102      	bne.n	80078b4 <_kill_r+0x1c>
 80078ae:	682b      	ldr	r3, [r5, #0]
 80078b0:	b103      	cbz	r3, 80078b4 <_kill_r+0x1c>
 80078b2:	6023      	str	r3, [r4, #0]
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	bf00      	nop
 80078b8:	20000344 	.word	0x20000344

080078bc <_getpid_r>:
 80078bc:	f7fa bc6d 	b.w	800219a <_getpid>

080078c0 <__sread>:
 80078c0:	b510      	push	{r4, lr}
 80078c2:	460c      	mov	r4, r1
 80078c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c8:	f000 f894 	bl	80079f4 <_read_r>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	bfab      	itete	ge
 80078d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078d2:	89a3      	ldrhlt	r3, [r4, #12]
 80078d4:	181b      	addge	r3, r3, r0
 80078d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078da:	bfac      	ite	ge
 80078dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80078de:	81a3      	strhlt	r3, [r4, #12]
 80078e0:	bd10      	pop	{r4, pc}

080078e2 <__swrite>:
 80078e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e6:	461f      	mov	r7, r3
 80078e8:	898b      	ldrh	r3, [r1, #12]
 80078ea:	4605      	mov	r5, r0
 80078ec:	05db      	lsls	r3, r3, #23
 80078ee:	460c      	mov	r4, r1
 80078f0:	4616      	mov	r6, r2
 80078f2:	d505      	bpl.n	8007900 <__swrite+0x1e>
 80078f4:	2302      	movs	r3, #2
 80078f6:	2200      	movs	r2, #0
 80078f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fc:	f000 f868 	bl	80079d0 <_lseek_r>
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	4632      	mov	r2, r6
 8007904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	4628      	mov	r0, r5
 800790c:	463b      	mov	r3, r7
 800790e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007916:	f000 b817 	b.w	8007948 <_write_r>

0800791a <__sseek>:
 800791a:	b510      	push	{r4, lr}
 800791c:	460c      	mov	r4, r1
 800791e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007922:	f000 f855 	bl	80079d0 <_lseek_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	bf15      	itete	ne
 800792c:	6560      	strne	r0, [r4, #84]	; 0x54
 800792e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007936:	81a3      	strheq	r3, [r4, #12]
 8007938:	bf18      	it	ne
 800793a:	81a3      	strhne	r3, [r4, #12]
 800793c:	bd10      	pop	{r4, pc}

0800793e <__sclose>:
 800793e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007942:	f000 b813 	b.w	800796c <_close_r>
	...

08007948 <_write_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4604      	mov	r4, r0
 800794c:	4608      	mov	r0, r1
 800794e:	4611      	mov	r1, r2
 8007950:	2200      	movs	r2, #0
 8007952:	4d05      	ldr	r5, [pc, #20]	; (8007968 <_write_r+0x20>)
 8007954:	602a      	str	r2, [r5, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f7fa fc5d 	bl	8002216 <_write>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_write_r+0x1e>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_write_r+0x1e>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	20000344 	.word	0x20000344

0800796c <_close_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	2300      	movs	r3, #0
 8007970:	4d05      	ldr	r5, [pc, #20]	; (8007988 <_close_r+0x1c>)
 8007972:	4604      	mov	r4, r0
 8007974:	4608      	mov	r0, r1
 8007976:	602b      	str	r3, [r5, #0]
 8007978:	f7fa fc69 	bl	800224e <_close>
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	d102      	bne.n	8007986 <_close_r+0x1a>
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	b103      	cbz	r3, 8007986 <_close_r+0x1a>
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	bd38      	pop	{r3, r4, r5, pc}
 8007988:	20000344 	.word	0x20000344

0800798c <_fstat_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	2300      	movs	r3, #0
 8007990:	4d06      	ldr	r5, [pc, #24]	; (80079ac <_fstat_r+0x20>)
 8007992:	4604      	mov	r4, r0
 8007994:	4608      	mov	r0, r1
 8007996:	4611      	mov	r1, r2
 8007998:	602b      	str	r3, [r5, #0]
 800799a:	f7fa fc63 	bl	8002264 <_fstat>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	d102      	bne.n	80079a8 <_fstat_r+0x1c>
 80079a2:	682b      	ldr	r3, [r5, #0]
 80079a4:	b103      	cbz	r3, 80079a8 <_fstat_r+0x1c>
 80079a6:	6023      	str	r3, [r4, #0]
 80079a8:	bd38      	pop	{r3, r4, r5, pc}
 80079aa:	bf00      	nop
 80079ac:	20000344 	.word	0x20000344

080079b0 <_isatty_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	2300      	movs	r3, #0
 80079b4:	4d05      	ldr	r5, [pc, #20]	; (80079cc <_isatty_r+0x1c>)
 80079b6:	4604      	mov	r4, r0
 80079b8:	4608      	mov	r0, r1
 80079ba:	602b      	str	r3, [r5, #0]
 80079bc:	f7fa fc61 	bl	8002282 <_isatty>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d102      	bne.n	80079ca <_isatty_r+0x1a>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	b103      	cbz	r3, 80079ca <_isatty_r+0x1a>
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	20000344 	.word	0x20000344

080079d0 <_lseek_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	4611      	mov	r1, r2
 80079d8:	2200      	movs	r2, #0
 80079da:	4d05      	ldr	r5, [pc, #20]	; (80079f0 <_lseek_r+0x20>)
 80079dc:	602a      	str	r2, [r5, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	f7fa fc59 	bl	8002296 <_lseek>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_lseek_r+0x1e>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_lseek_r+0x1e>
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	20000344 	.word	0x20000344

080079f4 <_read_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	2200      	movs	r2, #0
 80079fe:	4d05      	ldr	r5, [pc, #20]	; (8007a14 <_read_r+0x20>)
 8007a00:	602a      	str	r2, [r5, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f7fa fbea 	bl	80021dc <_read>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_read_r+0x1e>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_read_r+0x1e>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	20000344 	.word	0x20000344

08007a18 <pow>:
 8007a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	461f      	mov	r7, r3
 8007a1e:	4680      	mov	r8, r0
 8007a20:	4689      	mov	r9, r1
 8007a22:	4616      	mov	r6, r2
 8007a24:	f000 f8a4 	bl	8007b70 <__ieee754_pow>
 8007a28:	4b4d      	ldr	r3, [pc, #308]	; (8007b60 <pow+0x148>)
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	f993 3000 	ldrsb.w	r3, [r3]
 8007a30:	460d      	mov	r5, r1
 8007a32:	3301      	adds	r3, #1
 8007a34:	d015      	beq.n	8007a62 <pow+0x4a>
 8007a36:	4632      	mov	r2, r6
 8007a38:	463b      	mov	r3, r7
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	4639      	mov	r1, r7
 8007a3e:	f7f9 f8b1 	bl	8000ba4 <__aeabi_dcmpun>
 8007a42:	b970      	cbnz	r0, 8007a62 <pow+0x4a>
 8007a44:	4642      	mov	r2, r8
 8007a46:	464b      	mov	r3, r9
 8007a48:	4640      	mov	r0, r8
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	f7f9 f8aa 	bl	8000ba4 <__aeabi_dcmpun>
 8007a50:	2200      	movs	r2, #0
 8007a52:	2300      	movs	r3, #0
 8007a54:	b148      	cbz	r0, 8007a6a <pow+0x52>
 8007a56:	4630      	mov	r0, r6
 8007a58:	4639      	mov	r1, r7
 8007a5a:	f7f9 f871 	bl	8000b40 <__aeabi_dcmpeq>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d17b      	bne.n	8007b5a <pow+0x142>
 8007a62:	4620      	mov	r0, r4
 8007a64:	4629      	mov	r1, r5
 8007a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	f7f9 f867 	bl	8000b40 <__aeabi_dcmpeq>
 8007a72:	b1e0      	cbz	r0, 8007aae <pow+0x96>
 8007a74:	2200      	movs	r2, #0
 8007a76:	2300      	movs	r3, #0
 8007a78:	4630      	mov	r0, r6
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f7f9 f860 	bl	8000b40 <__aeabi_dcmpeq>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d16a      	bne.n	8007b5a <pow+0x142>
 8007a84:	4630      	mov	r0, r6
 8007a86:	4639      	mov	r1, r7
 8007a88:	f000 fe37 	bl	80086fa <finite>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d0e8      	beq.n	8007a62 <pow+0x4a>
 8007a90:	2200      	movs	r2, #0
 8007a92:	2300      	movs	r3, #0
 8007a94:	4630      	mov	r0, r6
 8007a96:	4639      	mov	r1, r7
 8007a98:	f7f9 f85c 	bl	8000b54 <__aeabi_dcmplt>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d0e0      	beq.n	8007a62 <pow+0x4a>
 8007aa0:	f7fd f8e2 	bl	8004c68 <__errno>
 8007aa4:	2321      	movs	r3, #33	; 0x21
 8007aa6:	2400      	movs	r4, #0
 8007aa8:	6003      	str	r3, [r0, #0]
 8007aaa:	4d2e      	ldr	r5, [pc, #184]	; (8007b64 <pow+0x14c>)
 8007aac:	e7d9      	b.n	8007a62 <pow+0x4a>
 8007aae:	4620      	mov	r0, r4
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	f000 fe22 	bl	80086fa <finite>
 8007ab6:	bba8      	cbnz	r0, 8007b24 <pow+0x10c>
 8007ab8:	4640      	mov	r0, r8
 8007aba:	4649      	mov	r1, r9
 8007abc:	f000 fe1d 	bl	80086fa <finite>
 8007ac0:	b380      	cbz	r0, 8007b24 <pow+0x10c>
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	4639      	mov	r1, r7
 8007ac6:	f000 fe18 	bl	80086fa <finite>
 8007aca:	b358      	cbz	r0, 8007b24 <pow+0x10c>
 8007acc:	4622      	mov	r2, r4
 8007ace:	462b      	mov	r3, r5
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	f7f9 f866 	bl	8000ba4 <__aeabi_dcmpun>
 8007ad8:	b160      	cbz	r0, 8007af4 <pow+0xdc>
 8007ada:	f7fd f8c5 	bl	8004c68 <__errno>
 8007ade:	2321      	movs	r3, #33	; 0x21
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	6003      	str	r3, [r0, #0]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f7f8 feeb 	bl	80008c4 <__aeabi_ddiv>
 8007aee:	4604      	mov	r4, r0
 8007af0:	460d      	mov	r5, r1
 8007af2:	e7b6      	b.n	8007a62 <pow+0x4a>
 8007af4:	f7fd f8b8 	bl	8004c68 <__errno>
 8007af8:	2322      	movs	r3, #34	; 0x22
 8007afa:	2200      	movs	r2, #0
 8007afc:	6003      	str	r3, [r0, #0]
 8007afe:	4649      	mov	r1, r9
 8007b00:	2300      	movs	r3, #0
 8007b02:	4640      	mov	r0, r8
 8007b04:	f7f9 f826 	bl	8000b54 <__aeabi_dcmplt>
 8007b08:	2400      	movs	r4, #0
 8007b0a:	b148      	cbz	r0, 8007b20 <pow+0x108>
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	4639      	mov	r1, r7
 8007b10:	f000 fe00 	bl	8008714 <rint>
 8007b14:	4632      	mov	r2, r6
 8007b16:	463b      	mov	r3, r7
 8007b18:	f7f9 f812 	bl	8000b40 <__aeabi_dcmpeq>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d0c4      	beq.n	8007aaa <pow+0x92>
 8007b20:	4d11      	ldr	r5, [pc, #68]	; (8007b68 <pow+0x150>)
 8007b22:	e79e      	b.n	8007a62 <pow+0x4a>
 8007b24:	2200      	movs	r2, #0
 8007b26:	2300      	movs	r3, #0
 8007b28:	4620      	mov	r0, r4
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	f7f9 f808 	bl	8000b40 <__aeabi_dcmpeq>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d096      	beq.n	8007a62 <pow+0x4a>
 8007b34:	4640      	mov	r0, r8
 8007b36:	4649      	mov	r1, r9
 8007b38:	f000 fddf 	bl	80086fa <finite>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d090      	beq.n	8007a62 <pow+0x4a>
 8007b40:	4630      	mov	r0, r6
 8007b42:	4639      	mov	r1, r7
 8007b44:	f000 fdd9 	bl	80086fa <finite>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d08a      	beq.n	8007a62 <pow+0x4a>
 8007b4c:	f7fd f88c 	bl	8004c68 <__errno>
 8007b50:	2322      	movs	r3, #34	; 0x22
 8007b52:	2400      	movs	r4, #0
 8007b54:	2500      	movs	r5, #0
 8007b56:	6003      	str	r3, [r0, #0]
 8007b58:	e783      	b.n	8007a62 <pow+0x4a>
 8007b5a:	2400      	movs	r4, #0
 8007b5c:	4d03      	ldr	r5, [pc, #12]	; (8007b6c <pow+0x154>)
 8007b5e:	e780      	b.n	8007a62 <pow+0x4a>
 8007b60:	200001e0 	.word	0x200001e0
 8007b64:	fff00000 	.word	0xfff00000
 8007b68:	7ff00000 	.word	0x7ff00000
 8007b6c:	3ff00000 	.word	0x3ff00000

08007b70 <__ieee754_pow>:
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	b093      	sub	sp, #76	; 0x4c
 8007b76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b7a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8007b7e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007b82:	ea55 0302 	orrs.w	r3, r5, r2
 8007b86:	4607      	mov	r7, r0
 8007b88:	4688      	mov	r8, r1
 8007b8a:	f000 84bf 	beq.w	800850c <__ieee754_pow+0x99c>
 8007b8e:	4b7e      	ldr	r3, [pc, #504]	; (8007d88 <__ieee754_pow+0x218>)
 8007b90:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8007b94:	429c      	cmp	r4, r3
 8007b96:	4689      	mov	r9, r1
 8007b98:	4682      	mov	sl, r0
 8007b9a:	dc09      	bgt.n	8007bb0 <__ieee754_pow+0x40>
 8007b9c:	d103      	bne.n	8007ba6 <__ieee754_pow+0x36>
 8007b9e:	b978      	cbnz	r0, 8007bc0 <__ieee754_pow+0x50>
 8007ba0:	42a5      	cmp	r5, r4
 8007ba2:	dd02      	ble.n	8007baa <__ieee754_pow+0x3a>
 8007ba4:	e00c      	b.n	8007bc0 <__ieee754_pow+0x50>
 8007ba6:	429d      	cmp	r5, r3
 8007ba8:	dc02      	bgt.n	8007bb0 <__ieee754_pow+0x40>
 8007baa:	429d      	cmp	r5, r3
 8007bac:	d10e      	bne.n	8007bcc <__ieee754_pow+0x5c>
 8007bae:	b16a      	cbz	r2, 8007bcc <__ieee754_pow+0x5c>
 8007bb0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007bb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007bb8:	ea54 030a 	orrs.w	r3, r4, sl
 8007bbc:	f000 84a6 	beq.w	800850c <__ieee754_pow+0x99c>
 8007bc0:	4872      	ldr	r0, [pc, #456]	; (8007d8c <__ieee754_pow+0x21c>)
 8007bc2:	b013      	add	sp, #76	; 0x4c
 8007bc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc8:	f000 bd9e 	b.w	8008708 <nan>
 8007bcc:	f1b9 0f00 	cmp.w	r9, #0
 8007bd0:	da39      	bge.n	8007c46 <__ieee754_pow+0xd6>
 8007bd2:	4b6f      	ldr	r3, [pc, #444]	; (8007d90 <__ieee754_pow+0x220>)
 8007bd4:	429d      	cmp	r5, r3
 8007bd6:	dc54      	bgt.n	8007c82 <__ieee754_pow+0x112>
 8007bd8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007bdc:	429d      	cmp	r5, r3
 8007bde:	f340 84a6 	ble.w	800852e <__ieee754_pow+0x9be>
 8007be2:	152b      	asrs	r3, r5, #20
 8007be4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007be8:	2b14      	cmp	r3, #20
 8007bea:	dd0f      	ble.n	8007c0c <__ieee754_pow+0x9c>
 8007bec:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007bf0:	fa22 f103 	lsr.w	r1, r2, r3
 8007bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	f040 8498 	bne.w	800852e <__ieee754_pow+0x9be>
 8007bfe:	f001 0101 	and.w	r1, r1, #1
 8007c02:	f1c1 0302 	rsb	r3, r1, #2
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	b182      	cbz	r2, 8007c2c <__ieee754_pow+0xbc>
 8007c0a:	e05e      	b.n	8007cca <__ieee754_pow+0x15a>
 8007c0c:	2a00      	cmp	r2, #0
 8007c0e:	d15a      	bne.n	8007cc6 <__ieee754_pow+0x156>
 8007c10:	f1c3 0314 	rsb	r3, r3, #20
 8007c14:	fa45 f103 	asr.w	r1, r5, r3
 8007c18:	fa01 f303 	lsl.w	r3, r1, r3
 8007c1c:	42ab      	cmp	r3, r5
 8007c1e:	f040 8483 	bne.w	8008528 <__ieee754_pow+0x9b8>
 8007c22:	f001 0101 	and.w	r1, r1, #1
 8007c26:	f1c1 0302 	rsb	r3, r1, #2
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	4b59      	ldr	r3, [pc, #356]	; (8007d94 <__ieee754_pow+0x224>)
 8007c2e:	429d      	cmp	r5, r3
 8007c30:	d130      	bne.n	8007c94 <__ieee754_pow+0x124>
 8007c32:	2e00      	cmp	r6, #0
 8007c34:	f280 8474 	bge.w	8008520 <__ieee754_pow+0x9b0>
 8007c38:	463a      	mov	r2, r7
 8007c3a:	4643      	mov	r3, r8
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	4955      	ldr	r1, [pc, #340]	; (8007d94 <__ieee754_pow+0x224>)
 8007c40:	f7f8 fe40 	bl	80008c4 <__aeabi_ddiv>
 8007c44:	e02f      	b.n	8007ca6 <__ieee754_pow+0x136>
 8007c46:	2300      	movs	r3, #0
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	2a00      	cmp	r2, #0
 8007c4c:	d13d      	bne.n	8007cca <__ieee754_pow+0x15a>
 8007c4e:	4b4e      	ldr	r3, [pc, #312]	; (8007d88 <__ieee754_pow+0x218>)
 8007c50:	429d      	cmp	r5, r3
 8007c52:	d1eb      	bne.n	8007c2c <__ieee754_pow+0xbc>
 8007c54:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007c58:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007c5c:	ea53 030a 	orrs.w	r3, r3, sl
 8007c60:	f000 8454 	beq.w	800850c <__ieee754_pow+0x99c>
 8007c64:	4b4c      	ldr	r3, [pc, #304]	; (8007d98 <__ieee754_pow+0x228>)
 8007c66:	429c      	cmp	r4, r3
 8007c68:	dd0d      	ble.n	8007c86 <__ieee754_pow+0x116>
 8007c6a:	2e00      	cmp	r6, #0
 8007c6c:	f280 8454 	bge.w	8008518 <__ieee754_pow+0x9a8>
 8007c70:	f04f 0b00 	mov.w	fp, #0
 8007c74:	f04f 0c00 	mov.w	ip, #0
 8007c78:	4658      	mov	r0, fp
 8007c7a:	4661      	mov	r1, ip
 8007c7c:	b013      	add	sp, #76	; 0x4c
 8007c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c82:	2302      	movs	r3, #2
 8007c84:	e7e0      	b.n	8007c48 <__ieee754_pow+0xd8>
 8007c86:	2e00      	cmp	r6, #0
 8007c88:	daf2      	bge.n	8007c70 <__ieee754_pow+0x100>
 8007c8a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007c8e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007c92:	e7f1      	b.n	8007c78 <__ieee754_pow+0x108>
 8007c94:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8007c98:	d108      	bne.n	8007cac <__ieee754_pow+0x13c>
 8007c9a:	463a      	mov	r2, r7
 8007c9c:	4643      	mov	r3, r8
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	4641      	mov	r1, r8
 8007ca2:	f7f8 fce5 	bl	8000670 <__aeabi_dmul>
 8007ca6:	4683      	mov	fp, r0
 8007ca8:	468c      	mov	ip, r1
 8007caa:	e7e5      	b.n	8007c78 <__ieee754_pow+0x108>
 8007cac:	4b3b      	ldr	r3, [pc, #236]	; (8007d9c <__ieee754_pow+0x22c>)
 8007cae:	429e      	cmp	r6, r3
 8007cb0:	d10b      	bne.n	8007cca <__ieee754_pow+0x15a>
 8007cb2:	f1b9 0f00 	cmp.w	r9, #0
 8007cb6:	db08      	blt.n	8007cca <__ieee754_pow+0x15a>
 8007cb8:	4638      	mov	r0, r7
 8007cba:	4641      	mov	r1, r8
 8007cbc:	b013      	add	sp, #76	; 0x4c
 8007cbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc2:	f000 bc6b 	b.w	800859c <__ieee754_sqrt>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	4638      	mov	r0, r7
 8007ccc:	4641      	mov	r1, r8
 8007cce:	f000 fd11 	bl	80086f4 <fabs>
 8007cd2:	4683      	mov	fp, r0
 8007cd4:	468c      	mov	ip, r1
 8007cd6:	f1ba 0f00 	cmp.w	sl, #0
 8007cda:	d129      	bne.n	8007d30 <__ieee754_pow+0x1c0>
 8007cdc:	b124      	cbz	r4, 8007ce8 <__ieee754_pow+0x178>
 8007cde:	4b2d      	ldr	r3, [pc, #180]	; (8007d94 <__ieee754_pow+0x224>)
 8007ce0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d123      	bne.n	8007d30 <__ieee754_pow+0x1c0>
 8007ce8:	2e00      	cmp	r6, #0
 8007cea:	da07      	bge.n	8007cfc <__ieee754_pow+0x18c>
 8007cec:	465a      	mov	r2, fp
 8007cee:	4663      	mov	r3, ip
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	4928      	ldr	r1, [pc, #160]	; (8007d94 <__ieee754_pow+0x224>)
 8007cf4:	f7f8 fde6 	bl	80008c4 <__aeabi_ddiv>
 8007cf8:	4683      	mov	fp, r0
 8007cfa:	468c      	mov	ip, r1
 8007cfc:	f1b9 0f00 	cmp.w	r9, #0
 8007d00:	daba      	bge.n	8007c78 <__ieee754_pow+0x108>
 8007d02:	9b00      	ldr	r3, [sp, #0]
 8007d04:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007d08:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007d0c:	4323      	orrs	r3, r4
 8007d0e:	d108      	bne.n	8007d22 <__ieee754_pow+0x1b2>
 8007d10:	465a      	mov	r2, fp
 8007d12:	4663      	mov	r3, ip
 8007d14:	4658      	mov	r0, fp
 8007d16:	4661      	mov	r1, ip
 8007d18:	f7f8 faf2 	bl	8000300 <__aeabi_dsub>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	e78e      	b.n	8007c40 <__ieee754_pow+0xd0>
 8007d22:	9b00      	ldr	r3, [sp, #0]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d1a7      	bne.n	8007c78 <__ieee754_pow+0x108>
 8007d28:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007d2c:	469c      	mov	ip, r3
 8007d2e:	e7a3      	b.n	8007c78 <__ieee754_pow+0x108>
 8007d30:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8007d34:	3b01      	subs	r3, #1
 8007d36:	930c      	str	r3, [sp, #48]	; 0x30
 8007d38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d3a:	9b00      	ldr	r3, [sp, #0]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	d104      	bne.n	8007d4a <__ieee754_pow+0x1da>
 8007d40:	463a      	mov	r2, r7
 8007d42:	4643      	mov	r3, r8
 8007d44:	4638      	mov	r0, r7
 8007d46:	4641      	mov	r1, r8
 8007d48:	e7e6      	b.n	8007d18 <__ieee754_pow+0x1a8>
 8007d4a:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <__ieee754_pow+0x230>)
 8007d4c:	429d      	cmp	r5, r3
 8007d4e:	f340 80f9 	ble.w	8007f44 <__ieee754_pow+0x3d4>
 8007d52:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007d56:	429d      	cmp	r5, r3
 8007d58:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <__ieee754_pow+0x228>)
 8007d5a:	dd09      	ble.n	8007d70 <__ieee754_pow+0x200>
 8007d5c:	429c      	cmp	r4, r3
 8007d5e:	dc0c      	bgt.n	8007d7a <__ieee754_pow+0x20a>
 8007d60:	2e00      	cmp	r6, #0
 8007d62:	da85      	bge.n	8007c70 <__ieee754_pow+0x100>
 8007d64:	a306      	add	r3, pc, #24	; (adr r3, 8007d80 <__ieee754_pow+0x210>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	e798      	b.n	8007ca2 <__ieee754_pow+0x132>
 8007d70:	429c      	cmp	r4, r3
 8007d72:	dbf5      	blt.n	8007d60 <__ieee754_pow+0x1f0>
 8007d74:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <__ieee754_pow+0x224>)
 8007d76:	429c      	cmp	r4, r3
 8007d78:	dd14      	ble.n	8007da4 <__ieee754_pow+0x234>
 8007d7a:	2e00      	cmp	r6, #0
 8007d7c:	dcf2      	bgt.n	8007d64 <__ieee754_pow+0x1f4>
 8007d7e:	e777      	b.n	8007c70 <__ieee754_pow+0x100>
 8007d80:	8800759c 	.word	0x8800759c
 8007d84:	7e37e43c 	.word	0x7e37e43c
 8007d88:	7ff00000 	.word	0x7ff00000
 8007d8c:	08008c78 	.word	0x08008c78
 8007d90:	433fffff 	.word	0x433fffff
 8007d94:	3ff00000 	.word	0x3ff00000
 8007d98:	3fefffff 	.word	0x3fefffff
 8007d9c:	3fe00000 	.word	0x3fe00000
 8007da0:	41e00000 	.word	0x41e00000
 8007da4:	4661      	mov	r1, ip
 8007da6:	2200      	movs	r2, #0
 8007da8:	4658      	mov	r0, fp
 8007daa:	4b61      	ldr	r3, [pc, #388]	; (8007f30 <__ieee754_pow+0x3c0>)
 8007dac:	f7f8 faa8 	bl	8000300 <__aeabi_dsub>
 8007db0:	a355      	add	r3, pc, #340	; (adr r3, 8007f08 <__ieee754_pow+0x398>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	4604      	mov	r4, r0
 8007db8:	460d      	mov	r5, r1
 8007dba:	f7f8 fc59 	bl	8000670 <__aeabi_dmul>
 8007dbe:	a354      	add	r3, pc, #336	; (adr r3, 8007f10 <__ieee754_pow+0x3a0>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	460f      	mov	r7, r1
 8007dc8:	4620      	mov	r0, r4
 8007dca:	4629      	mov	r1, r5
 8007dcc:	f7f8 fc50 	bl	8000670 <__aeabi_dmul>
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4682      	mov	sl, r0
 8007dd4:	468b      	mov	fp, r1
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	4629      	mov	r1, r5
 8007dda:	4b56      	ldr	r3, [pc, #344]	; (8007f34 <__ieee754_pow+0x3c4>)
 8007ddc:	f7f8 fc48 	bl	8000670 <__aeabi_dmul>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	a14c      	add	r1, pc, #304	; (adr r1, 8007f18 <__ieee754_pow+0x3a8>)
 8007de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dea:	f7f8 fa89 	bl	8000300 <__aeabi_dsub>
 8007dee:	4622      	mov	r2, r4
 8007df0:	462b      	mov	r3, r5
 8007df2:	f7f8 fc3d 	bl	8000670 <__aeabi_dmul>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	494e      	ldr	r1, [pc, #312]	; (8007f38 <__ieee754_pow+0x3c8>)
 8007dfe:	f7f8 fa7f 	bl	8000300 <__aeabi_dsub>
 8007e02:	4622      	mov	r2, r4
 8007e04:	462b      	mov	r3, r5
 8007e06:	4680      	mov	r8, r0
 8007e08:	4689      	mov	r9, r1
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	f7f8 fc2f 	bl	8000670 <__aeabi_dmul>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4640      	mov	r0, r8
 8007e18:	4649      	mov	r1, r9
 8007e1a:	f7f8 fc29 	bl	8000670 <__aeabi_dmul>
 8007e1e:	a340      	add	r3, pc, #256	; (adr r3, 8007f20 <__ieee754_pow+0x3b0>)
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	f7f8 fc24 	bl	8000670 <__aeabi_dmul>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4650      	mov	r0, sl
 8007e2e:	4659      	mov	r1, fp
 8007e30:	f7f8 fa66 	bl	8000300 <__aeabi_dsub>
 8007e34:	f04f 0a00 	mov.w	sl, #0
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	460d      	mov	r5, r1
 8007e40:	4630      	mov	r0, r6
 8007e42:	4639      	mov	r1, r7
 8007e44:	f7f8 fa5e 	bl	8000304 <__adddf3>
 8007e48:	4632      	mov	r2, r6
 8007e4a:	463b      	mov	r3, r7
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	468b      	mov	fp, r1
 8007e50:	f7f8 fa56 	bl	8000300 <__aeabi_dsub>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4620      	mov	r0, r4
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	f7f8 fa50 	bl	8000300 <__aeabi_dsub>
 8007e60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e64:	9b00      	ldr	r3, [sp, #0]
 8007e66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f04f 0600 	mov.w	r6, #0
 8007e70:	f04f 0200 	mov.w	r2, #0
 8007e74:	bf0c      	ite	eq
 8007e76:	4b31      	ldreq	r3, [pc, #196]	; (8007f3c <__ieee754_pow+0x3cc>)
 8007e78:	4b2d      	ldrne	r3, [pc, #180]	; (8007f30 <__ieee754_pow+0x3c0>)
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	460d      	mov	r5, r1
 8007e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e82:	e9cd 2300 	strd	r2, r3, [sp]
 8007e86:	4632      	mov	r2, r6
 8007e88:	463b      	mov	r3, r7
 8007e8a:	f7f8 fa39 	bl	8000300 <__aeabi_dsub>
 8007e8e:	4652      	mov	r2, sl
 8007e90:	465b      	mov	r3, fp
 8007e92:	f7f8 fbed 	bl	8000670 <__aeabi_dmul>
 8007e96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	4689      	mov	r9, r1
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	f7f8 fbe5 	bl	8000670 <__aeabi_dmul>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4640      	mov	r0, r8
 8007eac:	4649      	mov	r1, r9
 8007eae:	f7f8 fa29 	bl	8000304 <__adddf3>
 8007eb2:	4632      	mov	r2, r6
 8007eb4:	463b      	mov	r3, r7
 8007eb6:	4680      	mov	r8, r0
 8007eb8:	4689      	mov	r9, r1
 8007eba:	4650      	mov	r0, sl
 8007ebc:	4659      	mov	r1, fp
 8007ebe:	f7f8 fbd7 	bl	8000670 <__aeabi_dmul>
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	460d      	mov	r5, r1
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4602      	mov	r2, r0
 8007eca:	4649      	mov	r1, r9
 8007ecc:	4640      	mov	r0, r8
 8007ece:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007ed2:	f7f8 fa17 	bl	8000304 <__adddf3>
 8007ed6:	4b1a      	ldr	r3, [pc, #104]	; (8007f40 <__ieee754_pow+0x3d0>)
 8007ed8:	4682      	mov	sl, r0
 8007eda:	4299      	cmp	r1, r3
 8007edc:	460f      	mov	r7, r1
 8007ede:	460e      	mov	r6, r1
 8007ee0:	f340 82ed 	ble.w	80084be <__ieee754_pow+0x94e>
 8007ee4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007ee8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007eec:	4303      	orrs	r3, r0
 8007eee:	f000 81e7 	beq.w	80082c0 <__ieee754_pow+0x750>
 8007ef2:	a30d      	add	r3, pc, #52	; (adr r3, 8007f28 <__ieee754_pow+0x3b8>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007efc:	f7f8 fbb8 	bl	8000670 <__aeabi_dmul>
 8007f00:	a309      	add	r3, pc, #36	; (adr r3, 8007f28 <__ieee754_pow+0x3b8>)
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	e6cc      	b.n	8007ca2 <__ieee754_pow+0x132>
 8007f08:	60000000 	.word	0x60000000
 8007f0c:	3ff71547 	.word	0x3ff71547
 8007f10:	f85ddf44 	.word	0xf85ddf44
 8007f14:	3e54ae0b 	.word	0x3e54ae0b
 8007f18:	55555555 	.word	0x55555555
 8007f1c:	3fd55555 	.word	0x3fd55555
 8007f20:	652b82fe 	.word	0x652b82fe
 8007f24:	3ff71547 	.word	0x3ff71547
 8007f28:	8800759c 	.word	0x8800759c
 8007f2c:	7e37e43c 	.word	0x7e37e43c
 8007f30:	3ff00000 	.word	0x3ff00000
 8007f34:	3fd00000 	.word	0x3fd00000
 8007f38:	3fe00000 	.word	0x3fe00000
 8007f3c:	bff00000 	.word	0xbff00000
 8007f40:	408fffff 	.word	0x408fffff
 8007f44:	4bd4      	ldr	r3, [pc, #848]	; (8008298 <__ieee754_pow+0x728>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	ea09 0303 	and.w	r3, r9, r3
 8007f4c:	b943      	cbnz	r3, 8007f60 <__ieee754_pow+0x3f0>
 8007f4e:	4658      	mov	r0, fp
 8007f50:	4661      	mov	r1, ip
 8007f52:	4bd2      	ldr	r3, [pc, #840]	; (800829c <__ieee754_pow+0x72c>)
 8007f54:	f7f8 fb8c 	bl	8000670 <__aeabi_dmul>
 8007f58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007f5c:	4683      	mov	fp, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	1523      	asrs	r3, r4, #20
 8007f62:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007f66:	4413      	add	r3, r2
 8007f68:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f6a:	4bcd      	ldr	r3, [pc, #820]	; (80082a0 <__ieee754_pow+0x730>)
 8007f6c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007f70:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007f74:	429c      	cmp	r4, r3
 8007f76:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f7a:	dd08      	ble.n	8007f8e <__ieee754_pow+0x41e>
 8007f7c:	4bc9      	ldr	r3, [pc, #804]	; (80082a4 <__ieee754_pow+0x734>)
 8007f7e:	429c      	cmp	r4, r3
 8007f80:	f340 819c 	ble.w	80082bc <__ieee754_pow+0x74c>
 8007f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f8e:	2600      	movs	r6, #0
 8007f90:	00f3      	lsls	r3, r6, #3
 8007f92:	930d      	str	r3, [sp, #52]	; 0x34
 8007f94:	4bc4      	ldr	r3, [pc, #784]	; (80082a8 <__ieee754_pow+0x738>)
 8007f96:	4658      	mov	r0, fp
 8007f98:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007fa8:	4623      	mov	r3, r4
 8007faa:	f7f8 f9a9 	bl	8000300 <__aeabi_dsub>
 8007fae:	46da      	mov	sl, fp
 8007fb0:	462b      	mov	r3, r5
 8007fb2:	4652      	mov	r2, sl
 8007fb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007fb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fbc:	f7f8 f9a2 	bl	8000304 <__adddf3>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	49b9      	ldr	r1, [pc, #740]	; (80082ac <__ieee754_pow+0x73c>)
 8007fc8:	f7f8 fc7c 	bl	80008c4 <__aeabi_ddiv>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007fd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007fd8:	f7f8 fb4a 	bl	8000670 <__aeabi_dmul>
 8007fdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007fe0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007fe4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	2200      	movs	r2, #0
 8007fec:	46ab      	mov	fp, r5
 8007fee:	106d      	asrs	r5, r5, #1
 8007ff0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007ff4:	9304      	str	r3, [sp, #16]
 8007ff6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007ffa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007ffe:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008002:	4640      	mov	r0, r8
 8008004:	4649      	mov	r1, r9
 8008006:	4614      	mov	r4, r2
 8008008:	461d      	mov	r5, r3
 800800a:	f7f8 fb31 	bl	8000670 <__aeabi_dmul>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008016:	f7f8 f973 	bl	8000300 <__aeabi_dsub>
 800801a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800801e:	4606      	mov	r6, r0
 8008020:	460f      	mov	r7, r1
 8008022:	4620      	mov	r0, r4
 8008024:	4629      	mov	r1, r5
 8008026:	f7f8 f96b 	bl	8000300 <__aeabi_dsub>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4650      	mov	r0, sl
 8008030:	4659      	mov	r1, fp
 8008032:	f7f8 f965 	bl	8000300 <__aeabi_dsub>
 8008036:	4642      	mov	r2, r8
 8008038:	464b      	mov	r3, r9
 800803a:	f7f8 fb19 	bl	8000670 <__aeabi_dmul>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4630      	mov	r0, r6
 8008044:	4639      	mov	r1, r7
 8008046:	f7f8 f95b 	bl	8000300 <__aeabi_dsub>
 800804a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800804e:	f7f8 fb0f 	bl	8000670 <__aeabi_dmul>
 8008052:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008056:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800805a:	4610      	mov	r0, r2
 800805c:	4619      	mov	r1, r3
 800805e:	f7f8 fb07 	bl	8000670 <__aeabi_dmul>
 8008062:	a37b      	add	r3, pc, #492	; (adr r3, 8008250 <__ieee754_pow+0x6e0>)
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	4604      	mov	r4, r0
 800806a:	460d      	mov	r5, r1
 800806c:	f7f8 fb00 	bl	8000670 <__aeabi_dmul>
 8008070:	a379      	add	r3, pc, #484	; (adr r3, 8008258 <__ieee754_pow+0x6e8>)
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	f7f8 f945 	bl	8000304 <__adddf3>
 800807a:	4622      	mov	r2, r4
 800807c:	462b      	mov	r3, r5
 800807e:	f7f8 faf7 	bl	8000670 <__aeabi_dmul>
 8008082:	a377      	add	r3, pc, #476	; (adr r3, 8008260 <__ieee754_pow+0x6f0>)
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	f7f8 f93c 	bl	8000304 <__adddf3>
 800808c:	4622      	mov	r2, r4
 800808e:	462b      	mov	r3, r5
 8008090:	f7f8 faee 	bl	8000670 <__aeabi_dmul>
 8008094:	a374      	add	r3, pc, #464	; (adr r3, 8008268 <__ieee754_pow+0x6f8>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 f933 	bl	8000304 <__adddf3>
 800809e:	4622      	mov	r2, r4
 80080a0:	462b      	mov	r3, r5
 80080a2:	f7f8 fae5 	bl	8000670 <__aeabi_dmul>
 80080a6:	a372      	add	r3, pc, #456	; (adr r3, 8008270 <__ieee754_pow+0x700>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 f92a 	bl	8000304 <__adddf3>
 80080b0:	4622      	mov	r2, r4
 80080b2:	462b      	mov	r3, r5
 80080b4:	f7f8 fadc 	bl	8000670 <__aeabi_dmul>
 80080b8:	a36f      	add	r3, pc, #444	; (adr r3, 8008278 <__ieee754_pow+0x708>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f7f8 f921 	bl	8000304 <__adddf3>
 80080c2:	4622      	mov	r2, r4
 80080c4:	4606      	mov	r6, r0
 80080c6:	460f      	mov	r7, r1
 80080c8:	462b      	mov	r3, r5
 80080ca:	4620      	mov	r0, r4
 80080cc:	4629      	mov	r1, r5
 80080ce:	f7f8 facf 	bl	8000670 <__aeabi_dmul>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4630      	mov	r0, r6
 80080d8:	4639      	mov	r1, r7
 80080da:	f7f8 fac9 	bl	8000670 <__aeabi_dmul>
 80080de:	4604      	mov	r4, r0
 80080e0:	460d      	mov	r5, r1
 80080e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080e6:	4642      	mov	r2, r8
 80080e8:	464b      	mov	r3, r9
 80080ea:	f7f8 f90b 	bl	8000304 <__adddf3>
 80080ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080f2:	f7f8 fabd 	bl	8000670 <__aeabi_dmul>
 80080f6:	4622      	mov	r2, r4
 80080f8:	462b      	mov	r3, r5
 80080fa:	f7f8 f903 	bl	8000304 <__adddf3>
 80080fe:	4642      	mov	r2, r8
 8008100:	4606      	mov	r6, r0
 8008102:	460f      	mov	r7, r1
 8008104:	464b      	mov	r3, r9
 8008106:	4640      	mov	r0, r8
 8008108:	4649      	mov	r1, r9
 800810a:	f7f8 fab1 	bl	8000670 <__aeabi_dmul>
 800810e:	2200      	movs	r2, #0
 8008110:	4b67      	ldr	r3, [pc, #412]	; (80082b0 <__ieee754_pow+0x740>)
 8008112:	4682      	mov	sl, r0
 8008114:	468b      	mov	fp, r1
 8008116:	f7f8 f8f5 	bl	8000304 <__adddf3>
 800811a:	4632      	mov	r2, r6
 800811c:	463b      	mov	r3, r7
 800811e:	f7f8 f8f1 	bl	8000304 <__adddf3>
 8008122:	9c04      	ldr	r4, [sp, #16]
 8008124:	460d      	mov	r5, r1
 8008126:	4622      	mov	r2, r4
 8008128:	460b      	mov	r3, r1
 800812a:	4640      	mov	r0, r8
 800812c:	4649      	mov	r1, r9
 800812e:	f7f8 fa9f 	bl	8000670 <__aeabi_dmul>
 8008132:	2200      	movs	r2, #0
 8008134:	4680      	mov	r8, r0
 8008136:	4689      	mov	r9, r1
 8008138:	4620      	mov	r0, r4
 800813a:	4629      	mov	r1, r5
 800813c:	4b5c      	ldr	r3, [pc, #368]	; (80082b0 <__ieee754_pow+0x740>)
 800813e:	f7f8 f8df 	bl	8000300 <__aeabi_dsub>
 8008142:	4652      	mov	r2, sl
 8008144:	465b      	mov	r3, fp
 8008146:	f7f8 f8db 	bl	8000300 <__aeabi_dsub>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	4630      	mov	r0, r6
 8008150:	4639      	mov	r1, r7
 8008152:	f7f8 f8d5 	bl	8000300 <__aeabi_dsub>
 8008156:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800815a:	f7f8 fa89 	bl	8000670 <__aeabi_dmul>
 800815e:	4622      	mov	r2, r4
 8008160:	4606      	mov	r6, r0
 8008162:	460f      	mov	r7, r1
 8008164:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008168:	462b      	mov	r3, r5
 800816a:	f7f8 fa81 	bl	8000670 <__aeabi_dmul>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4630      	mov	r0, r6
 8008174:	4639      	mov	r1, r7
 8008176:	f7f8 f8c5 	bl	8000304 <__adddf3>
 800817a:	4606      	mov	r6, r0
 800817c:	460f      	mov	r7, r1
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4640      	mov	r0, r8
 8008184:	4649      	mov	r1, r9
 8008186:	f7f8 f8bd 	bl	8000304 <__adddf3>
 800818a:	a33d      	add	r3, pc, #244	; (adr r3, 8008280 <__ieee754_pow+0x710>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	9c04      	ldr	r4, [sp, #16]
 8008192:	460d      	mov	r5, r1
 8008194:	4620      	mov	r0, r4
 8008196:	f7f8 fa6b 	bl	8000670 <__aeabi_dmul>
 800819a:	4642      	mov	r2, r8
 800819c:	464b      	mov	r3, r9
 800819e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80081a2:	4620      	mov	r0, r4
 80081a4:	4629      	mov	r1, r5
 80081a6:	f7f8 f8ab 	bl	8000300 <__aeabi_dsub>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4630      	mov	r0, r6
 80081b0:	4639      	mov	r1, r7
 80081b2:	f7f8 f8a5 	bl	8000300 <__aeabi_dsub>
 80081b6:	a334      	add	r3, pc, #208	; (adr r3, 8008288 <__ieee754_pow+0x718>)
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f7f8 fa58 	bl	8000670 <__aeabi_dmul>
 80081c0:	a333      	add	r3, pc, #204	; (adr r3, 8008290 <__ieee754_pow+0x720>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	4606      	mov	r6, r0
 80081c8:	460f      	mov	r7, r1
 80081ca:	4620      	mov	r0, r4
 80081cc:	4629      	mov	r1, r5
 80081ce:	f7f8 fa4f 	bl	8000670 <__aeabi_dmul>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4630      	mov	r0, r6
 80081d8:	4639      	mov	r1, r7
 80081da:	f7f8 f893 	bl	8000304 <__adddf3>
 80081de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081e0:	4b34      	ldr	r3, [pc, #208]	; (80082b4 <__ieee754_pow+0x744>)
 80081e2:	4413      	add	r3, r2
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	f7f8 f88c 	bl	8000304 <__adddf3>
 80081ec:	4680      	mov	r8, r0
 80081ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80081f0:	4689      	mov	r9, r1
 80081f2:	f7f8 f9d3 	bl	800059c <__aeabi_i2d>
 80081f6:	4604      	mov	r4, r0
 80081f8:	460d      	mov	r5, r1
 80081fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081fc:	4b2e      	ldr	r3, [pc, #184]	; (80082b8 <__ieee754_pow+0x748>)
 80081fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008202:	4413      	add	r3, r2
 8008204:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008208:	4642      	mov	r2, r8
 800820a:	464b      	mov	r3, r9
 800820c:	f7f8 f87a 	bl	8000304 <__adddf3>
 8008210:	4632      	mov	r2, r6
 8008212:	463b      	mov	r3, r7
 8008214:	f7f8 f876 	bl	8000304 <__adddf3>
 8008218:	4622      	mov	r2, r4
 800821a:	462b      	mov	r3, r5
 800821c:	f7f8 f872 	bl	8000304 <__adddf3>
 8008220:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008224:	4622      	mov	r2, r4
 8008226:	462b      	mov	r3, r5
 8008228:	4650      	mov	r0, sl
 800822a:	468b      	mov	fp, r1
 800822c:	f7f8 f868 	bl	8000300 <__aeabi_dsub>
 8008230:	4632      	mov	r2, r6
 8008232:	463b      	mov	r3, r7
 8008234:	f7f8 f864 	bl	8000300 <__aeabi_dsub>
 8008238:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800823c:	f7f8 f860 	bl	8000300 <__aeabi_dsub>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	4640      	mov	r0, r8
 8008246:	4649      	mov	r1, r9
 8008248:	e608      	b.n	8007e5c <__ieee754_pow+0x2ec>
 800824a:	bf00      	nop
 800824c:	f3af 8000 	nop.w
 8008250:	4a454eef 	.word	0x4a454eef
 8008254:	3fca7e28 	.word	0x3fca7e28
 8008258:	93c9db65 	.word	0x93c9db65
 800825c:	3fcd864a 	.word	0x3fcd864a
 8008260:	a91d4101 	.word	0xa91d4101
 8008264:	3fd17460 	.word	0x3fd17460
 8008268:	518f264d 	.word	0x518f264d
 800826c:	3fd55555 	.word	0x3fd55555
 8008270:	db6fabff 	.word	0xdb6fabff
 8008274:	3fdb6db6 	.word	0x3fdb6db6
 8008278:	33333303 	.word	0x33333303
 800827c:	3fe33333 	.word	0x3fe33333
 8008280:	e0000000 	.word	0xe0000000
 8008284:	3feec709 	.word	0x3feec709
 8008288:	dc3a03fd 	.word	0xdc3a03fd
 800828c:	3feec709 	.word	0x3feec709
 8008290:	145b01f5 	.word	0x145b01f5
 8008294:	be3e2fe0 	.word	0xbe3e2fe0
 8008298:	7ff00000 	.word	0x7ff00000
 800829c:	43400000 	.word	0x43400000
 80082a0:	0003988e 	.word	0x0003988e
 80082a4:	000bb679 	.word	0x000bb679
 80082a8:	08008de8 	.word	0x08008de8
 80082ac:	3ff00000 	.word	0x3ff00000
 80082b0:	40080000 	.word	0x40080000
 80082b4:	08008e08 	.word	0x08008e08
 80082b8:	08008df8 	.word	0x08008df8
 80082bc:	2601      	movs	r6, #1
 80082be:	e667      	b.n	8007f90 <__ieee754_pow+0x420>
 80082c0:	a39d      	add	r3, pc, #628	; (adr r3, 8008538 <__ieee754_pow+0x9c8>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	4640      	mov	r0, r8
 80082c8:	4649      	mov	r1, r9
 80082ca:	f7f8 f81b 	bl	8000304 <__adddf3>
 80082ce:	4622      	mov	r2, r4
 80082d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082d4:	462b      	mov	r3, r5
 80082d6:	4650      	mov	r0, sl
 80082d8:	4639      	mov	r1, r7
 80082da:	f7f8 f811 	bl	8000300 <__aeabi_dsub>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082e6:	f7f8 fc53 	bl	8000b90 <__aeabi_dcmpgt>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	f47f ae01 	bne.w	8007ef2 <__ieee754_pow+0x382>
 80082f0:	4aa5      	ldr	r2, [pc, #660]	; (8008588 <__ieee754_pow+0xa18>)
 80082f2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80082f6:	4293      	cmp	r3, r2
 80082f8:	f340 8103 	ble.w	8008502 <__ieee754_pow+0x992>
 80082fc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008300:	2000      	movs	r0, #0
 8008302:	151b      	asrs	r3, r3, #20
 8008304:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008308:	fa4a f303 	asr.w	r3, sl, r3
 800830c:	4433      	add	r3, r6
 800830e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008312:	4f9e      	ldr	r7, [pc, #632]	; (800858c <__ieee754_pow+0xa1c>)
 8008314:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008318:	4117      	asrs	r7, r2
 800831a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800831e:	ea23 0107 	bic.w	r1, r3, r7
 8008322:	f1c2 0214 	rsb	r2, r2, #20
 8008326:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800832a:	460b      	mov	r3, r1
 800832c:	fa4a fa02 	asr.w	sl, sl, r2
 8008330:	2e00      	cmp	r6, #0
 8008332:	4602      	mov	r2, r0
 8008334:	4629      	mov	r1, r5
 8008336:	4620      	mov	r0, r4
 8008338:	bfb8      	it	lt
 800833a:	f1ca 0a00 	rsblt	sl, sl, #0
 800833e:	f7f7 ffdf 	bl	8000300 <__aeabi_dsub>
 8008342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800834a:	2400      	movs	r4, #0
 800834c:	4642      	mov	r2, r8
 800834e:	464b      	mov	r3, r9
 8008350:	f7f7 ffd8 	bl	8000304 <__adddf3>
 8008354:	a37a      	add	r3, pc, #488	; (adr r3, 8008540 <__ieee754_pow+0x9d0>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	4620      	mov	r0, r4
 800835c:	460d      	mov	r5, r1
 800835e:	f7f8 f987 	bl	8000670 <__aeabi_dmul>
 8008362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008366:	4606      	mov	r6, r0
 8008368:	460f      	mov	r7, r1
 800836a:	4620      	mov	r0, r4
 800836c:	4629      	mov	r1, r5
 800836e:	f7f7 ffc7 	bl	8000300 <__aeabi_dsub>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4640      	mov	r0, r8
 8008378:	4649      	mov	r1, r9
 800837a:	f7f7 ffc1 	bl	8000300 <__aeabi_dsub>
 800837e:	a372      	add	r3, pc, #456	; (adr r3, 8008548 <__ieee754_pow+0x9d8>)
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	f7f8 f974 	bl	8000670 <__aeabi_dmul>
 8008388:	a371      	add	r3, pc, #452	; (adr r3, 8008550 <__ieee754_pow+0x9e0>)
 800838a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838e:	4680      	mov	r8, r0
 8008390:	4689      	mov	r9, r1
 8008392:	4620      	mov	r0, r4
 8008394:	4629      	mov	r1, r5
 8008396:	f7f8 f96b 	bl	8000670 <__aeabi_dmul>
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	4640      	mov	r0, r8
 80083a0:	4649      	mov	r1, r9
 80083a2:	f7f7 ffaf 	bl	8000304 <__adddf3>
 80083a6:	4604      	mov	r4, r0
 80083a8:	460d      	mov	r5, r1
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4630      	mov	r0, r6
 80083b0:	4639      	mov	r1, r7
 80083b2:	f7f7 ffa7 	bl	8000304 <__adddf3>
 80083b6:	4632      	mov	r2, r6
 80083b8:	463b      	mov	r3, r7
 80083ba:	4680      	mov	r8, r0
 80083bc:	4689      	mov	r9, r1
 80083be:	f7f7 ff9f 	bl	8000300 <__aeabi_dsub>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4620      	mov	r0, r4
 80083c8:	4629      	mov	r1, r5
 80083ca:	f7f7 ff99 	bl	8000300 <__aeabi_dsub>
 80083ce:	4642      	mov	r2, r8
 80083d0:	4606      	mov	r6, r0
 80083d2:	460f      	mov	r7, r1
 80083d4:	464b      	mov	r3, r9
 80083d6:	4640      	mov	r0, r8
 80083d8:	4649      	mov	r1, r9
 80083da:	f7f8 f949 	bl	8000670 <__aeabi_dmul>
 80083de:	a35e      	add	r3, pc, #376	; (adr r3, 8008558 <__ieee754_pow+0x9e8>)
 80083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e4:	4604      	mov	r4, r0
 80083e6:	460d      	mov	r5, r1
 80083e8:	f7f8 f942 	bl	8000670 <__aeabi_dmul>
 80083ec:	a35c      	add	r3, pc, #368	; (adr r3, 8008560 <__ieee754_pow+0x9f0>)
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f7f7 ff85 	bl	8000300 <__aeabi_dsub>
 80083f6:	4622      	mov	r2, r4
 80083f8:	462b      	mov	r3, r5
 80083fa:	f7f8 f939 	bl	8000670 <__aeabi_dmul>
 80083fe:	a35a      	add	r3, pc, #360	; (adr r3, 8008568 <__ieee754_pow+0x9f8>)
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	f7f7 ff7e 	bl	8000304 <__adddf3>
 8008408:	4622      	mov	r2, r4
 800840a:	462b      	mov	r3, r5
 800840c:	f7f8 f930 	bl	8000670 <__aeabi_dmul>
 8008410:	a357      	add	r3, pc, #348	; (adr r3, 8008570 <__ieee754_pow+0xa00>)
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	f7f7 ff73 	bl	8000300 <__aeabi_dsub>
 800841a:	4622      	mov	r2, r4
 800841c:	462b      	mov	r3, r5
 800841e:	f7f8 f927 	bl	8000670 <__aeabi_dmul>
 8008422:	a355      	add	r3, pc, #340	; (adr r3, 8008578 <__ieee754_pow+0xa08>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	f7f7 ff6c 	bl	8000304 <__adddf3>
 800842c:	4622      	mov	r2, r4
 800842e:	462b      	mov	r3, r5
 8008430:	f7f8 f91e 	bl	8000670 <__aeabi_dmul>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4640      	mov	r0, r8
 800843a:	4649      	mov	r1, r9
 800843c:	f7f7 ff60 	bl	8000300 <__aeabi_dsub>
 8008440:	4604      	mov	r4, r0
 8008442:	460d      	mov	r5, r1
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4640      	mov	r0, r8
 800844a:	4649      	mov	r1, r9
 800844c:	f7f8 f910 	bl	8000670 <__aeabi_dmul>
 8008450:	2200      	movs	r2, #0
 8008452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800845a:	4620      	mov	r0, r4
 800845c:	4629      	mov	r1, r5
 800845e:	f7f7 ff4f 	bl	8000300 <__aeabi_dsub>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800846a:	f7f8 fa2b 	bl	80008c4 <__aeabi_ddiv>
 800846e:	4632      	mov	r2, r6
 8008470:	4604      	mov	r4, r0
 8008472:	460d      	mov	r5, r1
 8008474:	463b      	mov	r3, r7
 8008476:	4640      	mov	r0, r8
 8008478:	4649      	mov	r1, r9
 800847a:	f7f8 f8f9 	bl	8000670 <__aeabi_dmul>
 800847e:	4632      	mov	r2, r6
 8008480:	463b      	mov	r3, r7
 8008482:	f7f7 ff3f 	bl	8000304 <__adddf3>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4620      	mov	r0, r4
 800848c:	4629      	mov	r1, r5
 800848e:	f7f7 ff37 	bl	8000300 <__aeabi_dsub>
 8008492:	4642      	mov	r2, r8
 8008494:	464b      	mov	r3, r9
 8008496:	f7f7 ff33 	bl	8000300 <__aeabi_dsub>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	2000      	movs	r0, #0
 80084a0:	493b      	ldr	r1, [pc, #236]	; (8008590 <__ieee754_pow+0xa20>)
 80084a2:	f7f7 ff2d 	bl	8000300 <__aeabi_dsub>
 80084a6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80084aa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80084ae:	da2b      	bge.n	8008508 <__ieee754_pow+0x998>
 80084b0:	4652      	mov	r2, sl
 80084b2:	f000 f9b9 	bl	8008828 <scalbn>
 80084b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084ba:	f7ff bbf2 	b.w	8007ca2 <__ieee754_pow+0x132>
 80084be:	4b35      	ldr	r3, [pc, #212]	; (8008594 <__ieee754_pow+0xa24>)
 80084c0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80084c4:	429f      	cmp	r7, r3
 80084c6:	f77f af13 	ble.w	80082f0 <__ieee754_pow+0x780>
 80084ca:	4b33      	ldr	r3, [pc, #204]	; (8008598 <__ieee754_pow+0xa28>)
 80084cc:	440b      	add	r3, r1
 80084ce:	4303      	orrs	r3, r0
 80084d0:	d00b      	beq.n	80084ea <__ieee754_pow+0x97a>
 80084d2:	a32b      	add	r3, pc, #172	; (adr r3, 8008580 <__ieee754_pow+0xa10>)
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084dc:	f7f8 f8c8 	bl	8000670 <__aeabi_dmul>
 80084e0:	a327      	add	r3, pc, #156	; (adr r3, 8008580 <__ieee754_pow+0xa10>)
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	f7ff bbdc 	b.w	8007ca2 <__ieee754_pow+0x132>
 80084ea:	4622      	mov	r2, r4
 80084ec:	462b      	mov	r3, r5
 80084ee:	f7f7 ff07 	bl	8000300 <__aeabi_dsub>
 80084f2:	4642      	mov	r2, r8
 80084f4:	464b      	mov	r3, r9
 80084f6:	f7f8 fb41 	bl	8000b7c <__aeabi_dcmpge>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	f43f aef8 	beq.w	80082f0 <__ieee754_pow+0x780>
 8008500:	e7e7      	b.n	80084d2 <__ieee754_pow+0x962>
 8008502:	f04f 0a00 	mov.w	sl, #0
 8008506:	e71e      	b.n	8008346 <__ieee754_pow+0x7d6>
 8008508:	4621      	mov	r1, r4
 800850a:	e7d4      	b.n	80084b6 <__ieee754_pow+0x946>
 800850c:	f04f 0b00 	mov.w	fp, #0
 8008510:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008590 <__ieee754_pow+0xa20>
 8008514:	f7ff bbb0 	b.w	8007c78 <__ieee754_pow+0x108>
 8008518:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800851c:	f7ff bbac 	b.w	8007c78 <__ieee754_pow+0x108>
 8008520:	4638      	mov	r0, r7
 8008522:	4641      	mov	r1, r8
 8008524:	f7ff bbbf 	b.w	8007ca6 <__ieee754_pow+0x136>
 8008528:	9200      	str	r2, [sp, #0]
 800852a:	f7ff bb7f 	b.w	8007c2c <__ieee754_pow+0xbc>
 800852e:	2300      	movs	r3, #0
 8008530:	f7ff bb69 	b.w	8007c06 <__ieee754_pow+0x96>
 8008534:	f3af 8000 	nop.w
 8008538:	652b82fe 	.word	0x652b82fe
 800853c:	3c971547 	.word	0x3c971547
 8008540:	00000000 	.word	0x00000000
 8008544:	3fe62e43 	.word	0x3fe62e43
 8008548:	fefa39ef 	.word	0xfefa39ef
 800854c:	3fe62e42 	.word	0x3fe62e42
 8008550:	0ca86c39 	.word	0x0ca86c39
 8008554:	be205c61 	.word	0xbe205c61
 8008558:	72bea4d0 	.word	0x72bea4d0
 800855c:	3e663769 	.word	0x3e663769
 8008560:	c5d26bf1 	.word	0xc5d26bf1
 8008564:	3ebbbd41 	.word	0x3ebbbd41
 8008568:	af25de2c 	.word	0xaf25de2c
 800856c:	3f11566a 	.word	0x3f11566a
 8008570:	16bebd93 	.word	0x16bebd93
 8008574:	3f66c16c 	.word	0x3f66c16c
 8008578:	5555553e 	.word	0x5555553e
 800857c:	3fc55555 	.word	0x3fc55555
 8008580:	c2f8f359 	.word	0xc2f8f359
 8008584:	01a56e1f 	.word	0x01a56e1f
 8008588:	3fe00000 	.word	0x3fe00000
 800858c:	000fffff 	.word	0x000fffff
 8008590:	3ff00000 	.word	0x3ff00000
 8008594:	4090cbff 	.word	0x4090cbff
 8008598:	3f6f3400 	.word	0x3f6f3400

0800859c <__ieee754_sqrt>:
 800859c:	f8df c150 	ldr.w	ip, [pc, #336]	; 80086f0 <__ieee754_sqrt+0x154>
 80085a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a4:	ea3c 0c01 	bics.w	ip, ip, r1
 80085a8:	460b      	mov	r3, r1
 80085aa:	4606      	mov	r6, r0
 80085ac:	460d      	mov	r5, r1
 80085ae:	460a      	mov	r2, r1
 80085b0:	4607      	mov	r7, r0
 80085b2:	4604      	mov	r4, r0
 80085b4:	d10e      	bne.n	80085d4 <__ieee754_sqrt+0x38>
 80085b6:	4602      	mov	r2, r0
 80085b8:	f7f8 f85a 	bl	8000670 <__aeabi_dmul>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4630      	mov	r0, r6
 80085c2:	4629      	mov	r1, r5
 80085c4:	f7f7 fe9e 	bl	8000304 <__adddf3>
 80085c8:	4606      	mov	r6, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	4630      	mov	r0, r6
 80085ce:	4629      	mov	r1, r5
 80085d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d4:	2900      	cmp	r1, #0
 80085d6:	dc0d      	bgt.n	80085f4 <__ieee754_sqrt+0x58>
 80085d8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80085dc:	ea5c 0707 	orrs.w	r7, ip, r7
 80085e0:	d0f4      	beq.n	80085cc <__ieee754_sqrt+0x30>
 80085e2:	b139      	cbz	r1, 80085f4 <__ieee754_sqrt+0x58>
 80085e4:	4602      	mov	r2, r0
 80085e6:	f7f7 fe8b 	bl	8000300 <__aeabi_dsub>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	f7f8 f969 	bl	80008c4 <__aeabi_ddiv>
 80085f2:	e7e9      	b.n	80085c8 <__ieee754_sqrt+0x2c>
 80085f4:	1512      	asrs	r2, r2, #20
 80085f6:	d074      	beq.n	80086e2 <__ieee754_sqrt+0x146>
 80085f8:	2000      	movs	r0, #0
 80085fa:	07d5      	lsls	r5, r2, #31
 80085fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008600:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8008604:	bf5e      	ittt	pl
 8008606:	0fe3      	lsrpl	r3, r4, #31
 8008608:	0064      	lslpl	r4, r4, #1
 800860a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800860e:	0fe3      	lsrs	r3, r4, #31
 8008610:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008614:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8008618:	2516      	movs	r5, #22
 800861a:	4601      	mov	r1, r0
 800861c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008620:	1076      	asrs	r6, r6, #1
 8008622:	0064      	lsls	r4, r4, #1
 8008624:	188f      	adds	r7, r1, r2
 8008626:	429f      	cmp	r7, r3
 8008628:	bfde      	ittt	le
 800862a:	1bdb      	suble	r3, r3, r7
 800862c:	18b9      	addle	r1, r7, r2
 800862e:	1880      	addle	r0, r0, r2
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	3d01      	subs	r5, #1
 8008634:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008638:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800863c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008640:	d1f0      	bne.n	8008624 <__ieee754_sqrt+0x88>
 8008642:	462a      	mov	r2, r5
 8008644:	f04f 0e20 	mov.w	lr, #32
 8008648:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800864c:	428b      	cmp	r3, r1
 800864e:	eb07 0c05 	add.w	ip, r7, r5
 8008652:	dc02      	bgt.n	800865a <__ieee754_sqrt+0xbe>
 8008654:	d113      	bne.n	800867e <__ieee754_sqrt+0xe2>
 8008656:	45a4      	cmp	ip, r4
 8008658:	d811      	bhi.n	800867e <__ieee754_sqrt+0xe2>
 800865a:	f1bc 0f00 	cmp.w	ip, #0
 800865e:	eb0c 0507 	add.w	r5, ip, r7
 8008662:	da43      	bge.n	80086ec <__ieee754_sqrt+0x150>
 8008664:	2d00      	cmp	r5, #0
 8008666:	db41      	blt.n	80086ec <__ieee754_sqrt+0x150>
 8008668:	f101 0801 	add.w	r8, r1, #1
 800866c:	1a5b      	subs	r3, r3, r1
 800866e:	4641      	mov	r1, r8
 8008670:	45a4      	cmp	ip, r4
 8008672:	bf88      	it	hi
 8008674:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008678:	eba4 040c 	sub.w	r4, r4, ip
 800867c:	443a      	add	r2, r7
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	f1be 0e01 	subs.w	lr, lr, #1
 8008684:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008688:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800868c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008690:	d1dc      	bne.n	800864c <__ieee754_sqrt+0xb0>
 8008692:	4323      	orrs	r3, r4
 8008694:	d006      	beq.n	80086a4 <__ieee754_sqrt+0x108>
 8008696:	1c54      	adds	r4, r2, #1
 8008698:	bf0b      	itete	eq
 800869a:	4672      	moveq	r2, lr
 800869c:	3201      	addne	r2, #1
 800869e:	3001      	addeq	r0, #1
 80086a0:	f022 0201 	bicne.w	r2, r2, #1
 80086a4:	1043      	asrs	r3, r0, #1
 80086a6:	07c1      	lsls	r1, r0, #31
 80086a8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80086ac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80086b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80086b4:	bf48      	it	mi
 80086b6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80086ba:	4610      	mov	r0, r2
 80086bc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80086c0:	e782      	b.n	80085c8 <__ieee754_sqrt+0x2c>
 80086c2:	0ae3      	lsrs	r3, r4, #11
 80086c4:	3915      	subs	r1, #21
 80086c6:	0564      	lsls	r4, r4, #21
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d0fa      	beq.n	80086c2 <__ieee754_sqrt+0x126>
 80086cc:	02de      	lsls	r6, r3, #11
 80086ce:	d50a      	bpl.n	80086e6 <__ieee754_sqrt+0x14a>
 80086d0:	f1c2 0020 	rsb	r0, r2, #32
 80086d4:	fa24 f000 	lsr.w	r0, r4, r0
 80086d8:	1e55      	subs	r5, r2, #1
 80086da:	4094      	lsls	r4, r2
 80086dc:	4303      	orrs	r3, r0
 80086de:	1b4a      	subs	r2, r1, r5
 80086e0:	e78a      	b.n	80085f8 <__ieee754_sqrt+0x5c>
 80086e2:	4611      	mov	r1, r2
 80086e4:	e7f0      	b.n	80086c8 <__ieee754_sqrt+0x12c>
 80086e6:	005b      	lsls	r3, r3, #1
 80086e8:	3201      	adds	r2, #1
 80086ea:	e7ef      	b.n	80086cc <__ieee754_sqrt+0x130>
 80086ec:	4688      	mov	r8, r1
 80086ee:	e7bd      	b.n	800866c <__ieee754_sqrt+0xd0>
 80086f0:	7ff00000 	.word	0x7ff00000

080086f4 <fabs>:
 80086f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80086f8:	4770      	bx	lr

080086fa <finite>:
 80086fa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80086fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008702:	0fc0      	lsrs	r0, r0, #31
 8008704:	4770      	bx	lr
	...

08008708 <nan>:
 8008708:	2000      	movs	r0, #0
 800870a:	4901      	ldr	r1, [pc, #4]	; (8008710 <nan+0x8>)
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	7ff80000 	.word	0x7ff80000

08008714 <rint>:
 8008714:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8008718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800871a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800871e:	2f13      	cmp	r7, #19
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	460c      	mov	r4, r1
 8008726:	4605      	mov	r5, r0
 8008728:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800872c:	dc59      	bgt.n	80087e2 <rint+0xce>
 800872e:	2f00      	cmp	r7, #0
 8008730:	da2a      	bge.n	8008788 <rint+0x74>
 8008732:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008736:	4301      	orrs	r1, r0
 8008738:	d022      	beq.n	8008780 <rint+0x6c>
 800873a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800873e:	4301      	orrs	r1, r0
 8008740:	424d      	negs	r5, r1
 8008742:	430d      	orrs	r5, r1
 8008744:	4936      	ldr	r1, [pc, #216]	; (8008820 <rint+0x10c>)
 8008746:	0c5c      	lsrs	r4, r3, #17
 8008748:	0b2d      	lsrs	r5, r5, #12
 800874a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800874e:	0464      	lsls	r4, r4, #17
 8008750:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008754:	ea45 0304 	orr.w	r3, r5, r4
 8008758:	e9d1 4500 	ldrd	r4, r5, [r1]
 800875c:	4620      	mov	r0, r4
 800875e:	4629      	mov	r1, r5
 8008760:	f7f7 fdd0 	bl	8000304 <__adddf3>
 8008764:	e9cd 0100 	strd	r0, r1, [sp]
 8008768:	e9dd 0100 	ldrd	r0, r1, [sp]
 800876c:	462b      	mov	r3, r5
 800876e:	4622      	mov	r2, r4
 8008770:	f7f7 fdc6 	bl	8000300 <__aeabi_dsub>
 8008774:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008778:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	4610      	mov	r0, r2
 8008782:	4619      	mov	r1, r3
 8008784:	b003      	add	sp, #12
 8008786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008788:	4926      	ldr	r1, [pc, #152]	; (8008824 <rint+0x110>)
 800878a:	4139      	asrs	r1, r7
 800878c:	ea03 0001 	and.w	r0, r3, r1
 8008790:	4310      	orrs	r0, r2
 8008792:	d0f5      	beq.n	8008780 <rint+0x6c>
 8008794:	084b      	lsrs	r3, r1, #1
 8008796:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800879a:	ea52 0501 	orrs.w	r5, r2, r1
 800879e:	d00c      	beq.n	80087ba <rint+0xa6>
 80087a0:	ea24 0303 	bic.w	r3, r4, r3
 80087a4:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80087a8:	2f13      	cmp	r7, #19
 80087aa:	bf0c      	ite	eq
 80087ac:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80087b0:	2500      	movne	r5, #0
 80087b2:	fa44 f707 	asr.w	r7, r4, r7
 80087b6:	ea43 0407 	orr.w	r4, r3, r7
 80087ba:	4919      	ldr	r1, [pc, #100]	; (8008820 <rint+0x10c>)
 80087bc:	4623      	mov	r3, r4
 80087be:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80087c2:	462a      	mov	r2, r5
 80087c4:	e9d6 4500 	ldrd	r4, r5, [r6]
 80087c8:	4620      	mov	r0, r4
 80087ca:	4629      	mov	r1, r5
 80087cc:	f7f7 fd9a 	bl	8000304 <__adddf3>
 80087d0:	e9cd 0100 	strd	r0, r1, [sp]
 80087d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087d8:	4622      	mov	r2, r4
 80087da:	462b      	mov	r3, r5
 80087dc:	f7f7 fd90 	bl	8000300 <__aeabi_dsub>
 80087e0:	e7cc      	b.n	800877c <rint+0x68>
 80087e2:	2f33      	cmp	r7, #51	; 0x33
 80087e4:	dd05      	ble.n	80087f2 <rint+0xde>
 80087e6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80087ea:	d1c9      	bne.n	8008780 <rint+0x6c>
 80087ec:	f7f7 fd8a 	bl	8000304 <__adddf3>
 80087f0:	e7c4      	b.n	800877c <rint+0x68>
 80087f2:	f04f 31ff 	mov.w	r1, #4294967295
 80087f6:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80087fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80087fe:	4208      	tst	r0, r1
 8008800:	d0be      	beq.n	8008780 <rint+0x6c>
 8008802:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8008806:	bf18      	it	ne
 8008808:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800880c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8008810:	bf1e      	ittt	ne
 8008812:	ea20 0303 	bicne.w	r3, r0, r3
 8008816:	fa45 fc0c 	asrne.w	ip, r5, ip
 800881a:	ea43 050c 	orrne.w	r5, r3, ip
 800881e:	e7cc      	b.n	80087ba <rint+0xa6>
 8008820:	08008e18 	.word	0x08008e18
 8008824:	000fffff 	.word	0x000fffff

08008828 <scalbn>:
 8008828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800882e:	4604      	mov	r4, r0
 8008830:	460d      	mov	r5, r1
 8008832:	4617      	mov	r7, r2
 8008834:	460b      	mov	r3, r1
 8008836:	b996      	cbnz	r6, 800885e <scalbn+0x36>
 8008838:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800883c:	4303      	orrs	r3, r0
 800883e:	d039      	beq.n	80088b4 <scalbn+0x8c>
 8008840:	4b35      	ldr	r3, [pc, #212]	; (8008918 <scalbn+0xf0>)
 8008842:	2200      	movs	r2, #0
 8008844:	f7f7 ff14 	bl	8000670 <__aeabi_dmul>
 8008848:	4b34      	ldr	r3, [pc, #208]	; (800891c <scalbn+0xf4>)
 800884a:	4604      	mov	r4, r0
 800884c:	429f      	cmp	r7, r3
 800884e:	460d      	mov	r5, r1
 8008850:	da0f      	bge.n	8008872 <scalbn+0x4a>
 8008852:	a32d      	add	r3, pc, #180	; (adr r3, 8008908 <scalbn+0xe0>)
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f7f7 ff0a 	bl	8000670 <__aeabi_dmul>
 800885c:	e006      	b.n	800886c <scalbn+0x44>
 800885e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008862:	4296      	cmp	r6, r2
 8008864:	d10a      	bne.n	800887c <scalbn+0x54>
 8008866:	4602      	mov	r2, r0
 8008868:	f7f7 fd4c 	bl	8000304 <__adddf3>
 800886c:	4604      	mov	r4, r0
 800886e:	460d      	mov	r5, r1
 8008870:	e020      	b.n	80088b4 <scalbn+0x8c>
 8008872:	460b      	mov	r3, r1
 8008874:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008878:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800887c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008880:	19b9      	adds	r1, r7, r6
 8008882:	4291      	cmp	r1, r2
 8008884:	dd0e      	ble.n	80088a4 <scalbn+0x7c>
 8008886:	a322      	add	r3, pc, #136	; (adr r3, 8008910 <scalbn+0xe8>)
 8008888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008890:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008894:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008898:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800889c:	4820      	ldr	r0, [pc, #128]	; (8008920 <scalbn+0xf8>)
 800889e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80088a2:	e7d9      	b.n	8008858 <scalbn+0x30>
 80088a4:	2900      	cmp	r1, #0
 80088a6:	dd08      	ble.n	80088ba <scalbn+0x92>
 80088a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80088ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80088b0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80088b4:	4620      	mov	r0, r4
 80088b6:	4629      	mov	r1, r5
 80088b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ba:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80088be:	da16      	bge.n	80088ee <scalbn+0xc6>
 80088c0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80088c4:	429f      	cmp	r7, r3
 80088c6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80088ca:	dd08      	ble.n	80088de <scalbn+0xb6>
 80088cc:	4c15      	ldr	r4, [pc, #84]	; (8008924 <scalbn+0xfc>)
 80088ce:	4814      	ldr	r0, [pc, #80]	; (8008920 <scalbn+0xf8>)
 80088d0:	f363 74df 	bfi	r4, r3, #31, #1
 80088d4:	a30e      	add	r3, pc, #56	; (adr r3, 8008910 <scalbn+0xe8>)
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088da:	4621      	mov	r1, r4
 80088dc:	e7bc      	b.n	8008858 <scalbn+0x30>
 80088de:	4c12      	ldr	r4, [pc, #72]	; (8008928 <scalbn+0x100>)
 80088e0:	4812      	ldr	r0, [pc, #72]	; (800892c <scalbn+0x104>)
 80088e2:	f363 74df 	bfi	r4, r3, #31, #1
 80088e6:	a308      	add	r3, pc, #32	; (adr r3, 8008908 <scalbn+0xe0>)
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	e7f5      	b.n	80088da <scalbn+0xb2>
 80088ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80088f2:	3136      	adds	r1, #54	; 0x36
 80088f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80088f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80088fc:	4620      	mov	r0, r4
 80088fe:	4629      	mov	r1, r5
 8008900:	2200      	movs	r2, #0
 8008902:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <scalbn+0x108>)
 8008904:	e7a8      	b.n	8008858 <scalbn+0x30>
 8008906:	bf00      	nop
 8008908:	c2f8f359 	.word	0xc2f8f359
 800890c:	01a56e1f 	.word	0x01a56e1f
 8008910:	8800759c 	.word	0x8800759c
 8008914:	7e37e43c 	.word	0x7e37e43c
 8008918:	43500000 	.word	0x43500000
 800891c:	ffff3cb0 	.word	0xffff3cb0
 8008920:	8800759c 	.word	0x8800759c
 8008924:	7e37e43c 	.word	0x7e37e43c
 8008928:	01a56e1f 	.word	0x01a56e1f
 800892c:	c2f8f359 	.word	0xc2f8f359
 8008930:	3c900000 	.word	0x3c900000

08008934 <_init>:
 8008934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008936:	bf00      	nop
 8008938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800893a:	bc08      	pop	{r3}
 800893c:	469e      	mov	lr, r3
 800893e:	4770      	bx	lr

08008940 <_fini>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	bf00      	nop
 8008944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008946:	bc08      	pop	{r3}
 8008948:	469e      	mov	lr, r3
 800894a:	4770      	bx	lr
