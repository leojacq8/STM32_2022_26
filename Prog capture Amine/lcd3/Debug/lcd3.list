
lcd3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006118  08006118  00016118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006220  08006220  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006220  08006220  00016220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006228  08006228  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800622c  0800622c  0001622c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000074  080062a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080062a4  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d385  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231e  00000000  00000000  0002d422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  00030150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017390  00000000  00000000  00030a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da2b  00000000  00000000  00047e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008806e  00000000  00000000  0005584b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd8b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fdc  00000000  00000000  000dd90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	080060fc 	.word	0x080060fc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	080060fc 	.word	0x080060fc

08000180 <__aeabi_fmul>:
 8000180:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000184:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000188:	bf1e      	ittt	ne
 800018a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018e:	ea92 0f0c 	teqne	r2, ip
 8000192:	ea93 0f0c 	teqne	r3, ip
 8000196:	d06f      	beq.n	8000278 <__aeabi_fmul+0xf8>
 8000198:	441a      	add	r2, r3
 800019a:	ea80 0c01 	eor.w	ip, r0, r1
 800019e:	0240      	lsls	r0, r0, #9
 80001a0:	bf18      	it	ne
 80001a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a6:	d01e      	beq.n	80001e6 <__aeabi_fmul+0x66>
 80001a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b4:	fba0 3101 	umull	r3, r1, r0, r1
 80001b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001c0:	bf3e      	ittt	cc
 80001c2:	0049      	lslcc	r1, r1, #1
 80001c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c8:	005b      	lslcc	r3, r3, #1
 80001ca:	ea40 0001 	orr.w	r0, r0, r1
 80001ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001d2:	2afd      	cmp	r2, #253	; 0xfd
 80001d4:	d81d      	bhi.n	8000212 <__aeabi_fmul+0x92>
 80001d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001de:	bf08      	it	eq
 80001e0:	f020 0001 	biceq.w	r0, r0, #1
 80001e4:	4770      	bx	lr
 80001e6:	f090 0f00 	teq	r0, #0
 80001ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ee:	bf08      	it	eq
 80001f0:	0249      	lsleq	r1, r1, #9
 80001f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001fa:	3a7f      	subs	r2, #127	; 0x7f
 80001fc:	bfc2      	ittt	gt
 80001fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000202:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000206:	4770      	bxgt	lr
 8000208:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020c:	f04f 0300 	mov.w	r3, #0
 8000210:	3a01      	subs	r2, #1
 8000212:	dc5d      	bgt.n	80002d0 <__aeabi_fmul+0x150>
 8000214:	f112 0f19 	cmn.w	r2, #25
 8000218:	bfdc      	itt	le
 800021a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800021e:	4770      	bxle	lr
 8000220:	f1c2 0200 	rsb	r2, r2, #0
 8000224:	0041      	lsls	r1, r0, #1
 8000226:	fa21 f102 	lsr.w	r1, r1, r2
 800022a:	f1c2 0220 	rsb	r2, r2, #32
 800022e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000232:	ea5f 0031 	movs.w	r0, r1, rrx
 8000236:	f140 0000 	adc.w	r0, r0, #0
 800023a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023e:	bf08      	it	eq
 8000240:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000244:	4770      	bx	lr
 8000246:	f092 0f00 	teq	r2, #0
 800024a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800024e:	bf02      	ittt	eq
 8000250:	0040      	lsleq	r0, r0, #1
 8000252:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000256:	3a01      	subeq	r2, #1
 8000258:	d0f9      	beq.n	800024e <__aeabi_fmul+0xce>
 800025a:	ea40 000c 	orr.w	r0, r0, ip
 800025e:	f093 0f00 	teq	r3, #0
 8000262:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000266:	bf02      	ittt	eq
 8000268:	0049      	lsleq	r1, r1, #1
 800026a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800026e:	3b01      	subeq	r3, #1
 8000270:	d0f9      	beq.n	8000266 <__aeabi_fmul+0xe6>
 8000272:	ea41 010c 	orr.w	r1, r1, ip
 8000276:	e78f      	b.n	8000198 <__aeabi_fmul+0x18>
 8000278:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800027c:	ea92 0f0c 	teq	r2, ip
 8000280:	bf18      	it	ne
 8000282:	ea93 0f0c 	teqne	r3, ip
 8000286:	d00a      	beq.n	800029e <__aeabi_fmul+0x11e>
 8000288:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800028c:	bf18      	it	ne
 800028e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000292:	d1d8      	bne.n	8000246 <__aeabi_fmul+0xc6>
 8000294:	ea80 0001 	eor.w	r0, r0, r1
 8000298:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	bf17      	itett	ne
 80002a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002a8:	4608      	moveq	r0, r1
 80002aa:	f091 0f00 	teqne	r1, #0
 80002ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002b2:	d014      	beq.n	80002de <__aeabi_fmul+0x15e>
 80002b4:	ea92 0f0c 	teq	r2, ip
 80002b8:	d101      	bne.n	80002be <__aeabi_fmul+0x13e>
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	d10f      	bne.n	80002de <__aeabi_fmul+0x15e>
 80002be:	ea93 0f0c 	teq	r3, ip
 80002c2:	d103      	bne.n	80002cc <__aeabi_fmul+0x14c>
 80002c4:	024b      	lsls	r3, r1, #9
 80002c6:	bf18      	it	ne
 80002c8:	4608      	movne	r0, r1
 80002ca:	d108      	bne.n	80002de <__aeabi_fmul+0x15e>
 80002cc:	ea80 0001 	eor.w	r0, r0, r1
 80002d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002dc:	4770      	bx	lr
 80002de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	3c01      	subs	r4, #1
 8000424:	bf28      	it	cs
 8000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800042a:	d2e9      	bcs.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <__aeabi_dmul>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800066a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066e:	bf1d      	ittte	ne
 8000670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000674:	ea94 0f0c 	teqne	r4, ip
 8000678:	ea95 0f0c 	teqne	r5, ip
 800067c:	f000 f8de 	bleq	800083c <__aeabi_dmul+0x1dc>
 8000680:	442c      	add	r4, r5
 8000682:	ea81 0603 	eor.w	r6, r1, r3
 8000686:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800068a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000692:	bf18      	it	ne
 8000694:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a0:	d038      	beq.n	8000714 <__aeabi_dmul+0xb4>
 80006a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b6:	f04f 0600 	mov.w	r6, #0
 80006ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006be:	f09c 0f00 	teq	ip, #0
 80006c2:	bf18      	it	ne
 80006c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d4:	d204      	bcs.n	80006e0 <__aeabi_dmul+0x80>
 80006d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006da:	416d      	adcs	r5, r5
 80006dc:	eb46 0606 	adc.w	r6, r6, r6
 80006e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f8:	bf88      	it	hi
 80006fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fe:	d81e      	bhi.n	800073e <__aeabi_dmul+0xde>
 8000700:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000704:	bf08      	it	eq
 8000706:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800070a:	f150 0000 	adcs.w	r0, r0, #0
 800070e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000718:	ea46 0101 	orr.w	r1, r6, r1
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000728:	bfc2      	ittt	gt
 800072a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000732:	bd70      	popgt	{r4, r5, r6, pc}
 8000734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000738:	f04f 0e00 	mov.w	lr, #0
 800073c:	3c01      	subs	r4, #1
 800073e:	f300 80ab 	bgt.w	8000898 <__aeabi_dmul+0x238>
 8000742:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000746:	bfde      	ittt	le
 8000748:	2000      	movle	r0, #0
 800074a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd70      	pople	{r4, r5, r6, pc}
 8000750:	f1c4 0400 	rsb	r4, r4, #0
 8000754:	3c20      	subs	r4, #32
 8000756:	da35      	bge.n	80007c4 <__aeabi_dmul+0x164>
 8000758:	340c      	adds	r4, #12
 800075a:	dc1b      	bgt.n	8000794 <__aeabi_dmul+0x134>
 800075c:	f104 0414 	add.w	r4, r4, #20
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f305 	lsl.w	r3, r0, r5
 8000768:	fa20 f004 	lsr.w	r0, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	fa21 f604 	lsr.w	r6, r1, r4
 8000784:	eb42 0106 	adc.w	r1, r2, r6
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 040c 	rsb	r4, r4, #12
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f304 	lsl.w	r3, r0, r4
 80007a0:	fa20 f005 	lsr.w	r0, r0, r5
 80007a4:	fa01 f204 	lsl.w	r2, r1, r4
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b4:	f141 0100 	adc.w	r1, r1, #0
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f1c4 0520 	rsb	r5, r4, #32
 80007c8:	fa00 f205 	lsl.w	r2, r0, r5
 80007cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d0:	fa20 f304 	lsr.w	r3, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea43 0302 	orr.w	r3, r3, r2
 80007dc:	fa21 f004 	lsr.w	r0, r1, r4
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	fa21 f204 	lsr.w	r2, r1, r4
 80007e8:	ea20 0002 	bic.w	r0, r0, r2
 80007ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f094 0f00 	teq	r4, #0
 8000800:	d10f      	bne.n	8000822 <__aeabi_dmul+0x1c2>
 8000802:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000806:	0040      	lsls	r0, r0, #1
 8000808:	eb41 0101 	adc.w	r1, r1, r1
 800080c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3c01      	subeq	r4, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1a6>
 8000816:	ea41 0106 	orr.w	r1, r1, r6
 800081a:	f095 0f00 	teq	r5, #0
 800081e:	bf18      	it	ne
 8000820:	4770      	bxne	lr
 8000822:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	eb43 0303 	adc.w	r3, r3, r3
 800082c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000830:	bf08      	it	eq
 8000832:	3d01      	subeq	r5, #1
 8000834:	d0f7      	beq.n	8000826 <__aeabi_dmul+0x1c6>
 8000836:	ea43 0306 	orr.w	r3, r3, r6
 800083a:	4770      	bx	lr
 800083c:	ea94 0f0c 	teq	r4, ip
 8000840:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000844:	bf18      	it	ne
 8000846:	ea95 0f0c 	teqne	r5, ip
 800084a:	d00c      	beq.n	8000866 <__aeabi_dmul+0x206>
 800084c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000850:	bf18      	it	ne
 8000852:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000856:	d1d1      	bne.n	80007fc <__aeabi_dmul+0x19c>
 8000858:	ea81 0103 	eor.w	r1, r1, r3
 800085c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800086a:	bf06      	itte	eq
 800086c:	4610      	moveq	r0, r2
 800086e:	4619      	moveq	r1, r3
 8000870:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000874:	d019      	beq.n	80008aa <__aeabi_dmul+0x24a>
 8000876:	ea94 0f0c 	teq	r4, ip
 800087a:	d102      	bne.n	8000882 <__aeabi_dmul+0x222>
 800087c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000880:	d113      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000882:	ea95 0f0c 	teq	r5, ip
 8000886:	d105      	bne.n	8000894 <__aeabi_dmul+0x234>
 8000888:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800088c:	bf1c      	itt	ne
 800088e:	4610      	movne	r0, r2
 8000890:	4619      	movne	r1, r3
 8000892:	d10a      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000894:	ea81 0103 	eor.w	r1, r1, r3
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008b2:	bd70      	pop	{r4, r5, r6, pc}

080008b4 <__aeabi_ddiv>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008c2:	bf1d      	ittte	ne
 80008c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c8:	ea94 0f0c 	teqne	r4, ip
 80008cc:	ea95 0f0c 	teqne	r5, ip
 80008d0:	f000 f8a7 	bleq	8000a22 <__aeabi_ddiv+0x16e>
 80008d4:	eba4 0405 	sub.w	r4, r4, r5
 80008d8:	ea81 0e03 	eor.w	lr, r1, r3
 80008dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e4:	f000 8088 	beq.w	80009f8 <__aeabi_ddiv+0x144>
 80008e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000900:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000904:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000908:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800090c:	429d      	cmp	r5, r3
 800090e:	bf08      	it	eq
 8000910:	4296      	cmpeq	r6, r2
 8000912:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000916:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800091a:	d202      	bcs.n	8000922 <__aeabi_ddiv+0x6e>
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	1ab6      	subs	r6, r6, r2
 8000924:	eb65 0503 	sbc.w	r5, r5, r3
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000932:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 000c 	orrcs.w	r0, r0, ip
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000990:	ea55 0e06 	orrs.w	lr, r5, r6
 8000994:	d018      	beq.n	80009c8 <__aeabi_ddiv+0x114>
 8000996:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800099a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009b2:	d1c0      	bne.n	8000936 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	d10b      	bne.n	80009d2 <__aeabi_ddiv+0x11e>
 80009ba:	ea41 0100 	orr.w	r1, r1, r0
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c6:	e7b6      	b.n	8000936 <__aeabi_ddiv+0x82>
 80009c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009cc:	bf04      	itt	eq
 80009ce:	4301      	orreq	r1, r0
 80009d0:	2000      	moveq	r0, #0
 80009d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d6:	bf88      	it	hi
 80009d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009dc:	f63f aeaf 	bhi.w	800073e <__aeabi_dmul+0xde>
 80009e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e4:	bf04      	itt	eq
 80009e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ee:	f150 0000 	adcs.w	r0, r0, #0
 80009f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a04:	bfc2      	ittt	gt
 8000a06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a14:	f04f 0e00 	mov.w	lr, #0
 8000a18:	3c01      	subs	r4, #1
 8000a1a:	e690      	b.n	800073e <__aeabi_dmul+0xde>
 8000a1c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a20:	e68d      	b.n	800073e <__aeabi_dmul+0xde>
 8000a22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a26:	ea94 0f0c 	teq	r4, ip
 8000a2a:	bf08      	it	eq
 8000a2c:	ea95 0f0c 	teqeq	r5, ip
 8000a30:	f43f af3b 	beq.w	80008aa <__aeabi_dmul+0x24a>
 8000a34:	ea94 0f0c 	teq	r4, ip
 8000a38:	d10a      	bne.n	8000a50 <__aeabi_ddiv+0x19c>
 8000a3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3e:	f47f af34 	bne.w	80008aa <__aeabi_dmul+0x24a>
 8000a42:	ea95 0f0c 	teq	r5, ip
 8000a46:	f47f af25 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e72c      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a50:	ea95 0f0c 	teq	r5, ip
 8000a54:	d106      	bne.n	8000a64 <__aeabi_ddiv+0x1b0>
 8000a56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a5a:	f43f aefd 	beq.w	8000858 <__aeabi_dmul+0x1f8>
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	e722      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6e:	f47f aec5 	bne.w	80007fc <__aeabi_dmul+0x19c>
 8000a72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a76:	f47f af0d 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7e:	f47f aeeb 	bne.w	8000858 <__aeabi_dmul+0x1f8>
 8000a82:	e712      	b.n	80008aa <__aeabi_dmul+0x24a>

08000a84 <__gedf2>:
 8000a84:	f04f 3cff 	mov.w	ip, #4294967295
 8000a88:	e006      	b.n	8000a98 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__ledf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	e002      	b.n	8000a98 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__cmpdf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	bf18      	it	ne
 8000aaa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aae:	d01b      	beq.n	8000ae8 <__cmpdf2+0x54>
 8000ab0:	b001      	add	sp, #4
 8000ab2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab6:	bf0c      	ite	eq
 8000ab8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000abc:	ea91 0f03 	teqne	r1, r3
 8000ac0:	bf02      	ittt	eq
 8000ac2:	ea90 0f02 	teqeq	r0, r2
 8000ac6:	2000      	moveq	r0, #0
 8000ac8:	4770      	bxeq	lr
 8000aca:	f110 0f00 	cmn.w	r0, #0
 8000ace:	ea91 0f03 	teq	r1, r3
 8000ad2:	bf58      	it	pl
 8000ad4:	4299      	cmppl	r1, r3
 8000ad6:	bf08      	it	eq
 8000ad8:	4290      	cmpeq	r0, r2
 8000ada:	bf2c      	ite	cs
 8000adc:	17d8      	asrcs	r0, r3, #31
 8000ade:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ae2:	f040 0001 	orr.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af0:	d102      	bne.n	8000af8 <__cmpdf2+0x64>
 8000af2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af6:	d107      	bne.n	8000b08 <__cmpdf2+0x74>
 8000af8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d1d6      	bne.n	8000ab0 <__cmpdf2+0x1c>
 8000b02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b06:	d0d3      	beq.n	8000ab0 <__cmpdf2+0x1c>
 8000b08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_cdrcmple>:
 8000b10:	4684      	mov	ip, r0
 8000b12:	4610      	mov	r0, r2
 8000b14:	4662      	mov	r2, ip
 8000b16:	468c      	mov	ip, r1
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4663      	mov	r3, ip
 8000b1c:	e000      	b.n	8000b20 <__aeabi_cdcmpeq>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_cdcmpeq>:
 8000b20:	b501      	push	{r0, lr}
 8000b22:	f7ff ffb7 	bl	8000a94 <__cmpdf2>
 8000b26:	2800      	cmp	r0, #0
 8000b28:	bf48      	it	mi
 8000b2a:	f110 0f00 	cmnmi.w	r0, #0
 8000b2e:	bd01      	pop	{r0, pc}

08000b30 <__aeabi_dcmpeq>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff fff4 	bl	8000b20 <__aeabi_cdcmpeq>
 8000b38:	bf0c      	ite	eq
 8000b3a:	2001      	moveq	r0, #1
 8000b3c:	2000      	movne	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmplt>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffea 	bl	8000b20 <__aeabi_cdcmpeq>
 8000b4c:	bf34      	ite	cc
 8000b4e:	2001      	movcc	r0, #1
 8000b50:	2000      	movcs	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmple>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffe0 	bl	8000b20 <__aeabi_cdcmpeq>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpge>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffce 	bl	8000b10 <__aeabi_cdrcmple>
 8000b74:	bf94      	ite	ls
 8000b76:	2001      	movls	r0, #1
 8000b78:	2000      	movhi	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpgt>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff ffc4 	bl	8000b10 <__aeabi_cdrcmple>
 8000b88:	bf34      	ite	cc
 8000b8a:	2001      	movcc	r0, #1
 8000b8c:	2000      	movcs	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmpun>:
 8000b94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b9c:	d102      	bne.n	8000ba4 <__aeabi_dcmpun+0x10>
 8000b9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ba2:	d10a      	bne.n	8000bba <__aeabi_dcmpun+0x26>
 8000ba4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bac:	d102      	bne.n	8000bb4 <__aeabi_dcmpun+0x20>
 8000bae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bb2:	d102      	bne.n	8000bba <__aeabi_dcmpun+0x26>
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	f04f 0001 	mov.w	r0, #1
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2f>:
 8000bc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc8:	bf24      	itt	cs
 8000bca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bd2:	d90d      	bls.n	8000bf0 <__aeabi_d2f+0x30>
 8000bd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be8:	bf08      	it	eq
 8000bea:	f020 0001 	biceq.w	r0, r0, #1
 8000bee:	4770      	bx	lr
 8000bf0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf4:	d121      	bne.n	8000c3a <__aeabi_d2f+0x7a>
 8000bf6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bfa:	bfbc      	itt	lt
 8000bfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	4770      	bxlt	lr
 8000c02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c0a:	f1c2 0218 	rsb	r2, r2, #24
 8000c0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c16:	fa20 f002 	lsr.w	r0, r0, r2
 8000c1a:	bf18      	it	ne
 8000c1c:	f040 0001 	orrne.w	r0, r0, #1
 8000c20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c2c:	ea40 000c 	orr.w	r0, r0, ip
 8000c30:	fa23 f302 	lsr.w	r3, r3, r2
 8000c34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c38:	e7cc      	b.n	8000bd4 <__aeabi_d2f+0x14>
 8000c3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3e:	d107      	bne.n	8000c50 <__aeabi_d2f+0x90>
 8000c40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c44:	bf1e      	ittt	ne
 8000c46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4e:	4770      	bxne	lr
 8000c50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <__aeabi_frsub>:
 8000c60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	e002      	b.n	8000c6c <__addsf3>
 8000c66:	bf00      	nop

08000c68 <__aeabi_fsub>:
 8000c68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c6c <__addsf3>:
 8000c6c:	0042      	lsls	r2, r0, #1
 8000c6e:	bf1f      	itttt	ne
 8000c70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c74:	ea92 0f03 	teqne	r2, r3
 8000c78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c80:	d06a      	beq.n	8000d58 <__addsf3+0xec>
 8000c82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c8a:	bfc1      	itttt	gt
 8000c8c:	18d2      	addgt	r2, r2, r3
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	4048      	eorgt	r0, r1
 8000c92:	4041      	eorgt	r1, r0
 8000c94:	bfb8      	it	lt
 8000c96:	425b      	neglt	r3, r3
 8000c98:	2b19      	cmp	r3, #25
 8000c9a:	bf88      	it	hi
 8000c9c:	4770      	bxhi	lr
 8000c9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ca2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000caa:	bf18      	it	ne
 8000cac:	4240      	negne	r0, r0
 8000cae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cba:	bf18      	it	ne
 8000cbc:	4249      	negne	r1, r1
 8000cbe:	ea92 0f03 	teq	r2, r3
 8000cc2:	d03f      	beq.n	8000d44 <__addsf3+0xd8>
 8000cc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000ccc:	eb10 000c 	adds.w	r0, r0, ip
 8000cd0:	f1c3 0320 	rsb	r3, r3, #32
 8000cd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	d502      	bpl.n	8000ce4 <__addsf3+0x78>
 8000cde:	4249      	negs	r1, r1
 8000ce0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce8:	d313      	bcc.n	8000d12 <__addsf3+0xa6>
 8000cea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cee:	d306      	bcc.n	8000cfe <__addsf3+0x92>
 8000cf0:	0840      	lsrs	r0, r0, #1
 8000cf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf6:	f102 0201 	add.w	r2, r2, #1
 8000cfa:	2afe      	cmp	r2, #254	; 0xfe
 8000cfc:	d251      	bcs.n	8000da2 <__addsf3+0x136>
 8000cfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d06:	bf08      	it	eq
 8000d08:	f020 0001 	biceq.w	r0, r0, #1
 8000d0c:	ea40 0003 	orr.w	r0, r0, r3
 8000d10:	4770      	bx	lr
 8000d12:	0049      	lsls	r1, r1, #1
 8000d14:	eb40 0000 	adc.w	r0, r0, r0
 8000d18:	3a01      	subs	r2, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d20:	d2ed      	bcs.n	8000cfe <__addsf3+0x92>
 8000d22:	fab0 fc80 	clz	ip, r0
 8000d26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d32:	bfaa      	itet	ge
 8000d34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d38:	4252      	neglt	r2, r2
 8000d3a:	4318      	orrge	r0, r3
 8000d3c:	bfbc      	itt	lt
 8000d3e:	40d0      	lsrlt	r0, r2
 8000d40:	4318      	orrlt	r0, r3
 8000d42:	4770      	bx	lr
 8000d44:	f092 0f00 	teq	r2, #0
 8000d48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d4c:	bf06      	itte	eq
 8000d4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d52:	3201      	addeq	r2, #1
 8000d54:	3b01      	subne	r3, #1
 8000d56:	e7b5      	b.n	8000cc4 <__addsf3+0x58>
 8000d58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d60:	bf18      	it	ne
 8000d62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d66:	d021      	beq.n	8000dac <__addsf3+0x140>
 8000d68:	ea92 0f03 	teq	r2, r3
 8000d6c:	d004      	beq.n	8000d78 <__addsf3+0x10c>
 8000d6e:	f092 0f00 	teq	r2, #0
 8000d72:	bf08      	it	eq
 8000d74:	4608      	moveq	r0, r1
 8000d76:	4770      	bx	lr
 8000d78:	ea90 0f01 	teq	r0, r1
 8000d7c:	bf1c      	itt	ne
 8000d7e:	2000      	movne	r0, #0
 8000d80:	4770      	bxne	lr
 8000d82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d86:	d104      	bne.n	8000d92 <__addsf3+0x126>
 8000d88:	0040      	lsls	r0, r0, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d90:	4770      	bx	lr
 8000d92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d96:	bf3c      	itt	cc
 8000d98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d9c:	4770      	bxcc	lr
 8000d9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000da2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000da6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000daa:	4770      	bx	lr
 8000dac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000db0:	bf16      	itet	ne
 8000db2:	4608      	movne	r0, r1
 8000db4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db8:	4601      	movne	r1, r0
 8000dba:	0242      	lsls	r2, r0, #9
 8000dbc:	bf06      	itte	eq
 8000dbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dc2:	ea90 0f01 	teqeq	r0, r1
 8000dc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dca:	4770      	bx	lr

08000dcc <__aeabi_ui2f>:
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	e004      	b.n	8000ddc <__aeabi_i2f+0x8>
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_i2f>:
 8000dd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd8:	bf48      	it	mi
 8000dda:	4240      	negmi	r0, r0
 8000ddc:	ea5f 0c00 	movs.w	ip, r0
 8000de0:	bf08      	it	eq
 8000de2:	4770      	bxeq	lr
 8000de4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de8:	4601      	mov	r1, r0
 8000dea:	f04f 0000 	mov.w	r0, #0
 8000dee:	e01c      	b.n	8000e2a <__aeabi_l2f+0x2a>

08000df0 <__aeabi_ul2f>:
 8000df0:	ea50 0201 	orrs.w	r2, r0, r1
 8000df4:	bf08      	it	eq
 8000df6:	4770      	bxeq	lr
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	e00a      	b.n	8000e14 <__aeabi_l2f+0x14>
 8000dfe:	bf00      	nop

08000e00 <__aeabi_l2f>:
 8000e00:	ea50 0201 	orrs.w	r2, r0, r1
 8000e04:	bf08      	it	eq
 8000e06:	4770      	bxeq	lr
 8000e08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e0c:	d502      	bpl.n	8000e14 <__aeabi_l2f+0x14>
 8000e0e:	4240      	negs	r0, r0
 8000e10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e14:	ea5f 0c01 	movs.w	ip, r1
 8000e18:	bf02      	ittt	eq
 8000e1a:	4684      	moveq	ip, r0
 8000e1c:	4601      	moveq	r1, r0
 8000e1e:	2000      	moveq	r0, #0
 8000e20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e24:	bf08      	it	eq
 8000e26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e2e:	fabc f28c 	clz	r2, ip
 8000e32:	3a08      	subs	r2, #8
 8000e34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e38:	db10      	blt.n	8000e5c <__aeabi_l2f+0x5c>
 8000e3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3e:	4463      	add	r3, ip
 8000e40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	f020 0001 	biceq.w	r0, r0, #1
 8000e5a:	4770      	bx	lr
 8000e5c:	f102 0220 	add.w	r2, r2, #32
 8000e60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e64:	f1c2 0220 	rsb	r2, r2, #32
 8000e68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e70:	eb43 0002 	adc.w	r0, r3, r2
 8000e74:	bf08      	it	eq
 8000e76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e7a:	4770      	bx	lr

08000e7c <__aeabi_f2iz>:
 8000e7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e84:	d30f      	bcc.n	8000ea6 <__aeabi_f2iz+0x2a>
 8000e86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e8e:	d90d      	bls.n	8000eac <__aeabi_f2iz+0x30>
 8000e90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e98:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000ea0:	bf18      	it	ne
 8000ea2:	4240      	negne	r0, r0
 8000ea4:	4770      	bx	lr
 8000ea6:	f04f 0000 	mov.w	r0, #0
 8000eaa:	4770      	bx	lr
 8000eac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000eb0:	d101      	bne.n	8000eb6 <__aeabi_f2iz+0x3a>
 8000eb2:	0242      	lsls	r2, r0, #9
 8000eb4:	d105      	bne.n	8000ec2 <__aeabi_f2iz+0x46>
 8000eb6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	bf08      	it	eq
 8000ebc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f04f 0000 	mov.w	r0, #0
 8000ec6:	4770      	bx	lr

08000ec8 <__aeabi_uldivmod>:
 8000ec8:	b953      	cbnz	r3, 8000ee0 <__aeabi_uldivmod+0x18>
 8000eca:	b94a      	cbnz	r2, 8000ee0 <__aeabi_uldivmod+0x18>
 8000ecc:	2900      	cmp	r1, #0
 8000ece:	bf08      	it	eq
 8000ed0:	2800      	cmpeq	r0, #0
 8000ed2:	bf1c      	itt	ne
 8000ed4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ed8:	f04f 30ff 	movne.w	r0, #4294967295
 8000edc:	f000 b96e 	b.w	80011bc <__aeabi_idiv0>
 8000ee0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ee4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ee8:	f000 f806 	bl	8000ef8 <__udivmoddi4>
 8000eec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ef4:	b004      	add	sp, #16
 8000ef6:	4770      	bx	lr

08000ef8 <__udivmoddi4>:
 8000ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000efc:	9e08      	ldr	r6, [sp, #32]
 8000efe:	460d      	mov	r5, r1
 8000f00:	4604      	mov	r4, r0
 8000f02:	468e      	mov	lr, r1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 8083 	bne.w	8001010 <__udivmoddi4+0x118>
 8000f0a:	428a      	cmp	r2, r1
 8000f0c:	4617      	mov	r7, r2
 8000f0e:	d947      	bls.n	8000fa0 <__udivmoddi4+0xa8>
 8000f10:	fab2 f382 	clz	r3, r2
 8000f14:	b14b      	cbz	r3, 8000f2a <__udivmoddi4+0x32>
 8000f16:	f1c3 0120 	rsb	r1, r3, #32
 8000f1a:	fa05 fe03 	lsl.w	lr, r5, r3
 8000f1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000f22:	409f      	lsls	r7, r3
 8000f24:	ea41 0e0e 	orr.w	lr, r1, lr
 8000f28:	409c      	lsls	r4, r3
 8000f2a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f2e:	fbbe fcf8 	udiv	ip, lr, r8
 8000f32:	fa1f f987 	uxth.w	r9, r7
 8000f36:	fb08 e21c 	mls	r2, r8, ip, lr
 8000f3a:	fb0c f009 	mul.w	r0, ip, r9
 8000f3e:	0c21      	lsrs	r1, r4, #16
 8000f40:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000f44:	4290      	cmp	r0, r2
 8000f46:	d90a      	bls.n	8000f5e <__udivmoddi4+0x66>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000f4e:	f080 8118 	bcs.w	8001182 <__udivmoddi4+0x28a>
 8000f52:	4290      	cmp	r0, r2
 8000f54:	f240 8115 	bls.w	8001182 <__udivmoddi4+0x28a>
 8000f58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f5c:	443a      	add	r2, r7
 8000f5e:	1a12      	subs	r2, r2, r0
 8000f60:	fbb2 f0f8 	udiv	r0, r2, r8
 8000f64:	fb08 2210 	mls	r2, r8, r0, r2
 8000f68:	fb00 f109 	mul.w	r1, r0, r9
 8000f6c:	b2a4      	uxth	r4, r4
 8000f6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	d909      	bls.n	8000f8a <__udivmoddi4+0x92>
 8000f76:	193c      	adds	r4, r7, r4
 8000f78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f7c:	f080 8103 	bcs.w	8001186 <__udivmoddi4+0x28e>
 8000f80:	42a1      	cmp	r1, r4
 8000f82:	f240 8100 	bls.w	8001186 <__udivmoddi4+0x28e>
 8000f86:	3802      	subs	r0, #2
 8000f88:	443c      	add	r4, r7
 8000f8a:	1a64      	subs	r4, r4, r1
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f92:	b11e      	cbz	r6, 8000f9c <__udivmoddi4+0xa4>
 8000f94:	2200      	movs	r2, #0
 8000f96:	40dc      	lsrs	r4, r3
 8000f98:	e9c6 4200 	strd	r4, r2, [r6]
 8000f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa0:	b902      	cbnz	r2, 8000fa4 <__udivmoddi4+0xac>
 8000fa2:	deff      	udf	#255	; 0xff
 8000fa4:	fab2 f382 	clz	r3, r2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d14f      	bne.n	800104c <__udivmoddi4+0x154>
 8000fac:	1a8d      	subs	r5, r1, r2
 8000fae:	2101      	movs	r1, #1
 8000fb0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000fb4:	fa1f f882 	uxth.w	r8, r2
 8000fb8:	fbb5 fcfe 	udiv	ip, r5, lr
 8000fbc:	fb0e 551c 	mls	r5, lr, ip, r5
 8000fc0:	fb08 f00c 	mul.w	r0, r8, ip
 8000fc4:	0c22      	lsrs	r2, r4, #16
 8000fc6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000fca:	42a8      	cmp	r0, r5
 8000fcc:	d907      	bls.n	8000fde <__udivmoddi4+0xe6>
 8000fce:	197d      	adds	r5, r7, r5
 8000fd0:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000fd4:	d202      	bcs.n	8000fdc <__udivmoddi4+0xe4>
 8000fd6:	42a8      	cmp	r0, r5
 8000fd8:	f200 80e9 	bhi.w	80011ae <__udivmoddi4+0x2b6>
 8000fdc:	4694      	mov	ip, r2
 8000fde:	1a2d      	subs	r5, r5, r0
 8000fe0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000fe4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000fe8:	fb08 f800 	mul.w	r8, r8, r0
 8000fec:	b2a4      	uxth	r4, r4
 8000fee:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ff2:	45a0      	cmp	r8, r4
 8000ff4:	d907      	bls.n	8001006 <__udivmoddi4+0x10e>
 8000ff6:	193c      	adds	r4, r7, r4
 8000ff8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ffc:	d202      	bcs.n	8001004 <__udivmoddi4+0x10c>
 8000ffe:	45a0      	cmp	r8, r4
 8001000:	f200 80d9 	bhi.w	80011b6 <__udivmoddi4+0x2be>
 8001004:	4610      	mov	r0, r2
 8001006:	eba4 0408 	sub.w	r4, r4, r8
 800100a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800100e:	e7c0      	b.n	8000f92 <__udivmoddi4+0x9a>
 8001010:	428b      	cmp	r3, r1
 8001012:	d908      	bls.n	8001026 <__udivmoddi4+0x12e>
 8001014:	2e00      	cmp	r6, #0
 8001016:	f000 80b1 	beq.w	800117c <__udivmoddi4+0x284>
 800101a:	2100      	movs	r1, #0
 800101c:	e9c6 0500 	strd	r0, r5, [r6]
 8001020:	4608      	mov	r0, r1
 8001022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001026:	fab3 f183 	clz	r1, r3
 800102a:	2900      	cmp	r1, #0
 800102c:	d14b      	bne.n	80010c6 <__udivmoddi4+0x1ce>
 800102e:	42ab      	cmp	r3, r5
 8001030:	d302      	bcc.n	8001038 <__udivmoddi4+0x140>
 8001032:	4282      	cmp	r2, r0
 8001034:	f200 80b9 	bhi.w	80011aa <__udivmoddi4+0x2b2>
 8001038:	1a84      	subs	r4, r0, r2
 800103a:	eb65 0303 	sbc.w	r3, r5, r3
 800103e:	2001      	movs	r0, #1
 8001040:	469e      	mov	lr, r3
 8001042:	2e00      	cmp	r6, #0
 8001044:	d0aa      	beq.n	8000f9c <__udivmoddi4+0xa4>
 8001046:	e9c6 4e00 	strd	r4, lr, [r6]
 800104a:	e7a7      	b.n	8000f9c <__udivmoddi4+0xa4>
 800104c:	409f      	lsls	r7, r3
 800104e:	f1c3 0220 	rsb	r2, r3, #32
 8001052:	40d1      	lsrs	r1, r2
 8001054:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001058:	fbb1 f0fe 	udiv	r0, r1, lr
 800105c:	fa1f f887 	uxth.w	r8, r7
 8001060:	fb0e 1110 	mls	r1, lr, r0, r1
 8001064:	fa24 f202 	lsr.w	r2, r4, r2
 8001068:	409d      	lsls	r5, r3
 800106a:	fb00 fc08 	mul.w	ip, r0, r8
 800106e:	432a      	orrs	r2, r5
 8001070:	0c15      	lsrs	r5, r2, #16
 8001072:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001076:	45ac      	cmp	ip, r5
 8001078:	fa04 f403 	lsl.w	r4, r4, r3
 800107c:	d909      	bls.n	8001092 <__udivmoddi4+0x19a>
 800107e:	197d      	adds	r5, r7, r5
 8001080:	f100 31ff 	add.w	r1, r0, #4294967295
 8001084:	f080 808f 	bcs.w	80011a6 <__udivmoddi4+0x2ae>
 8001088:	45ac      	cmp	ip, r5
 800108a:	f240 808c 	bls.w	80011a6 <__udivmoddi4+0x2ae>
 800108e:	3802      	subs	r0, #2
 8001090:	443d      	add	r5, r7
 8001092:	eba5 050c 	sub.w	r5, r5, ip
 8001096:	fbb5 f1fe 	udiv	r1, r5, lr
 800109a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800109e:	fb01 f908 	mul.w	r9, r1, r8
 80010a2:	b295      	uxth	r5, r2
 80010a4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80010a8:	45a9      	cmp	r9, r5
 80010aa:	d907      	bls.n	80010bc <__udivmoddi4+0x1c4>
 80010ac:	197d      	adds	r5, r7, r5
 80010ae:	f101 32ff 	add.w	r2, r1, #4294967295
 80010b2:	d274      	bcs.n	800119e <__udivmoddi4+0x2a6>
 80010b4:	45a9      	cmp	r9, r5
 80010b6:	d972      	bls.n	800119e <__udivmoddi4+0x2a6>
 80010b8:	3902      	subs	r1, #2
 80010ba:	443d      	add	r5, r7
 80010bc:	eba5 0509 	sub.w	r5, r5, r9
 80010c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010c4:	e778      	b.n	8000fb8 <__udivmoddi4+0xc0>
 80010c6:	f1c1 0720 	rsb	r7, r1, #32
 80010ca:	408b      	lsls	r3, r1
 80010cc:	fa22 fc07 	lsr.w	ip, r2, r7
 80010d0:	ea4c 0c03 	orr.w	ip, ip, r3
 80010d4:	fa25 f407 	lsr.w	r4, r5, r7
 80010d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010dc:	fbb4 f9fe 	udiv	r9, r4, lr
 80010e0:	fa1f f88c 	uxth.w	r8, ip
 80010e4:	fb0e 4419 	mls	r4, lr, r9, r4
 80010e8:	fa20 f307 	lsr.w	r3, r0, r7
 80010ec:	fb09 fa08 	mul.w	sl, r9, r8
 80010f0:	408d      	lsls	r5, r1
 80010f2:	431d      	orrs	r5, r3
 80010f4:	0c2b      	lsrs	r3, r5, #16
 80010f6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80010fa:	45a2      	cmp	sl, r4
 80010fc:	fa02 f201 	lsl.w	r2, r2, r1
 8001100:	fa00 f301 	lsl.w	r3, r0, r1
 8001104:	d909      	bls.n	800111a <__udivmoddi4+0x222>
 8001106:	eb1c 0404 	adds.w	r4, ip, r4
 800110a:	f109 30ff 	add.w	r0, r9, #4294967295
 800110e:	d248      	bcs.n	80011a2 <__udivmoddi4+0x2aa>
 8001110:	45a2      	cmp	sl, r4
 8001112:	d946      	bls.n	80011a2 <__udivmoddi4+0x2aa>
 8001114:	f1a9 0902 	sub.w	r9, r9, #2
 8001118:	4464      	add	r4, ip
 800111a:	eba4 040a 	sub.w	r4, r4, sl
 800111e:	fbb4 f0fe 	udiv	r0, r4, lr
 8001122:	fb0e 4410 	mls	r4, lr, r0, r4
 8001126:	fb00 fa08 	mul.w	sl, r0, r8
 800112a:	b2ad      	uxth	r5, r5
 800112c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001130:	45a2      	cmp	sl, r4
 8001132:	d908      	bls.n	8001146 <__udivmoddi4+0x24e>
 8001134:	eb1c 0404 	adds.w	r4, ip, r4
 8001138:	f100 35ff 	add.w	r5, r0, #4294967295
 800113c:	d22d      	bcs.n	800119a <__udivmoddi4+0x2a2>
 800113e:	45a2      	cmp	sl, r4
 8001140:	d92b      	bls.n	800119a <__udivmoddi4+0x2a2>
 8001142:	3802      	subs	r0, #2
 8001144:	4464      	add	r4, ip
 8001146:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800114a:	fba0 8902 	umull	r8, r9, r0, r2
 800114e:	eba4 040a 	sub.w	r4, r4, sl
 8001152:	454c      	cmp	r4, r9
 8001154:	46c6      	mov	lr, r8
 8001156:	464d      	mov	r5, r9
 8001158:	d319      	bcc.n	800118e <__udivmoddi4+0x296>
 800115a:	d016      	beq.n	800118a <__udivmoddi4+0x292>
 800115c:	b15e      	cbz	r6, 8001176 <__udivmoddi4+0x27e>
 800115e:	ebb3 020e 	subs.w	r2, r3, lr
 8001162:	eb64 0405 	sbc.w	r4, r4, r5
 8001166:	fa04 f707 	lsl.w	r7, r4, r7
 800116a:	fa22 f301 	lsr.w	r3, r2, r1
 800116e:	431f      	orrs	r7, r3
 8001170:	40cc      	lsrs	r4, r1
 8001172:	e9c6 7400 	strd	r7, r4, [r6]
 8001176:	2100      	movs	r1, #0
 8001178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117c:	4631      	mov	r1, r6
 800117e:	4630      	mov	r0, r6
 8001180:	e70c      	b.n	8000f9c <__udivmoddi4+0xa4>
 8001182:	468c      	mov	ip, r1
 8001184:	e6eb      	b.n	8000f5e <__udivmoddi4+0x66>
 8001186:	4610      	mov	r0, r2
 8001188:	e6ff      	b.n	8000f8a <__udivmoddi4+0x92>
 800118a:	4543      	cmp	r3, r8
 800118c:	d2e6      	bcs.n	800115c <__udivmoddi4+0x264>
 800118e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001192:	eb69 050c 	sbc.w	r5, r9, ip
 8001196:	3801      	subs	r0, #1
 8001198:	e7e0      	b.n	800115c <__udivmoddi4+0x264>
 800119a:	4628      	mov	r0, r5
 800119c:	e7d3      	b.n	8001146 <__udivmoddi4+0x24e>
 800119e:	4611      	mov	r1, r2
 80011a0:	e78c      	b.n	80010bc <__udivmoddi4+0x1c4>
 80011a2:	4681      	mov	r9, r0
 80011a4:	e7b9      	b.n	800111a <__udivmoddi4+0x222>
 80011a6:	4608      	mov	r0, r1
 80011a8:	e773      	b.n	8001092 <__udivmoddi4+0x19a>
 80011aa:	4608      	mov	r0, r1
 80011ac:	e749      	b.n	8001042 <__udivmoddi4+0x14a>
 80011ae:	f1ac 0c02 	sub.w	ip, ip, #2
 80011b2:	443d      	add	r5, r7
 80011b4:	e713      	b.n	8000fde <__udivmoddi4+0xe6>
 80011b6:	3802      	subs	r0, #2
 80011b8:	443c      	add	r4, r7
 80011ba:	e724      	b.n	8001006 <__udivmoddi4+0x10e>

080011bc <__aeabi_idiv0>:
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <TMP_Receive>:
#define TIMEOUT 5000
#define ADRESSETEMP (0x44<<1)

I2C_HandleTypeDef hi2c_tmp;
void TMP_Receive(uint16_t address, uint8_t *Data, uint16_t len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	80fb      	strh	r3, [r7, #6]
 80011cc:	4613      	mov	r3, r2
 80011ce:	80bb      	strh	r3, [r7, #4]


	 HAL_I2C_Master_Receive(&hi2c_tmp, address, Data, len, TIMEOUT);
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	88f9      	ldrh	r1, [r7, #6]
 80011d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d8:	9200      	str	r2, [sp, #0]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <TMP_Receive+0x2c>)
 80011de:	f001 fd3f 	bl	8002c60 <HAL_I2C_Master_Receive>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000a0 	.word	0x200000a0

080011f0 <TMP_init>:

void TMP_init(I2C_HandleTypeDef hi2c)
{
 80011f0:	b084      	sub	sp, #16
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	f107 0c08 	add.w	ip, r7, #8
 80011fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c_tmp = hi2c;
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <TMP_init+0x2c>)
 8001200:	4618      	mov	r0, r3
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	2254      	movs	r2, #84	; 0x54
 8001208:	4619      	mov	r1, r3
 800120a:	f003 fba5 	bl	8004958 <memcpy>
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001216:	b004      	add	sp, #16
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	200000a0 	.word	0x200000a0

08001220 <TMP_Transmit>:
void TMP_Transmit(uint16_t address, uint8_t *Data, uint16_t len)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af02      	add	r7, sp, #8
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	4613      	mov	r3, r2
 800122e:	80bb      	strh	r3, [r7, #4]
	 HAL_I2C_Master_Transmit(&hi2c_tmp, address, Data, len, TIMEOUT);
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	88f9      	ldrh	r1, [r7, #6]
 8001234:	f241 3288 	movw	r2, #5000	; 0x1388
 8001238:	9200      	str	r2, [sp, #0]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <TMP_Transmit+0x2c>)
 800123e:	f001 fc11 	bl	8002a64 <HAL_I2C_Master_Transmit>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200000a0 	.word	0x200000a0

08001250 <Temp_read>:

void Temp_read( float *temp, float *humidity)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	float temperature=0;
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

	uint8_t Data[6]={0x24, 0x00};
 8001260:	2324      	movs	r3, #36	; 0x24
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	2300      	movs	r3, #0
 8001266:	823b      	strh	r3, [r7, #16]
	TMP_Transmit(ADRESSETEMP, Data, 2);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2202      	movs	r2, #2
 800126e:	4619      	mov	r1, r3
 8001270:	2088      	movs	r0, #136	; 0x88
 8001272:	f7ff ffd5 	bl	8001220 <TMP_Transmit>
	HAL_Delay(50);
 8001276:	2032      	movs	r0, #50	; 0x32
 8001278:	f001 f802 	bl	8002280 <HAL_Delay>
	TMP_Receive(ADRESSETEMP, Data, 6);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2206      	movs	r2, #6
 8001282:	4619      	mov	r1, r3
 8001284:	2088      	movs	r0, #136	; 0x88
 8001286:	f7ff ff9b 	bl	80011c0 <TMP_Receive>

	temperature = Data[0] * 256 + Data[1];
 800128a:	7b3b      	ldrb	r3, [r7, #12]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	7b7a      	ldrb	r2, [r7, #13]
 8001290:	4413      	add	r3, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fd9e 	bl	8000dd4 <__aeabi_i2f>
 8001298:	4603      	mov	r3, r0
 800129a:	617b      	str	r3, [r7, #20]
	temperature = -45 + (175 * temperature / 65535.0);
 800129c:	4930      	ldr	r1, [pc, #192]	; (8001360 <Temp_read+0x110>)
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7fe ff6e 	bl	8000180 <__aeabi_fmul>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f982 	bl	80005b0 <__aeabi_f2d>
 80012ac:	a32a      	add	r3, pc, #168	; (adr r3, 8001358 <Temp_read+0x108>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff faff 	bl	80008b4 <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <Temp_read+0x114>)
 80012c4:	f7ff f814 	bl	80002f0 <__aeabi_dsub>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fc76 	bl	8000bc0 <__aeabi_d2f>
 80012d4:	4603      	mov	r3, r0
 80012d6:	617b      	str	r3, [r7, #20]
	*temp=-45+175*(Data[0]<<8 | Data[1])/65535.0 ;
 80012d8:	7b3b      	ldrb	r3, [r7, #12]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	7b7a      	ldrb	r2, [r7, #13]
 80012de:	4313      	orrs	r3, r2
 80012e0:	22af      	movs	r2, #175	; 0xaf
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f950 	bl	800058c <__aeabi_i2d>
 80012ec:	a31a      	add	r3, pc, #104	; (adr r3, 8001358 <Temp_read+0x108>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff fadf 	bl	80008b4 <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <Temp_read+0x114>)
 8001304:	f7fe fff4 	bl	80002f0 <__aeabi_dsub>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fc56 	bl	8000bc0 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	601a      	str	r2, [r3, #0]
	*humidity=100*(Data[3]<<8 | Data[4])/65535.0 ;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	7c3a      	ldrb	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	2264      	movs	r2, #100	; 0x64
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f92f 	bl	800058c <__aeabi_i2d>
 800132e:	a30a      	add	r3, pc, #40	; (adr r3, 8001358 <Temp_read+0x108>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff fabe 	bl	80008b4 <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fc3e 	bl	8000bc0 <__aeabi_d2f>
 8001344:	4602      	mov	r2, r0
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	601a      	str	r2, [r3, #0]

}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	f3af 8000 	nop.w
 8001358:	00000000 	.word	0x00000000
 800135c:	40efffe0 	.word	0x40efffe0
 8001360:	432f0000 	.word	0x432f0000
 8001364:	40468000 	.word	0x40468000

08001368 <reverse>:
 */

#include "caracter.h"

void reverse(char *str, int len)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	3b01      	subs	r3, #1
 800137a:	613b      	str	r3, [r7, #16]
    while (i<j)
 800137c:	e018      	b.n	80013b0 <reverse+0x48>
    {
        temp = str[i];
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	441a      	add	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	440b      	add	r3, r1
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]
        i++; j--;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
    while (i<j)
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	dbe2      	blt.n	800137e <reverse+0x16>
    }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <intToStr>:
// fonction qui converti un entier en chaine de caractère
int intToStr(int x, char str[], int d)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
    int i = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
    while (x)
 80013d4:	e01d      	b.n	8001412 <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <intToStr+0x8c>)
 80013da:	fb83 1302 	smull	r1, r3, r3, r2
 80013de:	1099      	asrs	r1, r3, #2
 80013e0:	17d3      	asrs	r3, r2, #31
 80013e2:	1ac9      	subs	r1, r1, r3
 80013e4:	460b      	mov	r3, r1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	1ad1      	subs	r1, r2, r3
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	1c59      	adds	r1, r3, #1
 80013f4:	6179      	str	r1, [r7, #20]
 80013f6:	4619      	mov	r1, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	440b      	add	r3, r1
 80013fc:	3230      	adds	r2, #48	; 0x30
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <intToStr+0x8c>)
 8001406:	fb82 1203 	smull	r1, r2, r2, r3
 800140a:	1092      	asrs	r2, r2, #2
 800140c:	17db      	asrs	r3, r3, #31
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	60fb      	str	r3, [r7, #12]
    while (x)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1de      	bne.n	80013d6 <intToStr+0x12>
    }

    while (i < d)
 8001418:	e007      	b.n	800142a <intToStr+0x66>
        str[i++] = '0';
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	617a      	str	r2, [r7, #20]
 8001420:	461a      	mov	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	4413      	add	r3, r2
 8001426:	2230      	movs	r2, #48	; 0x30
 8001428:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	429a      	cmp	r2, r3
 8001430:	dbf3      	blt.n	800141a <intToStr+0x56>

    reverse(str, i);
 8001432:	6979      	ldr	r1, [r7, #20]
 8001434:	68b8      	ldr	r0, [r7, #8]
 8001436:	f7ff ff97 	bl	8001368 <reverse>
    str[i] = '\0';
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	4413      	add	r3, r2
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
    return i;
 8001444:	697b      	ldr	r3, [r7, #20]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	66666667 	.word	0x66666667

08001454 <ftoat>:
// fonction qui converti un réel en chaine de caractère
void ftoat(float n, char *res, int afterpoint)
{
 8001454:	b5b0      	push	{r4, r5, r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
    // on extrait avant tout la partie entiere
    int ipart = (int)n;
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f7ff fd0b 	bl	8000e7c <__aeabi_f2iz>
 8001466:	4603      	mov	r3, r0
 8001468:	61fb      	str	r3, [r7, #28]

    // on extrait maintenant la partie decimal
    float fpart = n - (float)ipart;
 800146a:	69f8      	ldr	r0, [r7, #28]
 800146c:	f7ff fcb2 	bl	8000dd4 <__aeabi_i2f>
 8001470:	4603      	mov	r3, r0
 8001472:	4619      	mov	r1, r3
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f7ff fbf7 	bl	8000c68 <__aeabi_fsub>
 800147a:	4603      	mov	r3, r0
 800147c:	61bb      	str	r3, [r7, #24]

    // on convertie la partie entiere en chaine de caractère
    int i = intToStr(ipart, res, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	69f8      	ldr	r0, [r7, #28]
 8001484:	f7ff ff9e 	bl	80013c4 <intToStr>
 8001488:	6178      	str	r0, [r7, #20]

    // afterpoint correspond au nombre de chiffre apres la virgule souhaiter
    if (afterpoint != 0)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d02c      	beq.n	80014ea <ftoat+0x96>
    {
        res[i] = '.';  // add dot
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	222e      	movs	r2, #46	; 0x2e
 8001498:	701a      	strb	r2, [r3, #0]


        fpart = fpart * pow(10, afterpoint);
 800149a:	69b8      	ldr	r0, [r7, #24]
 800149c:	f7ff f888 	bl	80005b0 <__aeabi_f2d>
 80014a0:	4604      	mov	r4, r0
 80014a2:	460d      	mov	r5, r1
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff f871 	bl	800058c <__aeabi_i2d>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	f04f 0000 	mov.w	r0, #0
 80014b2:	4910      	ldr	r1, [pc, #64]	; (80014f4 <ftoat+0xa0>)
 80014b4:	f003 fe92 	bl	80051dc <pow>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4620      	mov	r0, r4
 80014be:	4629      	mov	r1, r5
 80014c0:	f7ff f8ce 	bl	8000660 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff fb78 	bl	8000bc0 <__aeabi_d2f>
 80014d0:	4603      	mov	r3, r0
 80014d2:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80014d4:	69b8      	ldr	r0, [r7, #24]
 80014d6:	f7ff fcd1 	bl	8000e7c <__aeabi_f2iz>
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	4413      	add	r3, r2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff ff6d 	bl	80013c4 <intToStr>
    }
}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bdb0      	pop	{r4, r5, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40240000 	.word	0x40240000

080014f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <MX_GPIO_Init+0xc0>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a29      	ldr	r2, [pc, #164]	; (80015b8 <MX_GPIO_Init+0xc0>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <MX_GPIO_Init+0xc0>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <MX_GPIO_Init+0xc0>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <MX_GPIO_Init+0xc0>)
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	61d3      	str	r3, [r2, #28]
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <MX_GPIO_Init+0xc0>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <MX_GPIO_Init+0xc0>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <MX_GPIO_Init+0xc0>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	61d3      	str	r3, [r2, #28]
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MX_GPIO_Init+0xc0>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <MX_GPIO_Init+0xc0>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <MX_GPIO_Init+0xc0>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MX_GPIO_Init+0xc0>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2120      	movs	r1, #32
 8001572:	4812      	ldr	r0, [pc, #72]	; (80015bc <MX_GPIO_Init+0xc4>)
 8001574:	f001 f91a 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	480c      	ldr	r0, [pc, #48]	; (80015c0 <MX_GPIO_Init+0xc8>)
 8001590:	f000 ff7c 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001594:	2320      	movs	r3, #32
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_GPIO_Init+0xc4>)
 80015ac:	f000 ff6e 	bl	800248c <HAL_GPIO_Init>

}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020800 	.word	0x40020800

080015c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_I2C1_Init+0x50>)
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <MX_I2C1_Init+0x54>)
 80015cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_I2C1_Init+0x50>)
 80015d0:	4a12      	ldr	r2, [pc, #72]	; (800161c <MX_I2C1_Init+0x58>)
 80015d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_I2C1_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_I2C1_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_I2C1_Init+0x50>)
 80015e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <MX_I2C1_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_I2C1_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <MX_I2C1_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_I2C1_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <MX_I2C1_Init+0x50>)
 8001602:	f001 f8eb 	bl	80027dc <HAL_I2C_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800160c:	f000 faa4 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200000f4 	.word	0x200000f4
 8001618:	40005400 	.word	0x40005400
 800161c:	000186a0 	.word	0x000186a0

08001620 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a17      	ldr	r2, [pc, #92]	; (800169c <HAL_I2C_MspInit+0x7c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d128      	bne.n	8001694 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_I2C_MspInit+0x80>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <HAL_I2C_MspInit+0x80>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	61d3      	str	r3, [r2, #28]
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_I2C_MspInit+0x80>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800165a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001660:	2312      	movs	r3, #18
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166c:	2304      	movs	r3, #4
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	480b      	ldr	r0, [pc, #44]	; (80016a4 <HAL_I2C_MspInit+0x84>)
 8001678:	f000 ff08 	bl	800248c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_I2C_MspInit+0x80>)
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_I2C_MspInit+0x80>)
 8001682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001686:	6253      	str	r3, [r2, #36]	; 0x24
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_I2C_MspInit+0x80>)
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40005400 	.word	0x40005400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020400 	.word	0x40020400

080016a8 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	f043 030c 	orr.w	r3, r3, #12
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80016d4:	f107 0118 	add.w	r1, r7, #24
 80016d8:	230a      	movs	r3, #10
 80016da:	2202      	movs	r2, #2
 80016dc:	486c      	ldr	r0, [pc, #432]	; (8001890 <lcd_init+0x1e8>)
 80016de:	f002 ff50 	bl	8004582 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80016e2:	f640 230d 	movw	r3, #2573	; 0xa0d
 80016e6:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80016e8:	f107 0114 	add.w	r1, r7, #20
 80016ec:	230a      	movs	r3, #10
 80016ee:	2202      	movs	r2, #2
 80016f0:	4867      	ldr	r0, [pc, #412]	; (8001890 <lcd_init+0x1e8>)
 80016f2:	f002 ff46 	bl	8004582 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80016f6:	2364      	movs	r3, #100	; 0x64
 80016f8:	2205      	movs	r2, #5
 80016fa:	217c      	movs	r1, #124	; 0x7c
 80016fc:	69f8      	ldr	r0, [r7, #28]
 80016fe:	f001 fcd5 	bl	80030ac <HAL_I2C_IsDeviceReady>
 8001702:	4603      	mov	r3, r0
 8001704:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8001706:	f107 0113 	add.w	r1, r7, #19
 800170a:	230a      	movs	r3, #10
 800170c:	2201      	movs	r2, #1
 800170e:	4860      	ldr	r0, [pc, #384]	; (8001890 <lcd_init+0x1e8>)
 8001710:	f002 ff37 	bl	8004582 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001714:	2032      	movs	r0, #50	; 0x32
 8001716:	f000 fdb3 	bl	8002280 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 800171a:	f107 0218 	add.w	r2, r7, #24
 800171e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2302      	movs	r3, #2
 8001726:	217c      	movs	r1, #124	; 0x7c
 8001728:	69f8      	ldr	r0, [r7, #28]
 800172a:	f001 f99b 	bl	8002a64 <HAL_I2C_Master_Transmit>
 800172e:	4603      	mov	r3, r0
 8001730:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8001732:	f107 0112 	add.w	r1, r7, #18
 8001736:	230a      	movs	r3, #10
 8001738:	2201      	movs	r2, #1
 800173a:	4855      	ldr	r0, [pc, #340]	; (8001890 <lcd_init+0x1e8>)
 800173c:	f002 ff21 	bl	8004582 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001740:	2032      	movs	r0, #50	; 0x32
 8001742:	f000 fd9d 	bl	8002280 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001746:	f107 0218 	add.w	r2, r7, #24
 800174a:	f241 3388 	movw	r3, #5000	; 0x1388
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2302      	movs	r3, #2
 8001752:	217c      	movs	r1, #124	; 0x7c
 8001754:	69f8      	ldr	r0, [r7, #28]
 8001756:	f001 f985 	bl	8002a64 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800175a:	2005      	movs	r0, #5
 800175c:	f000 fd90 	bl	8002280 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001760:	f107 0218 	add.w	r2, r7, #24
 8001764:	f241 3388 	movw	r3, #5000	; 0x1388
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2302      	movs	r3, #2
 800176c:	217c      	movs	r1, #124	; 0x7c
 800176e:	69f8      	ldr	r0, [r7, #28]
 8001770:	f001 f978 	bl	8002a64 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2204      	movs	r2, #4
 8001778:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	785b      	ldrb	r3, [r3, #1]
 800177e:	f043 0308 	orr.w	r3, r3, #8
 8001782:	b2db      	uxtb	r3, r3
 8001784:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8001786:	f107 0218 	add.w	r2, r7, #24
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2302      	movs	r3, #2
 8001792:	217c      	movs	r1, #124	; 0x7c
 8001794:	69f8      	ldr	r0, [r7, #28]
 8001796:	f001 f965 	bl	8002a64 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 800179a:	2301      	movs	r3, #1
 800179c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800179e:	f107 0218 	add.w	r2, r7, #24
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2302      	movs	r3, #2
 80017aa:	217c      	movs	r1, #124	; 0x7c
 80017ac:	69f8      	ldr	r0, [r7, #28]
 80017ae:	f001 f959 	bl	8002a64 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80017b2:	2002      	movs	r0, #2
 80017b4:	f000 fd64 	bl	8002280 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2202      	movs	r2, #2
 80017bc:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	789b      	ldrb	r3, [r3, #2]
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80017ca:	f107 0218 	add.w	r2, r7, #24
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2302      	movs	r3, #2
 80017d6:	217c      	movs	r1, #124	; 0x7c
 80017d8:	69f8      	ldr	r0, [r7, #28]
 80017da:	f001 f943 	bl	8002a64 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80017de:	2300      	movs	r3, #0
 80017e0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80017e6:	f107 0210 	add.w	r2, r7, #16
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2302      	movs	r3, #2
 80017f2:	21c4      	movs	r1, #196	; 0xc4
 80017f4:	69f8      	ldr	r0, [r7, #28]
 80017f6:	f001 f935 	bl	8002a64 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80017fa:	2308      	movs	r3, #8
 80017fc:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80017fe:	23ff      	movs	r3, #255	; 0xff
 8001800:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001802:	f107 0210 	add.w	r2, r7, #16
 8001806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2302      	movs	r3, #2
 800180e:	21c4      	movs	r1, #196	; 0xc4
 8001810:	69f8      	ldr	r0, [r7, #28]
 8001812:	f001 f927 	bl	8002a64 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8001816:	2301      	movs	r3, #1
 8001818:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 800181a:	2320      	movs	r3, #32
 800181c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800181e:	f107 0210 	add.w	r2, r7, #16
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2302      	movs	r3, #2
 800182a:	21c4      	movs	r1, #196	; 0xc4
 800182c:	69f8      	ldr	r0, [r7, #28]
 800182e:	f001 f919 	bl	8002a64 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8001832:	2304      	movs	r3, #4
 8001834:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001836:	23ff      	movs	r3, #255	; 0xff
 8001838:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800183a:	f107 020c 	add.w	r2, r7, #12
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2302      	movs	r3, #2
 8001846:	21c4      	movs	r1, #196	; 0xc4
 8001848:	69f8      	ldr	r0, [r7, #28]
 800184a:	f001 f90b 	bl	8002a64 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 800184e:	2303      	movs	r3, #3
 8001850:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001852:	23ff      	movs	r3, #255	; 0xff
 8001854:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001856:	f107 020c 	add.w	r2, r7, #12
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2302      	movs	r3, #2
 8001862:	21c4      	movs	r1, #196	; 0xc4
 8001864:	69f8      	ldr	r0, [r7, #28]
 8001866:	f001 f8fd 	bl	8002a64 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 800186a:	2302      	movs	r3, #2
 800186c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800186e:	23ff      	movs	r3, #255	; 0xff
 8001870:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001872:	f107 020c 	add.w	r2, r7, #12
 8001876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2302      	movs	r3, #2
 800187e:	21c4      	movs	r1, #196	; 0xc4
 8001880:	69f8      	ldr	r0, [r7, #28]
 8001882:	f001 f8ef 	bl	8002a64 <HAL_I2C_Master_Transmit>


}
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000148 	.word	0x20000148

08001894 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af02      	add	r7, sp, #8
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80018a2:	2340      	movs	r3, #64	; 0x40
 80018a4:	733b      	strb	r3, [r7, #12]
    int i=0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80018aa:	e011      	b.n	80018d0 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80018b6:	f107 020c 	add.w	r2, r7, #12
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2302      	movs	r3, #2
 80018c2:	217c      	movs	r1, #124	; 0x7c
 80018c4:	6938      	ldr	r0, [r7, #16]
 80018c6:	f001 f8cd 	bl	8002a64 <HAL_I2C_Master_Transmit>
            i++;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1e7      	bne.n	80018ac <lcd_print+0x18>
   }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af02      	add	r7, sp, #8
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	70fb      	strb	r3, [r7, #3]
 80018f2:	4613      	mov	r3, r2
 80018f4:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80018fa:	78bb      	ldrb	r3, [r7, #2]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d104      	bne.n	800190a <lcd_position+0x24>
    {
        col = col | 0x80;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001906:	70fb      	strb	r3, [r7, #3]
 8001908:	e003      	b.n	8001912 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001910:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800191a:	f107 0208 	add.w	r2, r7, #8
 800191e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2302      	movs	r3, #2
 8001926:	217c      	movs	r1, #124	; 0x7c
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f001 f89b 	bl	8002a64 <HAL_I2C_Master_Transmit>
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af02      	add	r7, sp, #8
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
 8001942:	460b      	mov	r3, r1
 8001944:	71bb      	strb	r3, [r7, #6]
 8001946:	4613      	mov	r3, r2
 8001948:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <reglagecouleur+0x74>)
 800194c:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 800194e:	2304      	movs	r3, #4
 8001950:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8001956:	f107 0210 	add.w	r2, r7, #16
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2302      	movs	r3, #2
 8001962:	21c4      	movs	r1, #196	; 0xc4
 8001964:	6978      	ldr	r0, [r7, #20]
 8001966:	f001 f87d 	bl	8002a64 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 800196a:	2303      	movs	r3, #3
 800196c:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 800196e:	79bb      	ldrb	r3, [r7, #6]
 8001970:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8001972:	f107 020c 	add.w	r2, r7, #12
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2302      	movs	r3, #2
 800197e:	21c4      	movs	r1, #196	; 0xc4
 8001980:	6978      	ldr	r0, [r7, #20]
 8001982:	f001 f86f 	bl	8002a64 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8001986:	2302      	movs	r3, #2
 8001988:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 800198a:	797b      	ldrb	r3, [r7, #5]
 800198c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 800198e:	f107 0208 	add.w	r2, r7, #8
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2302      	movs	r3, #2
 800199a:	21c4      	movs	r1, #196	; 0xc4
 800199c:	6978      	ldr	r0, [r7, #20]
 800199e:	f001 f861 	bl	8002a64 <HAL_I2C_Master_Transmit>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200000f4 	.word	0x200000f4

080019b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b099      	sub	sp, #100	; 0x64
 80019b4:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b6:	f000 fbf4 	bl	80021a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ba:	f000 f87f 	bl	8001abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019be:	f7ff fd9b 	bl	80014f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019c2:	f000 fb5b 	bl	800207c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80019c6:	f7ff fdfd 	bl	80015c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1, &lcdData); // initialise le lcd
 80019ca:	4936      	ldr	r1, [pc, #216]	; (8001aa4 <main+0xf4>)
 80019cc:	4836      	ldr	r0, [pc, #216]	; (8001aa8 <main+0xf8>)
 80019ce:	f7ff fe6b 	bl	80016a8 <lcd_init>
  lcd_position(&hi2c1,0,0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	4834      	ldr	r0, [pc, #208]	; (8001aa8 <main+0xf8>)
 80019d8:	f7ff ff85 	bl	80018e6 <lcd_position>
  lcd_print(&hi2c1,"Temperature ");// ecris la temperature sur le lcd
 80019dc:	4933      	ldr	r1, [pc, #204]	; (8001aac <main+0xfc>)
 80019de:	4832      	ldr	r0, [pc, #200]	; (8001aa8 <main+0xf8>)
 80019e0:	f7ff ff58 	bl	8001894 <lcd_print>
  lcd_position(&hi2c1,0,1);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2100      	movs	r1, #0
 80019e8:	482f      	ldr	r0, [pc, #188]	; (8001aa8 <main+0xf8>)
 80019ea:	f7ff ff7c 	bl	80018e6 <lcd_position>
  lcd_print(&hi2c1,"Humidite: ");// ecris la temperature sur le lcd
 80019ee:	4930      	ldr	r1, [pc, #192]	; (8001ab0 <main+0x100>)
 80019f0:	482d      	ldr	r0, [pc, #180]	; (8001aa8 <main+0xf8>)
 80019f2:	f7ff ff4f 	bl	8001894 <lcd_print>
  reglagecouleur(50,50,9);
 80019f6:	2209      	movs	r2, #9
 80019f8:	2132      	movs	r1, #50	; 0x32
 80019fa:	2032      	movs	r0, #50	; 0x32
 80019fc:	f7ff ff9c 	bl	8001938 <reglagecouleur>
  /* USER CODE END 2 */

    float temp=0;
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
    float humidity=0;
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
    TMP_init(hi2c1);
 8001a0c:	4c26      	ldr	r4, [pc, #152]	; (8001aa8 <main+0xf8>)
 8001a0e:	4668      	mov	r0, sp
 8001a10:	f104 0310 	add.w	r3, r4, #16
 8001a14:	2244      	movs	r2, #68	; 0x44
 8001a16:	4619      	mov	r1, r3
 8001a18:	f002 ff9e 	bl	8004958 <memcpy>
 8001a1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a20:	f7ff fbe6 	bl	80011f0 <TMP_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  char res [10];
	  Temp_read(&temp, &humidity);
 8001a24:	f107 0210 	add.w	r2, r7, #16
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fc0e 	bl	8001250 <Temp_read>

	  ftoat (temp,res,1);
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	1d39      	adds	r1, r7, #4
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fd0a 	bl	8001454 <ftoat>
	  lcd_position(&hi2c1,12,0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	210c      	movs	r1, #12
 8001a44:	4818      	ldr	r0, [pc, #96]	; (8001aa8 <main+0xf8>)
 8001a46:	f7ff ff4e 	bl	80018e6 <lcd_position>
	  lcd_print(&hi2c1,res);
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4816      	ldr	r0, [pc, #88]	; (8001aa8 <main+0xf8>)
 8001a50:	f7ff ff20 	bl	8001894 <lcd_print>

	  ftoat (humidity,res,1);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1d39      	adds	r1, r7, #4
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fcfa 	bl	8001454 <ftoat>
	  lcd_position(&hi2c1,10,1);
 8001a60:	2201      	movs	r2, #1
 8001a62:	210a      	movs	r1, #10
 8001a64:	4810      	ldr	r0, [pc, #64]	; (8001aa8 <main+0xf8>)
 8001a66:	f7ff ff3e 	bl	80018e6 <lcd_position>
	  lcd_print(&hi2c1,res);
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <main+0xf8>)
 8001a70:	f7ff ff10 	bl	8001894 <lcd_print>


	 print("la temperature est =%f\n\r ", temp);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd9a 	bl	80005b0 <__aeabi_f2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <main+0x104>)
 8001a82:	f000 f86f 	bl	8001b64 <print>
	 print("l'humidité est =%f\n\r ", humidity);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd91 	bl	80005b0 <__aeabi_f2d>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <main+0x108>)
 8001a94:	f000 f866 	bl	8001b64 <print>
	  HAL_Delay(1000);
 8001a98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a9c:	f000 fbf0 	bl	8002280 <HAL_Delay>
  {
 8001aa0:	e7c0      	b.n	8001a24 <main+0x74>
 8001aa2:	bf00      	nop
 8001aa4:	20000090 	.word	0x20000090
 8001aa8:	200000f4 	.word	0x200000f4
 8001aac:	08006118 	.word	0x08006118
 8001ab0:	08006128 	.word	0x08006128
 8001ab4:	08006134 	.word	0x08006134
 8001ab8:	08006150 	.word	0x08006150

08001abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b092      	sub	sp, #72	; 0x48
 8001ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	2234      	movs	r2, #52	; 0x34
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 ff52 	bl	8004974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <SystemClock_Config+0x98>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001ae6:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <SystemClock_Config+0x98>)
 8001ae8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aec:	6013      	str	r3, [r2, #0]
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aee:	2302      	movs	r3, #2
 8001af0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af2:	2301      	movs	r3, #1
 8001af4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af6:	2310      	movs	r3, #16
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afa:	2302      	movs	r3, #2
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001afe:	2300      	movs	r3, #0
 8001b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001b08:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001b0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4618      	mov	r0, r3
 8001b14:	f001 ff24 	bl	8003960 <HAL_RCC_OscConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b1e:	f000 f81b 	bl	8001b58 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b22:	230f      	movs	r3, #15
 8001b24:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b26:	2303      	movs	r3, #3
 8001b28:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b36:	463b      	mov	r3, r7
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 fa40 	bl	8003fc0 <HAL_RCC_ClockConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b46:	f000 f807 	bl	8001b58 <Error_Handler>
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	3748      	adds	r7, #72	; 0x48
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40007000 	.word	0x40007000

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <print>:
void uart_begin(UART_HandleTypeDef huart)
{
	huart1 = huart;
}
void print(char *str, ...)
{
 8001b64:	b40f      	push	{r0, r1, r2, r3}
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b090      	sub	sp, #64	; 0x40
 8001b6a:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t len = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	87bb      	strh	r3, [r7, #60]	; 0x3c
	char caractere;



	va_list liste;
	va_start(liste, str);
 8001b74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b78:	607b      	str	r3, [r7, #4]
	i = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	while(str[i] != '\0')
 8001b7e:	e195      	b.n	8001eac <print+0x348>
	{
		if(str[i] == '%')
 8001b80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b25      	cmp	r3, #37	; 0x25
 8001b8a:	f040 8185 	bne.w	8001e98 <print+0x334>
		{
			len = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	87bb      	strh	r3, [r7, #60]	; 0x3c
			i++;
 8001b92:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001b94:	3301      	adds	r3, #1
 8001b96:	87fb      	strh	r3, [r7, #62]	; 0x3e
			switch(str[i])
 8001b98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	3b43      	subs	r3, #67	; 0x43
 8001ba2:	2b35      	cmp	r3, #53	; 0x35
 8001ba4:	f200 8162 	bhi.w	8001e6c <print+0x308>
 8001ba8:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <print+0x4c>)
 8001baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bae:	bf00      	nop
 8001bb0:	08001e17 	.word	0x08001e17
 8001bb4:	08001c89 	.word	0x08001c89
 8001bb8:	08001e6d 	.word	0x08001e6d
 8001bbc:	08001e35 	.word	0x08001e35
 8001bc0:	08001e6d 	.word	0x08001e6d
 8001bc4:	08001e6d 	.word	0x08001e6d
 8001bc8:	08001e6d 	.word	0x08001e6d
 8001bcc:	08001e6d 	.word	0x08001e6d
 8001bd0:	08001e6d 	.word	0x08001e6d
 8001bd4:	08001cc5 	.word	0x08001cc5
 8001bd8:	08001e6d 	.word	0x08001e6d
 8001bdc:	08001e6d 	.word	0x08001e6d
 8001be0:	08001e6d 	.word	0x08001e6d
 8001be4:	08001e6d 	.word	0x08001e6d
 8001be8:	08001e6d 	.word	0x08001e6d
 8001bec:	08001e6d 	.word	0x08001e6d
 8001bf0:	08001e6d 	.word	0x08001e6d
 8001bf4:	08001e6d 	.word	0x08001e6d
 8001bf8:	08001ca7 	.word	0x08001ca7
 8001bfc:	08001e6d 	.word	0x08001e6d
 8001c00:	08001e6d 	.word	0x08001e6d
 8001c04:	08001df9 	.word	0x08001df9
 8001c08:	08001e6d 	.word	0x08001e6d
 8001c0c:	08001e6d 	.word	0x08001e6d
 8001c10:	08001e6d 	.word	0x08001e6d
 8001c14:	08001e6d 	.word	0x08001e6d
 8001c18:	08001e6d 	.word	0x08001e6d
 8001c1c:	08001e6d 	.word	0x08001e6d
 8001c20:	08001e6d 	.word	0x08001e6d
 8001c24:	08001e6d 	.word	0x08001e6d
 8001c28:	08001e6d 	.word	0x08001e6d
 8001c2c:	08001e6d 	.word	0x08001e6d
 8001c30:	08001e17 	.word	0x08001e17
 8001c34:	08001c89 	.word	0x08001c89
 8001c38:	08001e6d 	.word	0x08001e6d
 8001c3c:	08001e35 	.word	0x08001e35
 8001c40:	08001e6d 	.word	0x08001e6d
 8001c44:	08001e6d 	.word	0x08001e6d
 8001c48:	08001e6d 	.word	0x08001e6d
 8001c4c:	08001e6d 	.word	0x08001e6d
 8001c50:	08001e6d 	.word	0x08001e6d
 8001c54:	08001cc5 	.word	0x08001cc5
 8001c58:	08001e6d 	.word	0x08001e6d
 8001c5c:	08001e6d 	.word	0x08001e6d
 8001c60:	08001e6d 	.word	0x08001e6d
 8001c64:	08001e6d 	.word	0x08001e6d
 8001c68:	08001e6d 	.word	0x08001e6d
 8001c6c:	08001e6d 	.word	0x08001e6d
 8001c70:	08001e6d 	.word	0x08001e6d
 8001c74:	08001e6d 	.word	0x08001e6d
 8001c78:	08001ca7 	.word	0x08001ca7
 8001c7c:	08001e6d 	.word	0x08001e6d
 8001c80:	08001e6d 	.word	0x08001e6d
 8001c84:	08001df9 	.word	0x08001df9
			{
				case 'D'	:
				case 'd'	:	
								entier = va_arg(liste, int);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	1d1a      	adds	r2, r3, #4
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	623b      	str	r3, [r7, #32]
								len = sprintf((char *)str_var, "%d", entier);
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	6a3a      	ldr	r2, [r7, #32]
 8001c98:	498c      	ldr	r1, [pc, #560]	; (8001ecc <print+0x368>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 fe72 	bl	8004984 <siprintf>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	87bb      	strh	r3, [r7, #60]	; 0x3c
								break;
 8001ca4:	e0e5      	b.n	8001e72 <print+0x30e>
				case 'U'	:
				case 'u'	:	
								u_entier = va_arg(liste, unsigned int);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	1d1a      	adds	r2, r3, #4
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	63bb      	str	r3, [r7, #56]	; 0x38
								len = sprintf((char *)str_var, "%u", u_entier);
 8001cb0:	f107 0308 	add.w	r3, r7, #8
 8001cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cb6:	4986      	ldr	r1, [pc, #536]	; (8001ed0 <print+0x36c>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f002 fe63 	bl	8004984 <siprintf>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	87bb      	strh	r3, [r7, #60]	; 0x3c
								break;
 8001cc2:	e0d6      	b.n	8001e72 <print+0x30e>
				case 'L'	:
				case 'l'	:	i++;
 8001cc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
								switch(str[i++])
 8001cca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	87fa      	strh	r2, [r7, #62]	; 0x3e
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cd4:	4413      	add	r3, r2
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b46      	cmp	r3, #70	; 0x46
 8001cda:	d066      	beq.n	8001daa <print+0x246>
 8001cdc:	2b46      	cmp	r3, #70	; 0x46
 8001cde:	f2c0 8088 	blt.w	8001df2 <print+0x28e>
 8001ce2:	2b78      	cmp	r3, #120	; 0x78
 8001ce4:	f300 8085 	bgt.w	8001df2 <print+0x28e>
 8001ce8:	2b55      	cmp	r3, #85	; 0x55
 8001cea:	f2c0 8082 	blt.w	8001df2 <print+0x28e>
 8001cee:	3b55      	subs	r3, #85	; 0x55
 8001cf0:	2b23      	cmp	r3, #35	; 0x23
 8001cf2:	d87e      	bhi.n	8001df2 <print+0x28e>
 8001cf4:	a201      	add	r2, pc, #4	; (adr r2, 8001cfc <print+0x198>)
 8001cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfa:	bf00      	nop
 8001cfc:	08001d8d 	.word	0x08001d8d
 8001d00:	08001df3 	.word	0x08001df3
 8001d04:	08001df3 	.word	0x08001df3
 8001d08:	08001dd5 	.word	0x08001dd5
 8001d0c:	08001df3 	.word	0x08001df3
 8001d10:	08001df3 	.word	0x08001df3
 8001d14:	08001df3 	.word	0x08001df3
 8001d18:	08001df3 	.word	0x08001df3
 8001d1c:	08001df3 	.word	0x08001df3
 8001d20:	08001df3 	.word	0x08001df3
 8001d24:	08001df3 	.word	0x08001df3
 8001d28:	08001df3 	.word	0x08001df3
 8001d2c:	08001df3 	.word	0x08001df3
 8001d30:	08001df3 	.word	0x08001df3
 8001d34:	08001df3 	.word	0x08001df3
 8001d38:	08001df3 	.word	0x08001df3
 8001d3c:	08001df3 	.word	0x08001df3
 8001d40:	08001dab 	.word	0x08001dab
 8001d44:	08001df3 	.word	0x08001df3
 8001d48:	08001df3 	.word	0x08001df3
 8001d4c:	08001df3 	.word	0x08001df3
 8001d50:	08001df3 	.word	0x08001df3
 8001d54:	08001df3 	.word	0x08001df3
 8001d58:	08001df3 	.word	0x08001df3
 8001d5c:	08001df3 	.word	0x08001df3
 8001d60:	08001df3 	.word	0x08001df3
 8001d64:	08001df3 	.word	0x08001df3
 8001d68:	08001df3 	.word	0x08001df3
 8001d6c:	08001df3 	.word	0x08001df3
 8001d70:	08001df3 	.word	0x08001df3
 8001d74:	08001df3 	.word	0x08001df3
 8001d78:	08001df3 	.word	0x08001df3
 8001d7c:	08001d8d 	.word	0x08001d8d
 8001d80:	08001df3 	.word	0x08001df3
 8001d84:	08001df3 	.word	0x08001df3
 8001d88:	08001dd5 	.word	0x08001dd5
								{
									case 'U'	:
									case 'u'	:	
													long_u = va_arg(liste, unsigned long);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	1d1a      	adds	r2, r3, #4
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
													len = sprintf((char *)str_var, "%lu", long_u);
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d9c:	494d      	ldr	r1, [pc, #308]	; (8001ed4 <print+0x370>)
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 fdf0 	bl	8004984 <siprintf>
 8001da4:	4603      	mov	r3, r0
 8001da6:	87bb      	strh	r3, [r7, #60]	; 0x3c
													break;
 8001da8:	e026      	b.n	8001df8 <print+0x294>
									case 'F'	:
									case 'f'	:	
													reel = va_arg(liste, double);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3307      	adds	r3, #7
 8001dae:	f023 0307 	bic.w	r3, r3, #7
 8001db2:	f103 0208 	add.w	r2, r3, #8
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
													len = sprintf((char *)str_var, "%f", reel);
 8001dc0:	f107 0008 	add.w	r0, r7, #8
 8001dc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dc8:	4943      	ldr	r1, [pc, #268]	; (8001ed8 <print+0x374>)
 8001dca:	f002 fddb 	bl	8004984 <siprintf>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
													break;
 8001dd2:	e011      	b.n	8001df8 <print+0x294>
									case 'x'	:	
									case 'X'	:	
													long_u = va_arg(liste, unsigned long);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	1d1a      	adds	r2, r3, #4
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
													len = sprintf((char *)str_var, "%lX", long_u);
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001de4:	493d      	ldr	r1, [pc, #244]	; (8001edc <print+0x378>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 fdcc 	bl	8004984 <siprintf>
 8001dec:	4603      	mov	r3, r0
 8001dee:	87bb      	strh	r3, [r7, #60]	; 0x3c
													break;
 8001df0:	e002      	b.n	8001df8 <print+0x294>
									default		: 	i--;
 8001df2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001df4:	3b01      	subs	r3, #1
 8001df6:	87fb      	strh	r3, [r7, #62]	; 0x3e
								}
				case 'x'	:
				case 'X'	:	
								u_entier = va_arg(liste, unsigned int);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1d1a      	adds	r2, r3, #4
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	63bb      	str	r3, [r7, #56]	; 0x38
								len = sprintf((char *)str_var, "%X", u_entier);
 8001e02:	f107 0308 	add.w	r3, r7, #8
 8001e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e08:	4935      	ldr	r1, [pc, #212]	; (8001ee0 <print+0x37c>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fdba 	bl	8004984 <siprintf>
 8001e10:	4603      	mov	r3, r0
 8001e12:	87bb      	strh	r3, [r7, #60]	; 0x3c
								break;
 8001e14:	e02d      	b.n	8001e72 <print+0x30e>
				case 'c'	:
				case 'C'	:	
								caractere = va_arg(liste, int);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	1d1a      	adds	r2, r3, #4
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	77fb      	strb	r3, [r7, #31]
								len = sprintf((char *)str_var, "%c", caractere);
 8001e20:	7ffa      	ldrb	r2, [r7, #31]
 8001e22:	f107 0308 	add.w	r3, r7, #8
 8001e26:	492f      	ldr	r1, [pc, #188]	; (8001ee4 <print+0x380>)
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fdab 	bl	8004984 <siprintf>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	87bb      	strh	r3, [r7, #60]	; 0x3c
								break;
 8001e32:	e01e      	b.n	8001e72 <print+0x30e>
				case 'f'	:
				case 'F'	:	floatant = va_arg(liste, double);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3307      	adds	r3, #7
 8001e38:	f023 0307 	bic.w	r3, r3, #7
 8001e3c:	f103 0208 	add.w	r2, r3, #8
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe feb9 	bl	8000bc0 <__aeabi_d2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
								len = sprintf((char *)str_var, "%f", floatant);
 8001e52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e54:	f7fe fbac 	bl	80005b0 <__aeabi_f2d>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	f107 0008 	add.w	r0, r7, #8
 8001e60:	491d      	ldr	r1, [pc, #116]	; (8001ed8 <print+0x374>)
 8001e62:	f002 fd8f 	bl	8004984 <siprintf>
 8001e66:	4603      	mov	r3, r0
 8001e68:	87bb      	strh	r3, [r7, #60]	; 0x3c
								break;
 8001e6a:	e002      	b.n	8001e72 <print+0x30e>
				default		:	i--;
 8001e6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	87fb      	strh	r3, [r7, #62]	; 0x3e
			}
			if(len != 0)
 8001e72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <print+0x324>
				print_str(str_var, len);
 8001e78:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f84b 	bl	8001f1c <print_str>
 8001e86:	e00e      	b.n	8001ea6 <print+0x342>
			else
				print_char((unsigned char)str[i]);
 8001e88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001e8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 f829 	bl	8001ee8 <print_char>
 8001e96:	e006      	b.n	8001ea6 <print+0x342>
		}
		else
		{
			print_char((unsigned char)str[i]);
 8001e98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001e9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f821 	bl	8001ee8 <print_char>
		}
		i++;
 8001ea6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	87fb      	strh	r3, [r7, #62]	; 0x3e
	while(str[i] != '\0')
 8001eac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f47f ae63 	bne.w	8001b80 <print+0x1c>
	}
	va_end(liste);
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	3740      	adds	r7, #64	; 0x40
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ec6:	b004      	add	sp, #16
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	08006168 	.word	0x08006168
 8001ed0:	0800616c 	.word	0x0800616c
 8001ed4:	08006170 	.word	0x08006170
 8001ed8:	08006174 	.word	0x08006174
 8001edc:	08006178 	.word	0x08006178
 8001ee0:	0800617c 	.word	0x0800617c
 8001ee4:	08006180 	.word	0x08006180

08001ee8 <print_char>:
char print_char(uint8_t c)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_StatusUart;
	HAL_StatusUart = HAL_UART_Transmit(&huart2, &c, 1, TIMEOUT);
 8001ef2:	1df9      	adds	r1, r7, #7
 8001ef4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <print_char+0x30>)
 8001efc:	f002 fb41 	bl	8004582 <HAL_UART_Transmit>
 8001f00:	4603      	mov	r3, r0
 8001f02:	73fb      	strb	r3, [r7, #15]
	if(HAL_StatusUart != HAL_OK)
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <print_char+0x26>
		return -1;
 8001f0a:	23ff      	movs	r3, #255	; 0xff
 8001f0c:	e000      	b.n	8001f10 <print_char+0x28>
	else
		return 0;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000148 	.word	0x20000148

08001f1c <print_str>:
char print_str(uint8_t *str, uint16_t len)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef HAL_StatusUart;
	HAL_StatusUart = HAL_UART_Transmit(&huart2, str, len, TIMEOUT);
 8001f28:	887a      	ldrh	r2, [r7, #2]
 8001f2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4807      	ldr	r0, [pc, #28]	; (8001f50 <print_str+0x34>)
 8001f32:	f002 fb26 	bl	8004582 <HAL_UART_Transmit>
 8001f36:	4603      	mov	r3, r0
 8001f38:	73fb      	strb	r3, [r7, #15]
	if(HAL_StatusUart != HAL_OK)
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <print_str+0x28>
		return -1;
 8001f40:	23ff      	movs	r3, #255	; 0xff
 8001f42:	e000      	b.n	8001f46 <print_str+0x2a>
	else
		return 0;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000148 	.word	0x20000148

08001f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f64:	6253      	str	r3, [r2, #36]	; 0x24
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6213      	str	r3, [r2, #32]
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f94:	6253      	str	r3, [r2, #36]	; 0x24
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fa2:	2007      	movs	r0, #7
 8001fa4:	f000 fa3e 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <NMI_Handler+0x4>

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ffa:	f000 f925 	bl	8002248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <_sbrk+0x5c>)
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <_sbrk+0x60>)
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <_sbrk+0x64>)
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <_sbrk+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d207      	bcs.n	8002044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002034:	f002 fc66 	bl	8004904 <__errno>
 8002038:	4603      	mov	r3, r0
 800203a:	220c      	movs	r2, #12
 800203c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e009      	b.n	8002058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <_sbrk+0x64>)
 8002054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20014000 	.word	0x20014000
 8002064:	00000400 	.word	0x00000400
 8002068:	20000094 	.word	0x20000094
 800206c:	200001a0 	.word	0x200001a0

08002070 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <MX_USART2_UART_Init+0x50>)
 8002084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 8002088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800208c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 80020a2:	220c      	movs	r2, #12
 80020a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 80020b4:	f002 fa18 	bl	80044e8 <HAL_UART_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020be:	f7ff fd4b 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000148 	.word	0x20000148
 80020cc:	40004400 	.word	0x40004400

080020d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a17      	ldr	r2, [pc, #92]	; (800214c <HAL_UART_MspInit+0x7c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d127      	bne.n	8002142 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_UART_MspInit+0x80>)
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	4a16      	ldr	r2, [pc, #88]	; (8002150 <HAL_UART_MspInit+0x80>)
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fc:	6253      	str	r3, [r2, #36]	; 0x24
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_UART_MspInit+0x80>)
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_UART_MspInit+0x80>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <HAL_UART_MspInit+0x80>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	61d3      	str	r3, [r2, #28]
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_UART_MspInit+0x80>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002122:	230c      	movs	r3, #12
 8002124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002132:	2307      	movs	r3, #7
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4805      	ldr	r0, [pc, #20]	; (8002154 <HAL_UART_MspInit+0x84>)
 800213e:	f000 f9a5 	bl	800248c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	; 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40004400 	.word	0x40004400
 8002150:	40023800 	.word	0x40023800
 8002154:	40020000 	.word	0x40020000

08002158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800215a:	490d      	ldr	r1, [pc, #52]	; (8002190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002160:	e002      	b.n	8002168 <LoopCopyDataInit>

08002162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002166:	3304      	adds	r3, #4

08002168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800216c:	d3f9      	bcc.n	8002162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002170:	4c0a      	ldr	r4, [pc, #40]	; (800219c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002174:	e001      	b.n	800217a <LoopFillZerobss>

08002176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002178:	3204      	adds	r2, #4

0800217a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800217c:	d3fb      	bcc.n	8002176 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800217e:	f7ff ff77 	bl	8002070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002182:	f002 fbc5 	bl	8004910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002186:	f7ff fc13 	bl	80019b0 <main>
  bx lr
 800218a:	4770      	bx	lr
  ldr r0, =_sdata
 800218c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002190:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002194:	08006230 	.word	0x08006230
  ldr r2, =_sbss
 8002198:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800219c:	200001a0 	.word	0x200001a0

080021a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC1_IRQHandler>

080021a2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ac:	2003      	movs	r0, #3
 80021ae:	f000 f939 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021b2:	2000      	movs	r0, #0
 80021b4:	f000 f80e 	bl	80021d4 <HAL_InitTick>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	71fb      	strb	r3, [r7, #7]
 80021c2:	e001      	b.n	80021c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021c4:	f7ff fec6 	bl	8001f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021c8:	79fb      	ldrb	r3, [r7, #7]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021e0:	4b16      	ldr	r3, [pc, #88]	; (800223c <HAL_InitTick+0x68>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d022      	beq.n	800222e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_InitTick+0x6c>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_InitTick+0x68>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f938 	bl	8002472 <HAL_SYSTICK_Config>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10f      	bne.n	8002228 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b0f      	cmp	r3, #15
 800220c:	d809      	bhi.n	8002222 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800220e:	2200      	movs	r2, #0
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	f04f 30ff 	mov.w	r0, #4294967295
 8002216:	f000 f910 	bl	800243a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <HAL_InitTick+0x70>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	e007      	b.n	8002232 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e004      	b.n	8002232 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	e001      	b.n	8002232 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002232:	7bfb      	ldrb	r3, [r7, #15]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000008 	.word	0x20000008
 8002240:	20000000 	.word	0x20000000
 8002244:	20000004 	.word	0x20000004

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_IncTick+0x1c>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_IncTick+0x20>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4413      	add	r3, r2
 8002256:	4a03      	ldr	r2, [pc, #12]	; (8002264 <HAL_IncTick+0x1c>)
 8002258:	6013      	str	r3, [r2, #0]
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	2000018c 	.word	0x2000018c
 8002268:	20000008 	.word	0x20000008

0800226c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <HAL_GetTick+0x10>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	2000018c 	.word	0x2000018c

08002280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff fff0 	bl	800226c <HAL_GetTick>
 800228c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d004      	beq.n	80022a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_Delay+0x40>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4413      	add	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022a4:	bf00      	nop
 80022a6:	f7ff ffe1 	bl	800226c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d8f7      	bhi.n	80022a6 <HAL_Delay+0x26>
  {
  }
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000008 	.word	0x20000008

080022c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	; (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	; (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	; (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf28      	it	cs
 800239a:	2304      	movcs	r3, #4
 800239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d902      	bls.n	80023ac <NVIC_EncodePriority+0x30>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3b03      	subs	r3, #3
 80023aa:	e000      	b.n	80023ae <NVIC_EncodePriority+0x32>
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	4313      	orrs	r3, r2
         );
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f7ff ff90 	bl	8002328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff49 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff5e 	bl	800230c <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff90 	bl	800237c <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5f 	bl	8002328 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffb0 	bl	80023e0 <SysTick_Config>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80024a2:	e160      	b.n	8002766 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8152 	beq.w	8002760 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d005      	beq.n	80024d4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d130      	bne.n	8002536 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800250a:	2201      	movs	r2, #1
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f003 0201 	and.w	r2, r3, #1
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b03      	cmp	r3, #3
 8002540:	d017      	beq.n	8002572 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d123      	bne.n	80025c6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	08da      	lsrs	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3208      	adds	r2, #8
 80025c0:	6939      	ldr	r1, [r7, #16]
 80025c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0203 	and.w	r2, r3, #3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80ac 	beq.w	8002760 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_GPIO_Init+0x2f8>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a5d      	ldr	r2, [pc, #372]	; (8002784 <HAL_GPIO_Init+0x2f8>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	4b5b      	ldr	r3, [pc, #364]	; (8002784 <HAL_GPIO_Init+0x2f8>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002620:	4a59      	ldr	r2, [pc, #356]	; (8002788 <HAL_GPIO_Init+0x2fc>)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	3302      	adds	r3, #2
 8002628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	220f      	movs	r2, #15
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a51      	ldr	r2, [pc, #324]	; (800278c <HAL_GPIO_Init+0x300>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d025      	beq.n	8002698 <HAL_GPIO_Init+0x20c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a50      	ldr	r2, [pc, #320]	; (8002790 <HAL_GPIO_Init+0x304>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d01f      	beq.n	8002694 <HAL_GPIO_Init+0x208>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a4f      	ldr	r2, [pc, #316]	; (8002794 <HAL_GPIO_Init+0x308>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d019      	beq.n	8002690 <HAL_GPIO_Init+0x204>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_GPIO_Init+0x30c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d013      	beq.n	800268c <HAL_GPIO_Init+0x200>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a4d      	ldr	r2, [pc, #308]	; (800279c <HAL_GPIO_Init+0x310>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00d      	beq.n	8002688 <HAL_GPIO_Init+0x1fc>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_GPIO_Init+0x314>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d007      	beq.n	8002684 <HAL_GPIO_Init+0x1f8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a4b      	ldr	r2, [pc, #300]	; (80027a4 <HAL_GPIO_Init+0x318>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_GPIO_Init+0x1f4>
 800267c:	2306      	movs	r3, #6
 800267e:	e00c      	b.n	800269a <HAL_GPIO_Init+0x20e>
 8002680:	2307      	movs	r3, #7
 8002682:	e00a      	b.n	800269a <HAL_GPIO_Init+0x20e>
 8002684:	2305      	movs	r3, #5
 8002686:	e008      	b.n	800269a <HAL_GPIO_Init+0x20e>
 8002688:	2304      	movs	r3, #4
 800268a:	e006      	b.n	800269a <HAL_GPIO_Init+0x20e>
 800268c:	2303      	movs	r3, #3
 800268e:	e004      	b.n	800269a <HAL_GPIO_Init+0x20e>
 8002690:	2302      	movs	r3, #2
 8002692:	e002      	b.n	800269a <HAL_GPIO_Init+0x20e>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_GPIO_Init+0x20e>
 8002698:	2300      	movs	r3, #0
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	f002 0203 	and.w	r2, r2, #3
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	4093      	lsls	r3, r2
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026aa:	4937      	ldr	r1, [pc, #220]	; (8002788 <HAL_GPIO_Init+0x2fc>)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b8:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <HAL_GPIO_Init+0x31c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026dc:	4a32      	ldr	r2, [pc, #200]	; (80027a8 <HAL_GPIO_Init+0x31c>)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026e2:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <HAL_GPIO_Init+0x31c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002706:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <HAL_GPIO_Init+0x31c>)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800270c:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <HAL_GPIO_Init+0x31c>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	43db      	mvns	r3, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <HAL_GPIO_Init+0x31c>)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002736:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <HAL_GPIO_Init+0x31c>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	43db      	mvns	r3, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800275a:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <HAL_GPIO_Init+0x31c>)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3301      	adds	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	f47f ae97 	bne.w	80024a4 <HAL_GPIO_Init+0x18>
  }
}
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	40010000 	.word	0x40010000
 800278c:	40020000 	.word	0x40020000
 8002790:	40020400 	.word	0x40020400
 8002794:	40020800 	.word	0x40020800
 8002798:	40020c00 	.word	0x40020c00
 800279c:	40021000 	.word	0x40021000
 80027a0:	40021400 	.word	0x40021400
 80027a4:	40021800 	.word	0x40021800
 80027a8:	40010400 	.word	0x40010400

080027ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
 80027b8:	4613      	mov	r3, r2
 80027ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027bc:	787b      	ldrb	r3, [r7, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80027c8:	e003      	b.n	80027d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	041a      	lsls	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e12b      	b.n	8002a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe ff0c 	bl	8001620 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	; 0x24
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800282e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800283e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002840:	f001 fdca 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8002844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4a81      	ldr	r2, [pc, #516]	; (8002a50 <HAL_I2C_Init+0x274>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d807      	bhi.n	8002860 <HAL_I2C_Init+0x84>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4a80      	ldr	r2, [pc, #512]	; (8002a54 <HAL_I2C_Init+0x278>)
 8002854:	4293      	cmp	r3, r2
 8002856:	bf94      	ite	ls
 8002858:	2301      	movls	r3, #1
 800285a:	2300      	movhi	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e006      	b.n	800286e <HAL_I2C_Init+0x92>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4a7d      	ldr	r2, [pc, #500]	; (8002a58 <HAL_I2C_Init+0x27c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	bf94      	ite	ls
 8002868:	2301      	movls	r3, #1
 800286a:	2300      	movhi	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0e7      	b.n	8002a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4a78      	ldr	r2, [pc, #480]	; (8002a5c <HAL_I2C_Init+0x280>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0c9b      	lsrs	r3, r3, #18
 8002880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a6a      	ldr	r2, [pc, #424]	; (8002a50 <HAL_I2C_Init+0x274>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d802      	bhi.n	80028b0 <HAL_I2C_Init+0xd4>
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3301      	adds	r3, #1
 80028ae:	e009      	b.n	80028c4 <HAL_I2C_Init+0xe8>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	4a69      	ldr	r2, [pc, #420]	; (8002a60 <HAL_I2C_Init+0x284>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	3301      	adds	r3, #1
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	495c      	ldr	r1, [pc, #368]	; (8002a50 <HAL_I2C_Init+0x274>)
 80028e0:	428b      	cmp	r3, r1
 80028e2:	d819      	bhi.n	8002918 <HAL_I2C_Init+0x13c>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1e59      	subs	r1, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f2:	1c59      	adds	r1, r3, #1
 80028f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028f8:	400b      	ands	r3, r1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_I2C_Init+0x138>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1e59      	subs	r1, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fbb1 f3f3 	udiv	r3, r1, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002912:	e051      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002914:	2304      	movs	r3, #4
 8002916:	e04f      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d111      	bne.n	8002944 <HAL_I2C_Init+0x168>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	440b      	add	r3, r1
 800292e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002932:	3301      	adds	r3, #1
 8002934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e012      	b.n	800296a <HAL_I2C_Init+0x18e>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1e58      	subs	r0, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	0099      	lsls	r1, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	fbb0 f3f3 	udiv	r3, r0, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Init+0x196>
 800296e:	2301      	movs	r3, #1
 8002970:	e022      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10e      	bne.n	8002998 <HAL_I2C_Init+0x1bc>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1e58      	subs	r0, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	440b      	add	r3, r1
 8002988:	fbb0 f3f3 	udiv	r3, r0, r3
 800298c:	3301      	adds	r3, #1
 800298e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002996:	e00f      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1e58      	subs	r0, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	0099      	lsls	r1, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	6809      	ldr	r1, [r1, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6911      	ldr	r1, [r2, #16]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68d2      	ldr	r2, [r2, #12]
 80029f2:	4311      	orrs	r1, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	000186a0 	.word	0x000186a0
 8002a54:	001e847f 	.word	0x001e847f
 8002a58:	003d08ff 	.word	0x003d08ff
 8002a5c:	431bde83 	.word	0x431bde83
 8002a60:	10624dd3 	.word	0x10624dd3

08002a64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	460b      	mov	r3, r1
 8002a72:	817b      	strh	r3, [r7, #10]
 8002a74:	4613      	mov	r3, r2
 8002a76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff fbf8 	bl	800226c <HAL_GetTick>
 8002a7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	f040 80e0 	bne.w	8002c4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2319      	movs	r3, #25
 8002a92:	2201      	movs	r2, #1
 8002a94:	4970      	ldr	r1, [pc, #448]	; (8002c58 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fd86 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0d3      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_I2C_Master_Transmit+0x50>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e0cc      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d007      	beq.n	8002ada <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2221      	movs	r2, #33	; 0x21
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2210      	movs	r2, #16
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	893a      	ldrh	r2, [r7, #8]
 8002b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a50      	ldr	r2, [pc, #320]	; (8002c5c <HAL_I2C_Master_Transmit+0x1f8>)
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b1c:	8979      	ldrh	r1, [r7, #10]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	6a3a      	ldr	r2, [r7, #32]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fbf0 	bl	8003308 <I2C_MasterRequestWrite>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e08d      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b48:	e066      	b.n	8002c18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	6a39      	ldr	r1, [r7, #32]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fe00 	bl	8003754 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00d      	beq.n	8002b76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d107      	bne.n	8002b72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e06b      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	781a      	ldrb	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d11b      	bne.n	8002bec <HAL_I2C_Master_Transmit+0x188>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d017      	beq.n	8002bec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	6a39      	ldr	r1, [r7, #32]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fdf0 	bl	80037d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d107      	bne.n	8002c14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e01a      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d194      	bne.n	8002b4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e000      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	00100002 	.word	0x00100002
 8002c5c:	ffff0000 	.word	0xffff0000

08002c60 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08c      	sub	sp, #48	; 0x30
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	817b      	strh	r3, [r7, #10]
 8002c70:	4613      	mov	r3, r2
 8002c72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff fafa 	bl	800226c <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	f040 820b 	bne.w	800309e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2319      	movs	r3, #25
 8002c8e:	2201      	movs	r2, #1
 8002c90:	497c      	ldr	r1, [pc, #496]	; (8002e84 <HAL_I2C_Master_Receive+0x224>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fc88 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e1fe      	b.n	80030a0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_I2C_Master_Receive+0x50>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e1f7      	b.n	80030a0 <HAL_I2C_Master_Receive+0x440>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d007      	beq.n	8002cd6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2222      	movs	r2, #34	; 0x22
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	893a      	ldrh	r2, [r7, #8]
 8002d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a5c      	ldr	r2, [pc, #368]	; (8002e88 <HAL_I2C_Master_Receive+0x228>)
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fb74 	bl	800340c <I2C_MasterRequestRead>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e1b8      	b.n	80030a0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d113      	bne.n	8002d5e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	623b      	str	r3, [r7, #32]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	623b      	str	r3, [r7, #32]
 8002d4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e18c      	b.n	8003078 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d11b      	bne.n	8002d9e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e16c      	b.n	8003078 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d11b      	bne.n	8002dde <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	e14c      	b.n	8003078 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e04:	e138      	b.n	8003078 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	f200 80f1 	bhi.w	8002ff2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d123      	bne.n	8002e60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fd1b 	bl	8003858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e139      	b.n	80030a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e5e:	e10b      	b.n	8003078 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d14e      	bne.n	8002f06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	2200      	movs	r2, #0
 8002e70:	4906      	ldr	r1, [pc, #24]	; (8002e8c <HAL_I2C_Master_Receive+0x22c>)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fb98 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e10e      	b.n	80030a0 <HAL_I2C_Master_Receive+0x440>
 8002e82:	bf00      	nop
 8002e84:	00100002 	.word	0x00100002
 8002e88:	ffff0000 	.word	0xffff0000
 8002e8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f04:	e0b8      	b.n	8003078 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	4966      	ldr	r1, [pc, #408]	; (80030a8 <HAL_I2C_Master_Receive+0x448>)
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 fb49 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0bf      	b.n	80030a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	2200      	movs	r2, #0
 8002f6a:	494f      	ldr	r1, [pc, #316]	; (80030a8 <HAL_I2C_Master_Receive+0x448>)
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 fb1b 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e091      	b.n	80030a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ff0:	e042      	b.n	8003078 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fc2e 	bl	8003858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e04c      	b.n	80030a0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d118      	bne.n	8003078 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	f47f aec2 	bne.w	8002e06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	e000      	b.n	80030a0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800309e:	2302      	movs	r3, #2
  }
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3728      	adds	r7, #40	; 0x28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	00010004 	.word	0x00010004

080030ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	460b      	mov	r3, r1
 80030ba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80030bc:	f7ff f8d6 	bl	800226c <HAL_GetTick>
 80030c0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80030c2:	2301      	movs	r3, #1
 80030c4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	f040 8111 	bne.w	80032f6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2319      	movs	r3, #25
 80030da:	2201      	movs	r2, #1
 80030dc:	4988      	ldr	r1, [pc, #544]	; (8003300 <HAL_I2C_IsDeviceReady+0x254>)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fa62 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
 80030ec:	e104      	b.n	80032f8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_I2C_IsDeviceReady+0x50>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e0fd      	b.n	80032f8 <HAL_I2C_IsDeviceReady+0x24c>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d007      	beq.n	8003122 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003130:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2224      	movs	r2, #36	; 0x24
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a70      	ldr	r2, [pc, #448]	; (8003304 <HAL_I2C_IsDeviceReady+0x258>)
 8003144:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003154:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2200      	movs	r2, #0
 800315e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fa20 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00d      	beq.n	800318a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317c:	d103      	bne.n	8003186 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0b6      	b.n	80032f8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800318a:	897b      	ldrh	r3, [r7, #10]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003198:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800319a:	f7ff f867 	bl	800226c <HAL_GetTick>
 800319e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c4:	bf0c      	ite	eq
 80031c6:	2301      	moveq	r3, #1
 80031c8:	2300      	movne	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031ce:	e025      	b.n	800321c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031d0:	f7ff f84c 	bl	800226c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d302      	bcc.n	80031e6 <HAL_I2C_IsDeviceReady+0x13a>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	22a0      	movs	r2, #160	; 0xa0
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2ba0      	cmp	r3, #160	; 0xa0
 8003226:	d005      	beq.n	8003234 <HAL_I2C_IsDeviceReady+0x188>
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d102      	bne.n	8003234 <HAL_I2C_IsDeviceReady+0x188>
 800322e:	7dbb      	ldrb	r3, [r7, #22]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0cd      	beq.n	80031d0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b02      	cmp	r3, #2
 8003248:	d129      	bne.n	800329e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003258:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2319      	movs	r3, #25
 8003276:	2201      	movs	r2, #1
 8003278:	4921      	ldr	r1, [pc, #132]	; (8003300 <HAL_I2C_IsDeviceReady+0x254>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f994 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e036      	b.n	80032f8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e02c      	b.n	80032f8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032b6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2319      	movs	r3, #25
 80032be:	2201      	movs	r2, #1
 80032c0:	490f      	ldr	r1, [pc, #60]	; (8003300 <HAL_I2C_IsDeviceReady+0x254>)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f970 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e012      	b.n	80032f8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	f4ff af32 	bcc.w	8003146 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	00100002 	.word	0x00100002
 8003304:	ffff0000 	.word	0xffff0000

08003308 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	460b      	mov	r3, r1
 8003316:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d006      	beq.n	8003332 <I2C_MasterRequestWrite+0x2a>
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d003      	beq.n	8003332 <I2C_MasterRequestWrite+0x2a>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003330:	d108      	bne.n	8003344 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e00b      	b.n	800335c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	2b12      	cmp	r3, #18
 800334a:	d107      	bne.n	800335c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800335a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f91d 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003382:	d103      	bne.n	800338c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e035      	b.n	80033fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003398:	d108      	bne.n	80033ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033a8:	611a      	str	r2, [r3, #16]
 80033aa:	e01b      	b.n	80033e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033ac:	897b      	ldrh	r3, [r7, #10]
 80033ae:	11db      	asrs	r3, r3, #7
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 0306 	and.w	r3, r3, #6
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f063 030f 	orn	r3, r3, #15
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	490e      	ldr	r1, [pc, #56]	; (8003404 <I2C_MasterRequestWrite+0xfc>)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f943 	bl	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e010      	b.n	80033fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4907      	ldr	r1, [pc, #28]	; (8003408 <I2C_MasterRequestWrite+0x100>)
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f933 	bl	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	00010008 	.word	0x00010008
 8003408:	00010002 	.word	0x00010002

0800340c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	460b      	mov	r3, r1
 800341a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003430:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d006      	beq.n	8003446 <I2C_MasterRequestRead+0x3a>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d003      	beq.n	8003446 <I2C_MasterRequestRead+0x3a>
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003444:	d108      	bne.n	8003458 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e00b      	b.n	8003470 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	2b11      	cmp	r3, #17
 800345e:	d107      	bne.n	8003470 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800346e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f893 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00d      	beq.n	80034a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003496:	d103      	bne.n	80034a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e079      	b.n	8003598 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ac:	d108      	bne.n	80034c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034ae:	897b      	ldrh	r3, [r7, #10]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	e05f      	b.n	8003580 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034c0:	897b      	ldrh	r3, [r7, #10]
 80034c2:	11db      	asrs	r3, r3, #7
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0306 	and.w	r3, r3, #6
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f063 030f 	orn	r3, r3, #15
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4930      	ldr	r1, [pc, #192]	; (80035a0 <I2C_MasterRequestRead+0x194>)
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f8b9 	bl	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e054      	b.n	8003598 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034ee:	897b      	ldrh	r3, [r7, #10]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4929      	ldr	r1, [pc, #164]	; (80035a4 <I2C_MasterRequestRead+0x198>)
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f8a9 	bl	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e044      	b.n	8003598 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003532:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f831 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355a:	d103      	bne.n	8003564 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e017      	b.n	8003598 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003568:	897b      	ldrh	r3, [r7, #10]
 800356a:	11db      	asrs	r3, r3, #7
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 0306 	and.w	r3, r3, #6
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f063 030e 	orn	r3, r3, #14
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4907      	ldr	r1, [pc, #28]	; (80035a4 <I2C_MasterRequestRead+0x198>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f865 	bl	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	00010008 	.word	0x00010008
 80035a4:	00010002 	.word	0x00010002

080035a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b8:	e025      	b.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d021      	beq.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fe fe53 	bl	800226c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d116      	bne.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f043 0220 	orr.w	r2, r3, #32
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e023      	b.n	800364e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10d      	bne.n	800362c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	43da      	mvns	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4013      	ands	r3, r2
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	e00c      	b.n	8003646 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	429a      	cmp	r2, r3
 800364a:	d0b6      	beq.n	80035ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003664:	e051      	b.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003674:	d123      	bne.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003684:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800368e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f043 0204 	orr.w	r2, r3, #4
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e046      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d021      	beq.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7fe fdd1 	bl	800226c <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d116      	bne.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e020      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d10c      	bne.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	43da      	mvns	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4013      	ands	r3, r2
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	e00b      	b.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	43da      	mvns	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d18d      	bne.n	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003760:	e02d      	b.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f8ce 	bl	8003904 <I2C_IsAcknowledgeFailed>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e02d      	b.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d021      	beq.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fd77 	bl	800226c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d116      	bne.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e007      	b.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c8:	2b80      	cmp	r3, #128	; 0x80
 80037ca:	d1ca      	bne.n	8003762 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e2:	e02d      	b.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f88d 	bl	8003904 <I2C_IsAcknowledgeFailed>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e02d      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d021      	beq.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fc:	f7fe fd36 	bl	800226c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	d302      	bcc.n	8003812 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d116      	bne.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e007      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d1ca      	bne.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003864:	e042      	b.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b10      	cmp	r3, #16
 8003872:	d119      	bne.n	80038a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0210 	mvn.w	r2, #16
 800387c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e029      	b.n	80038fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a8:	f7fe fce0 	bl	800226c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d302      	bcc.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d116      	bne.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e007      	b.n	80038fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d1b5      	bne.n	8003866 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391a:	d11b      	bne.n	8003954 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003924:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f043 0204 	orr.w	r2, r3, #4
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e31d      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003972:	4b94      	ldr	r3, [pc, #592]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800397c:	4b91      	ldr	r3, [pc, #580]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003984:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d07b      	beq.n	8003a8a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d006      	beq.n	80039a6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d10f      	bne.n	80039be <HAL_RCC_OscConfig+0x5e>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a4:	d10b      	bne.n	80039be <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a6:	4b87      	ldr	r3, [pc, #540]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d06a      	beq.n	8003a88 <HAL_RCC_OscConfig+0x128>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d166      	bne.n	8003a88 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e2f7      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d106      	bne.n	80039d4 <HAL_RCC_OscConfig+0x74>
 80039c6:	4b7f      	ldr	r3, [pc, #508]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a7e      	ldr	r2, [pc, #504]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e02d      	b.n	8003a30 <HAL_RCC_OscConfig+0xd0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10c      	bne.n	80039f6 <HAL_RCC_OscConfig+0x96>
 80039dc:	4b79      	ldr	r3, [pc, #484]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a78      	ldr	r2, [pc, #480]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b76      	ldr	r3, [pc, #472]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a75      	ldr	r2, [pc, #468]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	e01c      	b.n	8003a30 <HAL_RCC_OscConfig+0xd0>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0xb8>
 80039fe:	4b71      	ldr	r3, [pc, #452]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a70      	ldr	r2, [pc, #448]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b6e      	ldr	r3, [pc, #440]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6d      	ldr	r2, [pc, #436]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0xd0>
 8003a18:	4b6a      	ldr	r3, [pc, #424]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a69      	ldr	r2, [pc, #420]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a66      	ldr	r2, [pc, #408]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fe fc18 	bl	800226c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe fc14 	bl	800226c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e2ad      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a52:	4b5c      	ldr	r3, [pc, #368]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0xe0>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe fc04 	bl	800226c <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe fc00 	bl	800226c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e299      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a7a:	4b52      	ldr	r3, [pc, #328]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x108>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d05a      	beq.n	8003b4c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	d119      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x176>
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d116      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x160>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e276      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac0:	4b40      	ldr	r3, [pc, #256]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	493d      	ldr	r1, [pc, #244]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad4:	e03a      	b.n	8003b4c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d020      	beq.n	8003b20 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ade:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <HAL_RCC_OscConfig+0x268>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fbc2 	bl	800226c <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aec:	f7fe fbbe 	bl	800226c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e257      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003afe:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	492a      	ldr	r1, [pc, #168]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
 8003b1e:	e015      	b.n	8003b4c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b20:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_RCC_OscConfig+0x268>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fe fba1 	bl	800226c <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7fe fb9d 	bl	800226c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e236      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b40:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80b8 	beq.w	8003cca <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d170      	bne.n	8003c42 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b60:	4b18      	ldr	r3, [pc, #96]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_OscConfig+0x218>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e21a      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1a      	ldr	r2, [r3, #32]
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d921      	bls.n	8003bcc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fc4b 	bl	8004428 <RCC_SetFlashLatencyFromMSIRange>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e208      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4906      	ldr	r1, [pc, #24]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	061b      	lsls	r3, r3, #24
 8003bbc:	4901      	ldr	r1, [pc, #4]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
 8003bc2:	e020      	b.n	8003c06 <HAL_RCC_OscConfig+0x2a6>
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bcc:	4ba4      	ldr	r3, [pc, #656]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	49a1      	ldr	r1, [pc, #644]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bde:	4ba0      	ldr	r3, [pc, #640]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	061b      	lsls	r3, r3, #24
 8003bec:	499c      	ldr	r1, [pc, #624]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fc16 	bl	8004428 <RCC_SetFlashLatencyFromMSIRange>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e1d3      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	0b5b      	lsrs	r3, r3, #13
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c16:	4a92      	ldr	r2, [pc, #584]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003c18:	6892      	ldr	r2, [r2, #8]
 8003c1a:	0912      	lsrs	r2, r2, #4
 8003c1c:	f002 020f 	and.w	r2, r2, #15
 8003c20:	4990      	ldr	r1, [pc, #576]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003c22:	5c8a      	ldrb	r2, [r1, r2]
 8003c24:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c26:	4a90      	ldr	r2, [pc, #576]	; (8003e68 <HAL_RCC_OscConfig+0x508>)
 8003c28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c2a:	4b90      	ldr	r3, [pc, #576]	; (8003e6c <HAL_RCC_OscConfig+0x50c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fad0 	bl	80021d4 <HAL_InitTick>
 8003c34:	4603      	mov	r3, r0
 8003c36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d045      	beq.n	8003cca <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	e1b5      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d029      	beq.n	8003c9e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c4a:	4b89      	ldr	r3, [pc, #548]	; (8003e70 <HAL_RCC_OscConfig+0x510>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe fb0c 	bl	800226c <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c58:	f7fe fb08 	bl	800226c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e1a1      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c6a:	4b7d      	ldr	r3, [pc, #500]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c76:	4b7a      	ldr	r3, [pc, #488]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4977      	ldr	r1, [pc, #476]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c88:	4b75      	ldr	r3, [pc, #468]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	4972      	ldr	r1, [pc, #456]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
 8003c9c:	e015      	b.n	8003cca <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c9e:	4b74      	ldr	r3, [pc, #464]	; (8003e70 <HAL_RCC_OscConfig+0x510>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fae2 	bl	800226c <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cac:	f7fe fade 	bl	800226c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e177      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003cbe:	4b68      	ldr	r3, [pc, #416]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d030      	beq.n	8003d38 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d016      	beq.n	8003d0c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cde:	4b65      	ldr	r3, [pc, #404]	; (8003e74 <HAL_RCC_OscConfig+0x514>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce4:	f7fe fac2 	bl	800226c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cec:	f7fe fabe 	bl	800226c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e157      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cfe:	4b58      	ldr	r3, [pc, #352]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x38c>
 8003d0a:	e015      	b.n	8003d38 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0c:	4b59      	ldr	r3, [pc, #356]	; (8003e74 <HAL_RCC_OscConfig+0x514>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d12:	f7fe faab 	bl	800226c <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1a:	f7fe faa7 	bl	800226c <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e140      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d2c:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80b5 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4a:	4b45      	ldr	r3, [pc, #276]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	4b42      	ldr	r3, [pc, #264]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	4a41      	ldr	r2, [pc, #260]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d60:	6253      	str	r3, [r2, #36]	; 0x24
 8003d62:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d72:	4b41      	ldr	r3, [pc, #260]	; (8003e78 <HAL_RCC_OscConfig+0x518>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d118      	bne.n	8003db0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7e:	4b3e      	ldr	r3, [pc, #248]	; (8003e78 <HAL_RCC_OscConfig+0x518>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a3d      	ldr	r2, [pc, #244]	; (8003e78 <HAL_RCC_OscConfig+0x518>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8a:	f7fe fa6f 	bl	800226c <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d92:	f7fe fa6b 	bl	800226c <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b64      	cmp	r3, #100	; 0x64
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e104      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da4:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <HAL_RCC_OscConfig+0x518>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x466>
 8003db8:	4b29      	ldr	r3, [pc, #164]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	4a28      	ldr	r2, [pc, #160]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc2:	6353      	str	r3, [r2, #52]	; 0x34
 8003dc4:	e02d      	b.n	8003e22 <HAL_RCC_OscConfig+0x4c2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x488>
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	4a23      	ldr	r2, [pc, #140]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd8:	6353      	str	r3, [r2, #52]	; 0x34
 8003dda:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dde:	4a20      	ldr	r2, [pc, #128]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003de0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003de4:	6353      	str	r3, [r2, #52]	; 0x34
 8003de6:	e01c      	b.n	8003e22 <HAL_RCC_OscConfig+0x4c2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	d10c      	bne.n	8003e0a <HAL_RCC_OscConfig+0x4aa>
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df4:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dfa:	6353      	str	r3, [r2, #52]	; 0x34
 8003dfc:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e00:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e06:	6353      	str	r3, [r2, #52]	; 0x34
 8003e08:	e00b      	b.n	8003e22 <HAL_RCC_OscConfig+0x4c2>
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0e:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e14:	6353      	str	r3, [r2, #52]	; 0x34
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	4a11      	ldr	r2, [pc, #68]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e20:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d015      	beq.n	8003e56 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2a:	f7fe fa1f 	bl	800226c <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fe fa1b 	bl	800226c <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e0b2      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_RCC_OscConfig+0x500>)
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ee      	beq.n	8003e32 <HAL_RCC_OscConfig+0x4d2>
 8003e54:	e023      	b.n	8003e9e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e56:	f7fe fa09 	bl	800226c <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e5c:	e019      	b.n	8003e92 <HAL_RCC_OscConfig+0x532>
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800
 8003e64:	08006190 	.word	0x08006190
 8003e68:	20000000 	.word	0x20000000
 8003e6c:	20000004 	.word	0x20000004
 8003e70:	42470020 	.word	0x42470020
 8003e74:	42470680 	.word	0x42470680
 8003e78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fe f9f6 	bl	800226c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e08d      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e92:	4b49      	ldr	r3, [pc, #292]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1ee      	bne.n	8003e7c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea4:	4b44      	ldr	r3, [pc, #272]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	4a43      	ldr	r2, [pc, #268]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eae:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d079      	beq.n	8003fac <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	d056      	beq.n	8003f6c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d13b      	bne.n	8003f3e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec6:	4b3d      	ldr	r3, [pc, #244]	; (8003fbc <HAL_RCC_OscConfig+0x65c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fe f9ce 	bl	800226c <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fe f9ca 	bl	800226c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e063      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ee6:	4b34      	ldr	r3, [pc, #208]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef2:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	4319      	orrs	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	492b      	ldr	r1, [pc, #172]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f10:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <HAL_RCC_OscConfig+0x65c>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f16:	f7fe f9a9 	bl	800226c <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fe f9a5 	bl	800226c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e03e      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f30:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x5be>
 8003f3c:	e036      	b.n	8003fac <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <HAL_RCC_OscConfig+0x65c>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fe f992 	bl	800226c <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fe f98e 	bl	800226c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e027      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f5e:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5ec>
 8003f6a:	e01f      	b.n	8003fac <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e01a      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d10d      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	42470060 	.word	0x42470060

08003fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e11a      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b8f      	ldr	r3, [pc, #572]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d919      	bls.n	8004016 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x34>
 8003fe8:	4b8a      	ldr	r3, [pc, #552]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a89      	ldr	r2, [pc, #548]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8003fee:	f043 0304 	orr.w	r3, r3, #4
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b87      	ldr	r3, [pc, #540]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f023 0201 	bic.w	r2, r3, #1
 8003ffc:	4985      	ldr	r1, [pc, #532]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	4313      	orrs	r3, r2
 8004002:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004004:	4b83      	ldr	r3, [pc, #524]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d001      	beq.n	8004016 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e0f9      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004022:	4b7d      	ldr	r3, [pc, #500]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	497a      	ldr	r1, [pc, #488]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 808e 	beq.w	800415e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800404a:	4b73      	ldr	r3, [pc, #460]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d121      	bne.n	800409a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0d7      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b03      	cmp	r3, #3
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004062:	4b6d      	ldr	r3, [pc, #436]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d115      	bne.n	800409a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e0cb      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800407a:	4b67      	ldr	r3, [pc, #412]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0bf      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800408a:	4b63      	ldr	r3, [pc, #396]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0b7      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800409a:	4b5f      	ldr	r3, [pc, #380]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f023 0203 	bic.w	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	495c      	ldr	r1, [pc, #368]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040ac:	f7fe f8de 	bl	800226c <HAL_GetTick>
 80040b0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d112      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040bc:	f7fe f8d6 	bl	800226c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e09b      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040d2:	4b51      	ldr	r3, [pc, #324]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d1ee      	bne.n	80040bc <HAL_RCC_ClockConfig+0xfc>
 80040de:	e03e      	b.n	800415e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d112      	bne.n	800410e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ea:	f7fe f8bf 	bl	800226c <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e084      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004100:	4b45      	ldr	r3, [pc, #276]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b0c      	cmp	r3, #12
 800410a:	d1ee      	bne.n	80040ea <HAL_RCC_ClockConfig+0x12a>
 800410c:	e027      	b.n	800415e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d11d      	bne.n	8004152 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004116:	e00a      	b.n	800412e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004118:	f7fe f8a8 	bl	800226c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e06d      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800412e:	4b3a      	ldr	r3, [pc, #232]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b04      	cmp	r3, #4
 8004138:	d1ee      	bne.n	8004118 <HAL_RCC_ClockConfig+0x158>
 800413a:	e010      	b.n	800415e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	f7fe f896 	bl	800226c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e05b      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ee      	bne.n	800413c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800415e:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d219      	bcs.n	80041a0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d105      	bne.n	800417e <HAL_RCC_ClockConfig+0x1be>
 8004172:	4b28      	ldr	r3, [pc, #160]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a27      	ldr	r2, [pc, #156]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004178:	f043 0304 	orr.w	r3, r3, #4
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b25      	ldr	r3, [pc, #148]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 0201 	bic.w	r2, r3, #1
 8004186:	4923      	ldr	r1, [pc, #140]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b21      	ldr	r3, [pc, #132]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e034      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ac:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4917      	ldr	r1, [pc, #92]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ca:	4b13      	ldr	r3, [pc, #76]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	490f      	ldr	r1, [pc, #60]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041de:	f000 f823 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041e2:	4602      	mov	r2, r0
 80041e4:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	490b      	ldr	r1, [pc, #44]	; (800421c <HAL_RCC_ClockConfig+0x25c>)
 80041f0:	5ccb      	ldrb	r3, [r1, r3]
 80041f2:	fa22 f303 	lsr.w	r3, r2, r3
 80041f6:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 80041f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x264>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fd ffe8 	bl	80021d4 <HAL_InitTick>
 8004204:	4603      	mov	r3, r0
 8004206:	72fb      	strb	r3, [r7, #11]

  return status;
 8004208:	7afb      	ldrb	r3, [r7, #11]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023c00 	.word	0x40023c00
 8004218:	40023800 	.word	0x40023800
 800421c:	08006190 	.word	0x08006190
 8004220:	20000000 	.word	0x20000000
 8004224:	20000004 	.word	0x20000004

08004228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	b5b0      	push	{r4, r5, r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800422e:	4b61      	ldr	r3, [pc, #388]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x18c>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b0c      	cmp	r3, #12
 800423c:	d00d      	beq.n	800425a <HAL_RCC_GetSysClockFreq+0x32>
 800423e:	2b0c      	cmp	r3, #12
 8004240:	f200 80a4 	bhi.w	800438c <HAL_RCC_GetSysClockFreq+0x164>
 8004244:	2b04      	cmp	r3, #4
 8004246:	d002      	beq.n	800424e <HAL_RCC_GetSysClockFreq+0x26>
 8004248:	2b08      	cmp	r3, #8
 800424a:	d003      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0x2c>
 800424c:	e09e      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800424e:	4b5a      	ldr	r3, [pc, #360]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x190>)
 8004250:	613b      	str	r3, [r7, #16]
      break;
 8004252:	e0a9      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004254:	4b59      	ldr	r3, [pc, #356]	; (80043bc <HAL_RCC_GetSysClockFreq+0x194>)
 8004256:	613b      	str	r3, [r7, #16]
      break;
 8004258:	e0a6      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	0c9b      	lsrs	r3, r3, #18
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	4a57      	ldr	r2, [pc, #348]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x198>)
 8004264:	5cd3      	ldrb	r3, [r2, r3]
 8004266:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	0d9b      	lsrs	r3, r3, #22
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	3301      	adds	r3, #1
 8004272:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004274:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x18c>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d041      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	461c      	mov	r4, r3
 8004284:	f04f 0500 	mov.w	r5, #0
 8004288:	4620      	mov	r0, r4
 800428a:	4629      	mov	r1, r5
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	014b      	lsls	r3, r1, #5
 8004296:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800429a:	0142      	lsls	r2, r0, #5
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	1b00      	subs	r0, r0, r4
 80042a2:	eb61 0105 	sbc.w	r1, r1, r5
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	018b      	lsls	r3, r1, #6
 80042b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042b4:	0182      	lsls	r2, r0, #6
 80042b6:	1a12      	subs	r2, r2, r0
 80042b8:	eb63 0301 	sbc.w	r3, r3, r1
 80042bc:	f04f 0000 	mov.w	r0, #0
 80042c0:	f04f 0100 	mov.w	r1, #0
 80042c4:	00d9      	lsls	r1, r3, #3
 80042c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042ca:	00d0      	lsls	r0, r2, #3
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	1912      	adds	r2, r2, r4
 80042d2:	eb45 0303 	adc.w	r3, r5, r3
 80042d6:	f04f 0000 	mov.w	r0, #0
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	0259      	lsls	r1, r3, #9
 80042e0:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80042e4:	0250      	lsls	r0, r2, #9
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4610      	mov	r0, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	f7fc fde7 	bl	8000ec8 <__aeabi_uldivmod>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4613      	mov	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	e040      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	461c      	mov	r4, r3
 8004308:	f04f 0500 	mov.w	r5, #0
 800430c:	4620      	mov	r0, r4
 800430e:	4629      	mov	r1, r5
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	014b      	lsls	r3, r1, #5
 800431a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800431e:	0142      	lsls	r2, r0, #5
 8004320:	4610      	mov	r0, r2
 8004322:	4619      	mov	r1, r3
 8004324:	1b00      	subs	r0, r0, r4
 8004326:	eb61 0105 	sbc.w	r1, r1, r5
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	018b      	lsls	r3, r1, #6
 8004334:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004338:	0182      	lsls	r2, r0, #6
 800433a:	1a12      	subs	r2, r2, r0
 800433c:	eb63 0301 	sbc.w	r3, r3, r1
 8004340:	f04f 0000 	mov.w	r0, #0
 8004344:	f04f 0100 	mov.w	r1, #0
 8004348:	00d9      	lsls	r1, r3, #3
 800434a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800434e:	00d0      	lsls	r0, r2, #3
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	1912      	adds	r2, r2, r4
 8004356:	eb45 0303 	adc.w	r3, r5, r3
 800435a:	f04f 0000 	mov.w	r0, #0
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	0299      	lsls	r1, r3, #10
 8004364:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004368:	0290      	lsls	r0, r2, #10
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4610      	mov	r0, r2
 8004370:	4619      	mov	r1, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	461a      	mov	r2, r3
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	f7fc fda5 	bl	8000ec8 <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4613      	mov	r3, r2
 8004384:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	613b      	str	r3, [r7, #16]
      break;
 800438a:	e00d      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x18c>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0b5b      	lsrs	r3, r3, #13
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	3301      	adds	r3, #1
 800439c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	613b      	str	r3, [r7, #16]
      break;
 80043a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a8:	693b      	ldr	r3, [r7, #16]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bdb0      	pop	{r4, r5, r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800
 80043b8:	00f42400 	.word	0x00f42400
 80043bc:	007a1200 	.word	0x007a1200
 80043c0:	08006184 	.word	0x08006184

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	20000000 	.word	0x20000000

080043d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043dc:	f7ff fff2 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4903      	ldr	r1, [pc, #12]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40023800 	.word	0x40023800
 80043fc:	080061a0 	.word	0x080061a0

08004400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004404:	f7ff ffde 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0adb      	lsrs	r3, r3, #11
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40023800 	.word	0x40023800
 8004424:	080061a0 	.word	0x080061a0

08004428 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004434:	4b29      	ldr	r3, [pc, #164]	; (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d12c      	bne.n	800449a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004440:	4b26      	ldr	r3, [pc, #152]	; (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800444c:	4b24      	ldr	r3, [pc, #144]	; (80044e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e016      	b.n	8004486 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004458:	4b20      	ldr	r3, [pc, #128]	; (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800445e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004462:	6253      	str	r3, [r2, #36]	; 0x24
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004470:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004478:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800447a:	4b18      	ldr	r3, [pc, #96]	; (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	4a17      	ldr	r2, [pc, #92]	; (80044dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004484:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800448c:	d105      	bne.n	800449a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004494:	d101      	bne.n	800449a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004496:	2301      	movs	r3, #1
 8004498:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <RCC_SetFlashLatencyFromMSIRange+0x84>
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0f      	ldr	r2, [pc, #60]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044a6:	f043 0304 	orr.w	r3, r3, #4
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f023 0201 	bic.w	r2, r3, #1
 80044b4:	490b      	ldr	r1, [pc, #44]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d001      	beq.n	80044ce <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40007000 	.word	0x40007000
 80044e4:	40023c00 	.word	0x40023c00

080044e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e03f      	b.n	800457a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fd fdde 	bl	80020d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	; 0x24
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800452a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f905 	bl	800473c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b08a      	sub	sp, #40	; 0x28
 8004586:	af02      	add	r7, sp, #8
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	4613      	mov	r3, r2
 8004590:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d17c      	bne.n	800469c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_UART_Transmit+0x2c>
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e075      	b.n	800469e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_UART_Transmit+0x3e>
 80045bc:	2302      	movs	r3, #2
 80045be:	e06e      	b.n	800469e <HAL_UART_Transmit+0x11c>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2221      	movs	r2, #33	; 0x21
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045d6:	f7fd fe49 	bl	800226c <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f0:	d108      	bne.n	8004604 <HAL_UART_Transmit+0x82>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	e003      	b.n	800460c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004608:	2300      	movs	r3, #0
 800460a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004614:	e02a      	b.n	800466c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2200      	movs	r2, #0
 800461e:	2180      	movs	r1, #128	; 0x80
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f840 	bl	80046a6 <UART_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e036      	b.n	800469e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004644:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	3302      	adds	r3, #2
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	e007      	b.n	800465e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	781a      	ldrb	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3301      	adds	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1cf      	bne.n	8004616 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2200      	movs	r2, #0
 800467e:	2140      	movs	r1, #64	; 0x40
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f810 	bl	80046a6 <UART_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e006      	b.n	800469e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e000      	b.n	800469e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b6:	e02c      	b.n	8004712 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d028      	beq.n	8004712 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80046c6:	f7fd fdd1 	bl	800226c <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d21d      	bcs.n	8004712 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695a      	ldr	r2, [r3, #20]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e00f      	b.n	8004732 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4013      	ands	r3, r2
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	429a      	cmp	r2, r3
 800472e:	d0c3      	beq.n	80046b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	4313      	orrs	r3, r2
 8004770:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800477c:	f023 030c 	bic.w	r3, r3, #12
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	430b      	orrs	r3, r1
 8004788:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699a      	ldr	r2, [r3, #24]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a55      	ldr	r2, [pc, #340]	; (80048fc <UART_SetConfig+0x1c0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d103      	bne.n	80047b2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047aa:	f7ff fe29 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	e002      	b.n	80047b8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047b2:	f7ff fe11 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 80047b6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c0:	d14c      	bne.n	800485c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009a      	lsls	r2, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	4a49      	ldr	r2, [pc, #292]	; (8004900 <UART_SetConfig+0x1c4>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	0119      	lsls	r1, r3, #4
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009a      	lsls	r2, r3, #2
 80047ec:	441a      	add	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f8:	4b41      	ldr	r3, [pc, #260]	; (8004900 <UART_SetConfig+0x1c4>)
 80047fa:	fba3 0302 	umull	r0, r3, r3, r2
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	2064      	movs	r0, #100	; 0x64
 8004802:	fb00 f303 	mul.w	r3, r0, r3
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	3332      	adds	r3, #50	; 0x32
 800480c:	4a3c      	ldr	r2, [pc, #240]	; (8004900 <UART_SetConfig+0x1c4>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800481a:	4419      	add	r1, r3
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009a      	lsls	r2, r3, #2
 8004826:	441a      	add	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004832:	4b33      	ldr	r3, [pc, #204]	; (8004900 <UART_SetConfig+0x1c4>)
 8004834:	fba3 0302 	umull	r0, r3, r3, r2
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	2064      	movs	r0, #100	; 0x64
 800483c:	fb00 f303 	mul.w	r3, r0, r3
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	3332      	adds	r3, #50	; 0x32
 8004846:	4a2e      	ldr	r2, [pc, #184]	; (8004900 <UART_SetConfig+0x1c4>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	f003 0207 	and.w	r2, r3, #7
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	440a      	add	r2, r1
 8004858:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800485a:	e04a      	b.n	80048f2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	009a      	lsls	r2, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	4a23      	ldr	r2, [pc, #140]	; (8004900 <UART_SetConfig+0x1c4>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	0119      	lsls	r1, r3, #4
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	009a      	lsls	r2, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004892:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <UART_SetConfig+0x1c4>)
 8004894:	fba3 0302 	umull	r0, r3, r3, r2
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	2064      	movs	r0, #100	; 0x64
 800489c:	fb00 f303 	mul.w	r3, r0, r3
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	3332      	adds	r3, #50	; 0x32
 80048a6:	4a16      	ldr	r2, [pc, #88]	; (8004900 <UART_SetConfig+0x1c4>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b2:	4419      	add	r1, r3
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	009a      	lsls	r2, r3, #2
 80048be:	441a      	add	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80048ca:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <UART_SetConfig+0x1c4>)
 80048cc:	fba3 0302 	umull	r0, r3, r3, r2
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	2064      	movs	r0, #100	; 0x64
 80048d4:	fb00 f303 	mul.w	r3, r0, r3
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	3332      	adds	r3, #50	; 0x32
 80048de:	4a08      	ldr	r2, [pc, #32]	; (8004900 <UART_SetConfig+0x1c4>)
 80048e0:	fba2 2303 	umull	r2, r3, r2, r3
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	f003 020f 	and.w	r2, r3, #15
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	440a      	add	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]
}
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40013800 	.word	0x40013800
 8004900:	51eb851f 	.word	0x51eb851f

08004904 <__errno>:
 8004904:	4b01      	ldr	r3, [pc, #4]	; (800490c <__errno+0x8>)
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	2000000c 	.word	0x2000000c

08004910 <__libc_init_array>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	2600      	movs	r6, #0
 8004914:	4d0c      	ldr	r5, [pc, #48]	; (8004948 <__libc_init_array+0x38>)
 8004916:	4c0d      	ldr	r4, [pc, #52]	; (800494c <__libc_init_array+0x3c>)
 8004918:	1b64      	subs	r4, r4, r5
 800491a:	10a4      	asrs	r4, r4, #2
 800491c:	42a6      	cmp	r6, r4
 800491e:	d109      	bne.n	8004934 <__libc_init_array+0x24>
 8004920:	f001 fbec 	bl	80060fc <_init>
 8004924:	2600      	movs	r6, #0
 8004926:	4d0a      	ldr	r5, [pc, #40]	; (8004950 <__libc_init_array+0x40>)
 8004928:	4c0a      	ldr	r4, [pc, #40]	; (8004954 <__libc_init_array+0x44>)
 800492a:	1b64      	subs	r4, r4, r5
 800492c:	10a4      	asrs	r4, r4, #2
 800492e:	42a6      	cmp	r6, r4
 8004930:	d105      	bne.n	800493e <__libc_init_array+0x2e>
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	f855 3b04 	ldr.w	r3, [r5], #4
 8004938:	4798      	blx	r3
 800493a:	3601      	adds	r6, #1
 800493c:	e7ee      	b.n	800491c <__libc_init_array+0xc>
 800493e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004942:	4798      	blx	r3
 8004944:	3601      	adds	r6, #1
 8004946:	e7f2      	b.n	800492e <__libc_init_array+0x1e>
 8004948:	08006228 	.word	0x08006228
 800494c:	08006228 	.word	0x08006228
 8004950:	08006228 	.word	0x08006228
 8004954:	0800622c 	.word	0x0800622c

08004958 <memcpy>:
 8004958:	440a      	add	r2, r1
 800495a:	4291      	cmp	r1, r2
 800495c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004960:	d100      	bne.n	8004964 <memcpy+0xc>
 8004962:	4770      	bx	lr
 8004964:	b510      	push	{r4, lr}
 8004966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800496a:	4291      	cmp	r1, r2
 800496c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004970:	d1f9      	bne.n	8004966 <memcpy+0xe>
 8004972:	bd10      	pop	{r4, pc}

08004974 <memset>:
 8004974:	4603      	mov	r3, r0
 8004976:	4402      	add	r2, r0
 8004978:	4293      	cmp	r3, r2
 800497a:	d100      	bne.n	800497e <memset+0xa>
 800497c:	4770      	bx	lr
 800497e:	f803 1b01 	strb.w	r1, [r3], #1
 8004982:	e7f9      	b.n	8004978 <memset+0x4>

08004984 <siprintf>:
 8004984:	b40e      	push	{r1, r2, r3}
 8004986:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800498a:	b500      	push	{lr}
 800498c:	b09c      	sub	sp, #112	; 0x70
 800498e:	ab1d      	add	r3, sp, #116	; 0x74
 8004990:	9002      	str	r0, [sp, #8]
 8004992:	9006      	str	r0, [sp, #24]
 8004994:	9107      	str	r1, [sp, #28]
 8004996:	9104      	str	r1, [sp, #16]
 8004998:	4808      	ldr	r0, [pc, #32]	; (80049bc <siprintf+0x38>)
 800499a:	4909      	ldr	r1, [pc, #36]	; (80049c0 <siprintf+0x3c>)
 800499c:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a0:	9105      	str	r1, [sp, #20]
 80049a2:	6800      	ldr	r0, [r0, #0]
 80049a4:	a902      	add	r1, sp, #8
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	f000 f868 	bl	8004a7c <_svfiprintf_r>
 80049ac:	2200      	movs	r2, #0
 80049ae:	9b02      	ldr	r3, [sp, #8]
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	b01c      	add	sp, #112	; 0x70
 80049b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80049b8:	b003      	add	sp, #12
 80049ba:	4770      	bx	lr
 80049bc:	2000000c 	.word	0x2000000c
 80049c0:	ffff0208 	.word	0xffff0208

080049c4 <__ssputs_r>:
 80049c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c8:	688e      	ldr	r6, [r1, #8]
 80049ca:	4682      	mov	sl, r0
 80049cc:	429e      	cmp	r6, r3
 80049ce:	460c      	mov	r4, r1
 80049d0:	4690      	mov	r8, r2
 80049d2:	461f      	mov	r7, r3
 80049d4:	d838      	bhi.n	8004a48 <__ssputs_r+0x84>
 80049d6:	898a      	ldrh	r2, [r1, #12]
 80049d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049dc:	d032      	beq.n	8004a44 <__ssputs_r+0x80>
 80049de:	6825      	ldr	r5, [r4, #0]
 80049e0:	6909      	ldr	r1, [r1, #16]
 80049e2:	3301      	adds	r3, #1
 80049e4:	eba5 0901 	sub.w	r9, r5, r1
 80049e8:	6965      	ldr	r5, [r4, #20]
 80049ea:	444b      	add	r3, r9
 80049ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049f4:	106d      	asrs	r5, r5, #1
 80049f6:	429d      	cmp	r5, r3
 80049f8:	bf38      	it	cc
 80049fa:	461d      	movcc	r5, r3
 80049fc:	0553      	lsls	r3, r2, #21
 80049fe:	d531      	bpl.n	8004a64 <__ssputs_r+0xa0>
 8004a00:	4629      	mov	r1, r5
 8004a02:	f000 fb45 	bl	8005090 <_malloc_r>
 8004a06:	4606      	mov	r6, r0
 8004a08:	b950      	cbnz	r0, 8004a20 <__ssputs_r+0x5c>
 8004a0a:	230c      	movs	r3, #12
 8004a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a10:	f8ca 3000 	str.w	r3, [sl]
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a20:	464a      	mov	r2, r9
 8004a22:	6921      	ldr	r1, [r4, #16]
 8004a24:	f7ff ff98 	bl	8004958 <memcpy>
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a32:	81a3      	strh	r3, [r4, #12]
 8004a34:	6126      	str	r6, [r4, #16]
 8004a36:	444e      	add	r6, r9
 8004a38:	6026      	str	r6, [r4, #0]
 8004a3a:	463e      	mov	r6, r7
 8004a3c:	6165      	str	r5, [r4, #20]
 8004a3e:	eba5 0509 	sub.w	r5, r5, r9
 8004a42:	60a5      	str	r5, [r4, #8]
 8004a44:	42be      	cmp	r6, r7
 8004a46:	d900      	bls.n	8004a4a <__ssputs_r+0x86>
 8004a48:	463e      	mov	r6, r7
 8004a4a:	4632      	mov	r2, r6
 8004a4c:	4641      	mov	r1, r8
 8004a4e:	6820      	ldr	r0, [r4, #0]
 8004a50:	f000 fab8 	bl	8004fc4 <memmove>
 8004a54:	68a3      	ldr	r3, [r4, #8]
 8004a56:	6822      	ldr	r2, [r4, #0]
 8004a58:	1b9b      	subs	r3, r3, r6
 8004a5a:	4432      	add	r2, r6
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	60a3      	str	r3, [r4, #8]
 8004a60:	6022      	str	r2, [r4, #0]
 8004a62:	e7db      	b.n	8004a1c <__ssputs_r+0x58>
 8004a64:	462a      	mov	r2, r5
 8004a66:	f000 fb6d 	bl	8005144 <_realloc_r>
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d1e1      	bne.n	8004a34 <__ssputs_r+0x70>
 8004a70:	4650      	mov	r0, sl
 8004a72:	6921      	ldr	r1, [r4, #16]
 8004a74:	f000 fac0 	bl	8004ff8 <_free_r>
 8004a78:	e7c7      	b.n	8004a0a <__ssputs_r+0x46>
	...

08004a7c <_svfiprintf_r>:
 8004a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a80:	4698      	mov	r8, r3
 8004a82:	898b      	ldrh	r3, [r1, #12]
 8004a84:	4607      	mov	r7, r0
 8004a86:	061b      	lsls	r3, r3, #24
 8004a88:	460d      	mov	r5, r1
 8004a8a:	4614      	mov	r4, r2
 8004a8c:	b09d      	sub	sp, #116	; 0x74
 8004a8e:	d50e      	bpl.n	8004aae <_svfiprintf_r+0x32>
 8004a90:	690b      	ldr	r3, [r1, #16]
 8004a92:	b963      	cbnz	r3, 8004aae <_svfiprintf_r+0x32>
 8004a94:	2140      	movs	r1, #64	; 0x40
 8004a96:	f000 fafb 	bl	8005090 <_malloc_r>
 8004a9a:	6028      	str	r0, [r5, #0]
 8004a9c:	6128      	str	r0, [r5, #16]
 8004a9e:	b920      	cbnz	r0, 8004aaa <_svfiprintf_r+0x2e>
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa8:	e0d1      	b.n	8004c4e <_svfiprintf_r+0x1d2>
 8004aaa:	2340      	movs	r3, #64	; 0x40
 8004aac:	616b      	str	r3, [r5, #20]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab2:	2320      	movs	r3, #32
 8004ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ab8:	2330      	movs	r3, #48	; 0x30
 8004aba:	f04f 0901 	mov.w	r9, #1
 8004abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ac2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c68 <_svfiprintf_r+0x1ec>
 8004ac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aca:	4623      	mov	r3, r4
 8004acc:	469a      	mov	sl, r3
 8004ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ad2:	b10a      	cbz	r2, 8004ad8 <_svfiprintf_r+0x5c>
 8004ad4:	2a25      	cmp	r2, #37	; 0x25
 8004ad6:	d1f9      	bne.n	8004acc <_svfiprintf_r+0x50>
 8004ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8004adc:	d00b      	beq.n	8004af6 <_svfiprintf_r+0x7a>
 8004ade:	465b      	mov	r3, fp
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	f7ff ff6d 	bl	80049c4 <__ssputs_r>
 8004aea:	3001      	adds	r0, #1
 8004aec:	f000 80aa 	beq.w	8004c44 <_svfiprintf_r+0x1c8>
 8004af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004af2:	445a      	add	r2, fp
 8004af4:	9209      	str	r2, [sp, #36]	; 0x24
 8004af6:	f89a 3000 	ldrb.w	r3, [sl]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80a2 	beq.w	8004c44 <_svfiprintf_r+0x1c8>
 8004b00:	2300      	movs	r3, #0
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295
 8004b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b0a:	f10a 0a01 	add.w	sl, sl, #1
 8004b0e:	9304      	str	r3, [sp, #16]
 8004b10:	9307      	str	r3, [sp, #28]
 8004b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b16:	931a      	str	r3, [sp, #104]	; 0x68
 8004b18:	4654      	mov	r4, sl
 8004b1a:	2205      	movs	r2, #5
 8004b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b20:	4851      	ldr	r0, [pc, #324]	; (8004c68 <_svfiprintf_r+0x1ec>)
 8004b22:	f000 fa41 	bl	8004fa8 <memchr>
 8004b26:	9a04      	ldr	r2, [sp, #16]
 8004b28:	b9d8      	cbnz	r0, 8004b62 <_svfiprintf_r+0xe6>
 8004b2a:	06d0      	lsls	r0, r2, #27
 8004b2c:	bf44      	itt	mi
 8004b2e:	2320      	movmi	r3, #32
 8004b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b34:	0711      	lsls	r1, r2, #28
 8004b36:	bf44      	itt	mi
 8004b38:	232b      	movmi	r3, #43	; 0x2b
 8004b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b42:	2b2a      	cmp	r3, #42	; 0x2a
 8004b44:	d015      	beq.n	8004b72 <_svfiprintf_r+0xf6>
 8004b46:	4654      	mov	r4, sl
 8004b48:	2000      	movs	r0, #0
 8004b4a:	f04f 0c0a 	mov.w	ip, #10
 8004b4e:	9a07      	ldr	r2, [sp, #28]
 8004b50:	4621      	mov	r1, r4
 8004b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b56:	3b30      	subs	r3, #48	; 0x30
 8004b58:	2b09      	cmp	r3, #9
 8004b5a:	d94e      	bls.n	8004bfa <_svfiprintf_r+0x17e>
 8004b5c:	b1b0      	cbz	r0, 8004b8c <_svfiprintf_r+0x110>
 8004b5e:	9207      	str	r2, [sp, #28]
 8004b60:	e014      	b.n	8004b8c <_svfiprintf_r+0x110>
 8004b62:	eba0 0308 	sub.w	r3, r0, r8
 8004b66:	fa09 f303 	lsl.w	r3, r9, r3
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	46a2      	mov	sl, r4
 8004b6e:	9304      	str	r3, [sp, #16]
 8004b70:	e7d2      	b.n	8004b18 <_svfiprintf_r+0x9c>
 8004b72:	9b03      	ldr	r3, [sp, #12]
 8004b74:	1d19      	adds	r1, r3, #4
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	9103      	str	r1, [sp, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bfbb      	ittet	lt
 8004b7e:	425b      	neglt	r3, r3
 8004b80:	f042 0202 	orrlt.w	r2, r2, #2
 8004b84:	9307      	strge	r3, [sp, #28]
 8004b86:	9307      	strlt	r3, [sp, #28]
 8004b88:	bfb8      	it	lt
 8004b8a:	9204      	strlt	r2, [sp, #16]
 8004b8c:	7823      	ldrb	r3, [r4, #0]
 8004b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b90:	d10c      	bne.n	8004bac <_svfiprintf_r+0x130>
 8004b92:	7863      	ldrb	r3, [r4, #1]
 8004b94:	2b2a      	cmp	r3, #42	; 0x2a
 8004b96:	d135      	bne.n	8004c04 <_svfiprintf_r+0x188>
 8004b98:	9b03      	ldr	r3, [sp, #12]
 8004b9a:	3402      	adds	r4, #2
 8004b9c:	1d1a      	adds	r2, r3, #4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	9203      	str	r2, [sp, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bfb8      	it	lt
 8004ba6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004baa:	9305      	str	r3, [sp, #20]
 8004bac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c78 <_svfiprintf_r+0x1fc>
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	4650      	mov	r0, sl
 8004bb4:	7821      	ldrb	r1, [r4, #0]
 8004bb6:	f000 f9f7 	bl	8004fa8 <memchr>
 8004bba:	b140      	cbz	r0, 8004bce <_svfiprintf_r+0x152>
 8004bbc:	2340      	movs	r3, #64	; 0x40
 8004bbe:	eba0 000a 	sub.w	r0, r0, sl
 8004bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8004bc6:	9b04      	ldr	r3, [sp, #16]
 8004bc8:	3401      	adds	r4, #1
 8004bca:	4303      	orrs	r3, r0
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd2:	2206      	movs	r2, #6
 8004bd4:	4825      	ldr	r0, [pc, #148]	; (8004c6c <_svfiprintf_r+0x1f0>)
 8004bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bda:	f000 f9e5 	bl	8004fa8 <memchr>
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d038      	beq.n	8004c54 <_svfiprintf_r+0x1d8>
 8004be2:	4b23      	ldr	r3, [pc, #140]	; (8004c70 <_svfiprintf_r+0x1f4>)
 8004be4:	bb1b      	cbnz	r3, 8004c2e <_svfiprintf_r+0x1b2>
 8004be6:	9b03      	ldr	r3, [sp, #12]
 8004be8:	3307      	adds	r3, #7
 8004bea:	f023 0307 	bic.w	r3, r3, #7
 8004bee:	3308      	adds	r3, #8
 8004bf0:	9303      	str	r3, [sp, #12]
 8004bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf4:	4433      	add	r3, r6
 8004bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf8:	e767      	b.n	8004aca <_svfiprintf_r+0x4e>
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c02:	e7a5      	b.n	8004b50 <_svfiprintf_r+0xd4>
 8004c04:	2300      	movs	r3, #0
 8004c06:	f04f 0c0a 	mov.w	ip, #10
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	3401      	adds	r4, #1
 8004c0e:	9305      	str	r3, [sp, #20]
 8004c10:	4620      	mov	r0, r4
 8004c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c16:	3a30      	subs	r2, #48	; 0x30
 8004c18:	2a09      	cmp	r2, #9
 8004c1a:	d903      	bls.n	8004c24 <_svfiprintf_r+0x1a8>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0c5      	beq.n	8004bac <_svfiprintf_r+0x130>
 8004c20:	9105      	str	r1, [sp, #20]
 8004c22:	e7c3      	b.n	8004bac <_svfiprintf_r+0x130>
 8004c24:	4604      	mov	r4, r0
 8004c26:	2301      	movs	r3, #1
 8004c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c2c:	e7f0      	b.n	8004c10 <_svfiprintf_r+0x194>
 8004c2e:	ab03      	add	r3, sp, #12
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	462a      	mov	r2, r5
 8004c34:	4638      	mov	r0, r7
 8004c36:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <_svfiprintf_r+0x1f8>)
 8004c38:	a904      	add	r1, sp, #16
 8004c3a:	f3af 8000 	nop.w
 8004c3e:	1c42      	adds	r2, r0, #1
 8004c40:	4606      	mov	r6, r0
 8004c42:	d1d6      	bne.n	8004bf2 <_svfiprintf_r+0x176>
 8004c44:	89ab      	ldrh	r3, [r5, #12]
 8004c46:	065b      	lsls	r3, r3, #25
 8004c48:	f53f af2c 	bmi.w	8004aa4 <_svfiprintf_r+0x28>
 8004c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c4e:	b01d      	add	sp, #116	; 0x74
 8004c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c54:	ab03      	add	r3, sp, #12
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	462a      	mov	r2, r5
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <_svfiprintf_r+0x1f8>)
 8004c5e:	a904      	add	r1, sp, #16
 8004c60:	f000 f87c 	bl	8004d5c <_printf_i>
 8004c64:	e7eb      	b.n	8004c3e <_svfiprintf_r+0x1c2>
 8004c66:	bf00      	nop
 8004c68:	080061a8 	.word	0x080061a8
 8004c6c:	080061b2 	.word	0x080061b2
 8004c70:	00000000 	.word	0x00000000
 8004c74:	080049c5 	.word	0x080049c5
 8004c78:	080061ae 	.word	0x080061ae

08004c7c <_printf_common>:
 8004c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c80:	4616      	mov	r6, r2
 8004c82:	4699      	mov	r9, r3
 8004c84:	688a      	ldr	r2, [r1, #8]
 8004c86:	690b      	ldr	r3, [r1, #16]
 8004c88:	4607      	mov	r7, r0
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	bfb8      	it	lt
 8004c8e:	4613      	movlt	r3, r2
 8004c90:	6033      	str	r3, [r6, #0]
 8004c92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c96:	460c      	mov	r4, r1
 8004c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c9c:	b10a      	cbz	r2, 8004ca2 <_printf_common+0x26>
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	6033      	str	r3, [r6, #0]
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	0699      	lsls	r1, r3, #26
 8004ca6:	bf42      	ittt	mi
 8004ca8:	6833      	ldrmi	r3, [r6, #0]
 8004caa:	3302      	addmi	r3, #2
 8004cac:	6033      	strmi	r3, [r6, #0]
 8004cae:	6825      	ldr	r5, [r4, #0]
 8004cb0:	f015 0506 	ands.w	r5, r5, #6
 8004cb4:	d106      	bne.n	8004cc4 <_printf_common+0x48>
 8004cb6:	f104 0a19 	add.w	sl, r4, #25
 8004cba:	68e3      	ldr	r3, [r4, #12]
 8004cbc:	6832      	ldr	r2, [r6, #0]
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	42ab      	cmp	r3, r5
 8004cc2:	dc28      	bgt.n	8004d16 <_printf_common+0x9a>
 8004cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cc8:	1e13      	subs	r3, r2, #0
 8004cca:	6822      	ldr	r2, [r4, #0]
 8004ccc:	bf18      	it	ne
 8004cce:	2301      	movne	r3, #1
 8004cd0:	0692      	lsls	r2, r2, #26
 8004cd2:	d42d      	bmi.n	8004d30 <_printf_common+0xb4>
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cdc:	47c0      	blx	r8
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d020      	beq.n	8004d24 <_printf_common+0xa8>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	68e5      	ldr	r5, [r4, #12]
 8004ce6:	f003 0306 	and.w	r3, r3, #6
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	bf18      	it	ne
 8004cee:	2500      	movne	r5, #0
 8004cf0:	6832      	ldr	r2, [r6, #0]
 8004cf2:	f04f 0600 	mov.w	r6, #0
 8004cf6:	68a3      	ldr	r3, [r4, #8]
 8004cf8:	bf08      	it	eq
 8004cfa:	1aad      	subeq	r5, r5, r2
 8004cfc:	6922      	ldr	r2, [r4, #16]
 8004cfe:	bf08      	it	eq
 8004d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d04:	4293      	cmp	r3, r2
 8004d06:	bfc4      	itt	gt
 8004d08:	1a9b      	subgt	r3, r3, r2
 8004d0a:	18ed      	addgt	r5, r5, r3
 8004d0c:	341a      	adds	r4, #26
 8004d0e:	42b5      	cmp	r5, r6
 8004d10:	d11a      	bne.n	8004d48 <_printf_common+0xcc>
 8004d12:	2000      	movs	r0, #0
 8004d14:	e008      	b.n	8004d28 <_printf_common+0xac>
 8004d16:	2301      	movs	r3, #1
 8004d18:	4652      	mov	r2, sl
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	47c0      	blx	r8
 8004d20:	3001      	adds	r0, #1
 8004d22:	d103      	bne.n	8004d2c <_printf_common+0xb0>
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d2c:	3501      	adds	r5, #1
 8004d2e:	e7c4      	b.n	8004cba <_printf_common+0x3e>
 8004d30:	2030      	movs	r0, #48	; 0x30
 8004d32:	18e1      	adds	r1, r4, r3
 8004d34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d3e:	4422      	add	r2, r4
 8004d40:	3302      	adds	r3, #2
 8004d42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d46:	e7c5      	b.n	8004cd4 <_printf_common+0x58>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	4638      	mov	r0, r7
 8004d50:	47c0      	blx	r8
 8004d52:	3001      	adds	r0, #1
 8004d54:	d0e6      	beq.n	8004d24 <_printf_common+0xa8>
 8004d56:	3601      	adds	r6, #1
 8004d58:	e7d9      	b.n	8004d0e <_printf_common+0x92>
	...

08004d5c <_printf_i>:
 8004d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	460c      	mov	r4, r1
 8004d62:	7e27      	ldrb	r7, [r4, #24]
 8004d64:	4691      	mov	r9, r2
 8004d66:	2f78      	cmp	r7, #120	; 0x78
 8004d68:	4680      	mov	r8, r0
 8004d6a:	469a      	mov	sl, r3
 8004d6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d72:	d807      	bhi.n	8004d84 <_printf_i+0x28>
 8004d74:	2f62      	cmp	r7, #98	; 0x62
 8004d76:	d80a      	bhi.n	8004d8e <_printf_i+0x32>
 8004d78:	2f00      	cmp	r7, #0
 8004d7a:	f000 80d9 	beq.w	8004f30 <_printf_i+0x1d4>
 8004d7e:	2f58      	cmp	r7, #88	; 0x58
 8004d80:	f000 80a4 	beq.w	8004ecc <_printf_i+0x170>
 8004d84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d8c:	e03a      	b.n	8004e04 <_printf_i+0xa8>
 8004d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d92:	2b15      	cmp	r3, #21
 8004d94:	d8f6      	bhi.n	8004d84 <_printf_i+0x28>
 8004d96:	a001      	add	r0, pc, #4	; (adr r0, 8004d9c <_printf_i+0x40>)
 8004d98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d9c:	08004df5 	.word	0x08004df5
 8004da0:	08004e09 	.word	0x08004e09
 8004da4:	08004d85 	.word	0x08004d85
 8004da8:	08004d85 	.word	0x08004d85
 8004dac:	08004d85 	.word	0x08004d85
 8004db0:	08004d85 	.word	0x08004d85
 8004db4:	08004e09 	.word	0x08004e09
 8004db8:	08004d85 	.word	0x08004d85
 8004dbc:	08004d85 	.word	0x08004d85
 8004dc0:	08004d85 	.word	0x08004d85
 8004dc4:	08004d85 	.word	0x08004d85
 8004dc8:	08004f17 	.word	0x08004f17
 8004dcc:	08004e39 	.word	0x08004e39
 8004dd0:	08004ef9 	.word	0x08004ef9
 8004dd4:	08004d85 	.word	0x08004d85
 8004dd8:	08004d85 	.word	0x08004d85
 8004ddc:	08004f39 	.word	0x08004f39
 8004de0:	08004d85 	.word	0x08004d85
 8004de4:	08004e39 	.word	0x08004e39
 8004de8:	08004d85 	.word	0x08004d85
 8004dec:	08004d85 	.word	0x08004d85
 8004df0:	08004f01 	.word	0x08004f01
 8004df4:	680b      	ldr	r3, [r1, #0]
 8004df6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004dfa:	1d1a      	adds	r2, r3, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	600a      	str	r2, [r1, #0]
 8004e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0a4      	b.n	8004f52 <_printf_i+0x1f6>
 8004e08:	6825      	ldr	r5, [r4, #0]
 8004e0a:	6808      	ldr	r0, [r1, #0]
 8004e0c:	062e      	lsls	r6, r5, #24
 8004e0e:	f100 0304 	add.w	r3, r0, #4
 8004e12:	d50a      	bpl.n	8004e2a <_printf_i+0xce>
 8004e14:	6805      	ldr	r5, [r0, #0]
 8004e16:	600b      	str	r3, [r1, #0]
 8004e18:	2d00      	cmp	r5, #0
 8004e1a:	da03      	bge.n	8004e24 <_printf_i+0xc8>
 8004e1c:	232d      	movs	r3, #45	; 0x2d
 8004e1e:	426d      	negs	r5, r5
 8004e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e24:	230a      	movs	r3, #10
 8004e26:	485e      	ldr	r0, [pc, #376]	; (8004fa0 <_printf_i+0x244>)
 8004e28:	e019      	b.n	8004e5e <_printf_i+0x102>
 8004e2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e2e:	6805      	ldr	r5, [r0, #0]
 8004e30:	600b      	str	r3, [r1, #0]
 8004e32:	bf18      	it	ne
 8004e34:	b22d      	sxthne	r5, r5
 8004e36:	e7ef      	b.n	8004e18 <_printf_i+0xbc>
 8004e38:	680b      	ldr	r3, [r1, #0]
 8004e3a:	6825      	ldr	r5, [r4, #0]
 8004e3c:	1d18      	adds	r0, r3, #4
 8004e3e:	6008      	str	r0, [r1, #0]
 8004e40:	0628      	lsls	r0, r5, #24
 8004e42:	d501      	bpl.n	8004e48 <_printf_i+0xec>
 8004e44:	681d      	ldr	r5, [r3, #0]
 8004e46:	e002      	b.n	8004e4e <_printf_i+0xf2>
 8004e48:	0669      	lsls	r1, r5, #25
 8004e4a:	d5fb      	bpl.n	8004e44 <_printf_i+0xe8>
 8004e4c:	881d      	ldrh	r5, [r3, #0]
 8004e4e:	2f6f      	cmp	r7, #111	; 0x6f
 8004e50:	bf0c      	ite	eq
 8004e52:	2308      	moveq	r3, #8
 8004e54:	230a      	movne	r3, #10
 8004e56:	4852      	ldr	r0, [pc, #328]	; (8004fa0 <_printf_i+0x244>)
 8004e58:	2100      	movs	r1, #0
 8004e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e5e:	6866      	ldr	r6, [r4, #4]
 8004e60:	2e00      	cmp	r6, #0
 8004e62:	bfa8      	it	ge
 8004e64:	6821      	ldrge	r1, [r4, #0]
 8004e66:	60a6      	str	r6, [r4, #8]
 8004e68:	bfa4      	itt	ge
 8004e6a:	f021 0104 	bicge.w	r1, r1, #4
 8004e6e:	6021      	strge	r1, [r4, #0]
 8004e70:	b90d      	cbnz	r5, 8004e76 <_printf_i+0x11a>
 8004e72:	2e00      	cmp	r6, #0
 8004e74:	d04d      	beq.n	8004f12 <_printf_i+0x1b6>
 8004e76:	4616      	mov	r6, r2
 8004e78:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e7c:	fb03 5711 	mls	r7, r3, r1, r5
 8004e80:	5dc7      	ldrb	r7, [r0, r7]
 8004e82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e86:	462f      	mov	r7, r5
 8004e88:	42bb      	cmp	r3, r7
 8004e8a:	460d      	mov	r5, r1
 8004e8c:	d9f4      	bls.n	8004e78 <_printf_i+0x11c>
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d10b      	bne.n	8004eaa <_printf_i+0x14e>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	07df      	lsls	r7, r3, #31
 8004e96:	d508      	bpl.n	8004eaa <_printf_i+0x14e>
 8004e98:	6923      	ldr	r3, [r4, #16]
 8004e9a:	6861      	ldr	r1, [r4, #4]
 8004e9c:	4299      	cmp	r1, r3
 8004e9e:	bfde      	ittt	le
 8004ea0:	2330      	movle	r3, #48	; 0x30
 8004ea2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ea6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004eaa:	1b92      	subs	r2, r2, r6
 8004eac:	6122      	str	r2, [r4, #16]
 8004eae:	464b      	mov	r3, r9
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	f8cd a000 	str.w	sl, [sp]
 8004eb8:	aa03      	add	r2, sp, #12
 8004eba:	f7ff fedf 	bl	8004c7c <_printf_common>
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d14c      	bne.n	8004f5c <_printf_i+0x200>
 8004ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec6:	b004      	add	sp, #16
 8004ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ecc:	4834      	ldr	r0, [pc, #208]	; (8004fa0 <_printf_i+0x244>)
 8004ece:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ed2:	680e      	ldr	r6, [r1, #0]
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004eda:	061f      	lsls	r7, r3, #24
 8004edc:	600e      	str	r6, [r1, #0]
 8004ede:	d514      	bpl.n	8004f0a <_printf_i+0x1ae>
 8004ee0:	07d9      	lsls	r1, r3, #31
 8004ee2:	bf44      	itt	mi
 8004ee4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ee8:	6023      	strmi	r3, [r4, #0]
 8004eea:	b91d      	cbnz	r5, 8004ef4 <_printf_i+0x198>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	f023 0320 	bic.w	r3, r3, #32
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	e7af      	b.n	8004e58 <_printf_i+0xfc>
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	f043 0320 	orr.w	r3, r3, #32
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	2378      	movs	r3, #120	; 0x78
 8004f02:	4828      	ldr	r0, [pc, #160]	; (8004fa4 <_printf_i+0x248>)
 8004f04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f08:	e7e3      	b.n	8004ed2 <_printf_i+0x176>
 8004f0a:	065e      	lsls	r6, r3, #25
 8004f0c:	bf48      	it	mi
 8004f0e:	b2ad      	uxthmi	r5, r5
 8004f10:	e7e6      	b.n	8004ee0 <_printf_i+0x184>
 8004f12:	4616      	mov	r6, r2
 8004f14:	e7bb      	b.n	8004e8e <_printf_i+0x132>
 8004f16:	680b      	ldr	r3, [r1, #0]
 8004f18:	6826      	ldr	r6, [r4, #0]
 8004f1a:	1d1d      	adds	r5, r3, #4
 8004f1c:	6960      	ldr	r0, [r4, #20]
 8004f1e:	600d      	str	r5, [r1, #0]
 8004f20:	0635      	lsls	r5, r6, #24
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	d501      	bpl.n	8004f2a <_printf_i+0x1ce>
 8004f26:	6018      	str	r0, [r3, #0]
 8004f28:	e002      	b.n	8004f30 <_printf_i+0x1d4>
 8004f2a:	0671      	lsls	r1, r6, #25
 8004f2c:	d5fb      	bpl.n	8004f26 <_printf_i+0x1ca>
 8004f2e:	8018      	strh	r0, [r3, #0]
 8004f30:	2300      	movs	r3, #0
 8004f32:	4616      	mov	r6, r2
 8004f34:	6123      	str	r3, [r4, #16]
 8004f36:	e7ba      	b.n	8004eae <_printf_i+0x152>
 8004f38:	680b      	ldr	r3, [r1, #0]
 8004f3a:	1d1a      	adds	r2, r3, #4
 8004f3c:	600a      	str	r2, [r1, #0]
 8004f3e:	681e      	ldr	r6, [r3, #0]
 8004f40:	2100      	movs	r1, #0
 8004f42:	4630      	mov	r0, r6
 8004f44:	6862      	ldr	r2, [r4, #4]
 8004f46:	f000 f82f 	bl	8004fa8 <memchr>
 8004f4a:	b108      	cbz	r0, 8004f50 <_printf_i+0x1f4>
 8004f4c:	1b80      	subs	r0, r0, r6
 8004f4e:	6060      	str	r0, [r4, #4]
 8004f50:	6863      	ldr	r3, [r4, #4]
 8004f52:	6123      	str	r3, [r4, #16]
 8004f54:	2300      	movs	r3, #0
 8004f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f5a:	e7a8      	b.n	8004eae <_printf_i+0x152>
 8004f5c:	4632      	mov	r2, r6
 8004f5e:	4649      	mov	r1, r9
 8004f60:	4640      	mov	r0, r8
 8004f62:	6923      	ldr	r3, [r4, #16]
 8004f64:	47d0      	blx	sl
 8004f66:	3001      	adds	r0, #1
 8004f68:	d0ab      	beq.n	8004ec2 <_printf_i+0x166>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	079b      	lsls	r3, r3, #30
 8004f6e:	d413      	bmi.n	8004f98 <_printf_i+0x23c>
 8004f70:	68e0      	ldr	r0, [r4, #12]
 8004f72:	9b03      	ldr	r3, [sp, #12]
 8004f74:	4298      	cmp	r0, r3
 8004f76:	bfb8      	it	lt
 8004f78:	4618      	movlt	r0, r3
 8004f7a:	e7a4      	b.n	8004ec6 <_printf_i+0x16a>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	4632      	mov	r2, r6
 8004f80:	4649      	mov	r1, r9
 8004f82:	4640      	mov	r0, r8
 8004f84:	47d0      	blx	sl
 8004f86:	3001      	adds	r0, #1
 8004f88:	d09b      	beq.n	8004ec2 <_printf_i+0x166>
 8004f8a:	3501      	adds	r5, #1
 8004f8c:	68e3      	ldr	r3, [r4, #12]
 8004f8e:	9903      	ldr	r1, [sp, #12]
 8004f90:	1a5b      	subs	r3, r3, r1
 8004f92:	42ab      	cmp	r3, r5
 8004f94:	dcf2      	bgt.n	8004f7c <_printf_i+0x220>
 8004f96:	e7eb      	b.n	8004f70 <_printf_i+0x214>
 8004f98:	2500      	movs	r5, #0
 8004f9a:	f104 0619 	add.w	r6, r4, #25
 8004f9e:	e7f5      	b.n	8004f8c <_printf_i+0x230>
 8004fa0:	080061b9 	.word	0x080061b9
 8004fa4:	080061ca 	.word	0x080061ca

08004fa8 <memchr>:
 8004fa8:	4603      	mov	r3, r0
 8004faa:	b510      	push	{r4, lr}
 8004fac:	b2c9      	uxtb	r1, r1
 8004fae:	4402      	add	r2, r0
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	d101      	bne.n	8004fba <memchr+0x12>
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	e003      	b.n	8004fc2 <memchr+0x1a>
 8004fba:	7804      	ldrb	r4, [r0, #0]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	428c      	cmp	r4, r1
 8004fc0:	d1f6      	bne.n	8004fb0 <memchr+0x8>
 8004fc2:	bd10      	pop	{r4, pc}

08004fc4 <memmove>:
 8004fc4:	4288      	cmp	r0, r1
 8004fc6:	b510      	push	{r4, lr}
 8004fc8:	eb01 0402 	add.w	r4, r1, r2
 8004fcc:	d902      	bls.n	8004fd4 <memmove+0x10>
 8004fce:	4284      	cmp	r4, r0
 8004fd0:	4623      	mov	r3, r4
 8004fd2:	d807      	bhi.n	8004fe4 <memmove+0x20>
 8004fd4:	1e43      	subs	r3, r0, #1
 8004fd6:	42a1      	cmp	r1, r4
 8004fd8:	d008      	beq.n	8004fec <memmove+0x28>
 8004fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fe2:	e7f8      	b.n	8004fd6 <memmove+0x12>
 8004fe4:	4601      	mov	r1, r0
 8004fe6:	4402      	add	r2, r0
 8004fe8:	428a      	cmp	r2, r1
 8004fea:	d100      	bne.n	8004fee <memmove+0x2a>
 8004fec:	bd10      	pop	{r4, pc}
 8004fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ff6:	e7f7      	b.n	8004fe8 <memmove+0x24>

08004ff8 <_free_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	d043      	beq.n	8005088 <_free_r+0x90>
 8005000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005004:	1f0c      	subs	r4, r1, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	bfb8      	it	lt
 800500a:	18e4      	addlt	r4, r4, r3
 800500c:	f000 f8d0 	bl	80051b0 <__malloc_lock>
 8005010:	4a1e      	ldr	r2, [pc, #120]	; (800508c <_free_r+0x94>)
 8005012:	6813      	ldr	r3, [r2, #0]
 8005014:	4610      	mov	r0, r2
 8005016:	b933      	cbnz	r3, 8005026 <_free_r+0x2e>
 8005018:	6063      	str	r3, [r4, #4]
 800501a:	6014      	str	r4, [r2, #0]
 800501c:	4628      	mov	r0, r5
 800501e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005022:	f000 b8cb 	b.w	80051bc <__malloc_unlock>
 8005026:	42a3      	cmp	r3, r4
 8005028:	d90a      	bls.n	8005040 <_free_r+0x48>
 800502a:	6821      	ldr	r1, [r4, #0]
 800502c:	1862      	adds	r2, r4, r1
 800502e:	4293      	cmp	r3, r2
 8005030:	bf01      	itttt	eq
 8005032:	681a      	ldreq	r2, [r3, #0]
 8005034:	685b      	ldreq	r3, [r3, #4]
 8005036:	1852      	addeq	r2, r2, r1
 8005038:	6022      	streq	r2, [r4, #0]
 800503a:	6063      	str	r3, [r4, #4]
 800503c:	6004      	str	r4, [r0, #0]
 800503e:	e7ed      	b.n	800501c <_free_r+0x24>
 8005040:	461a      	mov	r2, r3
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	b10b      	cbz	r3, 800504a <_free_r+0x52>
 8005046:	42a3      	cmp	r3, r4
 8005048:	d9fa      	bls.n	8005040 <_free_r+0x48>
 800504a:	6811      	ldr	r1, [r2, #0]
 800504c:	1850      	adds	r0, r2, r1
 800504e:	42a0      	cmp	r0, r4
 8005050:	d10b      	bne.n	800506a <_free_r+0x72>
 8005052:	6820      	ldr	r0, [r4, #0]
 8005054:	4401      	add	r1, r0
 8005056:	1850      	adds	r0, r2, r1
 8005058:	4283      	cmp	r3, r0
 800505a:	6011      	str	r1, [r2, #0]
 800505c:	d1de      	bne.n	800501c <_free_r+0x24>
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4401      	add	r1, r0
 8005064:	6011      	str	r1, [r2, #0]
 8005066:	6053      	str	r3, [r2, #4]
 8005068:	e7d8      	b.n	800501c <_free_r+0x24>
 800506a:	d902      	bls.n	8005072 <_free_r+0x7a>
 800506c:	230c      	movs	r3, #12
 800506e:	602b      	str	r3, [r5, #0]
 8005070:	e7d4      	b.n	800501c <_free_r+0x24>
 8005072:	6820      	ldr	r0, [r4, #0]
 8005074:	1821      	adds	r1, r4, r0
 8005076:	428b      	cmp	r3, r1
 8005078:	bf01      	itttt	eq
 800507a:	6819      	ldreq	r1, [r3, #0]
 800507c:	685b      	ldreq	r3, [r3, #4]
 800507e:	1809      	addeq	r1, r1, r0
 8005080:	6021      	streq	r1, [r4, #0]
 8005082:	6063      	str	r3, [r4, #4]
 8005084:	6054      	str	r4, [r2, #4]
 8005086:	e7c9      	b.n	800501c <_free_r+0x24>
 8005088:	bd38      	pop	{r3, r4, r5, pc}
 800508a:	bf00      	nop
 800508c:	20000098 	.word	0x20000098

08005090 <_malloc_r>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	1ccd      	adds	r5, r1, #3
 8005094:	f025 0503 	bic.w	r5, r5, #3
 8005098:	3508      	adds	r5, #8
 800509a:	2d0c      	cmp	r5, #12
 800509c:	bf38      	it	cc
 800509e:	250c      	movcc	r5, #12
 80050a0:	2d00      	cmp	r5, #0
 80050a2:	4606      	mov	r6, r0
 80050a4:	db01      	blt.n	80050aa <_malloc_r+0x1a>
 80050a6:	42a9      	cmp	r1, r5
 80050a8:	d903      	bls.n	80050b2 <_malloc_r+0x22>
 80050aa:	230c      	movs	r3, #12
 80050ac:	6033      	str	r3, [r6, #0]
 80050ae:	2000      	movs	r0, #0
 80050b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b2:	f000 f87d 	bl	80051b0 <__malloc_lock>
 80050b6:	4921      	ldr	r1, [pc, #132]	; (800513c <_malloc_r+0xac>)
 80050b8:	680a      	ldr	r2, [r1, #0]
 80050ba:	4614      	mov	r4, r2
 80050bc:	b99c      	cbnz	r4, 80050e6 <_malloc_r+0x56>
 80050be:	4f20      	ldr	r7, [pc, #128]	; (8005140 <_malloc_r+0xb0>)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	b923      	cbnz	r3, 80050ce <_malloc_r+0x3e>
 80050c4:	4621      	mov	r1, r4
 80050c6:	4630      	mov	r0, r6
 80050c8:	f000 f862 	bl	8005190 <_sbrk_r>
 80050cc:	6038      	str	r0, [r7, #0]
 80050ce:	4629      	mov	r1, r5
 80050d0:	4630      	mov	r0, r6
 80050d2:	f000 f85d 	bl	8005190 <_sbrk_r>
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	d123      	bne.n	8005122 <_malloc_r+0x92>
 80050da:	230c      	movs	r3, #12
 80050dc:	4630      	mov	r0, r6
 80050de:	6033      	str	r3, [r6, #0]
 80050e0:	f000 f86c 	bl	80051bc <__malloc_unlock>
 80050e4:	e7e3      	b.n	80050ae <_malloc_r+0x1e>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	1b5b      	subs	r3, r3, r5
 80050ea:	d417      	bmi.n	800511c <_malloc_r+0x8c>
 80050ec:	2b0b      	cmp	r3, #11
 80050ee:	d903      	bls.n	80050f8 <_malloc_r+0x68>
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	441c      	add	r4, r3
 80050f4:	6025      	str	r5, [r4, #0]
 80050f6:	e004      	b.n	8005102 <_malloc_r+0x72>
 80050f8:	6863      	ldr	r3, [r4, #4]
 80050fa:	42a2      	cmp	r2, r4
 80050fc:	bf0c      	ite	eq
 80050fe:	600b      	streq	r3, [r1, #0]
 8005100:	6053      	strne	r3, [r2, #4]
 8005102:	4630      	mov	r0, r6
 8005104:	f000 f85a 	bl	80051bc <__malloc_unlock>
 8005108:	f104 000b 	add.w	r0, r4, #11
 800510c:	1d23      	adds	r3, r4, #4
 800510e:	f020 0007 	bic.w	r0, r0, #7
 8005112:	1ac2      	subs	r2, r0, r3
 8005114:	d0cc      	beq.n	80050b0 <_malloc_r+0x20>
 8005116:	1a1b      	subs	r3, r3, r0
 8005118:	50a3      	str	r3, [r4, r2]
 800511a:	e7c9      	b.n	80050b0 <_malloc_r+0x20>
 800511c:	4622      	mov	r2, r4
 800511e:	6864      	ldr	r4, [r4, #4]
 8005120:	e7cc      	b.n	80050bc <_malloc_r+0x2c>
 8005122:	1cc4      	adds	r4, r0, #3
 8005124:	f024 0403 	bic.w	r4, r4, #3
 8005128:	42a0      	cmp	r0, r4
 800512a:	d0e3      	beq.n	80050f4 <_malloc_r+0x64>
 800512c:	1a21      	subs	r1, r4, r0
 800512e:	4630      	mov	r0, r6
 8005130:	f000 f82e 	bl	8005190 <_sbrk_r>
 8005134:	3001      	adds	r0, #1
 8005136:	d1dd      	bne.n	80050f4 <_malloc_r+0x64>
 8005138:	e7cf      	b.n	80050da <_malloc_r+0x4a>
 800513a:	bf00      	nop
 800513c:	20000098 	.word	0x20000098
 8005140:	2000009c 	.word	0x2000009c

08005144 <_realloc_r>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	4607      	mov	r7, r0
 8005148:	4614      	mov	r4, r2
 800514a:	460e      	mov	r6, r1
 800514c:	b921      	cbnz	r1, 8005158 <_realloc_r+0x14>
 800514e:	4611      	mov	r1, r2
 8005150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005154:	f7ff bf9c 	b.w	8005090 <_malloc_r>
 8005158:	b922      	cbnz	r2, 8005164 <_realloc_r+0x20>
 800515a:	f7ff ff4d 	bl	8004ff8 <_free_r>
 800515e:	4625      	mov	r5, r4
 8005160:	4628      	mov	r0, r5
 8005162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005164:	f000 f830 	bl	80051c8 <_malloc_usable_size_r>
 8005168:	42a0      	cmp	r0, r4
 800516a:	d20f      	bcs.n	800518c <_realloc_r+0x48>
 800516c:	4621      	mov	r1, r4
 800516e:	4638      	mov	r0, r7
 8005170:	f7ff ff8e 	bl	8005090 <_malloc_r>
 8005174:	4605      	mov	r5, r0
 8005176:	2800      	cmp	r0, #0
 8005178:	d0f2      	beq.n	8005160 <_realloc_r+0x1c>
 800517a:	4631      	mov	r1, r6
 800517c:	4622      	mov	r2, r4
 800517e:	f7ff fbeb 	bl	8004958 <memcpy>
 8005182:	4631      	mov	r1, r6
 8005184:	4638      	mov	r0, r7
 8005186:	f7ff ff37 	bl	8004ff8 <_free_r>
 800518a:	e7e9      	b.n	8005160 <_realloc_r+0x1c>
 800518c:	4635      	mov	r5, r6
 800518e:	e7e7      	b.n	8005160 <_realloc_r+0x1c>

08005190 <_sbrk_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	2300      	movs	r3, #0
 8005194:	4d05      	ldr	r5, [pc, #20]	; (80051ac <_sbrk_r+0x1c>)
 8005196:	4604      	mov	r4, r0
 8005198:	4608      	mov	r0, r1
 800519a:	602b      	str	r3, [r5, #0]
 800519c:	f7fc ff32 	bl	8002004 <_sbrk>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d102      	bne.n	80051aa <_sbrk_r+0x1a>
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	b103      	cbz	r3, 80051aa <_sbrk_r+0x1a>
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	20000190 	.word	0x20000190

080051b0 <__malloc_lock>:
 80051b0:	4801      	ldr	r0, [pc, #4]	; (80051b8 <__malloc_lock+0x8>)
 80051b2:	f000 b811 	b.w	80051d8 <__retarget_lock_acquire_recursive>
 80051b6:	bf00      	nop
 80051b8:	20000198 	.word	0x20000198

080051bc <__malloc_unlock>:
 80051bc:	4801      	ldr	r0, [pc, #4]	; (80051c4 <__malloc_unlock+0x8>)
 80051be:	f000 b80c 	b.w	80051da <__retarget_lock_release_recursive>
 80051c2:	bf00      	nop
 80051c4:	20000198 	.word	0x20000198

080051c8 <_malloc_usable_size_r>:
 80051c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051cc:	1f18      	subs	r0, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bfbc      	itt	lt
 80051d2:	580b      	ldrlt	r3, [r1, r0]
 80051d4:	18c0      	addlt	r0, r0, r3
 80051d6:	4770      	bx	lr

080051d8 <__retarget_lock_acquire_recursive>:
 80051d8:	4770      	bx	lr

080051da <__retarget_lock_release_recursive>:
 80051da:	4770      	bx	lr

080051dc <pow>:
 80051dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e0:	461f      	mov	r7, r3
 80051e2:	4680      	mov	r8, r0
 80051e4:	4689      	mov	r9, r1
 80051e6:	4616      	mov	r6, r2
 80051e8:	f000 f8a6 	bl	8005338 <__ieee754_pow>
 80051ec:	4b4d      	ldr	r3, [pc, #308]	; (8005324 <pow+0x148>)
 80051ee:	4604      	mov	r4, r0
 80051f0:	f993 3000 	ldrsb.w	r3, [r3]
 80051f4:	460d      	mov	r5, r1
 80051f6:	3301      	adds	r3, #1
 80051f8:	d015      	beq.n	8005226 <pow+0x4a>
 80051fa:	4632      	mov	r2, r6
 80051fc:	463b      	mov	r3, r7
 80051fe:	4630      	mov	r0, r6
 8005200:	4639      	mov	r1, r7
 8005202:	f7fb fcc7 	bl	8000b94 <__aeabi_dcmpun>
 8005206:	b970      	cbnz	r0, 8005226 <pow+0x4a>
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	4640      	mov	r0, r8
 800520e:	4649      	mov	r1, r9
 8005210:	f7fb fcc0 	bl	8000b94 <__aeabi_dcmpun>
 8005214:	2200      	movs	r2, #0
 8005216:	2300      	movs	r3, #0
 8005218:	b148      	cbz	r0, 800522e <pow+0x52>
 800521a:	4630      	mov	r0, r6
 800521c:	4639      	mov	r1, r7
 800521e:	f7fb fc87 	bl	8000b30 <__aeabi_dcmpeq>
 8005222:	2800      	cmp	r0, #0
 8005224:	d17b      	bne.n	800531e <pow+0x142>
 8005226:	4620      	mov	r0, r4
 8005228:	4629      	mov	r1, r5
 800522a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800522e:	4640      	mov	r0, r8
 8005230:	4649      	mov	r1, r9
 8005232:	f7fb fc7d 	bl	8000b30 <__aeabi_dcmpeq>
 8005236:	b1e0      	cbz	r0, 8005272 <pow+0x96>
 8005238:	2200      	movs	r2, #0
 800523a:	2300      	movs	r3, #0
 800523c:	4630      	mov	r0, r6
 800523e:	4639      	mov	r1, r7
 8005240:	f7fb fc76 	bl	8000b30 <__aeabi_dcmpeq>
 8005244:	2800      	cmp	r0, #0
 8005246:	d16a      	bne.n	800531e <pow+0x142>
 8005248:	4630      	mov	r0, r6
 800524a:	4639      	mov	r1, r7
 800524c:	f000 fe39 	bl	8005ec2 <finite>
 8005250:	2800      	cmp	r0, #0
 8005252:	d0e8      	beq.n	8005226 <pow+0x4a>
 8005254:	2200      	movs	r2, #0
 8005256:	2300      	movs	r3, #0
 8005258:	4630      	mov	r0, r6
 800525a:	4639      	mov	r1, r7
 800525c:	f7fb fc72 	bl	8000b44 <__aeabi_dcmplt>
 8005260:	2800      	cmp	r0, #0
 8005262:	d0e0      	beq.n	8005226 <pow+0x4a>
 8005264:	f7ff fb4e 	bl	8004904 <__errno>
 8005268:	2321      	movs	r3, #33	; 0x21
 800526a:	2400      	movs	r4, #0
 800526c:	6003      	str	r3, [r0, #0]
 800526e:	4d2e      	ldr	r5, [pc, #184]	; (8005328 <pow+0x14c>)
 8005270:	e7d9      	b.n	8005226 <pow+0x4a>
 8005272:	4620      	mov	r0, r4
 8005274:	4629      	mov	r1, r5
 8005276:	f000 fe24 	bl	8005ec2 <finite>
 800527a:	bba8      	cbnz	r0, 80052e8 <pow+0x10c>
 800527c:	4640      	mov	r0, r8
 800527e:	4649      	mov	r1, r9
 8005280:	f000 fe1f 	bl	8005ec2 <finite>
 8005284:	b380      	cbz	r0, 80052e8 <pow+0x10c>
 8005286:	4630      	mov	r0, r6
 8005288:	4639      	mov	r1, r7
 800528a:	f000 fe1a 	bl	8005ec2 <finite>
 800528e:	b358      	cbz	r0, 80052e8 <pow+0x10c>
 8005290:	4622      	mov	r2, r4
 8005292:	462b      	mov	r3, r5
 8005294:	4620      	mov	r0, r4
 8005296:	4629      	mov	r1, r5
 8005298:	f7fb fc7c 	bl	8000b94 <__aeabi_dcmpun>
 800529c:	b160      	cbz	r0, 80052b8 <pow+0xdc>
 800529e:	f7ff fb31 	bl	8004904 <__errno>
 80052a2:	2321      	movs	r3, #33	; 0x21
 80052a4:	2200      	movs	r2, #0
 80052a6:	6003      	str	r3, [r0, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	f7fb fb01 	bl	80008b4 <__aeabi_ddiv>
 80052b2:	4604      	mov	r4, r0
 80052b4:	460d      	mov	r5, r1
 80052b6:	e7b6      	b.n	8005226 <pow+0x4a>
 80052b8:	f7ff fb24 	bl	8004904 <__errno>
 80052bc:	2322      	movs	r3, #34	; 0x22
 80052be:	2200      	movs	r2, #0
 80052c0:	6003      	str	r3, [r0, #0]
 80052c2:	4649      	mov	r1, r9
 80052c4:	2300      	movs	r3, #0
 80052c6:	4640      	mov	r0, r8
 80052c8:	f7fb fc3c 	bl	8000b44 <__aeabi_dcmplt>
 80052cc:	2400      	movs	r4, #0
 80052ce:	b148      	cbz	r0, 80052e4 <pow+0x108>
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f000 fe02 	bl	8005edc <rint>
 80052d8:	4632      	mov	r2, r6
 80052da:	463b      	mov	r3, r7
 80052dc:	f7fb fc28 	bl	8000b30 <__aeabi_dcmpeq>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d0c4      	beq.n	800526e <pow+0x92>
 80052e4:	4d11      	ldr	r5, [pc, #68]	; (800532c <pow+0x150>)
 80052e6:	e79e      	b.n	8005226 <pow+0x4a>
 80052e8:	2200      	movs	r2, #0
 80052ea:	2300      	movs	r3, #0
 80052ec:	4620      	mov	r0, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	f7fb fc1e 	bl	8000b30 <__aeabi_dcmpeq>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d096      	beq.n	8005226 <pow+0x4a>
 80052f8:	4640      	mov	r0, r8
 80052fa:	4649      	mov	r1, r9
 80052fc:	f000 fde1 	bl	8005ec2 <finite>
 8005300:	2800      	cmp	r0, #0
 8005302:	d090      	beq.n	8005226 <pow+0x4a>
 8005304:	4630      	mov	r0, r6
 8005306:	4639      	mov	r1, r7
 8005308:	f000 fddb 	bl	8005ec2 <finite>
 800530c:	2800      	cmp	r0, #0
 800530e:	d08a      	beq.n	8005226 <pow+0x4a>
 8005310:	f7ff faf8 	bl	8004904 <__errno>
 8005314:	2322      	movs	r3, #34	; 0x22
 8005316:	2400      	movs	r4, #0
 8005318:	2500      	movs	r5, #0
 800531a:	6003      	str	r3, [r0, #0]
 800531c:	e783      	b.n	8005226 <pow+0x4a>
 800531e:	2400      	movs	r4, #0
 8005320:	4d03      	ldr	r5, [pc, #12]	; (8005330 <pow+0x154>)
 8005322:	e780      	b.n	8005226 <pow+0x4a>
 8005324:	20000070 	.word	0x20000070
 8005328:	fff00000 	.word	0xfff00000
 800532c:	7ff00000 	.word	0x7ff00000
 8005330:	3ff00000 	.word	0x3ff00000
 8005334:	00000000 	.word	0x00000000

08005338 <__ieee754_pow>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	b093      	sub	sp, #76	; 0x4c
 800533e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005342:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005346:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800534a:	ea55 0302 	orrs.w	r3, r5, r2
 800534e:	4607      	mov	r7, r0
 8005350:	4688      	mov	r8, r1
 8005352:	f000 84bf 	beq.w	8005cd4 <__ieee754_pow+0x99c>
 8005356:	4b7e      	ldr	r3, [pc, #504]	; (8005550 <__ieee754_pow+0x218>)
 8005358:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800535c:	429c      	cmp	r4, r3
 800535e:	4689      	mov	r9, r1
 8005360:	4682      	mov	sl, r0
 8005362:	dc09      	bgt.n	8005378 <__ieee754_pow+0x40>
 8005364:	d103      	bne.n	800536e <__ieee754_pow+0x36>
 8005366:	b978      	cbnz	r0, 8005388 <__ieee754_pow+0x50>
 8005368:	42a5      	cmp	r5, r4
 800536a:	dd02      	ble.n	8005372 <__ieee754_pow+0x3a>
 800536c:	e00c      	b.n	8005388 <__ieee754_pow+0x50>
 800536e:	429d      	cmp	r5, r3
 8005370:	dc02      	bgt.n	8005378 <__ieee754_pow+0x40>
 8005372:	429d      	cmp	r5, r3
 8005374:	d10e      	bne.n	8005394 <__ieee754_pow+0x5c>
 8005376:	b16a      	cbz	r2, 8005394 <__ieee754_pow+0x5c>
 8005378:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800537c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005380:	ea54 030a 	orrs.w	r3, r4, sl
 8005384:	f000 84a6 	beq.w	8005cd4 <__ieee754_pow+0x99c>
 8005388:	4872      	ldr	r0, [pc, #456]	; (8005554 <__ieee754_pow+0x21c>)
 800538a:	b013      	add	sp, #76	; 0x4c
 800538c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005390:	f000 bd9e 	b.w	8005ed0 <nan>
 8005394:	f1b9 0f00 	cmp.w	r9, #0
 8005398:	da39      	bge.n	800540e <__ieee754_pow+0xd6>
 800539a:	4b6f      	ldr	r3, [pc, #444]	; (8005558 <__ieee754_pow+0x220>)
 800539c:	429d      	cmp	r5, r3
 800539e:	dc54      	bgt.n	800544a <__ieee754_pow+0x112>
 80053a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80053a4:	429d      	cmp	r5, r3
 80053a6:	f340 84a6 	ble.w	8005cf6 <__ieee754_pow+0x9be>
 80053aa:	152b      	asrs	r3, r5, #20
 80053ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80053b0:	2b14      	cmp	r3, #20
 80053b2:	dd0f      	ble.n	80053d4 <__ieee754_pow+0x9c>
 80053b4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80053b8:	fa22 f103 	lsr.w	r1, r2, r3
 80053bc:	fa01 f303 	lsl.w	r3, r1, r3
 80053c0:	4293      	cmp	r3, r2
 80053c2:	f040 8498 	bne.w	8005cf6 <__ieee754_pow+0x9be>
 80053c6:	f001 0101 	and.w	r1, r1, #1
 80053ca:	f1c1 0302 	rsb	r3, r1, #2
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	b182      	cbz	r2, 80053f4 <__ieee754_pow+0xbc>
 80053d2:	e05e      	b.n	8005492 <__ieee754_pow+0x15a>
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	d15a      	bne.n	800548e <__ieee754_pow+0x156>
 80053d8:	f1c3 0314 	rsb	r3, r3, #20
 80053dc:	fa45 f103 	asr.w	r1, r5, r3
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	42ab      	cmp	r3, r5
 80053e6:	f040 8483 	bne.w	8005cf0 <__ieee754_pow+0x9b8>
 80053ea:	f001 0101 	and.w	r1, r1, #1
 80053ee:	f1c1 0302 	rsb	r3, r1, #2
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	4b59      	ldr	r3, [pc, #356]	; (800555c <__ieee754_pow+0x224>)
 80053f6:	429d      	cmp	r5, r3
 80053f8:	d130      	bne.n	800545c <__ieee754_pow+0x124>
 80053fa:	2e00      	cmp	r6, #0
 80053fc:	f280 8474 	bge.w	8005ce8 <__ieee754_pow+0x9b0>
 8005400:	463a      	mov	r2, r7
 8005402:	4643      	mov	r3, r8
 8005404:	2000      	movs	r0, #0
 8005406:	4955      	ldr	r1, [pc, #340]	; (800555c <__ieee754_pow+0x224>)
 8005408:	f7fb fa54 	bl	80008b4 <__aeabi_ddiv>
 800540c:	e02f      	b.n	800546e <__ieee754_pow+0x136>
 800540e:	2300      	movs	r3, #0
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	2a00      	cmp	r2, #0
 8005414:	d13d      	bne.n	8005492 <__ieee754_pow+0x15a>
 8005416:	4b4e      	ldr	r3, [pc, #312]	; (8005550 <__ieee754_pow+0x218>)
 8005418:	429d      	cmp	r5, r3
 800541a:	d1eb      	bne.n	80053f4 <__ieee754_pow+0xbc>
 800541c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005420:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005424:	ea53 030a 	orrs.w	r3, r3, sl
 8005428:	f000 8454 	beq.w	8005cd4 <__ieee754_pow+0x99c>
 800542c:	4b4c      	ldr	r3, [pc, #304]	; (8005560 <__ieee754_pow+0x228>)
 800542e:	429c      	cmp	r4, r3
 8005430:	dd0d      	ble.n	800544e <__ieee754_pow+0x116>
 8005432:	2e00      	cmp	r6, #0
 8005434:	f280 8454 	bge.w	8005ce0 <__ieee754_pow+0x9a8>
 8005438:	f04f 0b00 	mov.w	fp, #0
 800543c:	f04f 0c00 	mov.w	ip, #0
 8005440:	4658      	mov	r0, fp
 8005442:	4661      	mov	r1, ip
 8005444:	b013      	add	sp, #76	; 0x4c
 8005446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544a:	2302      	movs	r3, #2
 800544c:	e7e0      	b.n	8005410 <__ieee754_pow+0xd8>
 800544e:	2e00      	cmp	r6, #0
 8005450:	daf2      	bge.n	8005438 <__ieee754_pow+0x100>
 8005452:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005456:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800545a:	e7f1      	b.n	8005440 <__ieee754_pow+0x108>
 800545c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005460:	d108      	bne.n	8005474 <__ieee754_pow+0x13c>
 8005462:	463a      	mov	r2, r7
 8005464:	4643      	mov	r3, r8
 8005466:	4638      	mov	r0, r7
 8005468:	4641      	mov	r1, r8
 800546a:	f7fb f8f9 	bl	8000660 <__aeabi_dmul>
 800546e:	4683      	mov	fp, r0
 8005470:	468c      	mov	ip, r1
 8005472:	e7e5      	b.n	8005440 <__ieee754_pow+0x108>
 8005474:	4b3b      	ldr	r3, [pc, #236]	; (8005564 <__ieee754_pow+0x22c>)
 8005476:	429e      	cmp	r6, r3
 8005478:	d10b      	bne.n	8005492 <__ieee754_pow+0x15a>
 800547a:	f1b9 0f00 	cmp.w	r9, #0
 800547e:	db08      	blt.n	8005492 <__ieee754_pow+0x15a>
 8005480:	4638      	mov	r0, r7
 8005482:	4641      	mov	r1, r8
 8005484:	b013      	add	sp, #76	; 0x4c
 8005486:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548a:	f000 bc6b 	b.w	8005d64 <__ieee754_sqrt>
 800548e:	2300      	movs	r3, #0
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	4638      	mov	r0, r7
 8005494:	4641      	mov	r1, r8
 8005496:	f000 fd11 	bl	8005ebc <fabs>
 800549a:	4683      	mov	fp, r0
 800549c:	468c      	mov	ip, r1
 800549e:	f1ba 0f00 	cmp.w	sl, #0
 80054a2:	d129      	bne.n	80054f8 <__ieee754_pow+0x1c0>
 80054a4:	b124      	cbz	r4, 80054b0 <__ieee754_pow+0x178>
 80054a6:	4b2d      	ldr	r3, [pc, #180]	; (800555c <__ieee754_pow+0x224>)
 80054a8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d123      	bne.n	80054f8 <__ieee754_pow+0x1c0>
 80054b0:	2e00      	cmp	r6, #0
 80054b2:	da07      	bge.n	80054c4 <__ieee754_pow+0x18c>
 80054b4:	465a      	mov	r2, fp
 80054b6:	4663      	mov	r3, ip
 80054b8:	2000      	movs	r0, #0
 80054ba:	4928      	ldr	r1, [pc, #160]	; (800555c <__ieee754_pow+0x224>)
 80054bc:	f7fb f9fa 	bl	80008b4 <__aeabi_ddiv>
 80054c0:	4683      	mov	fp, r0
 80054c2:	468c      	mov	ip, r1
 80054c4:	f1b9 0f00 	cmp.w	r9, #0
 80054c8:	daba      	bge.n	8005440 <__ieee754_pow+0x108>
 80054ca:	9b00      	ldr	r3, [sp, #0]
 80054cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80054d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80054d4:	4323      	orrs	r3, r4
 80054d6:	d108      	bne.n	80054ea <__ieee754_pow+0x1b2>
 80054d8:	465a      	mov	r2, fp
 80054da:	4663      	mov	r3, ip
 80054dc:	4658      	mov	r0, fp
 80054de:	4661      	mov	r1, ip
 80054e0:	f7fa ff06 	bl	80002f0 <__aeabi_dsub>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	e78e      	b.n	8005408 <__ieee754_pow+0xd0>
 80054ea:	9b00      	ldr	r3, [sp, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d1a7      	bne.n	8005440 <__ieee754_pow+0x108>
 80054f0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80054f4:	469c      	mov	ip, r3
 80054f6:	e7a3      	b.n	8005440 <__ieee754_pow+0x108>
 80054f8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80054fc:	3b01      	subs	r3, #1
 80054fe:	930c      	str	r3, [sp, #48]	; 0x30
 8005500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005502:	9b00      	ldr	r3, [sp, #0]
 8005504:	4313      	orrs	r3, r2
 8005506:	d104      	bne.n	8005512 <__ieee754_pow+0x1da>
 8005508:	463a      	mov	r2, r7
 800550a:	4643      	mov	r3, r8
 800550c:	4638      	mov	r0, r7
 800550e:	4641      	mov	r1, r8
 8005510:	e7e6      	b.n	80054e0 <__ieee754_pow+0x1a8>
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <__ieee754_pow+0x230>)
 8005514:	429d      	cmp	r5, r3
 8005516:	f340 80f9 	ble.w	800570c <__ieee754_pow+0x3d4>
 800551a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800551e:	429d      	cmp	r5, r3
 8005520:	4b0f      	ldr	r3, [pc, #60]	; (8005560 <__ieee754_pow+0x228>)
 8005522:	dd09      	ble.n	8005538 <__ieee754_pow+0x200>
 8005524:	429c      	cmp	r4, r3
 8005526:	dc0c      	bgt.n	8005542 <__ieee754_pow+0x20a>
 8005528:	2e00      	cmp	r6, #0
 800552a:	da85      	bge.n	8005438 <__ieee754_pow+0x100>
 800552c:	a306      	add	r3, pc, #24	; (adr r3, 8005548 <__ieee754_pow+0x210>)
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	4610      	mov	r0, r2
 8005534:	4619      	mov	r1, r3
 8005536:	e798      	b.n	800546a <__ieee754_pow+0x132>
 8005538:	429c      	cmp	r4, r3
 800553a:	dbf5      	blt.n	8005528 <__ieee754_pow+0x1f0>
 800553c:	4b07      	ldr	r3, [pc, #28]	; (800555c <__ieee754_pow+0x224>)
 800553e:	429c      	cmp	r4, r3
 8005540:	dd14      	ble.n	800556c <__ieee754_pow+0x234>
 8005542:	2e00      	cmp	r6, #0
 8005544:	dcf2      	bgt.n	800552c <__ieee754_pow+0x1f4>
 8005546:	e777      	b.n	8005438 <__ieee754_pow+0x100>
 8005548:	8800759c 	.word	0x8800759c
 800554c:	7e37e43c 	.word	0x7e37e43c
 8005550:	7ff00000 	.word	0x7ff00000
 8005554:	080061ad 	.word	0x080061ad
 8005558:	433fffff 	.word	0x433fffff
 800555c:	3ff00000 	.word	0x3ff00000
 8005560:	3fefffff 	.word	0x3fefffff
 8005564:	3fe00000 	.word	0x3fe00000
 8005568:	41e00000 	.word	0x41e00000
 800556c:	4661      	mov	r1, ip
 800556e:	2200      	movs	r2, #0
 8005570:	4658      	mov	r0, fp
 8005572:	4b61      	ldr	r3, [pc, #388]	; (80056f8 <__ieee754_pow+0x3c0>)
 8005574:	f7fa febc 	bl	80002f0 <__aeabi_dsub>
 8005578:	a355      	add	r3, pc, #340	; (adr r3, 80056d0 <__ieee754_pow+0x398>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	4604      	mov	r4, r0
 8005580:	460d      	mov	r5, r1
 8005582:	f7fb f86d 	bl	8000660 <__aeabi_dmul>
 8005586:	a354      	add	r3, pc, #336	; (adr r3, 80056d8 <__ieee754_pow+0x3a0>)
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	4606      	mov	r6, r0
 800558e:	460f      	mov	r7, r1
 8005590:	4620      	mov	r0, r4
 8005592:	4629      	mov	r1, r5
 8005594:	f7fb f864 	bl	8000660 <__aeabi_dmul>
 8005598:	2200      	movs	r2, #0
 800559a:	4682      	mov	sl, r0
 800559c:	468b      	mov	fp, r1
 800559e:	4620      	mov	r0, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	4b56      	ldr	r3, [pc, #344]	; (80056fc <__ieee754_pow+0x3c4>)
 80055a4:	f7fb f85c 	bl	8000660 <__aeabi_dmul>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	a14c      	add	r1, pc, #304	; (adr r1, 80056e0 <__ieee754_pow+0x3a8>)
 80055ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055b2:	f7fa fe9d 	bl	80002f0 <__aeabi_dsub>
 80055b6:	4622      	mov	r2, r4
 80055b8:	462b      	mov	r3, r5
 80055ba:	f7fb f851 	bl	8000660 <__aeabi_dmul>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	2000      	movs	r0, #0
 80055c4:	494e      	ldr	r1, [pc, #312]	; (8005700 <__ieee754_pow+0x3c8>)
 80055c6:	f7fa fe93 	bl	80002f0 <__aeabi_dsub>
 80055ca:	4622      	mov	r2, r4
 80055cc:	462b      	mov	r3, r5
 80055ce:	4680      	mov	r8, r0
 80055d0:	4689      	mov	r9, r1
 80055d2:	4620      	mov	r0, r4
 80055d4:	4629      	mov	r1, r5
 80055d6:	f7fb f843 	bl	8000660 <__aeabi_dmul>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4640      	mov	r0, r8
 80055e0:	4649      	mov	r1, r9
 80055e2:	f7fb f83d 	bl	8000660 <__aeabi_dmul>
 80055e6:	a340      	add	r3, pc, #256	; (adr r3, 80056e8 <__ieee754_pow+0x3b0>)
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f7fb f838 	bl	8000660 <__aeabi_dmul>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4650      	mov	r0, sl
 80055f6:	4659      	mov	r1, fp
 80055f8:	f7fa fe7a 	bl	80002f0 <__aeabi_dsub>
 80055fc:	f04f 0a00 	mov.w	sl, #0
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4604      	mov	r4, r0
 8005606:	460d      	mov	r5, r1
 8005608:	4630      	mov	r0, r6
 800560a:	4639      	mov	r1, r7
 800560c:	f7fa fe72 	bl	80002f4 <__adddf3>
 8005610:	4632      	mov	r2, r6
 8005612:	463b      	mov	r3, r7
 8005614:	4650      	mov	r0, sl
 8005616:	468b      	mov	fp, r1
 8005618:	f7fa fe6a 	bl	80002f0 <__aeabi_dsub>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4620      	mov	r0, r4
 8005622:	4629      	mov	r1, r5
 8005624:	f7fa fe64 	bl	80002f0 <__aeabi_dsub>
 8005628:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800562c:	9b00      	ldr	r3, [sp, #0]
 800562e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005630:	3b01      	subs	r3, #1
 8005632:	4313      	orrs	r3, r2
 8005634:	f04f 0600 	mov.w	r6, #0
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	bf0c      	ite	eq
 800563e:	4b31      	ldreq	r3, [pc, #196]	; (8005704 <__ieee754_pow+0x3cc>)
 8005640:	4b2d      	ldrne	r3, [pc, #180]	; (80056f8 <__ieee754_pow+0x3c0>)
 8005642:	4604      	mov	r4, r0
 8005644:	460d      	mov	r5, r1
 8005646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800564a:	e9cd 2300 	strd	r2, r3, [sp]
 800564e:	4632      	mov	r2, r6
 8005650:	463b      	mov	r3, r7
 8005652:	f7fa fe4d 	bl	80002f0 <__aeabi_dsub>
 8005656:	4652      	mov	r2, sl
 8005658:	465b      	mov	r3, fp
 800565a:	f7fb f801 	bl	8000660 <__aeabi_dmul>
 800565e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005662:	4680      	mov	r8, r0
 8005664:	4689      	mov	r9, r1
 8005666:	4620      	mov	r0, r4
 8005668:	4629      	mov	r1, r5
 800566a:	f7fa fff9 	bl	8000660 <__aeabi_dmul>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4640      	mov	r0, r8
 8005674:	4649      	mov	r1, r9
 8005676:	f7fa fe3d 	bl	80002f4 <__adddf3>
 800567a:	4632      	mov	r2, r6
 800567c:	463b      	mov	r3, r7
 800567e:	4680      	mov	r8, r0
 8005680:	4689      	mov	r9, r1
 8005682:	4650      	mov	r0, sl
 8005684:	4659      	mov	r1, fp
 8005686:	f7fa ffeb 	bl	8000660 <__aeabi_dmul>
 800568a:	4604      	mov	r4, r0
 800568c:	460d      	mov	r5, r1
 800568e:	460b      	mov	r3, r1
 8005690:	4602      	mov	r2, r0
 8005692:	4649      	mov	r1, r9
 8005694:	4640      	mov	r0, r8
 8005696:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800569a:	f7fa fe2b 	bl	80002f4 <__adddf3>
 800569e:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <__ieee754_pow+0x3d0>)
 80056a0:	4682      	mov	sl, r0
 80056a2:	4299      	cmp	r1, r3
 80056a4:	460f      	mov	r7, r1
 80056a6:	460e      	mov	r6, r1
 80056a8:	f340 82ed 	ble.w	8005c86 <__ieee754_pow+0x94e>
 80056ac:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80056b0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80056b4:	4303      	orrs	r3, r0
 80056b6:	f000 81e7 	beq.w	8005a88 <__ieee754_pow+0x750>
 80056ba:	a30d      	add	r3, pc, #52	; (adr r3, 80056f0 <__ieee754_pow+0x3b8>)
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056c4:	f7fa ffcc 	bl	8000660 <__aeabi_dmul>
 80056c8:	a309      	add	r3, pc, #36	; (adr r3, 80056f0 <__ieee754_pow+0x3b8>)
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	e6cc      	b.n	800546a <__ieee754_pow+0x132>
 80056d0:	60000000 	.word	0x60000000
 80056d4:	3ff71547 	.word	0x3ff71547
 80056d8:	f85ddf44 	.word	0xf85ddf44
 80056dc:	3e54ae0b 	.word	0x3e54ae0b
 80056e0:	55555555 	.word	0x55555555
 80056e4:	3fd55555 	.word	0x3fd55555
 80056e8:	652b82fe 	.word	0x652b82fe
 80056ec:	3ff71547 	.word	0x3ff71547
 80056f0:	8800759c 	.word	0x8800759c
 80056f4:	7e37e43c 	.word	0x7e37e43c
 80056f8:	3ff00000 	.word	0x3ff00000
 80056fc:	3fd00000 	.word	0x3fd00000
 8005700:	3fe00000 	.word	0x3fe00000
 8005704:	bff00000 	.word	0xbff00000
 8005708:	408fffff 	.word	0x408fffff
 800570c:	4bd4      	ldr	r3, [pc, #848]	; (8005a60 <__ieee754_pow+0x728>)
 800570e:	2200      	movs	r2, #0
 8005710:	ea09 0303 	and.w	r3, r9, r3
 8005714:	b943      	cbnz	r3, 8005728 <__ieee754_pow+0x3f0>
 8005716:	4658      	mov	r0, fp
 8005718:	4661      	mov	r1, ip
 800571a:	4bd2      	ldr	r3, [pc, #840]	; (8005a64 <__ieee754_pow+0x72c>)
 800571c:	f7fa ffa0 	bl	8000660 <__aeabi_dmul>
 8005720:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005724:	4683      	mov	fp, r0
 8005726:	460c      	mov	r4, r1
 8005728:	1523      	asrs	r3, r4, #20
 800572a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800572e:	4413      	add	r3, r2
 8005730:	930b      	str	r3, [sp, #44]	; 0x2c
 8005732:	4bcd      	ldr	r3, [pc, #820]	; (8005a68 <__ieee754_pow+0x730>)
 8005734:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005738:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800573c:	429c      	cmp	r4, r3
 800573e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005742:	dd08      	ble.n	8005756 <__ieee754_pow+0x41e>
 8005744:	4bc9      	ldr	r3, [pc, #804]	; (8005a6c <__ieee754_pow+0x734>)
 8005746:	429c      	cmp	r4, r3
 8005748:	f340 819c 	ble.w	8005a84 <__ieee754_pow+0x74c>
 800574c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800574e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005752:	3301      	adds	r3, #1
 8005754:	930b      	str	r3, [sp, #44]	; 0x2c
 8005756:	2600      	movs	r6, #0
 8005758:	00f3      	lsls	r3, r6, #3
 800575a:	930d      	str	r3, [sp, #52]	; 0x34
 800575c:	4bc4      	ldr	r3, [pc, #784]	; (8005a70 <__ieee754_pow+0x738>)
 800575e:	4658      	mov	r0, fp
 8005760:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005764:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005768:	4629      	mov	r1, r5
 800576a:	461a      	mov	r2, r3
 800576c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005770:	4623      	mov	r3, r4
 8005772:	f7fa fdbd 	bl	80002f0 <__aeabi_dsub>
 8005776:	46da      	mov	sl, fp
 8005778:	462b      	mov	r3, r5
 800577a:	4652      	mov	r2, sl
 800577c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005780:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005784:	f7fa fdb6 	bl	80002f4 <__adddf3>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	2000      	movs	r0, #0
 800578e:	49b9      	ldr	r1, [pc, #740]	; (8005a74 <__ieee754_pow+0x73c>)
 8005790:	f7fb f890 	bl	80008b4 <__aeabi_ddiv>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800579c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80057a0:	f7fa ff5e 	bl	8000660 <__aeabi_dmul>
 80057a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057a8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80057ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80057b0:	2300      	movs	r3, #0
 80057b2:	2200      	movs	r2, #0
 80057b4:	46ab      	mov	fp, r5
 80057b6:	106d      	asrs	r5, r5, #1
 80057b8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80057bc:	9304      	str	r3, [sp, #16]
 80057be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80057c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80057c6:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80057ca:	4640      	mov	r0, r8
 80057cc:	4649      	mov	r1, r9
 80057ce:	4614      	mov	r4, r2
 80057d0:	461d      	mov	r5, r3
 80057d2:	f7fa ff45 	bl	8000660 <__aeabi_dmul>
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80057de:	f7fa fd87 	bl	80002f0 <__aeabi_dsub>
 80057e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057e6:	4606      	mov	r6, r0
 80057e8:	460f      	mov	r7, r1
 80057ea:	4620      	mov	r0, r4
 80057ec:	4629      	mov	r1, r5
 80057ee:	f7fa fd7f 	bl	80002f0 <__aeabi_dsub>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4650      	mov	r0, sl
 80057f8:	4659      	mov	r1, fp
 80057fa:	f7fa fd79 	bl	80002f0 <__aeabi_dsub>
 80057fe:	4642      	mov	r2, r8
 8005800:	464b      	mov	r3, r9
 8005802:	f7fa ff2d 	bl	8000660 <__aeabi_dmul>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4630      	mov	r0, r6
 800580c:	4639      	mov	r1, r7
 800580e:	f7fa fd6f 	bl	80002f0 <__aeabi_dsub>
 8005812:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005816:	f7fa ff23 	bl	8000660 <__aeabi_dmul>
 800581a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800581e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005822:	4610      	mov	r0, r2
 8005824:	4619      	mov	r1, r3
 8005826:	f7fa ff1b 	bl	8000660 <__aeabi_dmul>
 800582a:	a37b      	add	r3, pc, #492	; (adr r3, 8005a18 <__ieee754_pow+0x6e0>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	4604      	mov	r4, r0
 8005832:	460d      	mov	r5, r1
 8005834:	f7fa ff14 	bl	8000660 <__aeabi_dmul>
 8005838:	a379      	add	r3, pc, #484	; (adr r3, 8005a20 <__ieee754_pow+0x6e8>)
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	f7fa fd59 	bl	80002f4 <__adddf3>
 8005842:	4622      	mov	r2, r4
 8005844:	462b      	mov	r3, r5
 8005846:	f7fa ff0b 	bl	8000660 <__aeabi_dmul>
 800584a:	a377      	add	r3, pc, #476	; (adr r3, 8005a28 <__ieee754_pow+0x6f0>)
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f7fa fd50 	bl	80002f4 <__adddf3>
 8005854:	4622      	mov	r2, r4
 8005856:	462b      	mov	r3, r5
 8005858:	f7fa ff02 	bl	8000660 <__aeabi_dmul>
 800585c:	a374      	add	r3, pc, #464	; (adr r3, 8005a30 <__ieee754_pow+0x6f8>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f7fa fd47 	bl	80002f4 <__adddf3>
 8005866:	4622      	mov	r2, r4
 8005868:	462b      	mov	r3, r5
 800586a:	f7fa fef9 	bl	8000660 <__aeabi_dmul>
 800586e:	a372      	add	r3, pc, #456	; (adr r3, 8005a38 <__ieee754_pow+0x700>)
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f7fa fd3e 	bl	80002f4 <__adddf3>
 8005878:	4622      	mov	r2, r4
 800587a:	462b      	mov	r3, r5
 800587c:	f7fa fef0 	bl	8000660 <__aeabi_dmul>
 8005880:	a36f      	add	r3, pc, #444	; (adr r3, 8005a40 <__ieee754_pow+0x708>)
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f7fa fd35 	bl	80002f4 <__adddf3>
 800588a:	4622      	mov	r2, r4
 800588c:	4606      	mov	r6, r0
 800588e:	460f      	mov	r7, r1
 8005890:	462b      	mov	r3, r5
 8005892:	4620      	mov	r0, r4
 8005894:	4629      	mov	r1, r5
 8005896:	f7fa fee3 	bl	8000660 <__aeabi_dmul>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4630      	mov	r0, r6
 80058a0:	4639      	mov	r1, r7
 80058a2:	f7fa fedd 	bl	8000660 <__aeabi_dmul>
 80058a6:	4604      	mov	r4, r0
 80058a8:	460d      	mov	r5, r1
 80058aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058ae:	4642      	mov	r2, r8
 80058b0:	464b      	mov	r3, r9
 80058b2:	f7fa fd1f 	bl	80002f4 <__adddf3>
 80058b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058ba:	f7fa fed1 	bl	8000660 <__aeabi_dmul>
 80058be:	4622      	mov	r2, r4
 80058c0:	462b      	mov	r3, r5
 80058c2:	f7fa fd17 	bl	80002f4 <__adddf3>
 80058c6:	4642      	mov	r2, r8
 80058c8:	4606      	mov	r6, r0
 80058ca:	460f      	mov	r7, r1
 80058cc:	464b      	mov	r3, r9
 80058ce:	4640      	mov	r0, r8
 80058d0:	4649      	mov	r1, r9
 80058d2:	f7fa fec5 	bl	8000660 <__aeabi_dmul>
 80058d6:	2200      	movs	r2, #0
 80058d8:	4b67      	ldr	r3, [pc, #412]	; (8005a78 <__ieee754_pow+0x740>)
 80058da:	4682      	mov	sl, r0
 80058dc:	468b      	mov	fp, r1
 80058de:	f7fa fd09 	bl	80002f4 <__adddf3>
 80058e2:	4632      	mov	r2, r6
 80058e4:	463b      	mov	r3, r7
 80058e6:	f7fa fd05 	bl	80002f4 <__adddf3>
 80058ea:	9c04      	ldr	r4, [sp, #16]
 80058ec:	460d      	mov	r5, r1
 80058ee:	4622      	mov	r2, r4
 80058f0:	460b      	mov	r3, r1
 80058f2:	4640      	mov	r0, r8
 80058f4:	4649      	mov	r1, r9
 80058f6:	f7fa feb3 	bl	8000660 <__aeabi_dmul>
 80058fa:	2200      	movs	r2, #0
 80058fc:	4680      	mov	r8, r0
 80058fe:	4689      	mov	r9, r1
 8005900:	4620      	mov	r0, r4
 8005902:	4629      	mov	r1, r5
 8005904:	4b5c      	ldr	r3, [pc, #368]	; (8005a78 <__ieee754_pow+0x740>)
 8005906:	f7fa fcf3 	bl	80002f0 <__aeabi_dsub>
 800590a:	4652      	mov	r2, sl
 800590c:	465b      	mov	r3, fp
 800590e:	f7fa fcef 	bl	80002f0 <__aeabi_dsub>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4630      	mov	r0, r6
 8005918:	4639      	mov	r1, r7
 800591a:	f7fa fce9 	bl	80002f0 <__aeabi_dsub>
 800591e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005922:	f7fa fe9d 	bl	8000660 <__aeabi_dmul>
 8005926:	4622      	mov	r2, r4
 8005928:	4606      	mov	r6, r0
 800592a:	460f      	mov	r7, r1
 800592c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005930:	462b      	mov	r3, r5
 8005932:	f7fa fe95 	bl	8000660 <__aeabi_dmul>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4630      	mov	r0, r6
 800593c:	4639      	mov	r1, r7
 800593e:	f7fa fcd9 	bl	80002f4 <__adddf3>
 8005942:	4606      	mov	r6, r0
 8005944:	460f      	mov	r7, r1
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4640      	mov	r0, r8
 800594c:	4649      	mov	r1, r9
 800594e:	f7fa fcd1 	bl	80002f4 <__adddf3>
 8005952:	a33d      	add	r3, pc, #244	; (adr r3, 8005a48 <__ieee754_pow+0x710>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	9c04      	ldr	r4, [sp, #16]
 800595a:	460d      	mov	r5, r1
 800595c:	4620      	mov	r0, r4
 800595e:	f7fa fe7f 	bl	8000660 <__aeabi_dmul>
 8005962:	4642      	mov	r2, r8
 8005964:	464b      	mov	r3, r9
 8005966:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800596a:	4620      	mov	r0, r4
 800596c:	4629      	mov	r1, r5
 800596e:	f7fa fcbf 	bl	80002f0 <__aeabi_dsub>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4630      	mov	r0, r6
 8005978:	4639      	mov	r1, r7
 800597a:	f7fa fcb9 	bl	80002f0 <__aeabi_dsub>
 800597e:	a334      	add	r3, pc, #208	; (adr r3, 8005a50 <__ieee754_pow+0x718>)
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f7fa fe6c 	bl	8000660 <__aeabi_dmul>
 8005988:	a333      	add	r3, pc, #204	; (adr r3, 8005a58 <__ieee754_pow+0x720>)
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	4606      	mov	r6, r0
 8005990:	460f      	mov	r7, r1
 8005992:	4620      	mov	r0, r4
 8005994:	4629      	mov	r1, r5
 8005996:	f7fa fe63 	bl	8000660 <__aeabi_dmul>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4630      	mov	r0, r6
 80059a0:	4639      	mov	r1, r7
 80059a2:	f7fa fca7 	bl	80002f4 <__adddf3>
 80059a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059a8:	4b34      	ldr	r3, [pc, #208]	; (8005a7c <__ieee754_pow+0x744>)
 80059aa:	4413      	add	r3, r2
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f7fa fca0 	bl	80002f4 <__adddf3>
 80059b4:	4680      	mov	r8, r0
 80059b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80059b8:	4689      	mov	r9, r1
 80059ba:	f7fa fde7 	bl	800058c <__aeabi_i2d>
 80059be:	4604      	mov	r4, r0
 80059c0:	460d      	mov	r5, r1
 80059c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059c4:	4b2e      	ldr	r3, [pc, #184]	; (8005a80 <__ieee754_pow+0x748>)
 80059c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059ca:	4413      	add	r3, r2
 80059cc:	e9d3 6700 	ldrd	r6, r7, [r3]
 80059d0:	4642      	mov	r2, r8
 80059d2:	464b      	mov	r3, r9
 80059d4:	f7fa fc8e 	bl	80002f4 <__adddf3>
 80059d8:	4632      	mov	r2, r6
 80059da:	463b      	mov	r3, r7
 80059dc:	f7fa fc8a 	bl	80002f4 <__adddf3>
 80059e0:	4622      	mov	r2, r4
 80059e2:	462b      	mov	r3, r5
 80059e4:	f7fa fc86 	bl	80002f4 <__adddf3>
 80059e8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80059ec:	4622      	mov	r2, r4
 80059ee:	462b      	mov	r3, r5
 80059f0:	4650      	mov	r0, sl
 80059f2:	468b      	mov	fp, r1
 80059f4:	f7fa fc7c 	bl	80002f0 <__aeabi_dsub>
 80059f8:	4632      	mov	r2, r6
 80059fa:	463b      	mov	r3, r7
 80059fc:	f7fa fc78 	bl	80002f0 <__aeabi_dsub>
 8005a00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a04:	f7fa fc74 	bl	80002f0 <__aeabi_dsub>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	4649      	mov	r1, r9
 8005a10:	e608      	b.n	8005624 <__ieee754_pow+0x2ec>
 8005a12:	bf00      	nop
 8005a14:	f3af 8000 	nop.w
 8005a18:	4a454eef 	.word	0x4a454eef
 8005a1c:	3fca7e28 	.word	0x3fca7e28
 8005a20:	93c9db65 	.word	0x93c9db65
 8005a24:	3fcd864a 	.word	0x3fcd864a
 8005a28:	a91d4101 	.word	0xa91d4101
 8005a2c:	3fd17460 	.word	0x3fd17460
 8005a30:	518f264d 	.word	0x518f264d
 8005a34:	3fd55555 	.word	0x3fd55555
 8005a38:	db6fabff 	.word	0xdb6fabff
 8005a3c:	3fdb6db6 	.word	0x3fdb6db6
 8005a40:	33333303 	.word	0x33333303
 8005a44:	3fe33333 	.word	0x3fe33333
 8005a48:	e0000000 	.word	0xe0000000
 8005a4c:	3feec709 	.word	0x3feec709
 8005a50:	dc3a03fd 	.word	0xdc3a03fd
 8005a54:	3feec709 	.word	0x3feec709
 8005a58:	145b01f5 	.word	0x145b01f5
 8005a5c:	be3e2fe0 	.word	0xbe3e2fe0
 8005a60:	7ff00000 	.word	0x7ff00000
 8005a64:	43400000 	.word	0x43400000
 8005a68:	0003988e 	.word	0x0003988e
 8005a6c:	000bb679 	.word	0x000bb679
 8005a70:	080061e0 	.word	0x080061e0
 8005a74:	3ff00000 	.word	0x3ff00000
 8005a78:	40080000 	.word	0x40080000
 8005a7c:	08006200 	.word	0x08006200
 8005a80:	080061f0 	.word	0x080061f0
 8005a84:	2601      	movs	r6, #1
 8005a86:	e667      	b.n	8005758 <__ieee754_pow+0x420>
 8005a88:	a39d      	add	r3, pc, #628	; (adr r3, 8005d00 <__ieee754_pow+0x9c8>)
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	4640      	mov	r0, r8
 8005a90:	4649      	mov	r1, r9
 8005a92:	f7fa fc2f 	bl	80002f4 <__adddf3>
 8005a96:	4622      	mov	r2, r4
 8005a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a9c:	462b      	mov	r3, r5
 8005a9e:	4650      	mov	r0, sl
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	f7fa fc25 	bl	80002f0 <__aeabi_dsub>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aae:	f7fb f867 	bl	8000b80 <__aeabi_dcmpgt>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f47f ae01 	bne.w	80056ba <__ieee754_pow+0x382>
 8005ab8:	4aa5      	ldr	r2, [pc, #660]	; (8005d50 <__ieee754_pow+0xa18>)
 8005aba:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	f340 8103 	ble.w	8005cca <__ieee754_pow+0x992>
 8005ac4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005ac8:	2000      	movs	r0, #0
 8005aca:	151b      	asrs	r3, r3, #20
 8005acc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005ad0:	fa4a f303 	asr.w	r3, sl, r3
 8005ad4:	4433      	add	r3, r6
 8005ad6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005ada:	4f9e      	ldr	r7, [pc, #632]	; (8005d54 <__ieee754_pow+0xa1c>)
 8005adc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005ae0:	4117      	asrs	r7, r2
 8005ae2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005ae6:	ea23 0107 	bic.w	r1, r3, r7
 8005aea:	f1c2 0214 	rsb	r2, r2, #20
 8005aee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005af2:	460b      	mov	r3, r1
 8005af4:	fa4a fa02 	asr.w	sl, sl, r2
 8005af8:	2e00      	cmp	r6, #0
 8005afa:	4602      	mov	r2, r0
 8005afc:	4629      	mov	r1, r5
 8005afe:	4620      	mov	r0, r4
 8005b00:	bfb8      	it	lt
 8005b02:	f1ca 0a00 	rsblt	sl, sl, #0
 8005b06:	f7fa fbf3 	bl	80002f0 <__aeabi_dsub>
 8005b0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b12:	2400      	movs	r4, #0
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	f7fa fbec 	bl	80002f4 <__adddf3>
 8005b1c:	a37a      	add	r3, pc, #488	; (adr r3, 8005d08 <__ieee754_pow+0x9d0>)
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	4620      	mov	r0, r4
 8005b24:	460d      	mov	r5, r1
 8005b26:	f7fa fd9b 	bl	8000660 <__aeabi_dmul>
 8005b2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b2e:	4606      	mov	r6, r0
 8005b30:	460f      	mov	r7, r1
 8005b32:	4620      	mov	r0, r4
 8005b34:	4629      	mov	r1, r5
 8005b36:	f7fa fbdb 	bl	80002f0 <__aeabi_dsub>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4640      	mov	r0, r8
 8005b40:	4649      	mov	r1, r9
 8005b42:	f7fa fbd5 	bl	80002f0 <__aeabi_dsub>
 8005b46:	a372      	add	r3, pc, #456	; (adr r3, 8005d10 <__ieee754_pow+0x9d8>)
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f7fa fd88 	bl	8000660 <__aeabi_dmul>
 8005b50:	a371      	add	r3, pc, #452	; (adr r3, 8005d18 <__ieee754_pow+0x9e0>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	4680      	mov	r8, r0
 8005b58:	4689      	mov	r9, r1
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	f7fa fd7f 	bl	8000660 <__aeabi_dmul>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4640      	mov	r0, r8
 8005b68:	4649      	mov	r1, r9
 8005b6a:	f7fa fbc3 	bl	80002f4 <__adddf3>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	460d      	mov	r5, r1
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4630      	mov	r0, r6
 8005b78:	4639      	mov	r1, r7
 8005b7a:	f7fa fbbb 	bl	80002f4 <__adddf3>
 8005b7e:	4632      	mov	r2, r6
 8005b80:	463b      	mov	r3, r7
 8005b82:	4680      	mov	r8, r0
 8005b84:	4689      	mov	r9, r1
 8005b86:	f7fa fbb3 	bl	80002f0 <__aeabi_dsub>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4620      	mov	r0, r4
 8005b90:	4629      	mov	r1, r5
 8005b92:	f7fa fbad 	bl	80002f0 <__aeabi_dsub>
 8005b96:	4642      	mov	r2, r8
 8005b98:	4606      	mov	r6, r0
 8005b9a:	460f      	mov	r7, r1
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	f7fa fd5d 	bl	8000660 <__aeabi_dmul>
 8005ba6:	a35e      	add	r3, pc, #376	; (adr r3, 8005d20 <__ieee754_pow+0x9e8>)
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	4604      	mov	r4, r0
 8005bae:	460d      	mov	r5, r1
 8005bb0:	f7fa fd56 	bl	8000660 <__aeabi_dmul>
 8005bb4:	a35c      	add	r3, pc, #368	; (adr r3, 8005d28 <__ieee754_pow+0x9f0>)
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	f7fa fb99 	bl	80002f0 <__aeabi_dsub>
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	f7fa fd4d 	bl	8000660 <__aeabi_dmul>
 8005bc6:	a35a      	add	r3, pc, #360	; (adr r3, 8005d30 <__ieee754_pow+0x9f8>)
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f7fa fb92 	bl	80002f4 <__adddf3>
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	462b      	mov	r3, r5
 8005bd4:	f7fa fd44 	bl	8000660 <__aeabi_dmul>
 8005bd8:	a357      	add	r3, pc, #348	; (adr r3, 8005d38 <__ieee754_pow+0xa00>)
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f7fa fb87 	bl	80002f0 <__aeabi_dsub>
 8005be2:	4622      	mov	r2, r4
 8005be4:	462b      	mov	r3, r5
 8005be6:	f7fa fd3b 	bl	8000660 <__aeabi_dmul>
 8005bea:	a355      	add	r3, pc, #340	; (adr r3, 8005d40 <__ieee754_pow+0xa08>)
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	f7fa fb80 	bl	80002f4 <__adddf3>
 8005bf4:	4622      	mov	r2, r4
 8005bf6:	462b      	mov	r3, r5
 8005bf8:	f7fa fd32 	bl	8000660 <__aeabi_dmul>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4640      	mov	r0, r8
 8005c02:	4649      	mov	r1, r9
 8005c04:	f7fa fb74 	bl	80002f0 <__aeabi_dsub>
 8005c08:	4604      	mov	r4, r0
 8005c0a:	460d      	mov	r5, r1
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4640      	mov	r0, r8
 8005c12:	4649      	mov	r1, r9
 8005c14:	f7fa fd24 	bl	8000660 <__aeabi_dmul>
 8005c18:	2200      	movs	r2, #0
 8005c1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c22:	4620      	mov	r0, r4
 8005c24:	4629      	mov	r1, r5
 8005c26:	f7fa fb63 	bl	80002f0 <__aeabi_dsub>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c32:	f7fa fe3f 	bl	80008b4 <__aeabi_ddiv>
 8005c36:	4632      	mov	r2, r6
 8005c38:	4604      	mov	r4, r0
 8005c3a:	460d      	mov	r5, r1
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	4640      	mov	r0, r8
 8005c40:	4649      	mov	r1, r9
 8005c42:	f7fa fd0d 	bl	8000660 <__aeabi_dmul>
 8005c46:	4632      	mov	r2, r6
 8005c48:	463b      	mov	r3, r7
 8005c4a:	f7fa fb53 	bl	80002f4 <__adddf3>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4620      	mov	r0, r4
 8005c54:	4629      	mov	r1, r5
 8005c56:	f7fa fb4b 	bl	80002f0 <__aeabi_dsub>
 8005c5a:	4642      	mov	r2, r8
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	f7fa fb47 	bl	80002f0 <__aeabi_dsub>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	2000      	movs	r0, #0
 8005c68:	493b      	ldr	r1, [pc, #236]	; (8005d58 <__ieee754_pow+0xa20>)
 8005c6a:	f7fa fb41 	bl	80002f0 <__aeabi_dsub>
 8005c6e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005c72:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005c76:	da2b      	bge.n	8005cd0 <__ieee754_pow+0x998>
 8005c78:	4652      	mov	r2, sl
 8005c7a:	f000 f9b9 	bl	8005ff0 <scalbn>
 8005c7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c82:	f7ff bbf2 	b.w	800546a <__ieee754_pow+0x132>
 8005c86:	4b35      	ldr	r3, [pc, #212]	; (8005d5c <__ieee754_pow+0xa24>)
 8005c88:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005c8c:	429f      	cmp	r7, r3
 8005c8e:	f77f af13 	ble.w	8005ab8 <__ieee754_pow+0x780>
 8005c92:	4b33      	ldr	r3, [pc, #204]	; (8005d60 <__ieee754_pow+0xa28>)
 8005c94:	440b      	add	r3, r1
 8005c96:	4303      	orrs	r3, r0
 8005c98:	d00b      	beq.n	8005cb2 <__ieee754_pow+0x97a>
 8005c9a:	a32b      	add	r3, pc, #172	; (adr r3, 8005d48 <__ieee754_pow+0xa10>)
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ca4:	f7fa fcdc 	bl	8000660 <__aeabi_dmul>
 8005ca8:	a327      	add	r3, pc, #156	; (adr r3, 8005d48 <__ieee754_pow+0xa10>)
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	f7ff bbdc 	b.w	800546a <__ieee754_pow+0x132>
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	462b      	mov	r3, r5
 8005cb6:	f7fa fb1b 	bl	80002f0 <__aeabi_dsub>
 8005cba:	4642      	mov	r2, r8
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	f7fa ff55 	bl	8000b6c <__aeabi_dcmpge>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f43f aef8 	beq.w	8005ab8 <__ieee754_pow+0x780>
 8005cc8:	e7e7      	b.n	8005c9a <__ieee754_pow+0x962>
 8005cca:	f04f 0a00 	mov.w	sl, #0
 8005cce:	e71e      	b.n	8005b0e <__ieee754_pow+0x7d6>
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	e7d4      	b.n	8005c7e <__ieee754_pow+0x946>
 8005cd4:	f04f 0b00 	mov.w	fp, #0
 8005cd8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005d58 <__ieee754_pow+0xa20>
 8005cdc:	f7ff bbb0 	b.w	8005440 <__ieee754_pow+0x108>
 8005ce0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005ce4:	f7ff bbac 	b.w	8005440 <__ieee754_pow+0x108>
 8005ce8:	4638      	mov	r0, r7
 8005cea:	4641      	mov	r1, r8
 8005cec:	f7ff bbbf 	b.w	800546e <__ieee754_pow+0x136>
 8005cf0:	9200      	str	r2, [sp, #0]
 8005cf2:	f7ff bb7f 	b.w	80053f4 <__ieee754_pow+0xbc>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f7ff bb69 	b.w	80053ce <__ieee754_pow+0x96>
 8005cfc:	f3af 8000 	nop.w
 8005d00:	652b82fe 	.word	0x652b82fe
 8005d04:	3c971547 	.word	0x3c971547
 8005d08:	00000000 	.word	0x00000000
 8005d0c:	3fe62e43 	.word	0x3fe62e43
 8005d10:	fefa39ef 	.word	0xfefa39ef
 8005d14:	3fe62e42 	.word	0x3fe62e42
 8005d18:	0ca86c39 	.word	0x0ca86c39
 8005d1c:	be205c61 	.word	0xbe205c61
 8005d20:	72bea4d0 	.word	0x72bea4d0
 8005d24:	3e663769 	.word	0x3e663769
 8005d28:	c5d26bf1 	.word	0xc5d26bf1
 8005d2c:	3ebbbd41 	.word	0x3ebbbd41
 8005d30:	af25de2c 	.word	0xaf25de2c
 8005d34:	3f11566a 	.word	0x3f11566a
 8005d38:	16bebd93 	.word	0x16bebd93
 8005d3c:	3f66c16c 	.word	0x3f66c16c
 8005d40:	5555553e 	.word	0x5555553e
 8005d44:	3fc55555 	.word	0x3fc55555
 8005d48:	c2f8f359 	.word	0xc2f8f359
 8005d4c:	01a56e1f 	.word	0x01a56e1f
 8005d50:	3fe00000 	.word	0x3fe00000
 8005d54:	000fffff 	.word	0x000fffff
 8005d58:	3ff00000 	.word	0x3ff00000
 8005d5c:	4090cbff 	.word	0x4090cbff
 8005d60:	3f6f3400 	.word	0x3f6f3400

08005d64 <__ieee754_sqrt>:
 8005d64:	f8df c150 	ldr.w	ip, [pc, #336]	; 8005eb8 <__ieee754_sqrt+0x154>
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	ea3c 0c01 	bics.w	ip, ip, r1
 8005d70:	460b      	mov	r3, r1
 8005d72:	4606      	mov	r6, r0
 8005d74:	460d      	mov	r5, r1
 8005d76:	460a      	mov	r2, r1
 8005d78:	4607      	mov	r7, r0
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	d10e      	bne.n	8005d9c <__ieee754_sqrt+0x38>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	f7fa fc6e 	bl	8000660 <__aeabi_dmul>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4630      	mov	r0, r6
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	f7fa fab2 	bl	80002f4 <__adddf3>
 8005d90:	4606      	mov	r6, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	4630      	mov	r0, r6
 8005d96:	4629      	mov	r1, r5
 8005d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	dc0d      	bgt.n	8005dbc <__ieee754_sqrt+0x58>
 8005da0:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005da4:	ea5c 0707 	orrs.w	r7, ip, r7
 8005da8:	d0f4      	beq.n	8005d94 <__ieee754_sqrt+0x30>
 8005daa:	b139      	cbz	r1, 8005dbc <__ieee754_sqrt+0x58>
 8005dac:	4602      	mov	r2, r0
 8005dae:	f7fa fa9f 	bl	80002f0 <__aeabi_dsub>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	f7fa fd7d 	bl	80008b4 <__aeabi_ddiv>
 8005dba:	e7e9      	b.n	8005d90 <__ieee754_sqrt+0x2c>
 8005dbc:	1512      	asrs	r2, r2, #20
 8005dbe:	d074      	beq.n	8005eaa <__ieee754_sqrt+0x146>
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	07d5      	lsls	r5, r2, #31
 8005dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dc8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8005dcc:	bf5e      	ittt	pl
 8005dce:	0fe3      	lsrpl	r3, r4, #31
 8005dd0:	0064      	lslpl	r4, r4, #1
 8005dd2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8005dd6:	0fe3      	lsrs	r3, r4, #31
 8005dd8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005ddc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8005de0:	2516      	movs	r5, #22
 8005de2:	4601      	mov	r1, r0
 8005de4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005de8:	1076      	asrs	r6, r6, #1
 8005dea:	0064      	lsls	r4, r4, #1
 8005dec:	188f      	adds	r7, r1, r2
 8005dee:	429f      	cmp	r7, r3
 8005df0:	bfde      	ittt	le
 8005df2:	1bdb      	suble	r3, r3, r7
 8005df4:	18b9      	addle	r1, r7, r2
 8005df6:	1880      	addle	r0, r0, r2
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	3d01      	subs	r5, #1
 8005dfc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005e00:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005e04:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005e08:	d1f0      	bne.n	8005dec <__ieee754_sqrt+0x88>
 8005e0a:	462a      	mov	r2, r5
 8005e0c:	f04f 0e20 	mov.w	lr, #32
 8005e10:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8005e14:	428b      	cmp	r3, r1
 8005e16:	eb07 0c05 	add.w	ip, r7, r5
 8005e1a:	dc02      	bgt.n	8005e22 <__ieee754_sqrt+0xbe>
 8005e1c:	d113      	bne.n	8005e46 <__ieee754_sqrt+0xe2>
 8005e1e:	45a4      	cmp	ip, r4
 8005e20:	d811      	bhi.n	8005e46 <__ieee754_sqrt+0xe2>
 8005e22:	f1bc 0f00 	cmp.w	ip, #0
 8005e26:	eb0c 0507 	add.w	r5, ip, r7
 8005e2a:	da43      	bge.n	8005eb4 <__ieee754_sqrt+0x150>
 8005e2c:	2d00      	cmp	r5, #0
 8005e2e:	db41      	blt.n	8005eb4 <__ieee754_sqrt+0x150>
 8005e30:	f101 0801 	add.w	r8, r1, #1
 8005e34:	1a5b      	subs	r3, r3, r1
 8005e36:	4641      	mov	r1, r8
 8005e38:	45a4      	cmp	ip, r4
 8005e3a:	bf88      	it	hi
 8005e3c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005e40:	eba4 040c 	sub.w	r4, r4, ip
 8005e44:	443a      	add	r2, r7
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	f1be 0e01 	subs.w	lr, lr, #1
 8005e4c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005e50:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8005e54:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005e58:	d1dc      	bne.n	8005e14 <__ieee754_sqrt+0xb0>
 8005e5a:	4323      	orrs	r3, r4
 8005e5c:	d006      	beq.n	8005e6c <__ieee754_sqrt+0x108>
 8005e5e:	1c54      	adds	r4, r2, #1
 8005e60:	bf0b      	itete	eq
 8005e62:	4672      	moveq	r2, lr
 8005e64:	3201      	addne	r2, #1
 8005e66:	3001      	addeq	r0, #1
 8005e68:	f022 0201 	bicne.w	r2, r2, #1
 8005e6c:	1043      	asrs	r3, r0, #1
 8005e6e:	07c1      	lsls	r1, r0, #31
 8005e70:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005e74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005e78:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005e7c:	bf48      	it	mi
 8005e7e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005e82:	4610      	mov	r0, r2
 8005e84:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005e88:	e782      	b.n	8005d90 <__ieee754_sqrt+0x2c>
 8005e8a:	0ae3      	lsrs	r3, r4, #11
 8005e8c:	3915      	subs	r1, #21
 8005e8e:	0564      	lsls	r4, r4, #21
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0fa      	beq.n	8005e8a <__ieee754_sqrt+0x126>
 8005e94:	02de      	lsls	r6, r3, #11
 8005e96:	d50a      	bpl.n	8005eae <__ieee754_sqrt+0x14a>
 8005e98:	f1c2 0020 	rsb	r0, r2, #32
 8005e9c:	fa24 f000 	lsr.w	r0, r4, r0
 8005ea0:	1e55      	subs	r5, r2, #1
 8005ea2:	4094      	lsls	r4, r2
 8005ea4:	4303      	orrs	r3, r0
 8005ea6:	1b4a      	subs	r2, r1, r5
 8005ea8:	e78a      	b.n	8005dc0 <__ieee754_sqrt+0x5c>
 8005eaa:	4611      	mov	r1, r2
 8005eac:	e7f0      	b.n	8005e90 <__ieee754_sqrt+0x12c>
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	3201      	adds	r2, #1
 8005eb2:	e7ef      	b.n	8005e94 <__ieee754_sqrt+0x130>
 8005eb4:	4688      	mov	r8, r1
 8005eb6:	e7bd      	b.n	8005e34 <__ieee754_sqrt+0xd0>
 8005eb8:	7ff00000 	.word	0x7ff00000

08005ebc <fabs>:
 8005ebc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005ec0:	4770      	bx	lr

08005ec2 <finite>:
 8005ec2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8005ec6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005eca:	0fc0      	lsrs	r0, r0, #31
 8005ecc:	4770      	bx	lr
	...

08005ed0 <nan>:
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	4901      	ldr	r1, [pc, #4]	; (8005ed8 <nan+0x8>)
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	7ff80000 	.word	0x7ff80000

08005edc <rint>:
 8005edc:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8005ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ee2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8005ee6:	2f13      	cmp	r7, #19
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	460c      	mov	r4, r1
 8005eee:	4605      	mov	r5, r0
 8005ef0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8005ef4:	dc59      	bgt.n	8005faa <rint+0xce>
 8005ef6:	2f00      	cmp	r7, #0
 8005ef8:	da2a      	bge.n	8005f50 <rint+0x74>
 8005efa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005efe:	4301      	orrs	r1, r0
 8005f00:	d022      	beq.n	8005f48 <rint+0x6c>
 8005f02:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8005f06:	4301      	orrs	r1, r0
 8005f08:	424d      	negs	r5, r1
 8005f0a:	430d      	orrs	r5, r1
 8005f0c:	4936      	ldr	r1, [pc, #216]	; (8005fe8 <rint+0x10c>)
 8005f0e:	0c5c      	lsrs	r4, r3, #17
 8005f10:	0b2d      	lsrs	r5, r5, #12
 8005f12:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8005f16:	0464      	lsls	r4, r4, #17
 8005f18:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005f1c:	ea45 0304 	orr.w	r3, r5, r4
 8005f20:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005f24:	4620      	mov	r0, r4
 8005f26:	4629      	mov	r1, r5
 8005f28:	f7fa f9e4 	bl	80002f4 <__adddf3>
 8005f2c:	e9cd 0100 	strd	r0, r1, [sp]
 8005f30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f34:	462b      	mov	r3, r5
 8005f36:	4622      	mov	r2, r4
 8005f38:	f7fa f9da 	bl	80002f0 <__aeabi_dsub>
 8005f3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f40:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	b003      	add	sp, #12
 8005f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f50:	4926      	ldr	r1, [pc, #152]	; (8005fec <rint+0x110>)
 8005f52:	4139      	asrs	r1, r7
 8005f54:	ea03 0001 	and.w	r0, r3, r1
 8005f58:	4310      	orrs	r0, r2
 8005f5a:	d0f5      	beq.n	8005f48 <rint+0x6c>
 8005f5c:	084b      	lsrs	r3, r1, #1
 8005f5e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8005f62:	ea52 0501 	orrs.w	r5, r2, r1
 8005f66:	d00c      	beq.n	8005f82 <rint+0xa6>
 8005f68:	ea24 0303 	bic.w	r3, r4, r3
 8005f6c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8005f70:	2f13      	cmp	r7, #19
 8005f72:	bf0c      	ite	eq
 8005f74:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8005f78:	2500      	movne	r5, #0
 8005f7a:	fa44 f707 	asr.w	r7, r4, r7
 8005f7e:	ea43 0407 	orr.w	r4, r3, r7
 8005f82:	4919      	ldr	r1, [pc, #100]	; (8005fe8 <rint+0x10c>)
 8005f84:	4623      	mov	r3, r4
 8005f86:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8005f8a:	462a      	mov	r2, r5
 8005f8c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8005f90:	4620      	mov	r0, r4
 8005f92:	4629      	mov	r1, r5
 8005f94:	f7fa f9ae 	bl	80002f4 <__adddf3>
 8005f98:	e9cd 0100 	strd	r0, r1, [sp]
 8005f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	462b      	mov	r3, r5
 8005fa4:	f7fa f9a4 	bl	80002f0 <__aeabi_dsub>
 8005fa8:	e7cc      	b.n	8005f44 <rint+0x68>
 8005faa:	2f33      	cmp	r7, #51	; 0x33
 8005fac:	dd05      	ble.n	8005fba <rint+0xde>
 8005fae:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8005fb2:	d1c9      	bne.n	8005f48 <rint+0x6c>
 8005fb4:	f7fa f99e 	bl	80002f4 <__adddf3>
 8005fb8:	e7c4      	b.n	8005f44 <rint+0x68>
 8005fba:	f04f 31ff 	mov.w	r1, #4294967295
 8005fbe:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8005fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8005fc6:	4208      	tst	r0, r1
 8005fc8:	d0be      	beq.n	8005f48 <rint+0x6c>
 8005fca:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8005fce:	bf18      	it	ne
 8005fd0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8005fd4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8005fd8:	bf1e      	ittt	ne
 8005fda:	ea20 0303 	bicne.w	r3, r0, r3
 8005fde:	fa45 fc0c 	asrne.w	ip, r5, ip
 8005fe2:	ea43 050c 	orrne.w	r5, r3, ip
 8005fe6:	e7cc      	b.n	8005f82 <rint+0xa6>
 8005fe8:	08006210 	.word	0x08006210
 8005fec:	000fffff 	.word	0x000fffff

08005ff0 <scalbn>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	460d      	mov	r5, r1
 8005ffa:	4617      	mov	r7, r2
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	b996      	cbnz	r6, 8006026 <scalbn+0x36>
 8006000:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006004:	4303      	orrs	r3, r0
 8006006:	d039      	beq.n	800607c <scalbn+0x8c>
 8006008:	4b35      	ldr	r3, [pc, #212]	; (80060e0 <scalbn+0xf0>)
 800600a:	2200      	movs	r2, #0
 800600c:	f7fa fb28 	bl	8000660 <__aeabi_dmul>
 8006010:	4b34      	ldr	r3, [pc, #208]	; (80060e4 <scalbn+0xf4>)
 8006012:	4604      	mov	r4, r0
 8006014:	429f      	cmp	r7, r3
 8006016:	460d      	mov	r5, r1
 8006018:	da0f      	bge.n	800603a <scalbn+0x4a>
 800601a:	a32d      	add	r3, pc, #180	; (adr r3, 80060d0 <scalbn+0xe0>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f7fa fb1e 	bl	8000660 <__aeabi_dmul>
 8006024:	e006      	b.n	8006034 <scalbn+0x44>
 8006026:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800602a:	4296      	cmp	r6, r2
 800602c:	d10a      	bne.n	8006044 <scalbn+0x54>
 800602e:	4602      	mov	r2, r0
 8006030:	f7fa f960 	bl	80002f4 <__adddf3>
 8006034:	4604      	mov	r4, r0
 8006036:	460d      	mov	r5, r1
 8006038:	e020      	b.n	800607c <scalbn+0x8c>
 800603a:	460b      	mov	r3, r1
 800603c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006040:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006044:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006048:	19b9      	adds	r1, r7, r6
 800604a:	4291      	cmp	r1, r2
 800604c:	dd0e      	ble.n	800606c <scalbn+0x7c>
 800604e:	a322      	add	r3, pc, #136	; (adr r3, 80060d8 <scalbn+0xe8>)
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006058:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800605c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006060:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006064:	4820      	ldr	r0, [pc, #128]	; (80060e8 <scalbn+0xf8>)
 8006066:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800606a:	e7d9      	b.n	8006020 <scalbn+0x30>
 800606c:	2900      	cmp	r1, #0
 800606e:	dd08      	ble.n	8006082 <scalbn+0x92>
 8006070:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006074:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006078:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800607c:	4620      	mov	r0, r4
 800607e:	4629      	mov	r1, r5
 8006080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006082:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006086:	da16      	bge.n	80060b6 <scalbn+0xc6>
 8006088:	f24c 3350 	movw	r3, #50000	; 0xc350
 800608c:	429f      	cmp	r7, r3
 800608e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006092:	dd08      	ble.n	80060a6 <scalbn+0xb6>
 8006094:	4c15      	ldr	r4, [pc, #84]	; (80060ec <scalbn+0xfc>)
 8006096:	4814      	ldr	r0, [pc, #80]	; (80060e8 <scalbn+0xf8>)
 8006098:	f363 74df 	bfi	r4, r3, #31, #1
 800609c:	a30e      	add	r3, pc, #56	; (adr r3, 80060d8 <scalbn+0xe8>)
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	4621      	mov	r1, r4
 80060a4:	e7bc      	b.n	8006020 <scalbn+0x30>
 80060a6:	4c12      	ldr	r4, [pc, #72]	; (80060f0 <scalbn+0x100>)
 80060a8:	4812      	ldr	r0, [pc, #72]	; (80060f4 <scalbn+0x104>)
 80060aa:	f363 74df 	bfi	r4, r3, #31, #1
 80060ae:	a308      	add	r3, pc, #32	; (adr r3, 80060d0 <scalbn+0xe0>)
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	e7f5      	b.n	80060a2 <scalbn+0xb2>
 80060b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80060ba:	3136      	adds	r1, #54	; 0x36
 80060bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060c0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80060c4:	4620      	mov	r0, r4
 80060c6:	4629      	mov	r1, r5
 80060c8:	2200      	movs	r2, #0
 80060ca:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <scalbn+0x108>)
 80060cc:	e7a8      	b.n	8006020 <scalbn+0x30>
 80060ce:	bf00      	nop
 80060d0:	c2f8f359 	.word	0xc2f8f359
 80060d4:	01a56e1f 	.word	0x01a56e1f
 80060d8:	8800759c 	.word	0x8800759c
 80060dc:	7e37e43c 	.word	0x7e37e43c
 80060e0:	43500000 	.word	0x43500000
 80060e4:	ffff3cb0 	.word	0xffff3cb0
 80060e8:	8800759c 	.word	0x8800759c
 80060ec:	7e37e43c 	.word	0x7e37e43c
 80060f0:	01a56e1f 	.word	0x01a56e1f
 80060f4:	c2f8f359 	.word	0xc2f8f359
 80060f8:	3c900000 	.word	0x3c900000

080060fc <_init>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

08006108 <_fini>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr
